// =============================================================================
// Typescript Definition file for component skype-calling-electron
//
// THIS FILE GOT AUTO-GENERATED BY generateDts.ts.
// =============================================================================

// -----------------------------------------------------------------------------
// Expansion of reference path 'slimcore-enums.d.ts'
// -----------------------------------------------------------------------------
declare namespace SlimCore {
    namespace Enums {

        const enum DeviceType {
            UsbCamera = 0,
            CaptureAdapter = 1,
            Virtual = 2,
            SRAugmented = 5,
        }

        const enum CompositeAudioDeviceType {
            Speakers = 0,
            Headphones = 1,
            Headset = 2,
            Handset = 3,
            Speakerphone = 4,
        }

        const enum CameraFacing {
            Unknown = 0,
            External = 1,
            Front = 2,
            Back = 3,
            Panoramic = 4,
            LeftFront = 5,
            RightFront = 6
        }

        const enum VideoType {
            Video = 0,
            ScreenShare = 1,
            Augmented = 2,
        }

        const enum VideoStatus {
            NotAvailable = 0,
            Available = 1,
            Starting = 2,
            Rejected = 3,
            Running = 4,
            Stopping = 5,
            Paused = 6,
            NotStarted = 7,
            VideoHint = 8,
            None = 9,
            CheckingSubscription = 11,
            SwitchingDevice = 12,
            Unattached = 13,
        }

        const enum OperationResultCode {
            None = 0,
            Failure = 1,
            Success = 2,
        }

        const enum CallStatus {
            Unplaced = 0,
            Routing = 1,
            Cancelled = 13,
            Failed = 2,
            EarlyMedia = 12,
            RingingOut = 3,
            RingingIn = 21,
            InProgress = 4,
            InLobby = 31,
            LocalHold = 5,
            RemoteHold = 10,
            Finished = 6,
            Missed = 7,
            Refused = 8,
            Busy = 9,
            Dropped = 20,
            CallForwardingInitiated = 28,
            VmRedirectInitiated = 29,
            CallTimedOut = 30,
            VmBufferingGreeting = 11,
            VmPlayingGreeting = 14,
            VmRecording = 15,
            VmUploading = 16,
            VmSent = 17,
            VmCancelled = 18,
            VmFailed = 19,
            Transferring = 22,
            Transferred = 23,
            DeniedInLobby = 32,
            TimedOutInLobby = 33,
        }

        const enum ParticipantFailureReason {
            NoFailure = 0,
            MiscError = 1,
            RecipientUserNotFound = 2,
            RecipientNotOnline = 3,
            SoundRecordingError = 12,
            SoundPlaybackError = 7,
            RemoteSoundIOError = 8,
            RecipientBlocked = 9,
            CallerNotFriend = 10,
            CallerNotAuthorized = 11,
            HostEndedConf = 14,
            ConfParticipantCountLimitReached = 16,
            AnsweredElsewhere = 20,
            PstnNoSkypeoutSubscription = 21,
            PstnInsufficientFunds = 22,
            PstnCreditExpired = 43,
            PstnCreditExpiredButEnough = 44,
            PstnInternetConnectionLost = 23,
            PstnSkypeoutAccountBlocked = 24,
            PstnCouldNotConnectToSkypeProxy = 25,
            PstnBlockedByUs = 26,
            PstnBlockedRegulatoryIndia = 27,
            PstnInvalidNumber = 28,
            PstnNumberForbidden = 29,
            PstnCallTimedOut = 30,
            PstnBusy = 31,
            PstnCallTerminated = 32,
            PstnNetworkError = 33,
            PstnNumberUnavailable = 34,
            PstnCallRejected = 35,
            PstnEmergencyCallDenied = 36,
            PstnMiscError = 37,
            CallNotFound = 38,
            TrouterError = 39,
            MediaDroppedError = 40,
            PstnNoSubscriptionCover = 41,
            CallNotificationDeliveryFailure = 42,
            EnterprisePstnInternalError = 45,
            EnterprisePstnUnavailable = 46,
            EnterprisePstnForbidden = 47,
            EnterprisePstnInvalidNumber = 48,
            EnterprisePstnMiscError = 49,
            Kicked = 50,
            NetworkRequestTimeoutError = 51,
            CallDoesNotExist = 52,
            MediaSetupFailure = 53,
            ServiceUnavailable = 54,
            SignalingError = 55,
            ConversationEstablishmentFailed = 56,
            TemporarilyUnavailable = 57,
            GeneralNetworkError = 58,
            NetworkCannotConnectError = 59,
            NoSignalingFromPeer = 60,
        }

        const enum Property {
            CallName = 868,
            CallIsActive = 865,
            CallStatus = 5161,
            CallIsMuted = 681,
            CallIsMutedSpeaker = 5361,
            CallActiveMembers = 861,
            CallIsIncoming = 813,
            CallIsConference = 817,
            CallIsOnHold = 689,
            CallThreadId = 5176,
            CallMessageId = 5156,
            CallLegId = 5280,
            CallTopic = 252,
            CallConversationType = 5292,
            CallOptimalRemoteVideoCount = 5189,
            CallIsHostless = 4581,
            CallEndpointDetails = 5028,
            CallMemberCountChanged = 5041,
            CallTransferStatus = 5045,
            CallTransferFailureReason = 5049,
            CallForwardingDestinationType = 5052,
            CallIncomingType = 5056,
            CallerMriIdentity = 5036,
            CallOnBehalfOfMri = 5060,
            CallTransferorMri = 5064,
            CallTransferorDisplayName = 5084,
            CallQueueInfo = 5076,
            CallTransferorType = 5080,
            CallDataChannelObjectId = 5145,
            CallLightWeightMeetingCountChanged = 5069,
            CallContentSharingSessionCountChanged = 5401,
            CallIsIncomingOneOnOneVideoCall = 5073,
            CallIsServerMuted = 5345,
            CallMeetingDetails = 5364,
            CallBroadcastMetadata = 5384,
            SelfParticipantRole = 5368,
            SelfParticipantTenantId = 5372,
            ParticipantMriIdentity = 5164,
            ParticipantDisplayName = 924,
            ParticipantIdentity = 920,
            ParticipantVideoCountChanged = 5169,
            ParticipantIsActiveSpeaker = 4549,
            ParticipantDominantSpeakerRank = 4553,
            ParticipantFailureReason = 953,
            ParticipantStatus = 949,
            ParticipantType = 945,
            ParticipantDebugInfo = 980,
            ParticipantEndpointDetails = 5024,
            ParticipantContentRole = 4589,
            ParticipantCapabilities = 5105,
            ParticipantEndpointType = 5313,
            ParticipantAcceptedBy = 5316,
            ParticipantLightWeightMeetingRole = 4593,
            ParticipantIsServerMuted = 5349,
            ParticipantAdmitFailureReason = 5357,
            ParticipantRole = 5376,
            ParticipantTenantId = 5380,
            ParticipantCountry = 3316,
            ParticipantLimitingFactor = 5393,
            ParticipantPriceCurrency = 940,
            ParticipantPricePerMinute = 937,
            ParticipantPricePrecision = 189,
            ParticipantPstnFeedback = 968,
            ParticipantSecondsLeft = 5389,
            ParticipantSponsor = 4584,
            ParticipantBalanceUpdate = 5396,
            ParticipantDiagnosticsCode = 5404,
            VideoStatus = 521,
            VideoError = 524,
            VideoType = 537,
            VideoCallObjectId = 4417,
            VideoParticipantObjectId = 5285,
            VideoRank = 5353,
            VideoEndpointId = 5360,
            VideoParticipantLegId = 5388,
            VideoParticipantMri = 5392,
            AccountStatus = 281,
            ContentSharingCallId = 5125,
            ContentSharingIdentity = 5128,
            ContentSharingStatus = 5133,
            ContentSharingId = 5136,
            ContentSharingState = 5140,
            ContentSharingFailureReason = 5297,
            ContentSharingFailureCode = 5301,
            ContentSharingFailureSubCode = 5305,
            DataChannelStatus = 5309,
            LightWeightMeetingCallId = 5321,
            LightWeightMeetingStatus = 5325,
            LightWeightMeetingState = 5328,
            LightWeightMeetingFailureReason = 5333,
            LightWeightMeetingFailureCode = 5337,
            LightWeightMeetingFailureSubCode = 5341,
        }

        const enum IdentityType {
            Unrecognized = 0,
            Skype = 1,
            Pstn = 4,
            Emergency = 5,
            Undisclosed = 7,
            Lync = 12,
            Bot = 13,
        }

        const enum ObjectType {
            Account = 5,
            CallHandler = 26,
            Call = 4,
            ContentSharing = 29,
            DataChannel = 30,
            LightWeightMeeting = 14,
            Participant = 13,
            Video = 11,
        }

        const enum AccountStatus {
            LoggedOut = 1,
            LoggingIn = 5,
            Initializing = 6,
            LoggedIn = 7,
            LoggingOut = 8,
        }

        const enum DtmfTone {
            Num0 = 0,
            Num1 = 1,
            Num2 = 2,
            Num3 = 3,
            Num4 = 4,
            Num5 = 5,
            Num6 = 6,
            Num7 = 7,
            Num8 = 8,
            Num9 = 9,
            Star = 10,
            Pound = 11,
            A = 12,
            B = 13,
            C = 14,
            D = 15,
            Flash = 16,
        }

        const enum ContentSharingRole {
            None = 0,
            Attendee = 1,
            Presenter = 2,
        }

        const enum ContentSharingFailureReason {
            NoFailure = 0,
            Failure = 1,
            SessionNotFound = 2,
            SessionTimedOut = 3,
        }

        const enum ContentSharingStatus {
            Initial = 0,
            Routing = 1,
            Ringing = 2,
            Presenting = 3,
            Connected = 4,
            Viewing = 5,
            Finishing = 6,
            Done = 7,
            Failed = 8,
            TimedOut = 9,
        }

        const enum LightWeightMeetingRole {
            None = 0,
            Attendee = 1,
        }

        const enum LightWeightMeetingFailureReason {
            NoFailure = 0,
            Failure = 1,
            NetworkError = 2,
            SessionNotFound = 3,
            SessionTimedOut = 4,
        }

        const enum LightWeightMeetingStatus {
            Initial = 0,
            Connecting = 1,
            Connected = 2,
            Finishing = 3,
            Done = 4,
        }

        const enum DataChannelStatus {
            Unknown = 1,
            Available = 2,
            Starting = 3,
            Active = 4,
            Stopping = 5,
            NotStarted = 6,
        }

        const enum DataDeviceEvent {
            Started = 0,
            Stopped = 1,
            BufferAvailable = 2,
            PacketLoss = 3,
        }

        const enum DataDeviceId {
            Protocol = 1,
            Control = 2,
            Transcript = 3,
        }

        const enum QualityLevel {
            Unknown = 0,
            Good = 1,
            Poor = 2,
            Bad = 3,
        }

        const enum QualityEventType {
            NetworkSendQuality = 0,
            NetworkRecvQuality = 1,
            NetworkDelay = 2,
            NetworkBandwidthLow = 3,
            NetworkPacketLoss = 5,
            NetworkJitter = 6,
            NetworkRateMatching = 7,
            DeviceCaptureNotFunctioning = 8,
            DeviceRenderNotFunctioning = 9,
            DeviceRenderGlitches = 10,
            DeviceLowSNR = 11,
            DeviceLowSpeechLevel = 12,
            DeviceClipping = 13,
            DeviceEcho = 14,
            PresentationAudioQuality = 15,
            DeviceHalfDuplexAec = 16,
            DeviceMultipleEndpoints = 17,
            DeviceHowling = 18,
            DeviceRenderZeroVolume = 19,
            DeviceRenderMute = 20,
            NetworkSendCatastrophic = 21,
            NetworkRecvCatastrophic = 22,
            CpuInsufficient = 24,
            DeviceCaptureMute = 25,
            DeviceCaptureNotMuteButSilent = 26,
            DeviceSpeakWhileMuted = 27,
            VideoVbssRendered = 28,
            NetworkRoaming = 32,
            NetworkEthernetInterfaceUsed = 33,
            NetworkWlanInterfaceUsed = 34,
            NetworkWwanInterfaceUsed = 35,
            RelayWhiteListing = 36,
            NetworkReconnect = 37,
            VideoCapturerDeviceStartFailed = 38,
            VideoCapturerDeviceStartTimedOut = 39,
            VideoCapturerDeviceStartFailureLackSystemRes = 40,
            VideoCapturerDeviceStartFailureMFResConflict = 41,
            ZeroCaptureDevicesEnumerated = 42,
            ZeroRenderDevicesEnumerated = 43,
            NoNetwork = 44,
            NetworkNotWorking = 45,
            DeviceCaptureNotFunctioningAudioSrvNotRunning = 46,
            DeviceRenderNotFunctioningAudioSrvNotRunning = 47,
            DeviceCaptureNotFunctioningDeviceInUse = 48,
            DeviceRenderNotFunctioningDeviceInUse = 49,
        }

        const enum MediaType {
            Audio = 0,
            Video = 1,
            PanoramicCamera = 2,
            AppSharing = 3,
            Data = 4,
        }

        const enum ModalityType {
            Audio = 0,
            Video = 1,
            Screenshare = 2,
            Datachannel = 3,
        }

        const enum AnswerMediaType {
            AnswerWithAudioOnly = 0,
            AnswerWithAudioVideo = 1,
            AnswerWithScreenshareOnly = 2,
        }

        const enum MediaDirection {
            Disabled = 0,
            Inactive = 1,
            SendToPeer = 2,
            ReceiveFromPeer = 3,
            Bidirectional = 4,
        }

        const enum MediaNegotiationStatusCode {
            Succeeded = 0,
            ErrorLocalInternal = 1,
            ErrorRemoteInternal = 2,
            OfferNotAcceptable = 3,
            OfferDeclined = 4,
            LocalCancel = 5,
            RemoteCancel = 6,
            FailedNoRetry = 7,
            Terminated = 8,
            GeneralFailure = 9,
        }

        const enum MediaStreamState {
            StreamCreated = 0,
            StreamRemoved = 1,
            StreamStarted = 2,
            StreamInactive = 3,
            StreamActive = 4,
            StreamStopped = 5,
            StreamFail = 6,
        }

        const enum TrouterMessageSendStatusCode {
            ResponseSent = 0,
            ResponseTimeout = 1,
            ResponseDuplicate = 2,
            ResponseIncomplete = 3,
            TrouterDisconnected = 4,
        }

        const enum PushHandlingResult {
            BadNotificationPayload = 0,
            CallSetupSucceeded = 1,
            CallSetupFailed = 2,
            BadNotificationEventType = 5,
            CallSetupSucceededCallAlreadyExists = 6,
            CallSetupFailedCannotConnect = 7,
            CallSetupFailedNoSignaling = 8,
            CallSetupFailedNoPermission = 9,
            CallSetupFailedNoCommonCodec = 10,
            CallSetupFailedConflict = 11,
            CallSetupFailedPushIgnored = 12,
            CallSetupFailedAnsweredElsewhere = 13,
            CallSetupFailedAlreadyEnded = 14,
            CallSetupProgress = 17,
        }

        const enum Intent {
            Regular = 0,
            CallPush = 2,
            CallUser = 3,
            CallPreheat = 5,
        }

        const enum Capability {
            None = 0,
            Conference = 1,
            ShareScreen = 2,
            Merge = 4,
            All = -1,
        }

        const enum EndpointType {
            Default = 0,
            Lync = 1,
            Voicemail = 2,
        }

        const enum MuteScope {
            All = 1,
            Specified = 2,
        }

        const enum MediaPeerType {
            ConsumerTwoParty = 1,
            ConsumerPstn = 2,
            ConsumerMultiParty = 3,
            EnterpriseTwoPartyOnlineOnly = 4,
            EnterpriseTwoPartyHybrid = 5,
            EnterpriseMultiParty = 6,
            EnterprisePstnOnlineOnly = 7,
            EnterprisePstnHybrid = 8,
            EnterpriseFederated = 9,
            EnterpriseUnknown = 10,
        }

        const enum AudioUsageMode {
            Default = 0,
            LongrangeSpeaker = 1,
            Auditorium = 2,
        }

        const enum ServiceType {
            Testing = 0,
            MicrosoftWNS = 1,
            MicrosoftWP7NS = 2,
            AppleAPN = 3,
            GoogleAGCM = 4,
            Hotmail = 5,
            GoogleAC2DM = 6,
            Trouter = 7,
            Griffin = 8,
            ADM = 9,
            NNA = 10,
        }

        const enum CallQualityRating {
            VeryBad = 0,
            Bad = 1,
            Average = 2,
            Good = 3,
            VeryGood = 4,
        }

        const enum ScraperEvent {
            Ok = 0,
            Started = 1,
            Stopped = 2,
            ErrorInit = 3,
            ErrorUnexpected = 4,
            WindowMinimized = 5,
            WindowRestored = 6,
            WindowFullyOccluded = 7,
            WindowExposed = 8,
            WindowClosed = 9,
            PPTPresenterView_Enter = 10,
            PPTPresenterView_Exit = 11,
            WindowInPriviledgedProcess = 12,
            OcclusionRemovalDisabled = 13,
        }

        const enum ConnectionType {
            AllSupported = 0,
            NoDirectConnection = 1,
        }
    }
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore.d.ts'
// -----------------------------------------------------------------------------

declare module SlimCore {

    interface Disposable {
        dispose(): void;
    }

    type EventHandler<T> = (args: T) => void;

    interface EventEmitter<T> {
        addListener<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        on<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        once<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        removeListener<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        removeAllListeners<P extends keyof T>(event?: P): this;
        getMaxListeners(): number;
        setMaxListeners(n: number): void;
        listeners<P extends keyof T>(event: P): Function[];
        emit<P extends keyof T>(event: P, args: T[P]): boolean;
    }

    interface SlimCoreOptions {
        version: string;
        dataPath: string;
        logFileName?: string;
        mediaLogsPath?: string;
        isEncrypted?: boolean;
        objectLogging?: boolean;
        stdoutLogging?: boolean;
    }

    function getVersion(): string;
    function getApiVersion(): number;

    function createSlimCoreInstance(options: SlimCoreOptions): Engine;
    function createCanvasFrameSink(): CanvasFrameSink;
    function createPepperFrameSink(): PepperFrameSink;
    function createVideoBindingRenderer(): VideoBindingRenderer;
    function createVideoBindingScreenShare(): VideoBindingScreenShare;
    function createDataSource(dataId: number): DataSource;
    function createDataSink(dataId: number): DataSink;

    function queryDeviceRotation(): number;

    interface DeviceInfo {
        id: string;
        label: string;
    }

    interface AudioDeviceInfo extends DeviceInfo {
        productId: string;
    }

    interface VideoDeviceInfo extends DeviceInfo {
        deviceType: Enums.DeviceType;
        cameraFacing: Enums.CameraFacing;
        vendorId: number;
        productId: number;
    }

    interface CompositeAudioDeviceInfo {
        label: string;
        microphoneId: string;
        microphoneProductId: string;
        speakerId: string;
        speakerProductId: string;
        deviceType: Enums.CompositeAudioDeviceType;
    }

    namespace Trouter {
        interface HeaderEntry {
            header: string;
            value: string;
        }
    }

    interface TrouterRequest extends Disposable {
        getHeaders(): Trouter.HeaderEntry[];
        getBody(): string;
        getMethod(): string;
        getURLPathComponent(): string;
    }

    interface TrouterResponse extends Disposable {
        getId(): number;
        getHeaders() : Trouter.HeaderEntry[];
        getBody() : string;
        getStatus() : number;

        setHeader(header: string, value: string): void;
        setBody(body: string): void;
        setStatus(status: number): void;

        send(): Enums.TrouterMessageSendStatusCode;
    }

    namespace TrouterListener {
        namespace Events {
            type TrouterConnectedArgs = {
                routingPath: string;
                newPublicUrl: boolean;
                missedRequests: boolean;
            };

            type TrouterDisconnectedArgs = { };

            type TrouterRequestArgs = {
                request: TrouterRequest;
                response: TrouterResponse;
            };

            type TrouterResponsSentArgs = {
                response: TrouterResponse;
                isSuccess: boolean;
            };
        }
        interface Events {
            "trouter-connected": Events.TrouterConnectedArgs;
            "trouter-disconnected": Events.TrouterDisconnectedArgs;
            "trouter-request": Events.TrouterRequestArgs;
            "trouter-response-sent": Events.TrouterResponsSentArgs;
        }
    }

    interface TrouterListener extends Disposable, EventEmitter<TrouterListener.Events> {
    }

    interface Trouter extends Disposable {
        registerListener(listener: TrouterListener, path: string, loggingName: string): void;
        unregisterListener(listener: TrouterListener): void;

        getConnectionTTLInSec(): number;
        getConnectionId(): string;
        getConnectedClientId(): string;
    }

    interface VideoBindingRendererArgs {
        enableDXVA?: boolean;
    }

    interface HandlePushNotificationOptions {
        eventType: number;
        servicePayload: string;
        correlationIdsJson?: string;
        notificationSource?: string;
        isBuddy?: boolean;
        callKey?: string;
        connectionType?: Enums.ConnectionType;
    }

    interface InsertRegistrationTransportOptions {
        serviceTypes: Enums.ServiceType[];
        contexts: string[];
        registrationTokens: string[];
        registrationTTLs: number[];
        activityId: string;
        reason: string;
    }

    interface Credentials {
        accountName: string;
        passwordHash: string;
        refreshToken: string;
        refreshTokenExpiration: number;
        skypeToken: string;
        skypeTokenExpiration: number;
        partnerId: number;
    }

    namespace Engine {
        namespace Events {
            type ObjectPropertyChangedArgs = {
                objectType: Enums.ObjectType;
                objectId: ObjectId;
                propKey: Enums.Property;
                value: any;
            };

            type QualityChangedArgs = {
                objectType: Enums.ObjectType;
                objectId: ObjectId;
                type: Enums.QualityEventType;
                value: Enums.QualityLevel;
                mediaType: Enums.MediaType;
            };

            type DeviceListChangedArgs = {
                video: boolean;
            };

            type PushHandlingCompleteArgs = {
                token: number;
                result: Enums.PushHandlingResult;
            };

            type SkypeTokenRequiredArgs = {
                invalidToken: string;
            };
        }

        interface Events {
            "object-property-changed": Events.ObjectPropertyChangedArgs;
            "quality-changed": Events.QualityChangedArgs;
            "device-list-changed": Events.DeviceListChangedArgs;
            "push-handling-complete": Events.PushHandlingCompleteArgs;
            "skype-token-required": Events.SkypeTokenRequiredArgs;
        }
    }

    interface Engine extends Disposable, EventEmitter<Engine.Events> {
        start(block?: boolean): void;

        login(userId: string, skypeToken: string, displayName?: string): void;
        logout(): void;
        updateSkypeToken(skypeToken: string): void;

        // Ideally to be set as soon as you login.
        // Can be of the format - <rc_id1>:<userId1>;aliases=<rc_id2>:<userId2>,<rc_id3>:<userId3>
        // Example: 8:identity;aliases=2:sipId@microsoft.com,4:+100000001
        setAdditionalIdentities(identities: string): void;

        fireIntent(intent: Enums.Intent, identity?: string): void;

        getBuildName(): string;
        getBuildVersion(): string;

        getNodeId(): string;
        getRegistrationId(): string;
        getFingerprintId(): string;

        setupIsDefined(key: string): boolean;
        setupDelete(key: string): void;
        setupGetSubKey(key: string, index: number): string;
        setupGetStr(key: string, defaultValue?: string): string;
        setupGetInt(key: string, defaultValue?: number): number;
        setupSetStr(key: string, value: string): void;
        setupSetInt(key: string, value: number): void;

        setEcsConfig(ecsBlob: string, userIdentity: string, etag: string, isCached?: boolean): void;
        getEcsQueryParameters(): string;

        enableAGC(enable: boolean): void;
        enableMediaQoS(enable: boolean): void;
        enableTtySupport(enable: boolean): void;
        setMediaPortRanges(portRanges: MediaPortRanges): void;
        setOpenCameraInMaxResolution(enable: boolean): void;
        setDeviceRotation(rotation: number): void;

        getCameraList(): VideoDeviceInfo[];
        getMicrophoneList(): AudioDeviceInfo[];
        getSpeakerList(): AudioDeviceInfo[];
        getCompositeAudioDevices(): CompositeAudioDeviceInfo[];

        selectAudioDevices(microphone: string, speaker: string): void;

        getSpeakerVolume(): number;
        setSpeakerVolume(volume: number): void;

        getMicrophoneVolume(): number;
        setMicrophoneVolume(volume: number): void;

        unmuteMicrophone(): void;
        unmuteSpeaker(): void;

        getNrgLevelsForDeviceTuner(microphone: string): number;

        videoStart(videoObjectId: ObjectId): void;
        videoStop(videoObjectId: ObjectId): void;

        createVideoBindingRenderer(args: VideoBindingRendererArgs): VideoBindingRenderer;
        videoCreateBinding(videoObjectId: ObjectId, videoBinding: VideoBinding): Promise<void>;
        videoReleaseBinding(videoObjectId: ObjectId, videoBinding: VideoBinding): Promise<void>;

        setIncomingTransmissionsDesired(videoObjectId: ObjectId, desire: boolean): void;

        createLocalVideo(type: Enums.VideoType, name?: string, path?: string): ObjectId;
        createPreviewVideo(type: Enums.VideoType, name?: string, path?: string): ObjectId;

        createCallInterface(): CallHandler;

        // backwards compatibility
        createMediaConfig(): MediaConfig;

        getContentSharing(contentSharingObjectId: ObjectId): ContentSharing;
        getDataChannel(dataChannelObjectId: ObjectId): DataChannel;

        createTrouter(handle?: string): Trouter;
        createTrouterListener(): TrouterListener;

        handlePushNotification(options: HandlePushNotificationOptions): number;
        insertRegistrationTransports(options: InsertRegistrationTransportOptions): number;

        getOldCredentials(): Credentials;
    }

    interface VideoBinding extends Disposable {
        isAttached(): boolean;
    }

    namespace VideoBindingRenderer {
        type CaptureFrameOptions = {
            timeout?: number; // milliseconds
        };

        type Frame = {
            image: ImageData;
            origWidth: number;
            origHeight: number;
            mirror: boolean;
            cropInfo: FrameSink.CropInfo;
        } & FrameSink.Metadata;
    }

    interface VideoBindingRenderer extends VideoBinding {
        hasFrameSink(frameSink: FrameSink): boolean;
        addFrameSink(frameSink: FrameSink): void;
        removeFrameSink(frameSink: FrameSink): void;
        setVideoPreference(width: number, height: number): void;
        captureFrame(options?: VideoBindingRenderer.CaptureFrameOptions): Promise<VideoBindingRenderer.Frame>;
    }

    namespace VideoBindingScreenShare {
        namespace Events {
            type ScraperEventArgs = {
                event: Enums.ScraperEvent;
                data: number;
            };
        }

        interface Events {
            "scraper-event": Events.ScraperEventArgs;
        }
    }

    interface VideoBindingScreenShare extends EventEmitter<VideoBindingScreenShare.Events>, VideoBinding {
        setCaptureRegionAndWindow(region?: ScreenScraper.Region, windowId?: number): void;
    }

    namespace FrameSink {
        type Format = string;

        type CropInfo = {
            leftOffset: number;
            rightOffset: number;
            topOffset: number;
            bottomOffset: number;
        }

        type ImageInfo = {
            format: Format;
            width: number;
            height: number;
            origWidth: number;
            origHeight: number;
            stride: number;
            timestamp: Date;
            timestampValue: number;
            mirror: boolean;
            padding: CropInfo;
            cropInfo: CropInfo;
        }

        type VideoFrame = {
            info: ImageInfo;
            data: ArrayBuffer;
        }

        type Metadata = {
            attachment: Uint8Array;
            timestamp: Date;
            timestampValue: number;
        }

        const enum FrameType {
            None,
            Software,
            Hardware,
        }

        type Stats = {
            framesDropped: number;
            framesTotal: number;
        }

        namespace Events {
            type FrameTypeChangedArgs = {
                type: FrameType;
            };

            type FrameSizeChangedArgs = {
                width: number;
                height: number;
            };
        }

        interface Events {
            "frame-type-changed": Events.FrameTypeChangedArgs;
            "frame-size-changed": Events.FrameSizeChangedArgs;
        }
    }

    interface FrameSink extends EventEmitter<FrameSink.Events>, Disposable {
        getStats(): FrameSink.Stats;
        getMetadata(): FrameSink.Metadata;
        getFrameType(): FrameSink.FrameType;
        setVideoPreference(width: number, height: number): void;
    }

    interface CanvasFrameSink extends FrameSink {
        getFrame(): FrameSink.VideoFrame;
    }

    interface PepperFrameSink extends FrameSink {
        getBufferName(): string;
    }

    interface CallProperties {
        audioDirection?: Enums.MediaDirection;
        videoDirection?: Enums.MediaDirection;
        screenshareDirection?: Enums.MediaDirection;
        datachannelDirection?: Enums.MediaDirection;
        isVideoEnabled?: boolean;
        isGoLive?: boolean;
        isHostless?: boolean;
        enableGroupCallMeetupGeneration?: boolean;
        enableLightWeightMeeting?: boolean;
        mediaPeerType?: Enums.MediaPeerType;
        participantLegId?: string;
        threadId?: string;
        messageId?: string;
        subject?: string;
        conversationType?: string;
        meetingInfo?: string;
        endpointMetadata?: string;
        onBehalfOf?: string;
        emergencyContent?: string;
        broadcastContext?: string;
        callKey?: string;
        encryptedKey?: string;
        connectionType?: Enums.ConnectionType;
    }

    interface CallVoicemailProperties {
        threadId?: string;
        voicemailResourcePath?: string;
        voicemailItemId?: string;
    }

    type ObjectId = number;

    namespace CallHandler {
        namespace Events {
            type TransferRequestedArgs = {
                callObjectId: ObjectId;
                targetCallObjectId: number;
                transferorMri: string;
                transferTargetMri: string;
            };

            type AudioStreamStateChangedArgs = {
                callObjectId: ObjectId;
                direction: Enums.MediaDirection;
                streamState: Enums.MediaStreamState;
            };

            type SkypeTokenRequiredArgs = {
                invalidToken: string;
            };

            type CallMeBackOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                participantMri: string;
                failureReason: number;
            };

            type UnmuteSelfOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                operationResult: Enums.OperationResultCode;
                failureReason: number;
            };

            type RemoteVideosCountChangedArgs = {
                participantObjectId: ObjectId;
            };

            type MediaNegotiationStatusChangedArgs = {
                callObjectId: ObjectId;
                modalityType: Enums.ModalityType;
                mediaNegotiationStatusCode: Enums.MediaNegotiationStatusCode;
            };
        }

        interface Events {
            "transfer-requested": Events.TransferRequestedArgs;
            "audio-stream-state-changed": Events.AudioStreamStateChangedArgs;
            "skype-token-required": Events.SkypeTokenRequiredArgs;
            "callmeback-operation-status-changed": Events.CallMeBackOperationStatusChangedArgs;
            "unmuteself-operation-status-changed": Events.UnmuteSelfOperationStatusChangedArgs;
            "remote-videos-count-changed": Events.RemoteVideosCountChangedArgs;
            "media-negotiation-status-changed": Events.MediaNegotiationStatusChangedArgs;
        }
    }

    interface CallHandler extends Disposable, EventEmitter<CallHandler.Events> {
        getActiveCalls(): ObjectId[];

        placeCall(callGuid: string, participantList: string[], callProperties?: CallProperties): ObjectId;
        startSignalingSession(callGuid: string, participantList: string[], callProperties?: CallProperties): ObjectId;

        joinCall(joinContext: string, callProperties: CallProperties): ObjectId;
        joinSignalingSession(joinContext: string, callProperties: CallProperties): ObjectId;

        subscribe(joinContext: string, callProperties: CallProperties): ObjectId;
        subscribeToSignalingSession(joinContext: string, callProperties: CallProperties): ObjectId;

        unsubscribe(callObjectId: ObjectId): void;

        answerCall(callObjectId: ObjectId, isVideoEnabled?: boolean): void;
        acceptCall(callObjectId: ObjectId, answerMediaType: Enums.AnswerMediaType): void;

        leaveCall(callObjectId: ObjectId): void;

        callParticipantGetCallObject(callParticipantObjectId: ObjectId): ObjectId;
        callGetParticipants(callObjectId: ObjectId): ObjectId[];

        addParticipant(callObjectId: ObjectId, participant: string, threadId?: string, messageId?: string, additionalData?: string): ObjectId;
        addParticipantToCall(callObjectId: ObjectId, participant: string, threadId?: string, messageId?: string, additionalData?: string): ObjectId;

        removeParticipant(participantObjectId: ObjectId): void;
        removeParticipantByMri(callObjectId: ObjectId, participantMri: string): void;
        callMeBack(callObjectId: ObjectId, participantMri: string, assertedId: string): boolean;

        admitParticipants(callObjectId: ObjectId, participantList: string[]): void;

        callUpdateEndpointMetadata(callObjectId: ObjectId, endpointMetadata: string): void;

        callMute(callObjectId: ObjectId, mute?: boolean): void;
        callMuteSpeaker(callObjectId: ObjectId, mute?: boolean): void;
        callHold(callObjectId: ObjectId, hold?: boolean): void;

        callMuteParticipants(callObjectId: ObjectId, muteScope: Enums.MuteScope, participantList: string[]): void;

        callSendDtmf(callObjectId: ObjectId, dtmfTone: Enums.DtmfTone): void;

        callAttachSendVideo(callObjectId: ObjectId, videoObjectId: ObjectId): void;
        callGetSendVideos(callObjectId: ObjectId): ObjectId[];
        callGetParticipantVideos(callParticipantObjectId: ObjectId): ObjectId[];

        getDebugInformation(command: string): string;

        getIntProperty(objectId: ObjectId, propertyKey: Enums.Property): number;
        getStrProperty(objectId: ObjectId, propertyKey: Enums.Property): string;

        callAssimilate(callObjectId1: ObjectId, callObjectId2: ObjectId, threadId?: string, messageId?: string): void;

        startCallTransfer(callObjectId: ObjectId, participantId: string): void;
        startConsultativeCallTransfer(consultativeCallObjectId: ObjectId, transfereeCallObjectId: ObjectId): void;
        startTransferTargetCall(callObjectId: ObjectId, isVideoEnabled?: boolean, threadId?: string, messageId?: string): void;

        endCallForAll(callObjectId: ObjectId): void;

        createContentSharing(callObjectId: ObjectId, contentSharingGuid: string, contentSharingIdentity: string, subject?: string, initialContentSharingSessionState?: string): ObjectId;
        getContentSharingSessions(callObjectId: ObjectId): ObjectId[];

        getLightWeightMeetingSession(callObjectId: ObjectId): ObjectId;

        placeCallToVoicemail(callGuid: string, mediaPeerType: Enums.MediaPeerType, participant: string, callProperties?: CallVoicemailProperties): ObjectId;

        callSetAudioUsageMode(callObjectId: ObjectId, audioUsageMode: Enums.AudioUsageMode): void;

        callShareSystemSound(callObjectId: ObjectId, enable: boolean): void;
        callGetTechnicalInformationJson(callObjectId: ObjectId): string;

        callStartAudio(callObjectId: ObjectId): void;
        callStopAudio(callObjectId: ObjectId): void;

        provideCallQualityFeedback(callId: string, participantId: string, questionaryId: string, trackingReason: string, rating: Enums.CallQualityRating, problemTokens: string): void;
    }

    interface MediaPortRanges {
        audioMin: number;
        audioMax: number;
        videoMin: number;
        videoMax: number;
        dataMin: number;
        dataMax: number;
    }

    // backwards compatibility, deprecated do not add any new methods here
    interface MediaConfig extends Disposable {
        enableMediaQoS(enable: boolean): void;
        setMediaPortRanges(portRanges: MediaPortRanges): void;
    }

    namespace ContentSharingEvents {
        namespace Events {
            type ContentSharingResultArgs = {
                failureReason: Enums.ContentSharingFailureReason;
                code: number;
                subCode: number;
            };

            type ContentSharingSessionStateUpdateResultArgs = {
                id: string;
                failureReason: Enums.ContentSharingFailureReason;
                code: number;
                subCode: number;
            };
        }

        interface Events {
            "take-control-result": Events.ContentSharingResultArgs;
            "update-session-state-result": Events.ContentSharingSessionStateUpdateResultArgs;
            "update-participant-state-result": Events.ContentSharingResultArgs;
            "join-result": Events.ContentSharingResultArgs;
        }
    }

    interface ContentSharing extends Disposable, EventEmitter<ContentSharingEvents.Events> {
        startContentSharing(): void;
        updateContentSharingSessionState(id: string, sessionState: string): void;
        takeContentSharingControl(): void;
        updateContentSharingParticipantState(): void;
        stopContentSharing(): void;
    }

    interface DataChannel extends Disposable {
        start(): void;
        stop(): void;

        registerDataSource(dataSource: DataSource): void;
        unregisterDataSource(dataSource: DataSource): void;

        registerDataSink(dataSink: DataSink): void;
        unregisterDataSink(dataSink: DataSink): void;

        setDataDevices(): void;
    }

    namespace DataDevice {
        namespace Events {
            type EventArgs = {
                event: Enums.DataDeviceEvent;
            };
        }

        interface Events {
            "event": Events.EventArgs;
        }
    }

    interface DataDevice extends Disposable, EventEmitter<DataDevice.Events> {
    }

    interface DataSource extends DataDevice {
        sendData(data: Uint8Array, recipients?: number[]): void;
    }

    namespace DataSink {
        namespace Events {
            type DataArgs = {
                data: Uint8Array;
                sourceID: number;
            };
        }

        interface Events {
            "data": Events.DataArgs;
        }
    }

    interface DataSink extends EventEmitter<DataSink.Events>, DataDevice {
    }

    namespace ScreenScraper {
        interface Region {
            x: number;
            y: number;
            width: number;
            height: number;
        }

        interface MonitorInfo {
            monitorId: number;
            name: string;
            region: Region;
            isPrimary: boolean;
            isInternal: boolean;
            isDuplicated: boolean;
        }

        interface WindowInfo {
            windowId: number;
            title: string;
            applicationName?: string;
        }

        interface ImageInfo {
            data: string;
            width: number;
            height: number;
        }
    }

    export class ScreenScraper {
        getMonitorList(): ScreenScraper.MonitorInfo[];
        getMonitorPreview(monitorId: number, width?: number, height?: number, asImage?: boolean, region?: ScreenScraper.Region): Promise<ImageData | ScreenScraper.ImageInfo>;

        getWindowList(): ScreenScraper.WindowInfo[];
        getWindowIcon(windowId: number, width?: number, height?: number, asImage?: boolean): Promise<ImageData | ScreenScraper.ImageInfo>;
        getWindowPreview(windowId: number, width?: number, height?: number, asImage?: boolean): Promise<ImageData | ScreenScraper.ImageInfo>;
    }
}

declare module 'slimcore' {
    export = SlimCore;
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore-uwp.d.ts'
// -----------------------------------------------------------------------------

declare module SlimCoreRT {
    interface CommonWrapperEventPayload {
        target: string;
        detail: any[];
        type: string;
    }

    export interface LogFunction {
        target: string;
        detail: any[];
        type: string;
    }

    export class Config {
        constructor();
        logger(logger: SlimCoreRT.LogFunction, dispatchToCoreWindow: boolean): SlimCoreRT.Config;
        logger(logger: SlimCoreRT.LogFunction): SlimCoreRT.Config;
        dispatchToCoreWindow(): SlimCoreRT.Config;
        uiVersion(uiVersion: string): SlimCoreRT.Config;
        storageDir(storageDir: string): SlimCoreRT.Config;
        mediaBinDir(mediaBinDir: string): SlimCoreRT.Config;
        logsDir(logsDir: string): SlimCoreRT.Config;
        encryptSkyLibLogs(encryptLogs: boolean): SlimCoreRT.Config;
        validate(): SlimCoreRT.Config;
        clone(): SlimCoreRT.Config;
        writeToLog(): SlimCoreRT.Config;
    }

    class SkyLib {
        static current: Engine;
    }

    interface Engine {
        inner: SlimCore.Engine;
        start(config: Config): void;

        setClientDescription(app: string,
                             platform: string,
                             templateKey : string,
                             activityId: string,
                             reason: string,
                             xuid: string
        ): number;

        insertRegistrationTransports(
            serviceTypes : SlimCore.Enums.ServiceType[],
            contexts : string[],
            registrationTokens : string[],
            registrationTTLs : number[],
            activityId : string,
            reason : string
        ) : number;
    }

    namespace VideoBindingRenderer {
        namespace Events {
            type VideoUriChangedArgs = {
                uri: string;
            };
        }

        interface Events {
            "video-uri-changed": Events.VideoUriChangedArgs;
        }
    }

    interface VideoBindingRenderer extends SlimCore.EventEmitter<VideoBindingRenderer.Events>, SlimCore.VideoBindingRenderer {
        uri: string;
    }
}

declare module 'slimcore-uwp' {
    export = SlimCoreRT;
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore-legacy.d.ts'
// -----------------------------------------------------------------------------

declare module SlimCore {

    interface Engine {
        setScreenCaptureRectangle(videoObjectId: ObjectId, region?: ScreenScraper.Region, monitorNumber?: number, windowHandle?: number): void;
    }

    interface MediaConfig {
        enableTtySupport(enable: boolean): void;
    }

    namespace PepperFrameSinkLegacy {
        namespace Events {
            type BufferChangedArgs = {
                name: string
            };
        }

        interface Events {
            "buffer-changed": Events.BufferChangedArgs;
        }
    }

    interface PepperFrameSinkLegacy extends EventEmitter<PepperFrameSinkLegacy.Events>, PepperFrameSink {
        requestBufferChanged(): void;
    }

    namespace VideoRenderer {
        interface ConstructorArgs {
            useCropInfo: boolean;
        }
    }
}


// -----------------------------------------------------------------------------
// Expansion of reference path './video-renderer.d.ts'
// -----------------------------------------------------------------------------
declare namespace SlimCore {

    namespace VideoRenderer {
        interface Logger {
            createChild(namespace: string): Logger;

            log(...args: any[]): void;
            debug(...args: any[]): void;
            info(...args: any[]): void;
            warn(...args: any[]): void;
            error(...args: any[]): void;
        }

        const enum ScalingMode {
            Stretch,
            Crop,
            Fit
        }

        interface ConstructorArgs {
            container: HTMLElement;
            transparent: boolean;
            scalingMode: ScalingMode;
            logger?: Logger;
            useWebGL2?: boolean;
            useLowPowerGPU?: boolean;
            useBufferSharing?: boolean;
        }

        const enum ErrorReason {
            Unknown,
            ContextFailed
        }

        const enum RendererType {
            WebGLv1 = 1,
            WebGLv2 = 2,
            Pepper = 3,
            Chromium = 4,
        }

        type Size = {
            width: number;
            height: number;
        }

        namespace Events {
            type VideoSizeChangedArgs = Size;
        }

        interface Events {
            "video-size-changed": Events.VideoSizeChangedArgs;
        }
    }

    interface VideoRendererError extends Error {
        readonly reason: VideoRenderer.ErrorReason;
    }

    interface VideoRenderer extends EventEmitter<VideoRenderer.Events>, Disposable {
        getFrameSink(): FrameSink;
        getRendererType(): VideoRenderer.RendererType;
        getVideoSize(): VideoRenderer.Size;
        setScalingMode(mode: VideoRenderer.ScalingMode): Promise<void>;
    }

    interface VideoRendererModule {
        createCanvasVideoRenderer(frameSink: CanvasFrameSink, args: VideoRenderer.ConstructorArgs): VideoRenderer;
        createPepperVideoRenderer(frameSink: PepperFrameSink, args: VideoRenderer.ConstructorArgs): VideoRenderer;
        createChromiumVideoRenderer(frameSink: PepperFrameSink, args: VideoRenderer.ConstructorArgs): VideoRenderer;

        isCanvasVideoRendererAvailable(): boolean;
        isPepperVideoRendererAvailable(): boolean;
        isChromiumVideoRendererAvailable(): boolean;
    }
}

declare const VideoRenderer: SlimCore.VideoRendererModule;


// -----------------------------------------------------------------------------
// Component 'skype-calling-electron'
// -----------------------------------------------------------------------------
declare module skype.calling.electron {


import CallingLogger = skype.calling.CallingLogger;
import ICallingStack = skype.calling.ICallingStack;
import IDisposable = skype.calling.IDisposable;
import IObservableObject = skype.calling.IObservableObject;
import IVideoFrame = skype.calling.IVideoFrame;

export type SlimCoreSettings = {
    useChromiumRenderer: boolean;
    usePepperRenderer: boolean;
    enableDXVA: boolean;
    enableBufferSharing?: boolean;
    autoStopLocalVideo?: boolean;
}

export interface Rectangle {
    x: number;
    y: number;
    width: number;
    height: number;
}

export const enum InjectorMode {
    Disabled,
    Seamless,
    Classic
}

export interface InjectorConfig {
    mode: InjectorMode;
    numVirtualCursors?: number;
    noMotionTimeoutMs?: number;
    noMotionSharerTimeoutMs?: number;
}

export interface ISlimCoreElectronControlInjector extends IDisposable {
    setInjectorConfig(config: InjectorConfig): Promise<void>;
    injectRawInput(buffer: Uint8Array, sourceId: number): Promise<void>;
    setInjectionRect(rect: Rectangle): Promise<void>;
    setAvatar(base64Buffer: Uint8Array, sourceId: number): Promise<void>;
    allowSingleController(sourceId: number): Promise<void>;
}

export interface ISlimCoreElectronApplicationHooks {
    onDisplaysChanged(callback: () => void): IDisposable;

    showSharingIndicator(regionOrWindowId?: Rectangle | number): void;
    hideSharingIndicator(): void;

    getControlInjector(): ISlimCoreElectronControlInjector;
}

export type SlimCoreElectronStackConfig = {
    logger: CallingLogger;
    slimCoreInstance: SlimCore.Engine;
    settings: SlimCoreSettings;
    appHooks: ISlimCoreElectronApplicationHooks;
}

export interface ISlimCoreStackFactory<T> {
    build(config: T): Promise<ICallingStack>;
}

export interface ISlimCoreElectronStackFactory extends ISlimCoreStackFactory<SlimCoreElectronStackConfig>{
    build(config: SlimCoreElectronStackConfig): Promise<ICallingStack>;
}

export interface ISlimCoreUwpStackFactory extends ISlimCoreStackFactory<SlimCoreElectronStackConfig> {
    build(config: SlimCoreElectronStackConfig): Promise<ICallingStack>;
}

export interface IElectronVideoFrame extends IVideoFrame {
  getImageData(): ImageData;
}

export const slimCoreElectronStackFactory: ISlimCoreElectronStackFactory;
export const slimCoreUwpStackFactory: ISlimCoreUwpStackFactory;

} // declare module skype.calling.electron

declare module "skype-calling-electron" {
    import ExportedNamespace = skype.calling.electron;
    export = ExportedNamespace;
} // declare module "skype-calling-electron"
