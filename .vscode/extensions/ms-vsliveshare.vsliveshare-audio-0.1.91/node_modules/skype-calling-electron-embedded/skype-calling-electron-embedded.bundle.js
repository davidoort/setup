(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define("skype-calling-electron-embedded", ["lodash"], factory);
	else if(typeof exports === 'object')
		exports["skype-calling-electron-embedded"] = factory(require("lodash"));
	else
		root["skype-calling-electron-embedded"] = factory(root["lodash"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 35);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = __webpack_require__(18);
var global_1 = __webpack_require__(34);
var _ = __webpack_require__(2);
_.defaults(global_1.default, { SlimCore: {} });
_.defaults(global_1.default.SlimCore, { Enums: {} });
if (Proxy) {
    global_1.default.SlimCore.Enums = new Proxy(global_1.default.SlimCore.Enums, {
        get: function (target, name) { return (name in target) ? target[name] : {}; },
    });
}
exports.MRI_SKYPE_PREFIX = '8:';
exports.MRI_ALIAS_PREFIX = ';aliases=';
exports.MRI_SIP_PREFIX = '2:';
function isSlimCoreRTModuleAvailable() {
    return !!global_1.default.SlimCoreRT
        && global_1.default.SlimCoreRT.SlimCore
        && global_1.default.SlimCoreRT.SlimCore.Enums;
}
exports.isSlimCoreRTModuleAvailable = isSlimCoreRTModuleAvailable;
var AVAILABLE_VIDEO_STATES = [1, 2, 4];
function wrap(object) {
    var handle = function (event, listener) {
        object.addListener(event, listener);
        return {
            dispose: function () {
                object.removeListener(event, listener);
            },
        };
    };
    return _.assign(object, { handle: handle });
}
exports.wrap = wrap;
var PlatformType;
(function (PlatformType) {
    PlatformType[PlatformType["Electron"] = 1] = "Electron";
    PlatformType[PlatformType["Uwp"] = 2] = "Uwp";
})(PlatformType = exports.PlatformType || (exports.PlatformType = {}));
function forgetAndLog(promise, _logger, errorMessage) {
    if (promise) {
        return promise.catch(function (err) {
            _logger.warn("Promise execution failed: " + errorMessage + ": " + err);
        });
    }
    _logger.warn("Undefined promise @ " + new Error().stack);
    return Promise.resolve();
}
exports.forgetAndLog = forgetAndLog;
function getStrProperty(callHandler, logger, objectId, propertyKey, fallback) {
    try {
        return callHandler.getStrProperty(objectId, propertyKey);
    }
    catch (error) {
        logger.warn("getStrProperty failed: " + error);
        return fallback;
    }
}
exports.getStrProperty = getStrProperty;
function getIntProperty(callHandler, logger, objectId, propertyKey, fallback) {
    try {
        return callHandler.getIntProperty(objectId, propertyKey);
    }
    catch (error) {
        logger.warn("getIntProperty failed: " + error);
        return fallback;
    }
}
exports.getIntProperty = getIntProperty;
var VideoStateCancelEvent = (function (_super) {
    __extends(VideoStateCancelEvent, _super);
    function VideoStateCancelEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoStateCancelEvent.prototype.fire = function () {
        this.raiseEvents(function (e) { return e(); });
    };
    return VideoStateCancelEvent;
}(events_1.EventSourceImpl));
exports.VideoStateCancelEvent = VideoStateCancelEvent;
function waitForVideoObjectState(options) {
    return new Promise(function (resolve, reject) {
        var done = false;
        var videoStateChangedCallback = null;
        var timeoutId = 0;
        var cancelSub;
        var _cleanupAndReturn = function (error) {
            done = true;
            if (videoStateChangedCallback) {
                videoStateChangedCallback.dispose();
                videoStateChangedCallback = null;
            }
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = 0;
            }
            if (cancelSub) {
                cancelSub.dispose();
            }
            if (error) {
                reject(error);
            }
            else {
                resolve();
            }
        };
        var _onVideoObjectStateChanged = function (eventData) {
            if (done)
                return;
            options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] state changed -> " + eventData.value);
            if (isVideoInState(eventData.value, options.resolveStates)) {
                _cleanupAndReturn();
            }
            else if (options.rejectStates && isVideoInState(eventData.value, options.rejectStates)) {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] rejecting state " + eventData.value);
            }
        };
        var timeoutHandler = function () {
            if (done)
                return;
            options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] timeout. Checking state again.");
            var videoStatus = getIntProperty(options.callHandler, options.logger, options.videoObjectId, 521);
            if (isVideoInState(videoStatus, options.resolveStates)) {
                _cleanupAndReturn();
            }
            else if (options.rejectStates && isVideoInState(videoStatus, options.rejectStates)) {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] rejecting state " + videoStatus);
            }
            else {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] timeout.");
            }
        };
        if (options.timeout) {
            timeoutId = setTimeout(timeoutHandler, options.timeout);
        }
        if (options.cancelEvent) {
            cancelSub = options.cancelEvent.subscribe(function () {
                options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] canceled.");
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] canceled.");
            });
        }
        videoStateChangedCallback = onObjectPropertyChanged(options.slimcoreInstance, 521, options.videoObjectId, _onVideoObjectStateChanged);
        var videoStatus = getIntProperty(options.callHandler, options.logger, options.videoObjectId, 521);
        _onVideoObjectStateChanged({
            objectType: 11,
            objectId: options.videoObjectId,
            propKey: 521,
            value: videoStatus,
        });
    });
}
exports.waitForVideoObjectState = waitForVideoObjectState;
function isVideoInState(state, expected) {
    return expected.indexOf(state) !== -1;
}
exports.isVideoInState = isVideoInState;
function videoObjectTimeout(settings) {
    return (settings.platform === PlatformType.Uwp) ? 5000 : 500;
}
exports.videoObjectTimeout = videoObjectTimeout;
function waitForVideoObjectToBeAvailable(slimcoreInstance, callHandler, videoObjectId, logger, timeout, cancelEvent) {
    return waitForVideoObjectState({
        slimcoreInstance: slimcoreInstance,
        callHandler: callHandler,
        videoObjectId: videoObjectId,
        logger: logger,
        resolveStates: AVAILABLE_VIDEO_STATES,
        rejectStates: [],
        timeout: timeout,
        cancelEvent: cancelEvent,
    });
}
exports.waitForVideoObjectToBeAvailable = waitForVideoObjectToBeAvailable;
function isVideoAvailable(state) {
    return isVideoInState(state, AVAILABLE_VIDEO_STATES);
}
exports.isVideoAvailable = isVideoAvailable;
function onObjectChanged(engine, objectId, listener) {
    return engine.handle('object-property-changed', function (eventData) {
        if (eventData.objectId === objectId) {
            listener(eventData);
        }
    });
}
exports.onObjectChanged = onObjectChanged;
function onObjectTypeChanged(engine, objectType, listener) {
    return engine.handle('object-property-changed', function (eventData) {
        if (eventData.objectType === objectType) {
            listener(eventData);
        }
    });
}
exports.onObjectTypeChanged = onObjectTypeChanged;
function onObjectPropertyChanged(engine, propKey, objectId, listener) {
    return engine.handle('object-property-changed', function (eventData) {
        if (eventData.objectId === objectId && eventData.propKey === propKey) {
            listener(eventData);
        }
    });
}
exports.onObjectPropertyChanged = onObjectPropertyChanged;
function onPropertyChanged(engine, propKey, listener) {
    return engine.handle('object-property-changed', function (eventData) {
        if (eventData.propKey === propKey) {
            listener(eventData);
        }
    });
}
exports.onPropertyChanged = onPropertyChanged;
function onAudioStreamStateChanged(callHandler, callObjectId, listener) {
    return callHandler.handle('audio-stream-state-changed', function (eventData) {
        if (eventData.callObjectId === callObjectId) {
            listener(eventData);
        }
    });
}
exports.onAudioStreamStateChanged = onAudioStreamStateChanged;
function onSkypeTokenRequired(callHandler, listener) {
    return callHandler.handle('skype-token-required', function (eventData) {
        listener(eventData);
    });
}
exports.onSkypeTokenRequired = onSkypeTokenRequired;
function onSkypeTokenRequiredSkyLib(engine, listener) {
    return engine.handle('skype-token-required', function (eventData) {
        listener(eventData);
    });
}
exports.onSkypeTokenRequiredSkyLib = onSkypeTokenRequiredSkyLib;
function onTransferRequested(callHandler, callObjectId, listener) {
    return callHandler.handle('transfer-requested', function (eventData) {
        if (eventData.callObjectId === callObjectId) {
            listener(eventData);
        }
    });
}
exports.onTransferRequested = onTransferRequested;
function onCallMeBackOperationStatusChanged(callHandler, callObjectId, listener) {
    return callHandler.handle('callmeback-operation-status-changed', function (eventData) {
        if (eventData.callObjectId === callObjectId) {
            listener(eventData);
        }
    });
}
exports.onCallMeBackOperationStatusChanged = onCallMeBackOperationStatusChanged;
function onUnmuteSelfOperationStatusChanged(callHandler, callObjectId, listener) {
    return callHandler.handle('unmuteself-operation-status-changed', function (eventData) {
        if (eventData.callObjectId === callObjectId) {
            listener(eventData);
        }
    });
}
exports.onUnmuteSelfOperationStatusChanged = onUnmuteSelfOperationStatusChanged;
function onRemoteVideosCountChanged(callHandler, participantObjectId, listener) {
    return callHandler.handle('remote-videos-count-changed', function (eventData) {
        if (eventData.participantObjectId === participantObjectId) {
            listener(eventData);
        }
    });
}
exports.onRemoteVideosCountChanged = onRemoteVideosCountChanged;
function onMediaNegotiationStatusChanged(callHandler, callObjectId, listener) {
    return callHandler.handle('media-negotiation-status-changed', function (eventData) {
        if (eventData.callObjectId === callObjectId) {
            listener(eventData);
        }
    });
}
exports.onMediaNegotiationStatusChanged = onMediaNegotiationStatusChanged;
function onPushHandlingComplete(engine, token, listener) {
    return engine.handle('push-handling-complete', function (eventData) {
        if (eventData.token === token) {
            listener(eventData);
        }
    });
}
exports.onPushHandlingComplete = onPushHandlingComplete;
var MRI_ALIASES_REGEX = /;aliases=.*$/i;
function stripMriAliases(mri) {
    if (mri) {
        return mri.replace(MRI_ALIASES_REGEX, '');
    }
    return mri;
}
exports.stripMriAliases = stripMriAliases;
function bufferToString(buf) {
    return String.fromCharCode.apply(null, buf);
}
exports.bufferToString = bufferToString;
function stringToBuffer(msg) {
    var buf = new ArrayBuffer(msg.length);
    var bufView = new Uint8Array(buf);
    for (var i = 0; i < msg.length; i++) {
        bufView[i] = msg.charCodeAt(i);
    }
    return bufView;
}
exports.stringToBuffer = stringToBuffer;
function mapMediaTypeStringToMediaType(mediaTypeStr) {
    switch (mediaTypeStr) {
        case 'audio':
            return 0;
        case 'video':
            return 1;
        case 'panoramic-video':
            return 2;
        case 'applicationsharing-video':
            return 3;
        case 'data':
            return 4;
        default:
            return undefined;
    }
}
exports.mapMediaTypeStringToMediaType = mapMediaTypeStringToMediaType;
function mapToEmptyStrIfFalsy(inputString) {
    if (inputString)
        return inputString;
    else
        return '';
}
exports.mapToEmptyStrIfFalsy = mapToEmptyStrIfFalsy;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreCommon = __webpack_require__(0);
var observableBase_1 = __webpack_require__(28);
var SlimCoreElectronBase = (function (_super) {
    __extends(SlimCoreElectronBase, _super);
    function SlimCoreElectronBase(_logger) {
        var _this = _super.call(this) || this;
        _this._logger = _logger;
        _this._callbacks = [];
        return _this;
    }
    SlimCoreElectronBase.prototype.dispose = function () {
        this._logger.info('dispose');
        this._callbacks.forEach(function (item) { return item.callback.dispose(); });
        this._callbacks = [];
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronBase.prototype.registerCallback = function (callback, disposable) {
        if (disposable === void 0) { disposable = false; }
        if (!callback) {
            this._logger.error("Attempt to register null callback, ignoring");
            return;
        }
        this._callbacks.push({ callback: callback, disposable: disposable });
    };
    SlimCoreElectronBase.prototype.disposeCallbacks = function () {
        this._callbacks.filter(function (cb) { return cb.disposable; }).forEach(function (cb) { return cb.callback.dispose(); });
        this._callbacks = this._callbacks.filter(function (cb) { return !cb.disposable; });
    };
    SlimCoreElectronBase.prototype._getStrProperty = function (callHandler, objectId, propertyKey, fallback) {
        return SlimCoreCommon.getStrProperty(callHandler, this._logger, objectId, propertyKey, fallback);
    };
    SlimCoreElectronBase.prototype._getIntProperty = function (callHandler, objectId, propertyKey, fallback) {
        return SlimCoreCommon.getIntProperty(callHandler, this._logger, objectId, propertyKey, fallback);
    };
    SlimCoreElectronBase.prototype.raiseChanged = function () {
        try {
            _super.prototype.raiseChanged.call(this);
        }
        catch (err) {
            this._logger.error("Change handling error: " + err);
        }
    };
    SlimCoreElectronBase.prototype._raiseEventImpl = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        try {
            _super.prototype._raiseEventImpl.apply(this, [eventName].concat(args));
        }
        catch (err) {
            this._logger.error("Event '" + eventName + "' handling error: " + err);
        }
    };
    return SlimCoreElectronBase;
}(observableBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronBase;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function asap(exec) {
    return new Promise(function (resolve) {
        resolve(exec());
    });
}
exports.asap = asap;
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
var Timer = (function () {
    function Timer(ontimeout) {
        this.ontimeout = ontimeout;
    }
    Timer.prototype.start = function (timeout) {
        this.timeoutId = setTimeout(this.ontimeout, timeout);
    };
    Timer.prototype.stop = function () {
        clearTimeout(this.timeoutId);
    };
    return Timer;
}());
exports.Timer = Timer;
function defer() {
    var deferred = {};
    deferred.promise = new Promise(function (resolve, reject) {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    return deferred;
}
exports.defer = defer;
function timedDefer(timeout, timeoutMessage) {
    if (timeoutMessage === void 0) { timeoutMessage = "deferred timed out after " + timeout + "ms"; }
    var deferred = {};
    var rejectTimer = new Timer(function () { return deferred.reject(new TimeoutError(timeoutMessage)); });
    deferred.promise = new Promise(function (resolve, reject) {
        deferred.resolve = function (value) {
            rejectTimer.stop();
            resolve(value);
        };
        deferred.reject = function (error) {
            rejectTimer.stop();
            reject(error);
        };
    });
    rejectTimer.start(timeout);
    return deferred;
}
exports.timedDefer = timedDefer;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var asyncOperationHandler_1 = __webpack_require__(26);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronCallParticipant_1 = __webpack_require__(7);
var SlimCoreElectronLightWeightMeeting_1 = __webpack_require__(32);
var SlimCoreElectronContentSharing_1 = __webpack_require__(30);
var SlimCoreElectronLocalScreenShare_1 = __webpack_require__(11);
var SlimCoreElectronLocalVideo_1 = __webpack_require__(12);
var SlimCoreElectronLocalVideoPreview_1 = __webpack_require__(5);
var SlimCoreElectronScreenSharingControl_1 = __webpack_require__(33);
var SlimCoreElectronHolographicInteractionControl_1 = __webpack_require__(31);
var SlimCoreElectronDataChannel_1 = __webpack_require__(21);
var SlimCoreElectronRemoteStreamManager_1 = __webpack_require__(6);
var validStateTransitions = (_a = {},
    _a[0] = [1, 2, 8, 6, 9, 10],
    _a[1] = [2, 6, 7, 10],
    _a[2] = [3, 6, 7, 9, 10],
    _a[3] = [4, 5, 6, 7, 10],
    _a[6] = [7],
    _a[7] = [],
    _a[8] = [1, 2, 6, 7, 10],
    _a[4] = [6, 7, 3, 5, 10],
    _a[5] = [6, 7, 3, 4, 10],
    _a[9] = [3, 6, 7, 10],
    _a[10] = [3, 6, 7, 9, 4, 5],
    _a);
var ASYNC_OPERATION = {
    AddParticipant: 'AddParticipant',
    CallMeBack: 'CallMeBack',
    HoldUnhold: 'HoldUnhold',
    StartCall: 'StartCall',
    EndCall: 'EndCall',
    WaitForRinging: 'WaitForRinging',
    WaitForHandlePush: 'WaitForHandlePush',
    StartVideo: 'StartVideo',
    StopVideo: 'StopVideo',
    StartScreenSharing: 'StartScreenSharing',
    StopScreenSharing: 'StopScreenSharing',
    WaitForMute: 'WaitForMute',
    WaitForUnMute: 'WaitForUnMute',
    WaitForMuteSpeaker: 'WaitForMuteSpeaker',
    WaitForUnMuteSpeaker: 'WaitForUnMuteSpeaker',
    StartAudio: 'StartAudio',
    StopAudio: 'StopAudio',
};
var SlimCoreElectronCall = (function (_super) {
    __extends(SlimCoreElectronCall, _super);
    function SlimCoreElectronCall(_slimcoreCallRegistryCallbacks, _slimcoreCallHandler, _slimcoreInstance, _deviceManager, _settings, logger, _appHooks, threadId, callId, currentUserSkypeIdentity, participantId) {
        var _this = _super.call(this, logger.createChild(function () { return "Call[" + _this.slimcoreCallId + ":callId=" + _this.callId + ":participantId=" + participantId + "]"; })) || this;
        _this._slimcoreCallRegistryCallbacks = _slimcoreCallRegistryCallbacks;
        _this._slimcoreCallHandler = _slimcoreCallHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._deviceManager = _deviceManager;
        _this._settings = _settings;
        _this._appHooks = _appHooks;
        _this.threadId = threadId;
        _this.callId = callId;
        _this.currentUserSkypeIdentity = currentUserSkypeIdentity;
        _this.participants = [];
        _this.participantMap = {};
        _this.isMuted = false;
        _this.isSpeakerMuted = false;
        _this.isServerMuted = false;
        _this.isVideoOn = false;
        _this.isScreenSharingOn = false;
        _this.dominantSpeakerInfo = { speakerList: [], timestamp: null };
        _this.callStartedAt = null;
        _this.callHeldAt = null;
        _this.failureType = 2;
        _this.slimcoreCallId = 0;
        _this.isHostless = true;
        _this.callType = -1;
        _this.isIncomingOneOnOneVideoCall = false;
        _this.lightWeightMeeting = null;
        _this.contentSharingSessions = [];
        _this.screenSharingControl = null;
        _this.holographicInteractionControl = null;
        _this.mediaStreams = (_a = {},
            _a[0] = [],
            _a[1] = [],
            _a);
        _this._isAudioStreamConnected = false;
        _this._wasAudioStreamConnected = false;
        _this._canToggleVideo = true;
        _this._canToggleScreenSharing = true;
        _this._callGotConnected = false;
        _this._enableGroupCallMeetupGeneration = false;
        _this._mediaPeerType = 0;
        _this._dataChannel = null;
        _this._dataChannelUsers = [];
        _this._isRelayWhiteListingIssue = false;
        _this._state = 0;
        _this.transferState = 0;
        _this.isServerMuteUnmuteEnabled = function () {
            if (!_this.endpoints) {
                return false;
            }
            return _.some(_this.endpoints.endpointDetails, function (endpoint) {
                if (_this.endpointId === endpoint.endpointId) {
                    return endpoint.capabilities && endpoint.capabilities.serverMuteUnmute === 'enabled';
                }
                return false;
            });
        };
        _this.isMuteDisabled = function () {
            return _this.isMuted;
        };
        _this.isUnMuteDisabled = function () {
            if (_this.callType === 1) {
                return !_this.isMuted;
            }
            else if (_this.callType === 2) {
                if (!_this.isServerMuteUnmuteEnabled()) {
                    return !_this.isMuted;
                }
                return !_this.isServerMuted && !_this.isMuted;
            }
            return false;
        };
        _this._setTransferState = function (state) {
            if (_this.transferState !== state) {
                _this._logger.log('Transfer: state set: ' + state);
                _this.transferState = state;
                _this.raiseChanged();
            }
        };
        _this._logger.info('constructor');
        _this.terminatedReason = 0;
        _this.participantId = participantId;
        try {
            _this.endpointId = _this._slimcoreInstance.getRegistrationId();
        }
        catch (error) {
            _this._logger.warn("getRegistrationId is missing!");
        }
        _this.screenSharingControl = new SlimCoreElectronScreenSharingControl_1.default(_this._logger, _this.callId, _this._appHooks.getControlInjector());
        _this.holographicInteractionControl = new SlimCoreElectronHolographicInteractionControl_1.default(_this._logger, _this.callId);
        _this._dataChannelUsers = [_this.screenSharingControl, _this.holographicInteractionControl];
        _this._pendingPromise = Promise.resolve(undefined);
        _this._asyncOperationHandler = new asyncOperationHandler_1.default(_this._logger);
        return _this;
        var _a;
    }
    Object.defineProperty(SlimCoreElectronCall.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            this._logger.info("Updating callState from " + this._state + " to " + value);
            this._state = value;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCall.prototype.init = function (callInitOptions) {
        this._logger.info('init');
        this.messageId = callInitOptions.messageId;
        if (callInitOptions.threadId) {
            this.threadId = callInitOptions.threadId;
        }
        this._meetingInfo = callInitOptions.meetingInfo;
        this._enableGroupCallMeetupGeneration = !!callInitOptions.enableGroupCallMeetupGeneration;
        this._transferContext = callInitOptions.transferContext && callInitOptions.transferContext.context;
        this._endpointMetadata = callInitOptions.endpointMetadata;
        this.onBehalfOfMri = callInitOptions.onBehalfOf;
        this._emergencyContent = callInitOptions.emergencyContent;
        this._mediaPeerType = callInitOptions.mediaPeerType;
        if (this.broadcastMeeting) {
            this.broadcastMeeting.context = callInitOptions.broadcastContext;
        }
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype.join = function (context, callStartOptions) {
        var _this = this;
        return this._chainPromise(function () {
            _this.callerMri = SlimCoreCommon.stripMriAliases(context.groupCallInitiator);
            return _this._joinOrStartCall({
                audioDirection: callStartOptions.audioDirection,
                videoDirection: callStartOptions.videoDirection ||
                    (callStartOptions.withVideo ? 4 : 1),
                screenshareDirection: callStartOptions.screenshareDirection,
                datachannelDirection: callStartOptions.datachannelDirection,
                conversationUrl: context.conversationUrl,
                label: callStartOptions.label,
                conversationType: context.conversationType,
                enableLightWeightMeeting: false,
            });
        }, 'join');
    };
    SlimCoreElectronCall.prototype.start = function (callStartOptions) {
        var _this = this;
        if (this._transferContext) {
            this._logger.info('Transfer: Starting transfered call.');
            if (!this._transferContext.newCallObjectId) {
                return Promise.reject(new Error('Transfer: Transfered context is invalid. Missing callObjectId or newCallObjectId'));
            }
            this.callType = 1;
            var isVideoEnabled_1 = callStartOptions.withVideo || (callStartOptions.videoDirection === 4);
            return this._chainPromise(function () { return _this._startTransferTargetCall(_this._transferContext.newCallObjectId, isVideoEnabled_1); }, 'start');
        }
        return this._chainPromise(function () { return _this._joinOrStartCall({
            audioDirection: callStartOptions.audioDirection,
            videoDirection: callStartOptions.videoDirection ||
                (callStartOptions.withVideo ? 4 : 0),
            screenshareDirection: callStartOptions.screenshareDirection,
            datachannelDirection: callStartOptions.datachannelDirection,
            ringOthers: callStartOptions.ringOthers,
            label: callStartOptions.label,
            conversationType: callStartOptions.isCast ? 'cast' : '',
            enableLightWeightMeeting: false,
            callKey: callStartOptions.callKey,
            encryptedKey: callStartOptions.encryptedKey,
            connectionType: callStartOptions.connectionType,
        }); }, 'start');
    };
    SlimCoreElectronCall.prototype.startCallToVoicemail = function (callStartOptions) {
        var _this = this;
        return this._chainPromise(function () {
            return _this._joinOrStartCall({
                callToVoicemail: true,
                voicemailResourcePath: callStartOptions.voicemailResourcePath,
                voicemailItemId: callStartOptions.voicemailItemId,
            });
        }, 'startCallToVoicemail');
    };
    SlimCoreElectronCall.prototype.joinCallWithoutCallModality = function (context, callStartOptions) {
        this._logger.info("joinCallWithoutCallModality: " + context.conversationUrl);
        if (this.state !== 0) {
            return Promise.reject(new Error('Trying to start a call that has already been acted on'));
        }
        this._logger.info("Calling slimcoreCallHandler.Subscribe");
        this.slimcoreCallId = this._slimcoreCallHandler.subscribe(JSON.stringify({
            'conversationUrl': context.conversationUrl,
            'conversationId': this.callId,
            'conversationType': context.conversationType,
        }), {
            threadId: this.threadId,
            messageId: this.messageId,
            subject: callStartOptions.label,
            conversationType: context.conversationType,
            meetingInfo: this._meetingInfo ? JSON.stringify(this._meetingInfo) : null,
            endpointMetadata: this._endpointMetadata,
        });
        this._assertSlimcoreObjectId(this.slimcoreCallId, 'Subscribe');
        this._setCallState(8);
        this._hookSlimCorePropertyChangedEventsForSubscribedCalls();
        return Promise.resolve(null);
    };
    SlimCoreElectronCall.prototype.joinLightWeightMeeting = function (context, callStartOptions) {
        var _this = this;
        return this._chainPromise(function () {
            _this.callerMri = SlimCoreCommon.stripMriAliases(context.groupCallInitiator);
            return _this._joinOrStartLightWeightMeeting({
                conversationUrl: context.conversationUrl,
                videoDirection: 0,
                label: callStartOptions.label,
                conversationType: context.conversationType,
                enableLightWeightMeeting: true,
            });
        }, 'joinLightWeightMeeting');
    };
    SlimCoreElectronCall.prototype.startLightWeightMeeting = function (callStartOptions) {
        var _this = this;
        if (callStartOptions === void 0) { callStartOptions = {}; }
        return this._chainPromise(function () { return _this._joinOrStartLightWeightMeeting({
            ringOthers: callStartOptions.ringOthers,
            videoDirection: 0,
            label: callStartOptions.label,
            conversationType: callStartOptions.isCast ? 'cast' : '',
            enableLightWeightMeeting: true,
        }); }, 'startLightWeightMeeting');
    };
    SlimCoreElectronCall.prototype._assertSlimcoreObjectId = function (id, errorString) {
        if (id === 0) {
            throw new Error(errorString + ' Failed. Slimcore returned objectId of 0');
        }
    };
    SlimCoreElectronCall.prototype.setVideoContainer = function (node, options) {
        this._localVideoContainer = node;
        if (options) {
            this._localVideoOptions = options;
        }
        if (!node) {
            return this.stopVideo();
        }
        else {
            if (this.isVideoOn) {
                return this.startVideoSafe('setVideoContainer');
            }
        }
        return Promise.resolve();
    };
    SlimCoreElectronCall.prototype.startVideoSafe = function (context) {
        var _this = this;
        return this.startVideo().catch(function (error) {
            _this._logger.warn("Could not start video from " + context + ": callId = " + _this.callId, error);
        });
    };
    ;
    SlimCoreElectronCall.prototype.startVideo = function () {
        var _this = this;
        this._logger.info('startVideo');
        if (!this._canToggleVideo) {
            return Promise.reject(new Error('Cannot toggle video'));
        }
        var always = function () {
            _this._canToggleScreenSharing = true;
        };
        var startVideoPromise = Promise.resolve()
            .then(function () { return Promise.all([_this._startPreviewVideo(), _this._startLocalVideo()]); })
            .then(function () { return _this._setVideoOn(true); });
        return this._asyncOperationHandler.registerPromise(ASYNC_OPERATION.StartVideo, startVideoPromise).then(always, function (error) {
            _this._logger.error('Failed to start video', error);
            _this.stopVideo();
            always();
            throw error;
        });
    };
    SlimCoreElectronCall.prototype.stopVideo = function () {
        var _this = this;
        this._logger.info('stopVideo');
        var cleanUp = function () {
            if (_this._localVideo) {
                _this._localVideo.dispose();
                _this._localVideo = null;
            }
            if (_this._localVideoPreview) {
                _this._localVideoPreview.dispose();
                _this._localVideoPreview = null;
            }
            _this._setVideoOn(false);
        };
        var stopVideoPromise = Promise.resolve()
            .then(function () {
            if (_this._localVideoPreview) {
                return SlimCoreCommon.forgetAndLog(_this._localVideoPreview.stop(), _this._logger, 'stopVideo: stopping localVideoPreview failed');
            }
        })
            .then(function () {
            if (_this._localVideo) {
                return SlimCoreCommon.forgetAndLog(_this._localVideo.stop(), _this._logger, 'stopVideo: stopping localVideo failed');
            }
        });
        return this._asyncOperationHandler.registerPromise(ASYNC_OPERATION.StopVideo, stopVideoPromise)
            .then(cleanUp, function (error) {
            _this._logger.error("Error while trying to Stop localVideo. Error: " + error);
            cleanUp();
        });
    };
    SlimCoreElectronCall.prototype._startPreviewVideo = function () {
        var _this = this;
        if (!this._localVideoContainer) {
            return Promise.resolve();
        }
        return Promise.resolve()
            .then(function () { return _this.disposeLocalVideoRenderer(); })
            .then(function () {
            _this._localVideoPreview = new SlimCoreElectronLocalVideoPreview_1.default(_this._localVideoContainer, _this._deviceManager, _this._settings, _this._logger, 0, _this._localVideoOptions);
            return _this._localVideoPreview.startVideoAsync();
        });
    };
    SlimCoreElectronCall.prototype._startLocalVideo = function () {
        var _this = this;
        if (!this._localVideo) {
            this._localVideo = new SlimCoreElectronLocalVideo_1.default(this.slimcoreCallId, this._slimcoreCallHandler, this._slimcoreInstance, this._deviceManager, this._logger);
            this._localVideo.setCallState(this.state);
            this._localVideo.changed(function () { return _this._localVideoChanged(); });
        }
        return this._localVideo.start();
    };
    SlimCoreElectronCall.prototype.startScreenSharing = function (source) {
        var _this = this;
        this._logger.info('startScreenSharing');
        if (!this._canToggleScreenSharing) {
            return Promise.reject(new Error('cannot start screen sharing'));
        }
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.shutdownControlForViewer();
        }
        var always = function () {
            _this._canToggleScreenSharing = true;
        };
        var startScreenSharingPromise = Promise.resolve()
            .then(function () {
            if (!_this._localScreenShareStream) {
                _this._localScreenShareStream = new SlimCoreElectronLocalScreenShare_1.default(_this.slimcoreCallId, _this._slimcoreCallHandler, _this._slimcoreInstance, _this._deviceManager, _this._logger, _this._appHooks, _this.screenSharingControl);
                _this._localScreenShareStream.changed(function () { return _this._onLocalScreenShareStreamChanged(); });
                _this._localScreenShareStream.on('sharingSourceLost', function () { return _this._onLocalScreenShareSourceLost(); });
                _this._localScreenShareStream.on('windowClosed', function () { return _this.stopScreenSharing(); });
            }
        })
            .then(function () { return _this._localScreenShareStream.start(source); });
        return this._asyncOperationHandler.registerPromise(ASYNC_OPERATION.StartScreenSharing, startScreenSharingPromise)
            .then(always, function (error) {
            always();
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._onLocalScreenShareSourceLost = function () {
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.shutdownControlForSharer();
        }
        if (this._localScreenShareStream.isStreaming) {
            this.event('sharingDropped').raise();
        }
    };
    SlimCoreElectronCall.prototype._onLocalScreenShareStreamChanged = function () {
        if (this._localScreenShareStream.isStreaming) {
            if (!this.isScreenSharingOn && this._dataChannel && this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                this.screenSharingControl.initControlForSharer();
                this._dataChannel.start();
            }
            this._setScreenSharingOn(true);
        }
        else if (!this._localScreenShareStream.isAvailable) {
            if (this.isScreenSharingOn && this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                this.screenSharingControl.shutdownControlForSharer();
            }
            this._setScreenSharingOn(false);
        }
    };
    SlimCoreElectronCall.prototype.stopScreenSharing = function (isSharerSwitch) {
        var _this = this;
        this._logger.info('stopScreenSharing');
        var always = function () {
            _this._canToggleScreenSharing = true;
            if (_this._localScreenShareStream) {
                _this._localScreenShareStream.dispose();
                _this._localScreenShareStream = null;
            }
            _this._setScreenSharingOn(false);
            if (_this.screenSharingControl && _this.screenSharingControl.isScreenSharingControlEnabled()) {
                _this.screenSharingControl.shutdownControlForSharer();
            }
        };
        var stopScreenSharingPromise = Promise.resolve()
            .then(function () {
            if (_this._localScreenShareStream) {
                return SlimCoreCommon.forgetAndLog(_this._localScreenShareStream.stop(), _this._logger, 'stopScreenSharing: stopping screen sharing failed');
            }
        });
        return this._asyncOperationHandler.registerPromise(ASYNC_OPERATION.StartScreenSharing, stopScreenSharingPromise)
            .then(always, function (error) {
            always();
            throw error;
        });
    };
    SlimCoreElectronCall.prototype.shareSystemSound = function (enable) {
        var _this = this;
        this._logger.info("shareSystemSound: " + enable);
        return Promise.resolve().then(function () {
            _this._slimcoreCallHandler.callShareSystemSound(_this.slimcoreCallId, enable);
        });
    };
    SlimCoreElectronCall.prototype.transferCall = function (transferTargetMri) {
        this._logger.log('Transfer: transferCall', transferTargetMri);
        var transferInfo = {
            transferTarget: transferTargetMri,
            transferStatusSuccessList: [22, 23],
        };
        return this._transferCall(transferInfo);
    };
    SlimCoreElectronCall.prototype.callSafeTransfer = function (transferTargetMri) {
        this._logger.log('Transfer: callSafeTransfer', transferTargetMri);
        var transferInfo = {
            transferTarget: transferTargetMri,
            transferStatusSuccessList: [23],
        };
        return this._transferCall(transferInfo);
    };
    SlimCoreElectronCall.prototype.callConsultativeTransfer = function (callWithTarget) {
        this._logger.log('Transfer: callConsultativeTransfer', callWithTarget.callId);
        var transferInfo = {
            targetCallId: callWithTarget.slimcoreCallId,
            transferStatusSuccessList: [23],
        };
        return this._transferCall(transferInfo);
    };
    SlimCoreElectronCall.prototype._transferCall = function (transferInfo) {
        var _this = this;
        this._logger.log('Transfer: _transferCall', transferInfo);
        if (this._currentTransferPromise) {
            return Promise.reject(new Error('A transfer is already in progress'));
        }
        this._setTransferState(1);
        this._currentTransferPromise = Promise.resolve()
            .then(function () {
            var transferCompletePromise = _this._waitForTransferSuccessOrFailure(transferInfo.transferStatusSuccessList);
            if (transferInfo.transferTarget) {
                _this._slimcoreCallHandler.startCallTransfer(_this.slimcoreCallId, transferInfo.transferTarget);
            }
            else if (transferInfo.targetCallId) {
                _this._slimcoreCallHandler.startConsultativeCallTransfer(transferInfo.targetCallId, _this.slimcoreCallId);
            }
            else {
                return Promise.reject(new Error('Either transferTarget/transfereeCallId should be present'));
            }
            return transferCompletePromise;
        })
            .then(function (reason) {
            _this._currentTransferPromise = null;
            return reason;
        }).catch(function (e) {
            _this._currentTransferPromise = null;
            throw e;
        });
        return this._currentTransferPromise;
    };
    SlimCoreElectronCall.prototype._waitForTransferSuccessOrFailure = function (transferSuccessStatusList) {
        var _this = this;
        this._logger.log('Transfer: _waitForTransferSuccessOrFailure', transferSuccessStatusList);
        return new Promise(function (resolve, reject) {
            var callTransferStatus = SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 5045, _this.slimcoreCallId, function (eventData) {
                _this._logger.log('Transfer: _waitForTransferSuccessOrFailure, status changed', eventData.value);
                if (transferSuccessStatusList.indexOf(eventData.value) !== -1 ||
                    eventData.value === 2) {
                    if (callTransferStatus) {
                        callTransferStatus.dispose();
                        callTransferStatus = null;
                    }
                    if (transferSuccessStatusList.indexOf(eventData.value) !== -1) {
                        resolve(1);
                    }
                    else {
                        var failureReason = _this.getIntProperty(5049);
                        var terminatedReason = SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(SlimCoreElectronCall.convertFailureReasonToParticipantReason(failureReason));
                        reject(terminatedReason);
                    }
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.mute = function () {
        var _this = this;
        this._logger.info('mute');
        if (this.isMuteDisabled()) {
            return Promise.reject(new Error('Cannot mute when already locally muted'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForMute)) {
            this._logger.info('Return previous mute promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMute);
        }
        this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForMute);
        return Promise.resolve()
            .then(function () {
            if (_this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForUnMute)) {
                _this._logger.info('Waiting for previous unmute to finish');
                return _this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMute);
            }
        })
            .then(function () { return _this._muteUnmute(true); });
    };
    SlimCoreElectronCall.prototype.unmute = function () {
        var _this = this;
        this._logger.info('unmute');
        if (this.isUnMuteDisabled()) {
            return Promise.reject(new Error('Cannot unmute when already locally and server unmuted'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForUnMute)) {
            this._logger.info('Return previous unmute promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMute);
        }
        this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForUnMute);
        return Promise.resolve()
            .then(function () {
            if (_this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForMute)) {
                _this._logger.info('Waiting for previous mute to finish');
                return _this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMute);
            }
        })
            .then(function () { return _this._muteUnmute(false); });
    };
    SlimCoreElectronCall.prototype.muteSpeaker = function () {
        var _this = this;
        this._logger.info('muteSpeaker');
        if (this.isSpeakerMuted) {
            return Promise.reject(new Error('Cannot mute speaker when already muted'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForMuteSpeaker)) {
            this._logger.info('Return previous mute speaker promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMuteSpeaker);
        }
        this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForMuteSpeaker);
        return Promise.resolve()
            .then(function () {
            if (_this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker)) {
                _this._logger.info('Waiting for previous speaker unmute to finish');
                return _this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker);
            }
        })
            .then(function () { return _this._muteUnmuteSpeaker(true); });
    };
    SlimCoreElectronCall.prototype.unmuteSpeaker = function () {
        var _this = this;
        this._logger.info('unmuteSpeaker');
        if (!this.isSpeakerMuted) {
            return Promise.reject(new Error('Cannot unmute speaker when already unmuted'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker)) {
            this._logger.info('Return previous unmute speaker promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker);
        }
        this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker);
        return Promise.resolve()
            .then(function () {
            if (_this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForMuteSpeaker)) {
                _this._logger.info('Waiting for previous speaker mute to finish');
                return _this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMuteSpeaker);
            }
        })
            .then(function () { return _this._muteUnmuteSpeaker(false); });
    };
    SlimCoreElectronCall.prototype.muteParticipants = function (muteScope, callParticipants) {
        this._logger.info("muteParticipants: muteScope: " + muteScope + ", callParticipants count: " + callParticipants.length);
        return this._muteParticipants(muteScope, callParticipants);
    };
    SlimCoreElectronCall.prototype.hold = function () {
        this._logger.info('hold');
        return this._holdUnhold(true);
    };
    SlimCoreElectronCall.prototype.unhold = function () {
        this._logger.info('unhold');
        return this._holdUnhold(false);
    };
    SlimCoreElectronCall.prototype.updateEndpointMetadata = function (endpointMetadata) {
        this._logger.info('updateEndpointMetadata');
        if (this.state !== 3) {
            this._logger.warn("Trying to updateEndpointMetadata in a call which is not connected, callId = " + this.callId);
            return Promise.reject(new Error('cannot updateEndpointMetadata in a call which is not connected'));
        }
        this._endpointMetadata = endpointMetadata;
        return this._updateEndpointMetadata(this._endpointMetadata);
    };
    SlimCoreElectronCall.prototype.sendDtmfTone = function (dtmfTone) {
        this._logger.info('DTMF tone ' + dtmfTone);
        return this._sendDtmfTone(dtmfTone);
    };
    SlimCoreElectronCall.prototype.setAudioUsageMode = function (audioUsageMode) {
        this._logger.info('set audio usage mode to ' + audioUsageMode);
        return this._setAudioUsageMode(audioUsageMode);
    };
    SlimCoreElectronCall.prototype.getTechnicalInformationJson = function () {
        var _this = this;
        return Promise.resolve().then(function () {
            try {
                return _this._slimcoreCallHandler.callGetTechnicalInformationJson(_this.slimcoreCallId);
            }
            catch (error) {
                _this._logger.error("Error in callGetTechnicalInformationJson callId: " + _this.callId + ", error: " + error);
                throw error;
            }
        });
    };
    SlimCoreElectronCall.prototype.startAudio = function () {
        this._logger.info('startAudio');
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.StopAudio)) {
            this._logger.error('cannot startAudio when stopAudio is in progress');
            return Promise.reject(new Error('cannot startAudio when stopAudio is in progress'));
        }
        if (this.state !== 3) {
            this._logger.error('cannot startAudio when call is not connected');
            return Promise.reject(new Error('cannot startAudio when call is not connected'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.StartAudio)) {
            this._logger.info('Return previous StartAudio promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.StartAudio);
        }
        this._slimcoreCallHandler.callStartAudio(this.slimcoreCallId);
        return this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.StartAudio);
    };
    SlimCoreElectronCall.prototype.stopAudio = function () {
        this._logger.info('stopAudio');
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.StartAudio)) {
            this._logger.error('cannot stopAudio when startAudio is in progress');
            return Promise.reject(new Error('cannot stopAudio when startAudio is in progress'));
        }
        if (this.state !== 3) {
            this._logger.error('cannot stopAudio when call is not connected');
            return Promise.reject(new Error('cannot stopAudio when call is not connected'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.StopAudio)) {
            this._logger.info('Return previous StopAudio promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.StopAudio);
        }
        this._slimcoreCallHandler.callStopAudio(this.slimcoreCallId);
        return this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.StopAudio);
    };
    SlimCoreElectronCall.prototype._onMediaNegotiationStatusChanged = function (eventData) {
        this._logger.info("_onMediaNegotiationStatusChanged modalityType: " + eventData.modalityType + "\n            mediaNegotiationStatusCode: " + eventData.mediaNegotiationStatusCode);
        if (eventData.modalityType !== 0) {
            return;
        }
        var operationName = (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.StartAudio)) ?
            ASYNC_OPERATION.StartAudio : ASYNC_OPERATION.StopAudio;
        if (this._asyncOperationHandler.hasDeferred(operationName)) {
            if (eventData.mediaNegotiationStatusCode === 0) {
                this._asyncOperationHandler.resolveDeferred(operationName, eventData.mediaNegotiationStatusCode);
            }
            else {
                this._asyncOperationHandler.rejectDeferred(operationName, eventData.mediaNegotiationStatusCode);
            }
        }
    };
    SlimCoreElectronCall.prototype.stop = function (forEveryone) {
        var _this = this;
        if (forEveryone === void 0) { forEveryone = false; }
        this._logger.info('stop forEveryone ' + forEveryone);
        if (this.state === 6) {
            this._logger.warn("Trying to stop a call which is already Disconnecting, callId = " + this.callId);
            return Promise.reject(new Error('cannot stop call in Disconnecting state'));
        }
        if (this.state === 7) {
            this._logger.warn("Trying to stop a call which is already Disconnected, callId = " + this.callId);
            return Promise.reject(new Error('cannot stop call in Disconnected state'));
        }
        var isInObservingState = this.state === 8;
        this._setCallState(6);
        return Promise.resolve()
            .then(function () {
            if (isInObservingState) {
                _this._setCallState(7);
                return _this._cleanCallResources();
            }
            else {
                _this._logger.warn("Stop: Leaving from call with callId = " + _this.callId);
                return _this._leaveSlimCoreCall(forEveryone);
            }
        })
            .then(function () {
            _this._slimcoreCallRegistryCallbacks.onCallEnded(_this.slimcoreCallId);
        })
            .catch(function (error) {
            _this._logger.error("Error in leaveSlimCoreCall(), callId = " + _this.callId + ", error = " + error);
            _this._slimcoreCallRegistryCallbacks.onCallEnded(_this.slimcoreCallId);
            _this._setCallState(7);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._leaveSlimCoreCall = function (forEveryone) {
        var _this = this;
        this._logger.info("leaveSlimCoreCall forEveryone: " + forEveryone);
        if (this.slimcoreCallId === 0) {
            return Promise.resolve();
        }
        var waitForEndCallPromise = this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.EndCall);
        return Promise.resolve()
            .then(function () {
            if (forEveryone) {
                _this._slimcoreCallHandler.endCallForAll(_this.slimcoreCallId);
            }
            else {
                _this._slimcoreCallHandler.leaveCall(_this.slimcoreCallId);
            }
        })
            .then(function () { return _this._logger.info('Waiting for SlimCore to end call'); })
            .then(function () { return waitForEndCallPromise; })
            .then(function () {
            _this._logger.info('SlimCore ended the call');
        }, function (err) {
            _this._logger.error("Error in leaveSlimCoreCall().. ignoring, callId = " + _this.callId + ", error = " + err);
            return Promise.resolve(undefined);
        });
    };
    SlimCoreElectronCall.prototype.acknowledge = function (incomingCallPayload) {
        var _this = this;
        var acknowledgeAsync = function () {
            if (_this.state !== 0 && _this.state !== 8) {
                return Promise.reject(new Error('Trying to acknowledge a call that has already been acted on'));
            }
            _this._logger.info('Acknowledging...');
            var correlationIds = {
                callId: incomingCallPayload.convoCallId,
                callerId: incomingCallPayload.callerId,
                launchTime: incomingCallPayload.launchTime.toString(),
                pushReceivedTime: incomingCallPayload.pushReceivedTime.toString(),
                registrationId: incomingCallPayload.registrationId,
                participantId: incomingCallPayload.participantId,
            };
            var token = _this._slimcoreInstance.handlePushNotification({
                eventType: incomingCallPayload.body.evt,
                servicePayload: incomingCallPayload.body.gp,
                correlationIdsJson: JSON.stringify(correlationIds),
                callKey: incomingCallPayload.callKey,
                connectionType: SlimCoreElectronCall.convertConnectionType(incomingCallPayload.connectionType),
            });
            var callbacks = [];
            var waitForHandlePush = _this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForHandlePush);
            callbacks.push(SlimCoreCommon.onPushHandlingComplete(_this._slimcoreInstance, token, function (event) {
                if (event.token !== token) {
                    _this._logger.info('HandlePushNotification: Received unexpected token '
                        + event.token + ' (expected ' + token + ')');
                    return;
                }
                _this._logger.info('HandlePushNotification: Received event for token: ' + event.token
                    + ' result: ' + event.result);
                if (event.result === 1) {
                    _this._logger.info('HandlePushNotification: Succeeded');
                    _this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.WaitForHandlePush, { code: 1, success: true }).catch(function (e) {
                        _this._logger.info('HandlePushNotification: Failed', e);
                    });
                }
                else if (event.result === 17) {
                    _this._logger.info('HandlePushNotification: In progress, keep waiting...');
                }
                else {
                    var message = 'HandlePushNotification: Failed ' + event.result;
                    _this._logger.warn(message);
                    _this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.WaitForHandlePush, SlimCoreElectronCall.convertPushHandlingResult(event.result)).catch(function (e) {
                        _this._logger.info('HandlePushNotification: Failed', e);
                    });
                }
            }));
            var waitForRinging = _this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.WaitForRinging);
            callbacks.push(SlimCoreCommon.onObjectTypeChanged(_this._slimcoreInstance, 4, function (event) {
                var callId = _this._getStrProperty(_this._slimcoreCallHandler, event.objectId, 868);
                var status = _this._getIntProperty(_this._slimcoreCallHandler, event.objectId, 5161);
                var active = _this._getIntProperty(_this._slimcoreCallHandler, event.objectId, 865);
                if (callId !== _this.callId) {
                    _this._logger.info('Ignoring SlimCore event for incorrect call ' + event.objectId + '/' + callId);
                    return;
                }
                if ((status === 21) || (active === 1)) {
                    _this.attachSlimCoreCallObject(event.objectId);
                    _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'Acknowledge');
                    _this._fillIncomingCallProperties();
                    if (_this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForRinging)) {
                        _this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.WaitForRinging)
                            .then(function () {
                            _this._logger.info('Reached ringing/active state for call pending acknowledgement');
                        }, function (e) {
                            _this._logger.info('Reached ringing/active state for call pending acknowledgement', e);
                        });
                    }
                    _this.raiseChanged();
                }
            }));
            var unsubscribe = function () { return _.each(callbacks, function (c) { return c.dispose(); }); };
            return waitForHandlePush.then(function (pushResult) {
                if (!pushResult.success) {
                    return pushResult;
                }
                return waitForRinging.then(function () {
                    _this._setCallState(1);
                    return pushResult;
                });
            }).then(function (result) {
                _this._logger.debug('Acknowledge done');
                unsubscribe();
                return result;
            }, function (error) {
                unsubscribe();
                _this._asyncOperationHandler.maybeRejectDeferred(ASYNC_OPERATION.WaitForRinging, error);
                _this._asyncOperationHandler.maybeRejectDeferred(ASYNC_OPERATION.WaitForHandlePush, error);
                throw error;
            });
        };
        return this._chainPromise(acknowledgeAsync, 'acknowledge');
    };
    SlimCoreElectronCall.prototype.accept = function (callAcceptOptions) {
        var _this = this;
        this._logger.info("accept, answerMediaType: " + callAcceptOptions.answerMediaType + ",\n                            withVideo: " + callAcceptOptions.withVideo + ",\n                            muted: " + callAcceptOptions.muted);
        if (callAcceptOptions.muted) {
            this._logger.warn('Accepting call muted is not implemented');
        }
        this._setCallState(2);
        var startCallPromise = this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.StartCall);
        return Promise.resolve()
            .then(function () { return _this._acceptCall(callAcceptOptions); })
            .then(function () {
            _this._updateCallType(_this.getIntProperty(817));
        })
            .then(function () {
            if (callAcceptOptions.answerMediaType === 1) {
                _this._logger.info('Call has been answered - turning on video');
                return _this.startVideoSafe('acceptCall');
            }
        })
            .then(function () { return startCallPromise; })
            .then(function () { return _this._setCallState(3); })
            .catch(function (error) {
            _this.stop();
            _this._logger.error("Error in accept(), callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._acceptCall = function (callAcceptOptions) {
        try {
            if (callAcceptOptions.withVideo) {
                callAcceptOptions.answerMediaType = 1;
            }
            this._slimcoreCallHandler.acceptCall(this.slimcoreCallId, SlimCoreElectronCall.toAnswerMediaType(callAcceptOptions.answerMediaType));
        }
        catch (error) {
            this._logger.info("acceptCall is missing from the slimcore electron module: " + error);
            if (callAcceptOptions.answerMediaType === 1) {
                callAcceptOptions.withVideo = true;
            }
            this._slimcoreCallHandler.answerCall(this.slimcoreCallId, callAcceptOptions.withVideo);
        }
    };
    SlimCoreElectronCall.prototype.reject = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            if (_this.state !== 1) {
                throw new Error('Only calls in Notified state can be rejected');
            }
            return _this.stop();
        });
    };
    SlimCoreElectronCall.prototype.reconnect = function () {
        return Promise.reject(new Error('Retargeting is not supported'));
    };
    SlimCoreElectronCall.prototype.provideCallQualityFeedback = function (questionaryId, trackingReason, rating, problemTokens) {
        var _this = this;
        this._logger.info('provideCallQualityFeedback');
        return Promise.resolve().then(function () {
            try {
                _this._slimcoreCallHandler.provideCallQualityFeedback(_this.callId, _this.participantId, questionaryId, trackingReason, rating, problemTokens);
            }
            catch (error) {
                _this._logger.error("Error in provideCallQualityFeedback callId: " + _this.callId + ", error: " + error);
                throw error;
            }
        });
    };
    SlimCoreElectronCall.prototype._onCallMutedUnmuted = function (eventData) {
        var callIsMuted = !!eventData.value;
        this._logger.info("onCallMutedUnmuted current: " + this.isMuted + " new: " + !!callIsMuted);
        if (!this.isServerMuted && !callIsMuted) {
            this._asyncOperationHandler.maybeResolveDeferred(ASYNC_OPERATION.WaitForUnMute);
        }
        if (callIsMuted) {
            this._asyncOperationHandler.maybeResolveDeferred(ASYNC_OPERATION.WaitForMute);
        }
        if (this.isMuted !== callIsMuted) {
            this.isMuted = callIsMuted;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallMutedUnmutedSpeaker = function (eventData) {
        var speakerMuted = eventData.value;
        this._logger.info("_onCallMutedUnmutedSpeaker current: " + this.isSpeakerMuted + " new: " + !!speakerMuted);
        if (speakerMuted === 0) {
            this._asyncOperationHandler.maybeResolveDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker);
        }
        else if (speakerMuted === 1) {
            this._asyncOperationHandler.maybeResolveDeferred(ASYNC_OPERATION.WaitForMuteSpeaker);
        }
    };
    SlimCoreElectronCall.prototype._onCallIsServerMuted = function (eventData) {
        var isServerMuted = !!eventData.value;
        this._logger.info('_onCallIsServerMuted ' + isServerMuted);
        if (isServerMuted !== this.isServerMuted) {
            this.isServerMuted = isServerMuted;
            this.event('serverMutedChanged').raise(isServerMuted);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onParticipantJoinedOrRemoved = function (eventData) {
        var _this = this;
        var newRoster = {};
        var participantsToAdd = [];
        var participantsToRemove = [];
        var particiants = this._slimcoreCallHandler.callGetParticipants(this.slimcoreCallId) || [];
        particiants.forEach(function (participant) {
            var mri = _this._getStrProperty(_this._slimcoreCallHandler, participant, 5164);
            newRoster[mri] = participant;
        });
        this._logger.info('_onParticipantJoinedOrRemoved participantsInRoster:', newRoster);
        var existsInRoster = function (participant) { return newRoster.hasOwnProperty(participant.id); };
        var hasSlimcoreObjectId = function (participant) { return participant.slimcoreObjectId; };
        var isSameAsInRoster = function (participant) { return participant.slimcoreObjectId === newRoster[participant.id]; };
        this.participants.forEach(function (localParticipant) {
            if (existsInRoster(localParticipant)) {
                if (!hasSlimcoreObjectId(localParticipant)) {
                    participantsToAdd.push({ mri: localParticipant.id, id: newRoster[localParticipant.id] });
                    delete newRoster[localParticipant.id];
                }
                else if (!isSameAsInRoster(localParticipant)) {
                    _this._handleParticipantRemoved(localParticipant.id, localParticipant.stateReason);
                }
            }
            else {
                participantsToRemove.push(localParticipant);
            }
        });
        Object.keys(newRoster).forEach(function (mri) { return participantsToAdd.push({ mri: mri, id: newRoster[mri] }); });
        participantsToAdd.forEach(function (participant) { return _this._handleParticipantJoined(participant.mri, participant.id); });
        participantsToRemove.forEach(function (participant) { return _this._handleParticipantRemoved(participant.id, participant.stateReason); });
    };
    SlimCoreElectronCall.prototype._onLightWeightMeetingAddedOrRemoved = function (eventData) {
        var lightWeightMeetingInCall = this._slimcoreCallHandler.getLightWeightMeetingSession(this.slimcoreCallId);
        this._logger.info('_onLightWeightMeetingAddedOrRemoved', lightWeightMeetingInCall);
        if (lightWeightMeetingInCall === 0 && this.lightWeightMeeting) {
            this._removeLightWeightMeeting();
        }
        else if (this.lightWeightMeeting) {
            this.lightWeightMeeting.attachSlimCoreLightWeightMeetingId(lightWeightMeetingInCall);
        }
    };
    SlimCoreElectronCall.prototype._updateDominantSpeakerList = function () {
        var _this = this;
        var sortedDominantSpeakerIds = _.map(_.sortBy(_.map(_.filter(this.participants, function (p) { return p.state === 3; }), function (participant) {
            return {
                mri: participant.id,
                rank: participant.dominantSpeakerRank ? participant.dominantSpeakerRank : _this.participants.length + 1,
            };
        }), 'rank'), function (elem) {
            return elem.mri;
        });
        var fullOrderMatches = _.isEqual(this.dominantSpeakerInfo.speakerList, sortedDominantSpeakerIds);
        var topSpeakerMatches = fullOrderMatches;
        if (!topSpeakerMatches) {
            topSpeakerMatches = !_.isEmpty(this.dominantSpeakerInfo.speakerList)
                && !_.isEmpty(sortedDominantSpeakerIds)
                && (_.head(this.dominantSpeakerInfo.speakerList) === _.head(sortedDominantSpeakerIds));
        }
        this.dominantSpeakerInfo = {
            speakerList: sortedDominantSpeakerIds,
            timestamp: new Date(),
        };
        if (!fullOrderMatches) {
            this._logger.info('_updateDominantSpeakerList: ' + JSON.stringify(this.dominantSpeakerInfo));
        }
        return { fullOrderMatches: fullOrderMatches, topSpeakerMatches: topSpeakerMatches };
    };
    SlimCoreElectronCall.prototype._handleParticipantRemoved = function (participantId, reason) {
        if (reason === void 0) { reason = 0; }
        this._logger.info('handleParticipantRemoved: ' + participantId + ' reason = ' + reason);
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.handleParticipantRemoved(participantId);
        }
        var participant = this._removeParticipantEntry(participantId);
        if (!participant) {
            this._logger.error('handleParticipantRemoved: unable to remove participant ' + participantId);
            return;
        }
        participant.setState(4, reason);
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.AddParticipant, participantId)) {
            this._asyncOperationHandler.rejectDeferred(ASYNC_OPERATION.AddParticipant, reason, participantId);
        }
        participant.setLightWeightMeetingRole(0);
        participant.rejectAdmitParticipantDeferred(reason);
        SlimCoreCommon.forgetAndLog(participant.cleanUpAsync(), this._logger, 'Participant clean-up failed')
            .then(function () { return participant.dispose(); });
        this._updateDominantSpeakerList();
        this.event('participantRemoved').raise(participant);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._handleParticipantJoined = function (participantId, slimcoreObjectId) {
        this._logger.debug("handleParticipantJoined: " + participantId);
        var participant = this._getOrCreateParticipant(participantId, slimcoreObjectId);
        if (SlimCoreElectronCallParticipant_1.default.isParticipantActive(participant.state) &&
            this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.AddParticipant, participantId)) {
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.AddParticipant, null, participantId);
        }
        if (!this._updateDominantSpeakerList().fullOrderMatches) {
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._admitParticipantToSlimCoreElectronCall = function (participantId) {
        var participantsToAdmit = [participantId];
        this._slimcoreCallHandler.admitParticipants(this.slimcoreCallId, participantsToAdmit);
        return Promise.resolve();
    };
    SlimCoreElectronCall.prototype.admitParticipant = function (participantId) {
        var _this = this;
        this._logger.info('admitParticipant: participantId = ' + participantId);
        if (this.slimcoreCallId === 0) {
            return Promise.reject(8);
        }
        var participant = this._getOrCreateParticipant(participantId);
        if (participant.state !== 7) {
            return Promise.reject(43);
        }
        var waitForAdmitParticipant = async.defer();
        var promise = Promise.resolve()
            .then(function () { return _this._admitParticipantToSlimCoreElectronCall(participantId); })
            .then(function () { return participant.addAdmitParticipantDeferred(waitForAdmitParticipant); })
            .then(function () { return waitForAdmitParticipant.promise; })
            .then(function () { return _this._logger.info('Admitted participant = ' + participantId); })
            .catch(function (error) {
            _this._logger.error("Error in admitParticipant(), callId = " + _this.callId + ", error = " + error);
            return Promise.reject(error);
        });
        this.raiseChanged();
        return promise;
    };
    SlimCoreElectronCall.prototype._addParticipantToSlimCoreElectronCall = function (participantId, threadId, messageId, participantInvitationData) {
        this._logger.info('addParticipantToSlimCoreElectronCall: participantId = ' + participantId
            + ' threadId = ' + threadId
            + ' messageId = ' + messageId
            + ' participantInvitationData = ' + participantInvitationData);
        var objectId = this._slimcoreCallHandler.addParticipant(this.slimcoreCallId, participantId, SlimCoreCommon.mapToEmptyStrIfFalsy(threadId), SlimCoreCommon.mapToEmptyStrIfFalsy(messageId), SlimCoreCommon.mapToEmptyStrIfFalsy(participantInvitationData));
        if (objectId === 0) {
            return Promise.reject(new Error('AddParticipant call to slimcore failed'));
        }
        else {
            return Promise.resolve(objectId);
        }
    };
    SlimCoreElectronCall.prototype.generateAliasedMri = function (id, sipUri) {
        var aliasedMri = id;
        if (sipUri) {
            aliasedMri += SlimCoreCommon.MRI_ALIAS_PREFIX + SlimCoreCommon.MRI_SIP_PREFIX + sipUri;
        }
        return aliasedMri;
    };
    SlimCoreElectronCall.prototype.callMeBack = function (participantMri, assertedMri) {
        var _this = this;
        this._logger.info("callMeBack: participantMri = " + participantMri + " assertedMri = " + assertedMri);
        if (this.slimcoreCallId === 0) {
            this._logger.error('call is not initialized yet');
            return Promise.reject(new Error('call is not initialized yet'));
        }
        if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.CallMeBack, participantMri)) {
            this._logger.info('Return previous callMeBack promise as one already exists');
            return this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.CallMeBack, participantMri);
        }
        var waitForCallMeBackPromise = this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.CallMeBack, participantMri);
        var currentUserMri = this.generateAliasedMri(SlimCoreCommon.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, this.currentUserSkypeIdentity.sipUri);
        return Promise.resolve()
            .then(function () {
            var result = _this._slimcoreCallHandler.callMeBack(_this.slimcoreCallId, participantMri, assertedMri || currentUserMri);
            if (!result) {
                _this._asyncOperationHandler.rejectDeferred(ASYNC_OPERATION.CallMeBack, 1, participantMri);
            }
            return waitForCallMeBackPromise;
        })
            .catch(function (error) {
            _this._logger.error("Error in callMeBack(), callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype.addParticipant = function (participantId, payload) {
        var _this = this;
        if (payload === void 0) { payload = {}; }
        if (payload.sipUri) {
            this._logger.error('sipUri not supported yet');
        }
        var participantInvitationData;
        if (payload.participantInvitationData) {
            try {
                participantInvitationData = JSON.stringify(payload.participantInvitationData);
            }
            catch (error) {
                this._logger.error(error.message);
                throw error;
            }
        }
        this._logger.info('addParticipant: participantId = ' + participantId
            + ' threadId = ' + payload.threadId
            + ' messageId = ' + payload.messageId
            + ' participantInvitationData = ' + participantInvitationData);
        var participant = this._getOrCreateParticipant(participantId);
        if (this.slimcoreCallId === 0) {
            return Promise.resolve(participant);
        }
        var disconnectedStates = [0, 4];
        if (disconnectedStates.indexOf(participant.state) === -1) {
            return Promise.resolve(participant);
        }
        var addParticipantPromise = this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.AddParticipant, participant.id);
        var promise = Promise.resolve()
            .then(function () { return _this._addParticipantToCall(participant); })
            .then(function () { return _this._addParticipantToSlimCoreElectronCall(participant.id, payload.threadId, payload.messageId, participantInvitationData); })
            .then(function (participantObjectId) {
            participant.attachSlimcoreObjectId(participantObjectId);
        })
            .then(function () { return addParticipantPromise; })
            .then(function () { return participant; })
            .catch(function (error) {
            _this._logger.error("Error in addParticipant(), callId = " + _this.callId + ", error = " + error);
            _this._handleParticipantRemoved(participantId, 1);
            throw error;
        });
        this.raiseChanged();
        return promise;
    };
    SlimCoreElectronCall.prototype.removeParticipant = function (participantId) {
        var _this = this;
        this._logger.info('removeParticipant: participantId = ' + participantId);
        var participant;
        if (this.participantMap.hasOwnProperty(participantId)) {
            participant = this.participantMap[participantId];
        }
        if (participant) {
            this._logger.info('removeParticipant: current participant state: ' + participant.state);
            if (participant.state === 0 || participant.state === 4) {
                return Promise.reject(new Error('Participant already in disconnected state'));
            }
        }
        return Promise.resolve()
            .then(function () {
            if (!participant) {
                _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'removeParticipantByMri');
                _this._slimcoreCallHandler.removeParticipantByMri(_this.slimcoreCallId, participantId);
            }
            else {
                _this._assertSlimcoreObjectId(participant.slimcoreObjectId, 'removeParticipant');
                _this._slimcoreCallHandler.removeParticipant(participant.slimcoreObjectId);
            }
        });
    };
    SlimCoreElectronCall.prototype._chainPromise = function (promise, actionName) {
        var _this = this;
        if (actionName === void 0) { actionName = ''; }
        this._pendingPromise = this._pendingPromise
            .catch(_.noop)
            .then(function () {
            _this._logger.info("begin " + actionName);
            return promise();
        });
        this._pendingPromise.then(function () {
            _this._logger.info("finished " + actionName);
        }, function (error) {
            _this._logger.error("failed " + actionName + ", callId = " + _this.callId + ", error = " + JSON.stringify(error));
        });
        return this._pendingPromise;
    };
    SlimCoreElectronCall.prototype._startTransferTargetCall = function (transferedCallObjectId, isVideoEnabled) {
        var _this = this;
        this._logger.log('Transfer: _startTransferTargetCall', transferedCallObjectId);
        return Promise.resolve()
            .then(function () {
            _this.attachSlimCoreCallObject(transferedCallObjectId);
            _this._slimcoreCallHandler.startTransferTargetCall(transferedCallObjectId, isVideoEnabled, _this.threadId, _this.messageId);
        });
    };
    SlimCoreElectronCall.prototype._joinOrStartSlimCoreCall = function (options) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var isGoLive = !options.ringOthers;
            var allowHostless = options.conversationType !== 'cast';
            if (options.conversationUrl) {
                _this._logger.info("Calling slimcoreCallHandler.JoinCall");
                _this.slimcoreCallId = _this._slimcoreCallHandler.joinCall(JSON.stringify({
                    'conversationUrl': options.conversationUrl,
                    'conversationId': _this.callId,
                    'conversationType': options.conversationType,
                }), {
                    audioDirection: (options.audioDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.audioDirection) : 4,
                    videoDirection: (options.videoDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.videoDirection) : 3,
                    screenshareDirection: (options.screenshareDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.screenshareDirection) : 3,
                    datachannelDirection: (options.datachannelDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.datachannelDirection) : 0,
                    mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(_this._mediaPeerType),
                    isVideoEnabled: options.videoDirection === 4,
                    isGoLive: isGoLive,
                    isHostless: allowHostless,
                    participantLegId: _this.participantId,
                    enableGroupCallMeetupGeneration: _this._enableGroupCallMeetupGeneration,
                    threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.threadId),
                    messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.messageId),
                    subject: SlimCoreCommon.mapToEmptyStrIfFalsy(options.label),
                    conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(options.conversationType),
                    meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(_this._meetingInfo)),
                    endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(_this._endpointMetadata),
                    onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.onBehalfOfMri),
                    enableLightWeightMeeting: options.enableLightWeightMeeting,
                    emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(_this._emergencyContent),
                    broadcastContext: _this.broadcastMeeting && _this.broadcastMeeting.context ? JSON.stringify(_this.broadcastMeeting.context) : null,
                    callKey: options.callKey,
                    encryptedKey: options.encryptedKey,
                    connectionType: SlimCoreElectronCall.convertConnectionType(options.connectionType),
                });
                _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'JoinCall');
                _this._logger.info("slimcoreCallHandler.JoinCall(), callId = " + _this.callId);
            }
            else if (options.callToVoicemail) {
                _this._logger.info("Calling slimcoreCallHandler.PlaceCallToVoicemail");
                if (_this.participants.length !== 1) {
                    throw new Error('PlaceCallToVoicemail Failed. Participant size should be one');
                }
                _this._addParticipantToCall(_this.participants[0]);
                _this.slimcoreCallId = _this._slimcoreCallHandler.placeCallToVoicemail(_this.callId, SlimCoreElectronCall.convertToSlimCoreMediaPeerType(_this._mediaPeerType), _this.participants[0].id, {
                    threadId: _this.threadId,
                    voicemailResourcePath: options.voicemailResourcePath,
                    voicemailItemId: options.voicemailItemId,
                });
                _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'PlaceCallToVoicemail');
                _this._logger.info("slimcoreCallHandler.PlaceCallToVoicemail(), callId = " + _this.callId);
            }
            else {
                _this._logger.info("Calling slimcoreCallHandler.PlaceCall");
                var participantStrings_1 = [];
                _this.participants.forEach(function (participant) {
                    _this._addParticipantToCall(participant);
                    participantStrings_1.push(participant.id);
                });
                _this.callType = (_this.participants.length === 1 && _this.state !== 8) ? 1 : 2;
                _this.slimcoreCallId = _this._slimcoreCallHandler.placeCall(_this.callId, participantStrings_1, {
                    audioDirection: (options.audioDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.audioDirection) : 4,
                    videoDirection: (options.videoDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.videoDirection) : 3,
                    screenshareDirection: (options.screenshareDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.screenshareDirection) : 3,
                    datachannelDirection: (options.datachannelDirection !== undefined) ?
                        SlimCoreElectronCall.toMediaDirection(options.datachannelDirection) : 0,
                    mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(_this._mediaPeerType),
                    isVideoEnabled: options.videoDirection === 4,
                    isGoLive: isGoLive,
                    isHostless: allowHostless,
                    participantLegId: _this.participantId,
                    enableGroupCallMeetupGeneration: _this._enableGroupCallMeetupGeneration,
                    threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.threadId),
                    messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.messageId),
                    subject: SlimCoreCommon.mapToEmptyStrIfFalsy(options.label),
                    conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(options.conversationType),
                    meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(_this._meetingInfo)),
                    endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(_this._endpointMetadata),
                    onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(_this.onBehalfOfMri),
                    enableLightWeightMeeting: options.enableLightWeightMeeting,
                    emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(_this._emergencyContent),
                    broadcastContext: _this.broadcastMeeting && _this.broadcastMeeting.context ? JSON.stringify(_this.broadcastMeeting.context) : null,
                    callKey: options.callKey,
                    encryptedKey: options.encryptedKey,
                    connectionType: SlimCoreElectronCall.convertConnectionType(options.connectionType),
                });
                _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'PlaceCall');
                _this._logger.info("slimcoreCallHandler.PlaceCall(), callId = " + _this.callId);
            }
        })
            .then(function () { return _this._hookSlimCorePropertyChangedEvents(); })
            .then(function () { return _this._slimcoreCallRegistryCallbacks.onCallStarted(_this.slimcoreCallId, _this); });
    };
    SlimCoreElectronCall.prototype._hookSlimCorePropertyChangedEvents = function () {
        var _this = this;
        this._onCallPropertyChanged(5161, function (data) { return _this._onCallStatusChanged(data); });
        this._onCallPropertyChanged(5045, function (data) { return _this._onCallTransferStatusChanged(data); });
        this._onCallPropertyChanged(865, function (data) { return _this._onCallIsActiveChanged(data); });
        this._onCallPropertyChanged(681, function (data) { return _this._onCallMutedUnmuted(data); });
        this._onCallPropertyChanged(5361, function (data) { return _this._onCallMutedUnmutedSpeaker(data); });
        this._onCallPropertyChanged(5345, function (data) { return _this._onCallIsServerMuted(data); });
        this._onCallPropertyChanged(861, function (data) { return _this._onParticipantJoinedOrRemoved(data); });
        this._onCallPropertyChanged(5176, function (data) { return _this._onThreadIdChanged(data); });
        this._onCallPropertyChanged(5156, function (data) { return _this._onMessageIdChanged(data); });
        this._onCallPropertyChanged(5028, function (data) { return _this._onEndpointDetailsChanged(data); });
        this._onCallPropertyChanged(5368, function (data) { return _this._onSelfParticipantRoleChanged(data); });
        this._onCallPropertyChanged(5372, function (data) { return _this._onSelfParticipantTenantIdChanged(data); });
        this._onCallPropertyChanged(5364, function (data) { return _this._onMeetingDetailsChanged(data); });
        this._onCallPropertyChanged(5041, function (data) { return _this._onParticipantJoinedOrRemoved(data); });
        this._onCallPropertyChanged(817, function (data) { return _this._updateCallType(data.value); });
        this._onCallPropertyChanged(5052, function (data) { return _this._updateForwardingDestinationType(data.value); });
        this._onCallPropertyChanged(5189, function (data) { return _this._onCallOptimalVideoCountChanged(data); });
        this._onCallPropertyChanged(868, function (data) { return _this._onCallIdChanged(data); });
        this._onCallPropertyChanged(5069, function (data) { return _this._onLightWeightMeetingAddedOrRemoved(data); });
        this._onCallPropertyChanged(5145, function (data) { return _this._updateDataChannel(data.value); });
        this._onCallPropertyChanged(5384, function (data) { return _this._onBroadcastMetadataChanged(data); });
        this.registerCallback(SlimCoreCommon.onPropertyChanged(this._slimcoreInstance, 5133, function (data) { return _this._onContentSharingChanged(data); }), true);
        this.registerCallback(SlimCoreCommon.onAudioStreamStateChanged(this._slimcoreCallHandler, this.slimcoreCallId, function (data) { return _this._onAudioStreamStateChanged(data); }), true);
        this.registerCallback(SlimCoreCommon.onTransferRequested(this._slimcoreCallHandler, this.slimcoreCallId, function (data) { return _this._onTransferRequested(data); }), true);
        this.registerCallback(SlimCoreCommon.onCallMeBackOperationStatusChanged(this._slimcoreCallHandler, this.slimcoreCallId, function (data) { return _this._onCallMeBackOperationStatusChanged(data); }), true);
        this.registerCallback(SlimCoreCommon.onUnmuteSelfOperationStatusChanged(this._slimcoreCallHandler, this.slimcoreCallId, function (data) { return _this._onUnmuteOperationStatusChanged(data); }), true);
        this.registerCallback(SlimCoreCommon.onMediaNegotiationStatusChanged(this._slimcoreCallHandler, this.slimcoreCallId, function (data) { return _this._onMediaNegotiationStatusChanged(data); }), true);
        this.registerCallback(this._slimcoreInstance.handle('quality-changed', function (data) { return _this._onQualityChanged(data); }), true);
        this._updateCallType(this.getIntProperty(817));
        var callId = this.getStrProperty(868);
        this._onCallIdChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 868,
            value: callId,
        });
        var threadId = this.getStrProperty(5176);
        this._onThreadIdChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5176,
            value: threadId,
        });
        var messageId = this.getStrProperty(5156);
        this._onMessageIdChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5156,
            value: messageId,
        });
        var callStatus = this.getIntProperty(5161);
        this._onCallStatusChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5161,
            value: callStatus,
        });
        var meetingDetails = this.getStrProperty(5364);
        this._onMeetingDetailsChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5364,
            value: meetingDetails,
        });
        var tenantId = this.getStrProperty(5372);
        this._onSelfParticipantTenantIdChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5372,
            value: tenantId,
        });
        var role = this.getStrProperty(5368);
        this._onSelfParticipantRoleChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5368,
            value: role,
        });
        var isServerMuted = this.getIntProperty(5345);
        this._onCallIsServerMuted({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5345,
            value: isServerMuted,
        });
        var broadcastMetadata = this.getStrProperty(5384);
        this._onBroadcastMetadataChanged({
            objectType: 4,
            objectId: this.slimcoreCallId,
            propKey: 5384,
            value: broadcastMetadata,
        });
        this._onParticipantJoinedOrRemoved();
    };
    SlimCoreElectronCall.prototype._hookSlimCorePropertyChangedEventsForSubscribedCalls = function () {
        var _this = this;
        this._onCallPropertyChanged(5161, function (data) { return _this._onCallStatusChanged(data); });
        this._onCallPropertyChanged(865, function (data) { return _this._onCallIsActiveChanged(data); });
        this._onCallPropertyChanged(5176, function (data) { return _this._onThreadIdChanged(data); });
        this._onCallPropertyChanged(5156, function (data) { return _this._onMessageIdChanged(data); });
        this._onCallPropertyChanged(5028, function (data) { return _this._onEndpointDetailsChanged(data); });
        this._onCallPropertyChanged(5041, function (data) { return _this._onParticipantJoinedOrRemoved(data); });
        this._onParticipantJoinedOrRemoved();
    };
    SlimCoreElectronCall.prototype._fillIncomingCallProperties = function () {
        var callQueueInfo = this.getStrProperty(5076);
        this.callerMri = SlimCoreCommon.stripMriAliases(this.getStrProperty(5036));
        this.transferorMri = SlimCoreCommon.stripMriAliases(this.getStrProperty(5064));
        this.transferorDisplayName = this.getStrProperty(5084);
        this.transferorType = this.getStrProperty(5080);
        this.onBehalfOfMri = SlimCoreCommon.stripMriAliases(this.getStrProperty(5060));
        this.callQueueInfo = callQueueInfo && JSON.parse(callQueueInfo);
        this.incomingCallType = this.getStrProperty(5056);
        this.isIncomingOneOnOneVideoCall = (this.getIntProperty(5073) === 1);
    };
    SlimCoreElectronCall.prototype._onCallPropertyChanged = function (propKey, listener) {
        this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(this._slimcoreInstance, propKey, this.slimcoreCallId, listener), true);
    };
    SlimCoreElectronCall.prototype.attachSlimCoreCallObject = function (slimCoreCallObjectId) {
        var _this = this;
        if (this.slimcoreCallId !== 0) {
            this._logger.warn('Call already attached to a SlimCore object');
            return;
        }
        this._logger.info('attachSlimCoreCallObject');
        this.slimcoreCallId = slimCoreCallObjectId;
        this._slimCoreElectronRemoteManager = new SlimCoreElectronRemoteStreamManager_1.default(this._slimcoreCallHandler, this._logger, this._slimcoreInstance, this._settings, this.slimcoreCallId, this.mediaStreams);
        this._slimCoreElectronRemoteManager.changed(function () { return _this.raiseChanged(); });
        this._hookSlimCorePropertyChangedEvents();
    };
    SlimCoreElectronCall.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._slimcoreCallHandler, this.slimcoreCallId, property, SlimCoreCommon.mapToEmptyStrIfFalsy(fallback));
    };
    SlimCoreElectronCall.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._slimcoreCallHandler, this.slimcoreCallId, property, fallback);
    };
    SlimCoreElectronCall.prototype._updateCallType = function (callIsConference) {
        var callType = callIsConference === 0 ? 1 :
            (callIsConference === 1 ? 2 : -1);
        this._logger.info("_updateCallType: currentValue: " + this.callType + ", newValue: " + callType);
        if (callType !== this.callType) {
            this.callType = callType;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateForwardingDestinationType = function (forwardingDestinationType) {
        if (forwardingDestinationType !== this.forwardingDestinationType) {
            this.forwardingDestinationType = forwardingDestinationType;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateDataChannel = function (dataChannelObjectId) {
        this._logger.info('_updateDataChannel()');
        if (dataChannelObjectId) {
            var dataChannel = this._slimcoreInstance.getDataChannel(dataChannelObjectId);
            if (this._dataChannel) {
                this._dataChannel.dispose();
            }
            this._dataChannel = new SlimCoreElectronDataChannel_1.default(this._logger, this, this._slimcoreInstance, dataChannel, this._dataChannelUsers, dataChannelObjectId);
            this._logger.info('Data channel set');
        }
    };
    SlimCoreElectronCall.prototype.mapDataChannelSourceIdToParticipant = function (sourceID) {
        var participant = null;
        if (this.callType === 1) {
            participant = this.participants[0];
        }
        else {
            participant = _.find(this.participants, function (participant) { return participant.getSourceIdForMediaType(4) === sourceID; });
        }
        if (participant && participant.id) {
            this._logger.info("ParticipantId: " + participant.id + " to SourceId: " + sourceID);
        }
        else {
            this._logger.warn("No Participant found for SourceId: " + sourceID);
        }
        return participant;
    };
    SlimCoreElectronCall.prototype._onAudioStreamStateChanged = function (eventData) {
        this.event('mediaStreamStateChanged').raise();
        if (eventData.direction === 3) {
            this.isAudioStreamConnected = eventData.streamState === 3
                || eventData.streamState === 4;
        }
        if (eventData.streamState === 6) {
            this.event('mediaConnectionFailed').raise();
        }
    };
    SlimCoreElectronCall.prototype._onTransferRequested = function (eventData) {
        var _this = this;
        this._logger.log('Transfer: _onTransferRequested', eventData);
        var slimCoreTransferContext = {
            transferorMri: eventData.transferorMri,
            targetMri: eventData.transferTargetMri,
            context: {
                newCallObjectId: eventData.targetCallObjectId,
            },
        };
        this.event('transferRequested').raise({
            transferContext: slimCoreTransferContext,
            onCompleted: function (code) {
                _this._logger.debug("Transfer: transferCompleted called: " + code);
                if (code !== 1) {
                    _this._slimcoreCallHandler.leaveCall(slimCoreTransferContext.context.newCallObjectId);
                }
            },
        });
    };
    SlimCoreElectronCall.prototype._onCallMeBackOperationStatusChanged = function (eventData) {
        var _this = this;
        if (eventData.failureReason === 0) {
            return;
        }
        var reason = SlimCoreElectronCall.convertFailureReasonToParticipantReason(eventData.failureReason);
        this._asyncOperationHandler.rejectDeferred(ASYNC_OPERATION.CallMeBack, reason, eventData.participantMri)
            .catch(function (e) {
            _this._logger.error('CallMeBack operation failed for ', eventData.participantMri, e);
        });
    };
    SlimCoreElectronCall.prototype._onUnmuteOperationStatusChanged = function (eventData) {
        if (!this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.WaitForUnMute) || eventData.operationResult === 0) {
            return;
        }
        this._logger.info('_onUnmuteOperationStatusChanged operationResult: ' + eventData.operationResult);
        if (eventData.operationResult === 2) {
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.WaitForUnMute);
            return;
        }
        var reason = SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(SlimCoreElectronCall.convertFailureReasonToParticipantReason(eventData.failureReason));
        this._asyncOperationHandler.rejectDeferred(ASYNC_OPERATION.WaitForUnMute, reason);
    };
    SlimCoreElectronCall.prototype._updateCallLegIdChanged = function (newLegId) {
        if (this.participantId !== newLegId) {
            this._logger.info('updateCallLegIdChanged: new value is ' + newLegId);
            this.participantId = newLegId;
            this.event('callLegIdChanged').raise(newLegId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateIsHostless = function (newIsHostless) {
        var newValue = (newIsHostless === 1);
        if (this.isHostless !== newValue) {
            this._logger.info('_updateIsHostless: new value is ' + newValue);
            this.isHostless = newValue;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallIsActiveChanged = function (eventData) {
        if (eventData.value === 0) {
            this._logger.info('Call is no longer active. Updating state to Finished');
            this._onCallStatusChanged({
                objectType: eventData.objectType,
                objectId: eventData.objectId,
                propKey: eventData.propKey,
                value: 6,
            });
        }
    };
    SlimCoreElectronCall.prototype._onCallOptimalVideoCountChanged = function (eventData) {
        this._logger.info('_onCallOptimalVideoCountChanged ' + eventData.value);
        if (eventData.value !== this.optimalVideoCount) {
            this.optimalVideoCount = eventData.value;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallIdChanged = function (eventData) {
        this._logger.info('_onCallIdChanged ' + eventData.value);
        if (eventData.value !== this.callId) {
            this.callId = eventData.value;
            this.event('callIdChanged').raise(this.callId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallTransferStatusChanged = function (eventData) {
        var status = eventData.value;
        this._logger.info('onCallTransferStatusChanged status: ' + status);
        if (status === 22) {
            this._setTransferState(2);
        }
        else if (status === 23) {
            this._setTransferState(3);
        }
        else if (status === 2) {
            this._setTransferState(4);
        }
    };
    SlimCoreElectronCall.prototype._onCallStatusChanged = function (eventData) {
        var _this = this;
        var status = eventData.value;
        this._logger.info('onCallStatusChanged status: ' + status);
        this._updateCallLegIdChanged(this.getStrProperty(5280));
        if (SlimCoreElectronCall.isCallConnecting(status)) {
            this._setCallState(2);
        }
        else if (SlimCoreElectronCall.isCallEarlyMedia(status)) {
            this._logger.info('callStatusChanged: EarlyMedia');
            this._setCallState(9);
        }
        else if (SlimCoreElectronCall.isCallRinging(status)) {
            this._logger.info('callStatusChanged: Ringing');
            this.participants.forEach(function (p) { return p.setState(2); });
            this._updateCallType(this.getIntProperty(817));
        }
        else if (SlimCoreElectronCall.isCallInLobby(status)) {
            this._logger.info('callStatusChanged: InLobby');
            this._setCallState(10);
            this.participants.forEach(function (p) { return p.setState(7); });
            this._updateCallType(this.getIntProperty(817));
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.HoldUnhold).catch(function (e) {
                _this._logger.info('callStatusChanged: InLobby', e);
            });
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.StartCall).catch(function (e) {
                _this._logger.info('callStatusChanged: InLobby', e);
            });
        }
        else if (SlimCoreElectronCall.isCallConnected(status)) {
            this._logger.info('callStatusChanged: Connected');
            this._setCallState(3);
            this._updateIsHostless(this.getIntProperty(4581));
            this._updateCallType(this.getIntProperty(817));
            this._updateEndpointDetails(this.getStrProperty(5028));
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.HoldUnhold).catch(function (e) {
                _this._logger.info('callStatusChanged: Connected', e);
            });
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.StartCall).catch(function (e) {
                _this._logger.info('callStatusChanged: Connected', e);
            });
        }
        else if (status === 5) {
            this._logger.info('callStatusChanged: LocalHold');
            this._setCallState(4);
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.HoldUnhold).catch(function (e) {
                _this._logger.info('callStatusChanged: LocalHold', e);
            });
        }
        else if (status === 10) {
            this._logger.info('callStatusChanged: RemoteHold');
            this._setCallState(5);
            this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.HoldUnhold).catch(function (e) {
                _this._logger.info('callStatusChanged: RemoteHold', e);
            });
        }
        else if (SlimCoreElectronCall.isCallTerminated(status)) {
            var originalReason = SlimCoreElectronCall.convertTerminatedReason(status);
            var callTerminationReason = originalReason;
            this._logger.info("callStatusChanged: Terminated, reason = " + originalReason);
            if ((status === 2) || (status === 20)) {
                callTerminationReason = this._getTerminatedReason(originalReason);
            }
            this._logger.info("callStatusChanged: Terminated, reason: " + originalReason + " -> " + callTerminationReason);
            if (this._asyncOperationHandler.hasDeferred(ASYNC_OPERATION.EndCall)) {
                this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.EndCall).catch(function (e) {
                    _this._logger.info('callStatusChanged: Terminated', e);
                });
            }
            this._setCallState(7, callTerminationReason);
            this.participants.forEach(function (p) { return p.setState(4); });
            this._updateDominantSpeakerList();
            this._asyncOperationHandler.rejectPendingOperations('Call ended');
            this._cleanCallResources();
        }
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._getTerminatedReason = function (originalReason) {
        if (this._isRelayWhiteListingIssue) {
            return 53;
        }
        else if (this.participants.length) {
            var firstParticipantFailureReason = _.head(this.participants).getIntProperty(953);
            return SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(SlimCoreElectronCall.convertFailureReasonToParticipantReason(firstParticipantFailureReason));
        }
        return originalReason || 0;
    };
    SlimCoreElectronCall.prototype._addParticipantToCall = function (participant) {
        participant.setState(1);
        this._logger.info("starting adding participant to call, participantId = " + participant.id + ", callId = " + this.callId);
    };
    SlimCoreElectronCall.prototype._joinOrStartCall = function (options) {
        var _this = this;
        this._logger.info('joinOrStartCall');
        if (this.state !== 0 && this.state !== 8) {
            throw new Error('Trying to start a call that has already been acted on');
        }
        this.isCast = options.conversationType === 'cast';
        this.label = options.label;
        this.raiseChanged();
        this._setCallState(2);
        var waitForCallPromise = this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.StartCall);
        return Promise.resolve()
            .then(function () { return _this._joinOrStartSlimCoreCall(options); })
            .then(function () {
            if (options.videoDirection === 4) {
                _this._logger.info('Call has been started; turning on video');
                return _this.startVideoSafe('joinOrStartCall');
            }
        })
            .then(function () { return waitForCallPromise; })
            .catch(function (error) {
            _this.stop();
            _this._logger.error("Error in joinOrStartCall(), callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._joinOrStartLightWeightMeeting = function (options) {
        var _this = this;
        this._logger.info('joinOrStartLightWeightMeeting');
        if (this.lightWeightMeeting) {
            return Promise.reject(new Error('Trying to start a light weight meeting when it is already active'));
        }
        this.lightWeightMeeting = new SlimCoreElectronLightWeightMeeting_1.default(this._slimcoreCallHandler, this._logger, this._slimcoreInstance);
        this.raiseChanged();
        this.event('lightWeightMeetingChanged').raise();
        this._logger.info("Calling slimcoreCallHandler.PlaceCall/JoinCall to trigger light weight meeting join");
        return Promise.resolve(undefined)
            .then(function () { return _this._joinOrStartSlimCoreCall(options); })
            .then(function () { return _this.lightWeightMeeting.waitForLightWeightMeetinJoin(); })
            .catch(function (error) {
            _this._logger.error("Error in _joinOrStartLightWeightMeeting(), callId = " + _this.callId + ", error = " + error);
            _this._removeLightWeightMeeting();
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._localVideoChanged = function () {
        var videoHasToBeStopped = this._localVideo
            && !this._localVideo.isAvailable
            && !this._localVideo.isPaused
            && this._settings.autoStopLocalVideo !== false
            && !this._localVideo.isStoppingOrNotStarted;
        var isCallEnding = this.state === 6 || this.state === 7;
        if (videoHasToBeStopped && !isCallEnding) {
            this.stopVideo();
        }
    };
    SlimCoreElectronCall.prototype.disposeLocalVideoRenderer = function () {
        var _this = this;
        this._logger.log('DisposeLocalVideoRenderer called');
        var dispose = function () {
            if (_this._localVideoPreview) {
                _this._localVideoPreview.dispose();
                _this._localVideoPreview = null;
            }
        };
        return Promise.resolve().then(function () {
            if (_this._localVideoPreview) {
                return _this._localVideoPreview.stop()
                    .then(dispose, function (e) {
                    _this._logger.warn("Failed to dispose of local video preview renderer");
                    dispose();
                });
            }
        });
    };
    SlimCoreElectronCall.prototype._muteUnmute = function (value) {
        var _this = this;
        this._logger.info("muteUnmute, value = " + value + " isMuted = " + this.isMuted + " isServerMuted = " + this.isServerMuted);
        var muteUnMutePromise;
        if (value) {
            muteUnMutePromise = this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMute);
        }
        else {
            muteUnMutePromise = this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMute);
        }
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callMute(_this.slimcoreCallId, value); })
            .then(function () { return muteUnMutePromise; })
            .catch(function (error) {
            _this._logger.error("Error in muteUnmute().. ignoring, callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._muteUnmuteSpeaker = function (value) {
        var _this = this;
        this._logger.info("muteUnmuteSpeaker, value = " + value + " isSpeakerMuted = " + this.isSpeakerMuted);
        var muteUnMutePromise;
        if (value) {
            muteUnMutePromise = this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForMuteSpeaker);
        }
        else {
            muteUnMutePromise = this._asyncOperationHandler.waitForDeferred(ASYNC_OPERATION.WaitForUnMuteSpeaker);
        }
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callMuteSpeaker(_this.slimcoreCallId, value); })
            .then(function () { return muteUnMutePromise; })
            .then(function () { return _this._setMutedSpeaker(value); })
            .catch(function (error) {
            _this._logger.error("Error in muteUnmuteSpeaker().. ignoring, callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._muteParticipants = function (muteScope, callParticipants) {
        var _this = this;
        var scope = SlimCoreElectronCall.convertMuteScope(muteScope);
        if (scope === undefined) {
            this._logger.error("Unrecognized " + muteScope + " callId: " + this.callId);
            return Promise.reject(new Error('Unrecognized muteScope'));
        }
        var participantStrings = [];
        callParticipants.forEach(function (participant) {
            participantStrings.push(participant.id);
        });
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callMuteParticipants(_this.slimcoreCallId, scope, participantStrings); })
            .catch(function (error) {
            _this._logger.error("callMuteParticipants() not implemented.. ignoring, callId = " + _this.callId + ", error = " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._holdUnhold = function (shouldHold) {
        var _this = this;
        return this._chainPromise(function () {
            var currentHoldStatus = (_this.state === 4);
            _this._logger.info('_holdUnhold, value: ' + shouldHold + ' currentState: ' + currentHoldStatus);
            if (currentHoldStatus === shouldHold) {
                return Promise.resolve();
            }
            return Promise.resolve()
                .then(function () { return _this._slimcoreCallHandler.callHold(_this.slimcoreCallId, shouldHold); })
                .then(function () { return _this._asyncOperationHandler.createDeferred(ASYNC_OPERATION.HoldUnhold); })
                .then(function () {
                if (shouldHold) {
                    return Promise.resolve()
                        .then(function () { return _this.disposeLocalVideoRenderer(); });
                }
                else if (_this.isVideoOn) {
                    return _this._startPreviewVideo().catch(function () {
                        return _this.stopVideo();
                    });
                }
            })
                .catch(function (error) {
                _this._logger.error("Error in _holdUnhold() ignoring, callId: " + _this.callId + ", error: " + error);
                throw error;
            });
        }, (shouldHold ? 'hold' : 'unhold'));
    };
    SlimCoreElectronCall.prototype._updateEndpointMetadata = function (endpointMetadata) {
        var _this = this;
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callUpdateEndpointMetadata(_this.slimcoreCallId, _this._endpointMetadata); })
            .catch(function (error) {
            _this._logger.error("Error in updateEndpointMetaData(" + _this._endpointMetadata + " callId: " + _this.callId + ", error: " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._sendDtmfTone = function (dtmfTone) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var slimCoreDtmfTone = SlimCoreElectronCall.convertToSlimCoreDtmfTone(dtmfTone);
            if (slimCoreDtmfTone === undefined) {
                _this._logger.error("Unrecognized " + dtmfTone + " callId: " + _this.callId);
                throw new Error('Unrecognized dtmfTone');
            }
            try {
                _this._slimcoreCallHandler.callSendDtmf(_this.slimcoreCallId, slimCoreDtmfTone);
            }
            catch (error) {
                _this._logger.error("Error in _sendDtmfTone(" + dtmfTone + " callId: " + _this.callId + ", error: " + error);
                throw error;
            }
        });
    };
    SlimCoreElectronCall.prototype._setAudioUsageMode = function (audioUsageMode) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var slimCoreAudioUsageMode = SlimCoreElectronCall.convertToSlimCoreAudioUsageMode(audioUsageMode);
            if (slimCoreAudioUsageMode === undefined) {
                throw new Error('Unrecognized audioUsageMode');
            }
            _this._slimcoreCallHandler.callSetAudioUsageMode(_this.slimcoreCallId, slimCoreAudioUsageMode);
        })
            .catch(function (error) {
            _this._logger.error("Error in setAudioUsageMode(" + audioUsageMode + ") callId: " + _this.callId + ", error: " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._getOrCreateParticipant = function (participantMri, slimcoreObjectId) {
        var _this = this;
        var participant;
        if (this.participantMap.hasOwnProperty(participantMri)) {
            var participant_1 = this.participantMap[participantMri];
            if (slimcoreObjectId) {
                participant_1.attachSlimcoreObjectId(slimcoreObjectId);
            }
            return participant_1;
        }
        this._logger.info("getOrCreateParticipant: creating new participant " + participantMri + " " + slimcoreObjectId);
        participant = new SlimCoreElectronCallParticipant_1.default(participantMri, this._slimcoreCallHandler, this._logger, this._slimcoreInstance, this._settings, slimcoreObjectId);
        participant.changed(function () { return _this._participantChangedCallback(participant); });
        this._addParticipantEntry(participant);
        this._monitorCallStart();
        this.event('participantAdded').raise(participant);
        this.raiseChanged();
        return participant;
    };
    SlimCoreElectronCall.prototype._participantChangedCallback = function (participant) {
        var _this = this;
        _.each(participant.streams[1], function (s) {
            if (_this._localScreenShareStream) {
                if (s.isAvailable) {
                    SlimCoreCommon.forgetAndLog(_this.stopScreenSharing(true), _this._logger, 'ParticipantChanged: Cleaning up local screenshare because remote screenshare is running');
                    _this.event('sharingStolen').raise();
                }
            }
            if (_this.screenSharingControl && _this.screenSharingControl.isScreenSharingControlEnabled()) {
                if (s.isActive()) {
                    _this.screenSharingControl.initControlForViewer(participant);
                }
                else {
                    _this.screenSharingControl.shutdownControlForViewer(participant);
                }
            }
        });
        this._updateDominantSpeakerList();
        this.event('participantUpdated').raise(participant);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype.setCallStateNotified = function () {
        this._setCallState(1);
    };
    SlimCoreElectronCall.prototype._setCallState = function (callState, terminatedReason) {
        if (this.state === callState) {
            return;
        }
        var validNextStates = validStateTransitions[this.state];
        var isValidNextState = validNextStates.indexOf(callState) >= 0;
        this._logger.info("Attempting to change CallState " + this.state + " -> " + callState + ", original terminatedReason: " + this.terminatedReason + " for call " + this.callId);
        if (!isValidNextState) {
            this._logger.warn("Invalid state transition " + this.state + " -> " + callState + " attempted for call " + this.callId);
            return;
        }
        this.state = callState;
        if (this._localVideo) {
            this._localVideo.setCallState(this.state);
        }
        if (callState === 3) {
            this._callGotConnected = true;
            this.callHeldAt = null;
        }
        else if ((callState === 5 || callState === 4) && !this.callHeldAt) {
            this.callHeldAt = new Date();
        }
        else if (callState === 7) {
            this.terminatedReason = terminatedReason;
            this.failureType = SlimCoreElectronCall.convertTerminatedReasonToFailureType(terminatedReason, this._callGotConnected, this._wasAudioStreamConnected);
            if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                this.screenSharingControl.handleCallDisconnected();
            }
            if (this.holographicInteractionControl) {
                this.holographicInteractionControl.handleCallDisconnected();
            }
        }
        this._logger.info("CallState changed to " + callState + ", terminatedReason: " + this.terminatedReason);
        this._monitorCallStart();
        this.event('callStateChanged').raise();
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._setVideoOn = function (videoOn) {
        if (this.isVideoOn !== videoOn) {
            this.isVideoOn = videoOn;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._setScreenSharingOn = function (screenSharingOn) {
        if (this.isScreenSharingOn !== screenSharingOn) {
            this.isScreenSharingOn = screenSharingOn;
            this.raiseChanged();
        }
        this.event('userActivityChanged').raise();
    };
    SlimCoreElectronCall.prototype._setMutedSpeaker = function (muted) {
        if (this.isSpeakerMuted !== muted) {
            this.isSpeakerMuted = muted;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._monitorCallStart = function () {
        if (this.state === 3 && this.participants.length && !this.callStartedAt) {
            this.callStartedAt = new Date();
        }
    };
    SlimCoreElectronCall.prototype._addParticipantEntry = function (participant) {
        this.participantMap[participant.id] = participant;
        this.participants.push(participant);
    };
    SlimCoreElectronCall.prototype._removeParticipantEntry = function (participantId) {
        if (!this.participantMap.hasOwnProperty(participantId)) {
            return null;
        }
        var participant = this.participantMap[participantId];
        delete this.participantMap[participantId];
        _.pull(this.participants, participant);
        if (participant) {
            this.raiseChanged();
        }
        return participant;
    };
    SlimCoreElectronCall.prototype._removeLightWeightMeeting = function () {
        this.lightWeightMeeting.setState(4);
        this.lightWeightMeeting.dispose();
        this.lightWeightMeeting = null;
        this.event('lightWeightMeetingChanged').raise();
    };
    SlimCoreElectronCall.prototype._onThreadIdChanged = function (eventData) {
        var threadId = eventData.value;
        if (threadId && (this.threadId !== threadId)) {
            this.threadId = threadId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onMessageIdChanged = function (eventData) {
        var messageId = eventData.value;
        if (messageId && (this.messageId !== messageId)) {
            this.messageId = messageId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onEndpointDetailsChanged = function (eventData) {
        this._updateEndpointDetails(eventData.value);
    };
    SlimCoreElectronCall.prototype._onSelfParticipantRoleChanged = function (eventData) {
        var role = eventData.value;
        if (role !== this.role) {
            this._logger.info("Role for self is set to " + role);
            this.role = role;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onSelfParticipantTenantIdChanged = function (eventData) {
        var tenantId = eventData.value;
        if (tenantId !== this.tenantId) {
            this._logger.info("TenantId for self is set to " + tenantId);
            this.tenantId = tenantId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateEndpointDetails = function (rawEndpointDetails) {
        var _this = this;
        if (this._rawEndpoints === rawEndpointDetails || !rawEndpointDetails) {
            return;
        }
        try {
            this.endpoints = JSON.parse(rawEndpointDetails);
            this._rawEndpoints = rawEndpointDetails;
            this.endpoints.endpointDetails.forEach(function (endpointDetail) {
                if (endpointDetail.originalId) {
                    _this._asyncOperationHandler.resolveDeferred(ASYNC_OPERATION.CallMeBack, null, endpointDetail.originalId).catch(function (e) {
                        _this._logger.error('Failed to update call me back participant', e);
                    });
                }
            });
        }
        catch (err) {
            this._logger.info("Failed to parse raw endpoint details. Error: " + err + ", EndpointDetails: " + rawEndpointDetails);
        }
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._onMeetingDetailsChanged = function (eventData) {
        this._updateMeetingDetails(eventData.value);
    };
    SlimCoreElectronCall.prototype._updateMeetingDetails = function (rawMeetingDetails) {
        if (this._rawMeetingDetails === rawMeetingDetails) {
            return;
        }
        try {
            if (!rawMeetingDetails || _.isEmpty(rawMeetingDetails)) {
                this.meetingDetails = null;
            }
            else {
                this.meetingDetails = JSON.parse(rawMeetingDetails);
            }
            this._rawMeetingDetails = rawMeetingDetails;
            this.raiseChanged();
        }
        catch (err) {
            this._logger.warn("Failed to parse the raw meeting details. Error: " + err + ", MeetingDetails: " + rawMeetingDetails);
        }
    };
    SlimCoreElectronCall.prototype._onBroadcastMetadataChanged = function (eventData) {
        var broadcastMetadata = eventData.value;
        if (broadcastMetadata) {
            try {
                this.broadcastMetadata = JSON.parse(broadcastMetadata);
                this._logger.info('broadcast metadata updated');
                if (this.broadcastMeeting) {
                    this.broadcastMeeting.metadataChanged(broadcastMetadata);
                }
                this.raiseChanged();
            }
            catch (e) {
                this._logger.info('broadcast metadata invalid, failed to parse');
            }
        }
    };
    SlimCoreElectronCall.prototype._getParticipantByObjectId = function (slimcoreObjectId) {
        return _.find(this.participants, function (participant) { return participant.slimcoreObjectId === slimcoreObjectId; });
    };
    SlimCoreElectronCall.prototype._onQualityChanged = function (event) {
        this._logger.info("onQualityChanged: oid=" + event.objectId + ", mtype=" + event.mediaType + ", otype=" + event.objectType + ", type=" + event.type + ", value=" + event.value);
        if ((event.mediaType !== 0 && event.mediaType !== 1)) {
            return;
        }
        if (event.objectType === 4 && event.objectId !== this.slimcoreCallId) {
            return;
        }
        if (event.objectType === 13 && !this._getParticipantByObjectId(event.objectId)) {
            return;
        }
        var payload = {
            type: SlimCoreElectronCall.convertQualityEventType(event.type),
            value: SlimCoreElectronCall.convertQualityLevel(event.value),
            mediaType: SlimCoreElectronCall.convertMediaType(event.mediaType),
            isLocalSource: event.objectType === 4,
        };
        if (payload.type && payload.value) {
            if (event.mediaType === 0 && event.type === 36) {
                this._isRelayWhiteListingIssue = true;
                this.event('mediaConnectionWhitelistingWarning').raise();
                this.event('mediaConnectionFailed').raise();
            }
            else {
                this.event('callQualityChanged').raise(payload);
            }
        }
    };
    SlimCoreElectronCall.prototype.createContentSharingSession = function (contentSharingGuid, contentSharingIdentity, subject, initialContentSharingSessionState) {
        var _this = this;
        return Promise.resolve().then(function () {
            var contentSharingSlimCoreObjectId = _this._slimcoreCallHandler.createContentSharing(_this.slimcoreCallId, contentSharingGuid, contentSharingIdentity, subject, initialContentSharingSessionState);
            if (!contentSharingSlimCoreObjectId) {
                throw new Error('Failed to create ContentSharing SlimCore object');
            }
            var slimCoreContentSharing = _this._slimcoreInstance.getContentSharing(contentSharingSlimCoreObjectId);
            if (!slimCoreContentSharing) {
                throw new Error('Failed to create ContentSharing SlimCore native object');
            }
            var slimCoreElectronContentSharingSession = new SlimCoreElectronContentSharing_1.default(_this._slimcoreInstance, _this._slimcoreCallHandler, contentSharingSlimCoreObjectId, slimCoreContentSharing, _this._logger);
            _this.contentSharingSessions.push(slimCoreElectronContentSharingSession);
            _this.event('contentSharingChanged').raise();
            return slimCoreElectronContentSharingSession;
        });
    };
    SlimCoreElectronCall.prototype._onContentSharingChanged = function (eventData) {
        var _this = this;
        var contentSharingObjects = this._slimcoreCallHandler.getContentSharingSessions(this.slimcoreCallId);
        var foundNewSessions = false;
        _.remove(contentSharingObjects, function (contentSharingObjectId) {
            var callObjectId = _this._getIntProperty(_this._slimcoreCallHandler, contentSharingObjectId, 5125);
            return callObjectId !== _this.slimcoreCallId;
        });
        var contentSharingSessionsRemoved = _.remove(this.contentSharingSessions, function (session) {
            return contentSharingObjects.indexOf(session.slimCoreContentSharingObjectId) === -1;
        });
        contentSharingObjects.forEach(function (objectId) {
            var existingSession = _.find(_this.contentSharingSessions, function (session) {
                return session.slimCoreContentSharingObjectId === objectId;
            });
            if (!existingSession) {
                var slimCoreContentSharing = _this._slimcoreInstance.getContentSharing(objectId);
                if (slimCoreContentSharing) {
                    _this.contentSharingSessions.push(new SlimCoreElectronContentSharing_1.default(_this._slimcoreInstance, _this._slimcoreCallHandler, objectId, slimCoreContentSharing, _this._logger));
                    foundNewSessions = true;
                }
            }
        });
        contentSharingSessionsRemoved.forEach(function (session) {
            session.setContentSharingStatus(7);
            session.dispose();
        });
        if (foundNewSessions || contentSharingSessionsRemoved.length) {
            this.event('contentSharingChanged').raise();
        }
    };
    SlimCoreElectronCall.convertConnectionType = function (connectionType) {
        switch (connectionType) {
            case 0:
                return 0;
            case 1:
                return 1;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertTerminatedReason = function (status) {
        switch (status) {
            case 2:
                return 7;
            case 6:
                return 1;
            case 7:
                return 9;
            case 8:
                return 10;
            case 9:
                return 11;
            case 13:
            case 0:
                return 12;
            case 20:
                return 4;
            case 32:
                return 55;
            case 33:
                return 56;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertParticipantReasonToTerminatedReason = function (reason) {
        switch (reason) {
            case 0:
                return 1;
            case 1:
            case 5:
            case 6:
            case 7:
            case 43:
                return 5;
            case 2:
                return 9;
            case 3:
                return 10;
            case 4:
                return 2;
            case 8:
                return 24;
            case 9:
                return 3;
            case 10:
                return 4;
            case 12:
                return 14;
            case 11:
                return 0;
            case 13:
                return 15;
            case 14:
                return 16;
            case 15:
                return 17;
            case 16:
                return 18;
            case 17:
                return 19;
            case 18:
                return 20;
            case 19:
                return 11;
            case 20:
                return 21;
            case 21:
                return 22;
            case 22:
                return 23;
            case 25:
                return 33;
            case 26:
                return 36;
            case 27:
                return 37;
            case 30:
                return 41;
            case 28:
                return 39;
            case 31:
                return 42;
            case 29:
                return 40;
            case 32:
                return 43;
            case 33:
                return 44;
            case 34:
                return 45;
            case 35:
                return 46;
            case 36:
                return 47;
            case 37:
                return 48;
            case 38:
                return 49;
            case 39:
                return 50;
            case 40:
                return 51;
            case 41:
                return 52;
            case 42:
                return 54;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertTerminatedReasonToFailureType = function (reason, callGotConnected, mediaGotConnected) {
        switch (reason) {
            case 0:
            case 1:
            case 9:
            case 10:
            case 11:
            case 12:
            case 2:
                return 2;
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 14:
            case 36:
            case 37:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 44:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
                return 0;
            case 4:
                return callGotConnected && mediaGotConnected ? 1 : 0;
            default:
                return 2;
        }
    };
    SlimCoreElectronCall.convertStatusAndFailureReasonToParticipantReason = function (status, reason) {
        switch (status) {
            case 9:
                return 19;
            case 30:
                return 9;
            case 13:
                return 23;
            case 20:
                return 10;
            case 8:
                return 3;
            case 7:
                return 2;
            case 2:
                return SlimCoreElectronCall.convertFailureReasonToParticipantReason(reason);
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertFailureReasonToParticipantReason = function (reason) {
        switch (reason) {
            case 0:
            case 14:
            case 20:
                return 0;
            case 2:
            case 3:
            case 25:
            case 42:
                return 4;
            case 9:
                return 5;
            case 10:
            case 11:
                return 6;
            case 16:
            case 21:
                return 7;
            case 38:
                return 8;
            case 33:
            case 23:
            case 39:
            case 58:
                return 9;
            case 40:
            case 12:
            case 7:
                return 10;
            case 22:
                return 12;
            case 43:
                return 26;
            case 44:
                return 27;
            case 1:
            case 37:
                return 11;
            case 24:
                return 13;
            case 26:
                return 15;
            case 27:
                return 16;
            case 28:
                return 17;
            case 29:
                return 18;
            case 30:
                return 2;
            case 31:
                return 19;
            case 32:
                return 20;
            case 34:
                return 21;
            case 35:
                return 3;
            case 36:
                return 22;
            case 41:
                return 25;
            case 47:
                return 30;
            case 45:
                return 28;
            case 46:
                return 29;
            case 48:
                return 31;
            case 49:
                return 32;
            case 50:
                return 33;
            case 51:
                return 34;
            case 52:
                return 35;
            case 53:
                return 36;
            case 54:
                return 37;
            case 55:
                return 38;
            case 56:
                return 39;
            case 57:
                return 40;
            case 59:
                return 41;
            case 60:
                return 42;
            default:
                return 11;
        }
    };
    SlimCoreElectronCall.convertLightWeightFailureReasonToTerminatedReason = function (reason) {
        switch (reason) {
            case 0:
                return 1;
            case 2:
                return 3;
            case 3:
                return 24;
            case 4:
                return 6;
            case 1:
                return 7;
            default:
                return 7;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreDtmfTone = function (dtmfTone) {
        switch (dtmfTone) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            case 3:
                return 3;
            case 4:
                return 4;
            case 5:
                return 5;
            case 6:
                return 6;
            case 7:
                return 7;
            case 8:
                return 8;
            case 9:
                return 9;
            case 10:
                return 10;
            case 11:
                return 11;
            case 12:
                return 12;
            case 13:
                return 13;
            case 14:
                return 14;
            case 15:
                return 15;
            case 16:
                return 16;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreAudioUsageMode = function (audioUsageMode) {
        switch (audioUsageMode) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertQualityEventType = function (value) {
        switch (value) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 37:
                return 5;
            case 5:
                return 6;
            case 6:
                return 7;
            case 7:
                return 8;
            case 8:
                return 9;
            case 9:
                return 10;
            case 10:
                return 11;
            case 11:
                return 12;
            case 12:
                return 13;
            case 13:
                return 14;
            case 14:
                return 15;
            case 15:
                return 16;
            case 16:
                return 17;
            case 17:
                return 18;
            case 18:
                return 19;
            case 19:
                return 20;
            case 20:
                return 21;
            case 21:
                return 22;
            case 22:
                return 23;
            case 24:
                return 24;
            case 25:
                return 25;
            case 26:
                return 26;
            case 27:
                return 27;
            case 28:
                return 28;
            case 33:
                return 29;
            case 34:
                return 30;
            case 35:
                return 31;
            case 36:
                return 32;
            case 38:
                return 33;
            case 39:
                return 34;
            case 40:
                return 35;
            case 41:
                return 36;
            case 42:
                return 43;
            case 43:
                return 44;
            case 44:
                return 37;
            case 45:
                return 38;
            case 46:
                return 41;
            case 47:
                return 42;
            case 48:
                return 39;
            case 49:
                return 40;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertQualityLevel = function (value) {
        switch (value) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            case 3:
                return 3;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertMediaType = function (value) {
        switch (value) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            case 3:
                return 3;
            case 4:
                return 4;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.toMediaDirection = function (value) {
        switch (value) {
            case 0:
                return 0;
            case 3:
                return 1;
            case 2:
                return 2;
            case 1:
                return 3;
            case 4:
                return 4;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.toAnswerMediaType = function (value) {
        switch (value) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertMuteScope = function (value) {
        switch (value) {
            case 0:
                return 1;
            case 1:
                return 2;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreMediaPeerType = function (mediaPeerType) {
        switch (mediaPeerType) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 5;
            case 6:
                return 7;
            case 7:
                return 8;
            case 5:
                return 6;
            case 8:
                return 9;
            case 9:
                return 10;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertPushHandlingResult = function (result) {
        switch (result) {
            case 0:
                return { code: 0, fatal: true };
            case 1:
                return { code: 1, success: true };
            case 5:
                return { code: 3, fatal: true };
            case 6:
                return { code: 4 };
            case 7:
                return { code: 5, fatal: true };
            case 8:
                return { code: 6, fatal: true };
            case 11:
                return { code: 7 };
            case 12:
                return { code: 8 };
            case 13:
                return { code: 9 };
            case 14:
                return { code: 10 };
            case 17:
                return { code: 11, success: true };
            case 2:
            case 9:
            case 10:
            default:
                return { code: 2, fatal: true };
        }
    };
    Object.defineProperty(SlimCoreElectronCall.prototype, "isAudioStreamConnected", {
        get: function () {
            return this._isAudioStreamConnected;
        },
        set: function (value) {
            if (this._isAudioStreamConnected === value) {
                return;
            }
            this._isAudioStreamConnected = value;
            this._wasAudioStreamConnected = this._wasAudioStreamConnected || value;
            this.raiseChanged();
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCall.isCallConnected = function (status) {
        return status === 4;
    };
    SlimCoreElectronCall.isCallRinging = function (status) {
        switch (status) {
            case 3:
            case 21:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCall.isCallConnecting = function (status) {
        return status === 1;
    };
    SlimCoreElectronCall.isCallEarlyMedia = function (status) {
        return status === 12;
    };
    SlimCoreElectronCall.isCallInLobby = function (status) {
        return status === 31;
    };
    SlimCoreElectronCall.isCallTerminated = function (status) {
        switch (status) {
            case 7:
            case 8:
            case 9:
            case 13:
            case 6:
            case 2:
            case 20:
            case 32:
            case 33:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCall.prototype._cleanCallResources = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var participantsCleanUpPromises = _.map(_this.participants, function (p) { return SlimCoreCommon.forgetAndLog(p.cleanUpAsync(), _this._logger, 'cleanCallResources: Participant clean-up failed'); });
            return Promise.all(participantsCleanUpPromises);
        })
            .then(function () {
            if (_this._localScreenShareStream) {
                return SlimCoreCommon.forgetAndLog(_this.stopScreenSharing(), _this._logger, 'cleanCallResources: LocalScreenShare stop failed');
            }
        })
            .then(function () {
            if (_this._localVideo) {
                return SlimCoreCommon.forgetAndLog(_this._localVideo.stop(), _this._logger, 'cleanCallResources: LocalVideo stop failed');
            }
        })
            .then(function () {
            if (_this._localVideoPreview) {
                return SlimCoreCommon.forgetAndLog(_this._localVideoPreview.stop(), _this._logger, 'cleanCallResources: LocalVideoPreview stop failed');
            }
        })
            .then(function () {
            if (_this.lightWeightMeeting) {
                _this._removeLightWeightMeeting();
            }
            _this.contentSharingSessions.forEach(function (session) {
                session.setContentSharingStatus(7);
                session.dispose();
            });
            _this.contentSharingSessions = [];
        })
            .then(function () { return _this.dispose(); }, function (e) { return _this.dispose(); });
    };
    SlimCoreElectronCall.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronCall.dispose()');
        if (this.subscriptions.length) {
            this._logger.warn(this.subscriptions.length + " subscriptions will be lost");
        }
        if (this._slimCoreElectronRemoteManager) {
            this._slimCoreElectronRemoteManager.dispose();
        }
        this.mediaStreams[0] = [];
        this.mediaStreams[1] = [];
        if (this._localScreenShareStream) {
            this._localScreenShareStream.dispose();
            this._localScreenShareStream = null;
        }
        if (this._localVideo) {
            this._localVideo.dispose();
            this._localVideo = null;
        }
        if (this._localVideoPreview) {
            this._localVideoPreview.dispose();
            this._localVideoPreview = null;
        }
        if (this._localVideoContainer) {
            this._localVideoContainer = null;
        }
        if (this.screenSharingControl) {
            this.screenSharingControl.dispose();
            this.screenSharingControl = null;
        }
        if (this.holographicInteractionControl) {
            this.holographicInteractionControl.dispose();
            this.holographicInteractionControl = null;
        }
        if (this._dataChannel) {
            this._dataChannel.dispose();
            this._dataChannel = null;
        }
        if (this._dataChannelUsers) {
            this._dataChannelUsers = null;
        }
        this.participants.forEach(function (p) { return p.dispose(); });
        _super.prototype.dispose.call(this);
        this.slimcoreCallId = 0;
    };
    return SlimCoreElectronCall;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronCall;
var _a;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreElectronVideoRenderer_1 = __webpack_require__(22);
var SlimCoreElectronLocalVideoPreview = (function (_super) {
    __extends(SlimCoreElectronLocalVideoPreview, _super);
    function SlimCoreElectronLocalVideoPreview(_currentTarget, _deviceManager, settings, logger, _videoType, _options) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalVideoPreview[" + _this._previewVideoObjectId + "]"; }), settings) || this;
        _this._currentTarget = _currentTarget;
        _this._deviceManager = _deviceManager;
        _this._videoType = _videoType;
        _this._options = _options;
        _this.isStreaming = false;
        _this.isAvailable = true;
        _this._previewVideoObjectId = 0;
        _this._startVideo = function () {
            var label = '';
            var path = '';
            if (_this._videoType !== 1) {
                var selectedCamera = _this._deviceManager.getSelectedCamera();
                if (!selectedCamera) {
                    throw new Error('No camera selected to start video on');
                }
                _this._logger.info("Starting local video using camera: " + JSON.stringify(selectedCamera));
                _this._currentCamera = selectedCamera;
                label = selectedCamera.label;
                path = selectedCamera.id;
            }
            return _this._deviceManager.getPreviewVideo(_this._videoType, label, path)
                .then(function (videoObjectId) {
                return _this._deviceManager.getRendererBindingManager().acquire(_this, videoObjectId)
                    .then(function (binding) {
                    _this._previewVideoObjectId = videoObjectId;
                    _this._videoBinding = binding;
                    var options = _this._options || {
                        scalingMode: 1,
                        transparent: false,
                    };
                    _this._createVideoRenderer(_this._currentTarget, options, true);
                });
            });
        };
        _this._stopVideo = function () {
            if (_this._previewVideoObjectId && _this._videoBinding) {
                _this._logger.info('Waiting for VideoBinding to be released');
                _this._disposeVideoRenderer();
                var releasePromise = _this._deviceManager.getRendererBindingManager().release(_this, _this._previewVideoObjectId);
                _this._previewVideoObjectId = 0;
                _this._videoBinding = null;
                return releasePromise;
            }
        };
        _this._logger.log('constructor');
        if (_this._videoType !== 1) {
            _this.registerCallback(_this._deviceManager.on('devicesChanged', function () { return _this._devicesChanged(); }));
        }
        return _this;
    }
    SlimCoreElectronLocalVideoPreview.prototype._devicesChanged = function () {
        var _this = this;
        this._logger.info('Devices changed - checking if video needs to be restarted');
        var selectedDevices = this._deviceManager.getSelectedDevices();
        if (!this._currentTarget) {
            this._logger.warn('Current VideoTarget not set. Ignoring request');
            return;
        }
        if (this._currentCamera && selectedDevices.camera && selectedDevices.camera !== this._currentCamera.id) {
            this._logger.info("Changing video device to " + selectedDevices.camera);
            this.stop()
                .then(function () { return _this.startVideoAsync(); })
                .catch(function (e) {
                _this._logger.error("Caught error while trying to stopstart local video after device change. Error: " + e);
            });
        }
    };
    SlimCoreElectronLocalVideoPreview.prototype.startVideoAsync = function () {
        var _this = this;
        this._logger.info('startVideoAsync called');
        if (this._currentStartPromise) {
            this._logger.info("Start requested but pending start exists. Returning previous promise");
            return this._currentStartPromise;
        }
        var initialPromise;
        if (this._currentStopPromise) {
            this._logger.info("Waiting for stop promise to finish.");
            initialPromise = this._currentStopPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStartPromise = initialPromise
            .then(this._startVideo)
            .catch(function (error) {
            _this._logger.error("Failed to start Local Video. Err: " + error);
            _this._currentStartPromise = null;
            _this.stop();
            throw error;
        });
        return this._currentStartPromise;
    };
    SlimCoreElectronLocalVideoPreview.prototype.stop = function () {
        var _this = this;
        this._logger.info('stop called');
        var always = function () {
            _this._currentStopPromise = null;
            _this._currentStartPromise = null;
        };
        if (this._currentStopPromise) {
            this._logger.info("Stop requested but pending stop exists. Returning previous promise");
            return this._currentStopPromise;
        }
        var initialPromise;
        if (this._currentStartPromise) {
            this._logger.info('Waiting for start promise to finish.');
            initialPromise = this._currentStartPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStopPromise = initialPromise
            .then(this._stopVideo)
            .then(always, function (error) {
            _this._logger.error("Failed to stop LocalVideo. Error: " + error);
            always();
            throw error;
        });
        return this._currentStopPromise;
    };
    SlimCoreElectronLocalVideoPreview.prototype.dispose = function () {
        var _this = this;
        this.stop()
            .then(function () { _this._currentTarget = null; });
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronLocalVideoPreview;
}(SlimCoreElectronVideoRenderer_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronLocalVideoPreview;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronRemoteStream_1 = __webpack_require__(13);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronRemoteStreamManager = (function (_super) {
    __extends(SlimCoreElectronRemoteStreamManager, _super);
    function SlimCoreElectronRemoteStreamManager(_callHandler, logger, _slimcoreInstance, _settings, participantObjectId, _streams) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronRemoteStreamManager[" + _this._slimcoreParticipantObjectId + "]"; })) || this;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._settings = _settings;
        _this._streams = {};
        _this._logger.log('constructor');
        _this._streams[0] = [];
        _this._streams[1] = [];
        if (participantObjectId) {
            _this._streams = _streams;
            _this._slimcoreParticipantObjectId = participantObjectId;
            _this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 5169, _this._slimcoreParticipantObjectId, function (data) { return _this._onVideoCountChanged(); }), true);
            _this.registerCallback(SlimCoreCommon.onRemoteVideosCountChanged(_this._callHandler, _this._slimcoreParticipantObjectId, function (data) { return _this._onVideoCountChanged(); }), true);
            _this._onVideoCountChanged();
        }
        else {
            throw new Error('SlimCoreElectronRemoteStreamManager: participantObjectId cannot be null or zero');
        }
        return _this;
    }
    SlimCoreElectronRemoteStreamManager.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._callHandler, this._slimcoreParticipantObjectId, property, fallback);
    };
    SlimCoreElectronRemoteStreamManager.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._callHandler, this._slimcoreParticipantObjectId, property, fallback);
    };
    SlimCoreElectronRemoteStreamManager.prototype._onVideoCountChanged = function (eventData) {
        var _this = this;
        var videoObjectIds = this._callHandler.callGetParticipantVideos(this._slimcoreParticipantObjectId);
        if (!videoObjectIds)
            return;
        var videoObjectsByType = {};
        videoObjectsByType[0] = [];
        videoObjectsByType[1] = [];
        videoObjectIds.forEach(function (videoObjectId) {
            var mediaType = _this._getIntProperty(_this._callHandler, videoObjectId, 537);
            var mediaStatus = _this._getIntProperty(_this._callHandler, videoObjectId, 521);
            if (mediaType === 2)
                return;
            videoObjectsByType[mediaType].push({
                videoObjectId: videoObjectId,
                videoType: mediaType,
                videoStatus: mediaStatus,
            });
        });
        this._handleVideoCountChanged(0, videoObjectsByType[0]);
        this._handleVideoCountChanged(1, videoObjectsByType[1]);
        this.raiseChanged();
    };
    SlimCoreElectronRemoteStreamManager.prototype._handleVideoCountChanged = function (videoType, videoObjects) {
        var _this = this;
        var streamType = SlimCoreElectronRemoteStreamManager.SlimcoreVideoTypeToStreamType(videoType);
        var streamsOfType = this._streams[streamType];
        var removals = _.filter(streamsOfType, function (s) { return !_.some(videoObjects, function (v) { return v.videoObjectId === s.id; }); });
        _.each(removals, function (stream) {
            _this._logger.info("_handleVideoCountChanged: removing stream " + stream.id + " (stream type: " + streamType + ")");
            _.remove(streamsOfType, stream);
            stream.stop()
                .then(function () { return SlimCoreCommon.forgetAndLog(stream.cleanUpAsync(), _this._logger, 'Failed to clean-up remote video stream'); })
                .then(function () { return stream.dispose(); });
        });
        _.each(videoObjects, function (video) {
            if (!_.some(streamsOfType, function (s) { return s.id === video.videoObjectId; })) {
                _this._logger.info("_handleVideoCountChanged: adding stream " + video.videoObjectId + " (stream type: " + streamType + ")");
                var newStream = new SlimCoreElectronRemoteStream_1.default(video.videoObjectId, streamType, _this._callHandler, _this._logger, _this._slimcoreInstance, _this._settings);
                _this._streams[streamType].push(newStream);
                newStream.changed(function () { return _this.raiseChanged(); });
            }
        });
    };
    SlimCoreElectronRemoteStreamManager.prototype.cleanUpAsync = function () {
        var _this = this;
        return Promise.all(_.flatMap(_.values(this._streams), function (streams) { return _.map(streams, function (s) { return SlimCoreCommon.forgetAndLog(s.cleanUpAsync(), _this._logger, "cleanUpAsync: Remote stream " + s.id + " clean-up failed"); }); }))
            .then(_.noop);
    };
    SlimCoreElectronRemoteStreamManager.prototype.dispose = function () {
        _.each(_.values(this._streams), function (_streams) { return _.each(_streams, function (s) { return s.dispose(); }); });
        this._streams[0] = [];
        this._streams[1] = [];
        this._slimcoreParticipantObjectId = 0;
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronRemoteStreamManager.SlimcoreVideoTypeToStreamType = function (videoType) {
        switch (videoType) {
            case 1:
                return 1;
            case 0:
                return 0;
            default:
                return undefined;
        }
    };
    return SlimCoreElectronRemoteStreamManager;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronRemoteStreamManager;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronCall_1 = __webpack_require__(4);
var SlimCoreElectronRemoteStreamManager_1 = __webpack_require__(6);
var SlimCoreCommon = __webpack_require__(0);
var SOURCE_ID_ANY = 0xFFFFFFFE;
var validStateTransitions = (_a = {},
    _a[0] = [1, 2, 3, 4, 6, 7, 5],
    _a[1] = [2, 3, 4, 6, 7, 0],
    _a[2] = [0, 1, 3, 4, 6, 7],
    _a[3] = [2, 1, 4, 5, 0, 7],
    _a[4] = [0],
    _a[5] = [3, 4, 0],
    _a[6] = [3, 4, 0],
    _a[7] = [3, 4, 0],
    _a);
var SlimCoreElectronCallParticipant = (function (_super) {
    __extends(SlimCoreElectronCallParticipant, _super);
    function SlimCoreElectronCallParticipant(mri, _callHandler, logger, _slimcoreInstance, _settings, attachParticipantId) {
        if (attachParticipantId === void 0) { attachParticipantId = 0; }
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronCallParticipant[" + _this.slimcoreObjectId + "::" + _this.id + "]"; })) || this;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._settings = _settings;
        _this.streams = (_a = {},
            _a[0] = [],
            _a[1] = [],
            _a);
        _this.voiceLevel = 0;
        _this.isServerMuted = false;
        _this.dominantSpeakerRank = 0;
        _this.state = 0;
        _this.lightWeightMeetingRole = 0;
        _this.id = null;
        _this.role = null;
        _this.tenantId = null;
        _this.balanceUpdates = {};
        _this._logger.log('constructor');
        _this.id = SlimCoreCommon.stripMriAliases(mri);
        _this.participantCapabilities = SlimCoreElectronCallParticipant.convertCapabilities(-1);
        if (attachParticipantId && attachParticipantId !== 0) {
            _this.attachSlimcoreObjectId(attachParticipantId);
        }
        return _this;
        var _a;
    }
    SlimCoreElectronCallParticipant.prototype.attachSlimcoreObjectId = function (_attachParticipantId) {
        var _this = this;
        if (this.slimcoreObjectId && this.slimcoreObjectId !== 0) {
            this._logger.debug('Attach called on existing participant');
            return;
        }
        this.slimcoreObjectId = _attachParticipantId;
        this.displayName = this.getStrProperty(924);
        this.role = this.getStrProperty(5376);
        this.tenantId = this.getStrProperty(5380);
        var capabilities = this.getIntProperty(5105, -1);
        this.participantCapabilities = SlimCoreElectronCallParticipant.convertCapabilities(capabilities);
        this.acceptedBy = this.getStrProperty(5316);
        this.isServerMuted = !!this.getIntProperty(5349);
        this._slimCoreElectronRemoteStreamManager = new SlimCoreElectronRemoteStreamManager_1.default(this._callHandler, this._logger, this._slimcoreInstance, this._settings, this.slimcoreObjectId, this.streams);
        this._slimCoreElectronRemoteStreamManager.changed(function () { return _this.raiseChanged(); });
        this._updateEndpointDetails(this.getStrProperty(5024));
        this._onParticipantPropertyChanged(949, function (data) { return _this._onStatusChanged(data); });
        this._onParticipantPropertyChanged(5349, function (data) { return _this._onIsServerMuted(data); });
        this._onParticipantPropertyChanged(953, function (data) { return _this._onFailureReasonChange(data); });
        this._onParticipantPropertyChanged(5357, function (data) { return _this._onAdmitFailureReasonChange(data); });
        this._onParticipantPropertyChanged(4549, function (data) { return _this._onIsActiveSpeakerChanged(data); });
        this._onParticipantPropertyChanged(4553, function (data) { return _this._onDominantSpeakerRankChanged(data); });
        this._onParticipantPropertyChanged(5024, function (data) { return _this._onEndpointDetailsChanged(data); });
        this._onParticipantPropertyChanged(5105, function (data) { return _this._onCapabilitiesChanged(data); });
        this._onParticipantPropertyChanged(5316, function (data) { return _this._onAcceptedByChanged(data); });
        this._onParticipantPropertyChanged(5376, function (data) { return _this._onRoleChanged(data); });
        this._onParticipantPropertyChanged(5380, function (data) { return _this._onTenantIdChanged(data); });
        this._onParticipantPropertyChanged(4593, function (data) { return _this._onParticipantLightWeightMeetingRoleChanged(data); });
        this._onParticipantPropertyChanged(4589, function (data) { return _this._onParticipantContentSharingRoleChanged(data); });
        this._onParticipantPropertyChanged(5396, function (data) { return _this._onBalanceUpdateChanged(data); });
        this._onParticipantPropertyChanged(5404, function (data) { return _this._onParticipantDiagnosticsCodeChanged(data); });
        var participantStatus = this.getIntProperty(949);
        this._onStatusChanged({
            objectType: 13,
            objectId: this.slimcoreObjectId,
            propKey: 949,
            value: participantStatus,
        });
        var lightWeightMeetingRole = this.getIntProperty(4593, 0);
        this._onParticipantLightWeightMeetingRoleChanged({
            objectType: 13,
            objectId: this.slimcoreObjectId,
            propKey: 4593,
            value: lightWeightMeetingRole,
        });
        var contentSharingRole = this.getIntProperty(4589, 0);
        this._onParticipantContentSharingRoleChanged({
            objectType: 13,
            objectId: this.slimcoreObjectId,
            propKey: 4589,
            value: contentSharingRole,
        });
    };
    SlimCoreElectronCallParticipant.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._callHandler, this.slimcoreObjectId, property, fallback);
    };
    SlimCoreElectronCallParticipant.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._callHandler, this.slimcoreObjectId, property, fallback);
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantPropertyChanged = function (propKey, listener) {
        this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(this._slimcoreInstance, propKey, this.slimcoreObjectId, listener), true);
    };
    SlimCoreElectronCallParticipant.prototype._onEndpointDetailsChanged = function (eventData) {
        this._updateEndpointDetails(eventData.value);
    };
    SlimCoreElectronCallParticipant.prototype._onCapabilitiesChanged = function (eventData) {
        var caps = SlimCoreElectronCallParticipant.convertCapabilities(eventData.value);
        if (caps !== this.participantCapabilities) {
            this._logger.info("Computed capabilities: " + JSON.stringify(caps));
            this.participantCapabilities = caps;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onAcceptedByChanged = function (eventData) {
        var acceptedEndpoint = eventData.value;
        if (acceptedEndpoint !== this.acceptedBy) {
            this._logger.info("Accepted by is set to " + acceptedEndpoint);
            this.acceptedBy = acceptedEndpoint;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onRoleChanged = function (eventData) {
        var role = eventData.value;
        if (role !== this.role) {
            this._logger.info("Role is set to " + role);
            this.role = role;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onTenantIdChanged = function (eventData) {
        var tenantId = eventData.value;
        if (tenantId !== this.tenantId) {
            this._logger.info("TenantId is set to " + tenantId);
            this.tenantId = tenantId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype.getSourceIdForMediaType = function (mediaType) {
        var sourceId = -1;
        try {
            if (this.endpoints) {
                outerloop: for (var _i = 0, _a = this.endpoints.endpointDetails; _i < _a.length; _i++) {
                    var endpointDetail = _a[_i];
                    var endpointDetailWithStreams = endpointDetail;
                    if (endpointDetailWithStreams !== null && endpointDetailWithStreams.mediaStreams !== undefined) {
                        for (var _b = 0, _c = endpointDetailWithStreams.mediaStreams; _b < _c.length; _b++) {
                            var stream = _c[_b];
                            if (SlimCoreCommon.mapMediaTypeStringToMediaType(stream.type) === mediaType) {
                                sourceId = stream.sourceId;
                                break outerloop;
                            }
                        }
                    }
                    else {
                        sourceId = SOURCE_ID_ANY;
                    }
                }
            }
        }
        catch (error) {
            this._logger.error("getSourceIdForMediaType caught exception error=" + error);
        }
        return sourceId;
    };
    SlimCoreElectronCallParticipant.prototype._updateEndpointDetails = function (rawEndpointDetails) {
        if (this._rawEndpoints === rawEndpointDetails || !rawEndpointDetails) {
            return;
        }
        try {
            this.endpoints = JSON.parse(rawEndpointDetails);
            this._rawEndpoints = rawEndpointDetails;
            this._logger.info("Updating endpointDetails");
        }
        catch (e) {
            this._logger.warn("Failed to parse call member endpointDetails - " + e + " -" + rawEndpointDetails);
            return;
        }
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onStatusChanged = function (data) {
        this._logger.info("Status changed " + data.value);
        var failure = this.getIntProperty(953);
        this.setState(SlimCoreElectronCallParticipant.convertParticipantStatus(data.value), SlimCoreElectronCall_1.default.convertStatusAndFailureReasonToParticipantReason(data.value, failure));
        if (this._admitParticipantDeffered && SlimCoreElectronCallParticipant.isParticipantActive(this.state)) {
            this._admitParticipantDeffered.resolve();
            this._admitParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantLightWeightMeetingRoleChanged = function (data) {
        this._logger.info("Light weight meeting role changed " + data.value);
        this.setLightWeightMeetingRole(SlimCoreElectronCallParticipant.convertLightWeightMeetingRole(data.value));
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantContentSharingRoleChanged = function (data) {
        this._logger.info("Content sharing role changed " + data.value);
        this.setContentSharingRole(SlimCoreElectronCallParticipant.convertContentSharingRole(data.value));
    };
    SlimCoreElectronCallParticipant.prototype._onFailureReasonChange = function (data) {
        this._logger.info("Failure reason changed " + data.value);
        var state = this.getIntProperty(949);
        this.setState(SlimCoreElectronCallParticipant.convertParticipantStatus(state), SlimCoreElectronCall_1.default.convertFailureReasonToParticipantReason(data.value));
    };
    SlimCoreElectronCallParticipant.prototype._onAdmitFailureReasonChange = function (data) {
        this._logger.info("Admit failure reason changed " + data.value);
        var reason = SlimCoreElectronCall_1.default.convertFailureReasonToParticipantReason(data.value);
        if (this._admitParticipantDeffered) {
            this._admitParticipantDeffered.reject(reason);
            this._admitParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype._onIsActiveSpeakerChanged = function (data) {
        if (this.voiceLevel === data.value) {
            return;
        }
        this.voiceLevel = data.value;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onIsServerMuted = function (data) {
        var isServerMuted = !!data.value;
        if (isServerMuted !== this.isServerMuted) {
            this.isServerMuted = isServerMuted;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onDominantSpeakerRankChanged = function (data) {
        if (this.dominantSpeakerRank === data.value) {
            return;
        }
        this._logger.info("DominantSpeakerRank changing from " + this.dominantSpeakerRank + " to " + data.value);
        this.dominantSpeakerRank = data.value;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onBalanceUpdateChanged = function (eventData) {
        var rawBalanceUpdate = eventData.value;
        if (_.isEmpty(rawBalanceUpdate)) {
            if (!_.isEmpty(this.balanceUpdates)) {
                this.balanceUpdates = {};
                this.raiseChanged();
            }
            return;
        }
        try {
            var balanceUpdate = JSON.parse(rawBalanceUpdate);
            if (_.isEqual(this.balanceUpdates[balanceUpdate.sender.endpointId], balanceUpdate)) {
                return;
            }
            this.balanceUpdates[balanceUpdate.sender.endpointId] = balanceUpdate;
        }
        catch (e) {
            this._logger.warn("Failed to parse call member balanceUpdate - " + e + " -" + rawBalanceUpdate);
            return;
        }
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantDiagnosticsCodeChanged = function (eventData) {
        this._updateDiagnosticsCode(eventData.value);
    };
    SlimCoreElectronCallParticipant.prototype._updateDiagnosticsCode = function (diagnosticsCode) {
        if (this._rawCallEndDiagnosticsInfo === diagnosticsCode || !diagnosticsCode) {
            return;
        }
        try {
            this.callEndDiagnosticsInfo = JSON.parse(diagnosticsCode);
            this._rawCallEndDiagnosticsInfo = diagnosticsCode;
            this.raiseChanged();
        }
        catch (err) {
            this._logger.info("Failed to parse raw diagnostis details. Error: " + err + ", diagnosticsCode: " + diagnosticsCode);
        }
    };
    SlimCoreElectronCallParticipant.prototype.setLightWeightMeetingRole = function (role) {
        if (this.lightWeightMeetingRole === role) {
            return;
        }
        this.lightWeightMeetingRole = role;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype.setContentSharingRole = function (role) {
        if (this.contentSharingRole === role) {
            return;
        }
        this.contentSharingRole = role;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype.setState = function (state, reason) {
        if (this.state === state) {
            return;
        }
        var validNextStates = validStateTransitions[this.state];
        var isValidNextState = validNextStates.indexOf(state) >= 0;
        if (!isValidNextState) {
            throw new Error("Invalid state transition " + this.state + " -> " + state + " attempted for participant " + this.id);
        }
        this._logger.info("Participant setState: " + this.state + " -> " + state + " reason: " + this.stateReason + " -> " + reason);
        this.state = state;
        this.stateReason = reason;
        if (this.state === 3) {
            var endpointDetails = this.getStrProperty(5024);
            this._updateEndpointDetails(endpointDetails);
        }
        else if (this.state === 4) {
            var diagnostics = this.getStrProperty(5404);
            this._updateDiagnosticsCode(diagnostics);
        }
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.convertParticipantStatus = function (status) {
        if (SlimCoreElectronCall_1.default.isCallRinging(status)) {
            return 2;
        }
        else if (SlimCoreElectronCall_1.default.isCallTerminated(status)) {
            return 4;
        }
        else if (SlimCoreElectronCall_1.default.isCallConnected(status)) {
            return 3;
        }
        else if (SlimCoreElectronCall_1.default.isCallConnecting(status)) {
            return 1;
        }
        else if (SlimCoreElectronCall_1.default.isCallEarlyMedia(status)) {
            return 6;
        }
        else if (SlimCoreElectronCall_1.default.isCallInLobby(status)) {
            return 7;
        }
        else if (status === 5 || status === 10) {
            return 5;
        }
        return 0;
    };
    SlimCoreElectronCallParticipant.isParticipantActive = function (state) {
        switch (state) {
            case 3:
            case 6:
            case 5:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCallParticipant.convertLightWeightMeetingRole = function (role) {
        switch (role) {
            case 1:
                return 1;
            default:
                return 0;
        }
    };
    SlimCoreElectronCallParticipant.convertContentSharingRole = function (role) {
        switch (role) {
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return 0;
        }
    };
    SlimCoreElectronCallParticipant.convertCapabilities = function (caps) {
        return {
            canConference: !!(caps & 1),
            canShareScreen: !!(caps & 2),
            canMerge: !!(caps & 4),
        };
    };
    SlimCoreElectronCallParticipant.prototype.addAdmitParticipantDeferred = function (admitParticipantDeffered) {
        this._admitParticipantDeffered = admitParticipantDeffered;
    };
    SlimCoreElectronCallParticipant.prototype.rejectAdmitParticipantDeferred = function (terminatedReason) {
        if (this._admitParticipantDeffered) {
            this._admitParticipantDeffered.reject(terminatedReason);
            this._admitParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype.cleanUpAsync = function () {
        return this._slimCoreElectronRemoteStreamManager.cleanUpAsync();
    };
    SlimCoreElectronCallParticipant.prototype.dispose = function () {
        if (this._slimCoreElectronRemoteStreamManager) {
            this._slimCoreElectronRemoteStreamManager.dispose();
        }
        this.streams[0] = [];
        this.streams[1] = [];
        if (this._admitParticipantDeffered) {
            this._admitParticipantDeffered.resolve();
            this._admitParticipantDeffered = null;
        }
        this.slimcoreObjectId = 0;
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronCallParticipant;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronCallParticipant;
var _a;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var SlimCoreCommon = __webpack_require__(0);
var guid_1 = __webpack_require__(19);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronCall_1 = __webpack_require__(4);
var SlimCoreUwpEventWrapper_1 = __webpack_require__(23);
var SlimCoreElectronCallRegistry = (function (_super) {
    __extends(SlimCoreElectronCallRegistry, _super);
    function SlimCoreElectronCallRegistry(logger, _slimcoreInstance, _deviceManager, _settings, _appHooks) {
        var _this = _super.call(this, logger.createChild('CallRegistry', true)) || this;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._deviceManager = _deviceManager;
        _this._settings = _settings;
        _this._appHooks = _appHooks;
        _this.calls = [];
        _this._slimcoreCalls = {};
        _this._loginPromiseDefered = async.defer();
        _this._logoutPromiseDefered = async.defer();
        _this.slimcoreInstanceStarted = false;
        _this._logger.log('constructor');
        _this._slimcoreInstance.setMaxListeners(0);
        return _this;
    }
    Object.defineProperty(SlimCoreElectronCallRegistry.prototype, "loginPromise", {
        get: function () {
            return this._loginPromiseDefered.promise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCallRegistry.prototype, "logoutPromise", {
        get: function () {
            return this._logoutPromiseDefered.promise;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCallRegistry.prototype._initCall = function (call, callObjectId) {
        call.callerMri = SlimCoreCommon.stripMriAliases(this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5036));
        if (!call.callerMri) {
            this._logger.error('Unable to get callerMRI from call object. Ignoring incoming call');
            return;
        }
        var callQueueInfo = this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5076);
        call.transferorMri = SlimCoreCommon.stripMriAliases(this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5064));
        call.transferorDisplayName = this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5084);
        call.transferorType = this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5080);
        call.onBehalfOfMri = SlimCoreCommon.stripMriAliases(this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5060));
        call.callQueueInfo = callQueueInfo && JSON.parse(callQueueInfo).callQueueInfo;
        call.incomingCallType = this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5056);
        call.isIncomingOneOnOneVideoCall = (this._getIntProperty(this._slimcoreCallHandler, callObjectId, 5073) === 1);
        call.messageId = this._getStrProperty(this._slimcoreCallHandler, callObjectId, 5156);
        call.attachSlimCoreCallObject(callObjectId);
        if (this._getIntProperty(this._slimcoreCallHandler, callObjectId, 5161) === 21) {
            call.setCallStateNotified();
        }
    };
    SlimCoreElectronCallRegistry.prototype._incomingCallMonitor = function (data) {
        if (!(data.propKey === 5161 && data.value === 21)) {
            return;
        }
        var callId = this._getStrProperty(this._slimcoreCallHandler, data.objectId, 868);
        var localParticipantId = this._getStrProperty(this._slimcoreCallHandler, data.objectId, 5280);
        try {
            this.getCall(callId, localParticipantId);
        }
        catch (error) {
            this._logger.warn("getCall failed to find the call(" + callId + "): " + error);
        }
    };
    SlimCoreElectronCallRegistry.prototype.init = function (skypeIdentity) {
        var _this = this;
        var accountStatusCallback = null;
        if (!this.slimcoreInstanceStarted) {
            this._slimcoreInstance.start(true);
            this._logger.info('init: starting slimcoreInstance');
            this.slimcoreInstanceStarted = true;
        }
        else {
            this._logger.info('init: skipping slimcoreInstance start, because it was already started');
        }
        this._skypeIdentity = skypeIdentity;
        this._skypeIdentity.tokenProvider()
            .then(function (token) {
            _this._logger.info('init: setting up stack callbacks');
            accountStatusCallback = SlimCoreCommon.onPropertyChanged(_this._slimcoreInstance, 281, function (eventData) {
                if (eventData.value === 7) {
                    if (_this._settings.platform === SlimCoreCommon.PlatformType.Uwp) {
                        _this._slimcoreCallHandler = SlimCoreCommon.wrap(new SlimCoreUwpEventWrapper_1.UwpCallHandlerWrapped(_this._slimcoreInstance.createCallInterface()).objectAsWrapped);
                    }
                    else {
                        _this._slimcoreCallHandler = SlimCoreCommon.wrap(_this._slimcoreInstance.createCallInterface());
                    }
                    _this._logger.info('init: createCallInterface returned');
                    _this._loginPromiseDefered.resolve(_this._slimcoreCallHandler);
                    if (accountStatusCallback) {
                        accountStatusCallback.dispose();
                        accountStatusCallback = null;
                    }
                    _this._hookCallRegistryEvents();
                }
            });
            SlimCoreCommon.onPropertyChanged(_this._slimcoreInstance, 5161, function (eventData) { return _this._incomingCallMonitor(eventData); });
            _this._initializeSlimCore(_this._slimcoreInstance, _this._skypeIdentity, token);
            _this._logger.info('init: initialize returned');
        })
            .catch(function (err) {
            _this._loginPromiseDefered.reject(err);
        });
        return this.loginPromise.then(_.noop);
    };
    SlimCoreElectronCallRegistry.prototype.uninit = function () {
        var _this = this;
        var accountStatusCallback = null;
        try {
            this._logger.info('uninit: setting up stack callbacks');
            accountStatusCallback = SlimCoreCommon.onPropertyChanged(this._slimcoreInstance, 281, function (eventData) {
                if (eventData.value === 1) {
                    _this._logoutPromiseDefered.resolve();
                    if (accountStatusCallback) {
                        accountStatusCallback.dispose();
                        accountStatusCallback = null;
                    }
                }
            });
            this._logger.info('uninit(): calling slimcore.logout()');
            this._slimcoreInstance.logout();
        }
        catch (e) {
            this._logger.error('slimcore.logout() failed.', e);
            this._logoutPromiseDefered.reject(e);
        }
        this.slimcoreInstanceStarted = false;
        return this.logoutPromise.then(_.noop);
    };
    SlimCoreElectronCallRegistry.prototype.createCall = function (threadId, callId, localParticipantId) {
        var _this = this;
        this._logger.info('createCall');
        if (this._slimcoreCallHandler === null || this._slimcoreCallHandler === undefined) {
            throw new Error('Stack not initialized yet');
        }
        if (this._skypeIdentity.sipUri) {
            this.setAdditionalIdentities('2:' + this._skypeIdentity.sipUri);
        }
        this._skypeIdentity.tokenProvider().then(function (token) {
            if (token && (token !== _this._lastSkypeToken)) {
                _this._logger.info('Updating Skype Token...');
                _this._lastSkypeToken = token;
                _this._slimcoreInstance.updateSkypeToken(token);
                _this._logger.info('Token update complete');
            }
        });
        if (!callId) {
            callId = guid_1.default.generate();
        }
        var call = new SlimCoreElectronCall_1.default(this, this._slimcoreCallHandler, this._slimcoreInstance, this._deviceManager, this._settings, this._logger, this._appHooks, threadId, callId, this._skypeIdentity, localParticipantId);
        this.calls.push(call);
        this.event('callAdded').raise(call);
        this.raiseChanged();
        return call;
    };
    SlimCoreElectronCallRegistry.prototype.getCall = function (callId, localParticipantId) {
        var _this = this;
        this._logger.info("getCall(" + callId + ")");
        if (this._slimcoreCallHandler === null || this._slimcoreCallHandler === undefined) {
            throw new Error('Stack not initialized yet');
        }
        var call = _.find(this.calls, function (call) { return (call.callId === callId && call.participantId === localParticipantId); });
        if (call) {
            if (call.state === 8) {
                this._initCall(call, call.slimcoreCallId);
            }
            else {
                this._logger.warn("Call Registry already has an entry for SlimCore call " + call.slimcoreCallId);
            }
            return call;
        }
        var slimCoreCallObjectId = _.find(this._slimcoreCallHandler.getActiveCalls(), function (callObjectId) { return (_this._slimcoreCallHandler.getStrProperty(callObjectId, 868) === callId) &&
            (_this._slimcoreCallHandler.getStrProperty(callObjectId, 5280) === localParticipantId); });
        if (!slimCoreCallObjectId) {
            throw new Error("call(" + callId + ") does not exist/ is not active");
        }
        var threadId = this._slimcoreCallHandler.getStrProperty(slimCoreCallObjectId, 5176);
        call = new SlimCoreElectronCall_1.default(this, this._slimcoreCallHandler, this._slimcoreInstance, this._deviceManager, this._settings, this._logger, this._appHooks, threadId, callId, this._skypeIdentity, localParticipantId);
        this._initCall(call, slimCoreCallObjectId);
        this.calls.push(call);
        this.event('callAdded').raise(call);
        this.raiseChanged();
        return call;
    };
    SlimCoreElectronCallRegistry.prototype.deleteCall = function (call, final) {
        var _this = this;
        if (final === void 0) { final = true; }
        this._logger.info("deleteCall " + call.callId);
        var deletedCalls = false;
        _.each(_.remove(this.calls, function (c) { return c === call; }), function (c) {
            deletedCalls = true;
            if (final) {
                _this.event('callRemoved').raise(call);
                c.dispose();
            }
        });
        if (deletedCalls) {
            this.raiseChanged();
            return true;
        }
        return false;
    };
    SlimCoreElectronCallRegistry.prototype.debugInformation = function (call) {
        var content = this._slimcoreCallHandler.getDebugInformation('/callinfo');
        if (call && (!content || _.isEmpty(content))) {
            content = 'CallInformation\n * CallId=' + call.callId;
        }
        return Promise.resolve(content);
    };
    SlimCoreElectronCallRegistry.prototype.onCallStarted = function (callId, call) {
        this._logger.info("onCallStarted " + call.callId);
        if (!this._slimcoreCalls.hasOwnProperty(callId.toString())) {
            this._slimcoreCalls[callId] = call;
        }
    };
    SlimCoreElectronCallRegistry.prototype.onCallEnded = function (callId) {
        this._logger.info("onCallEnded " + callId);
        if (this._slimcoreCalls.hasOwnProperty(callId.toString())) {
            delete this._slimcoreCalls[callId];
        }
    };
    SlimCoreElectronCallRegistry.prototype.updateSkypeToken = function (skypeToken) {
        this._slimcoreInstance.updateSkypeToken(skypeToken);
    };
    SlimCoreElectronCallRegistry.prototype.setAdditionalIdentities = function (identities) {
        this._slimcoreInstance.setAdditionalIdentities(identities);
    };
    SlimCoreElectronCallRegistry.prototype._initializeSlimCore = function (platform, skypeIdentity, token) {
        try {
            this._logger.info('ctor: initializing stack!');
            platform.login(skypeIdentity.id, token, skypeIdentity.displayName);
        }
        catch (e) {
            this._logger.error('initialization failed.', e);
        }
    };
    SlimCoreElectronCallRegistry.prototype._onSkypeTokenRequired = function (eventData) {
        this.event('skypeTokenRequired').raise(eventData.invalidToken);
    };
    SlimCoreElectronCallRegistry.prototype._hookCallRegistryEvents = function () {
        var _this = this;
        this.registerCallback(SlimCoreCommon.onSkypeTokenRequired(this._slimcoreCallHandler, function (data) { return _this._onSkypeTokenRequired(data); }), true);
        this.registerCallback(SlimCoreCommon.onSkypeTokenRequiredSkyLib(this._slimcoreInstance, function (data) { return _this._onSkypeTokenRequired(data); }), true);
    };
    return SlimCoreElectronCallRegistry;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronCallRegistry;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronLocalVideoPreview_1 = __webpack_require__(5);
var SlimCoreElectronBindingManager_1 = __webpack_require__(29);
var DeviceList = (function () {
    function DeviceList(_kind, _logger) {
        this._kind = _kind;
        this._logger = _logger;
        this._list = [];
        this._logger.log('constructor');
    }
    DeviceList.prototype.update = function (list) {
        this._list = list;
        this._logger.info("update: " + JSON.stringify(this._list));
    };
    DeviceList.prototype.isAvailable = function (deviceId) {
        return !!(deviceId && _.find(this._list, function (device) { return device.id === deviceId; }));
    };
    DeviceList.prototype.getBestDevice = function () {
        return this._getDeviceId(_.first(this._list));
    };
    DeviceList.prototype.getSelectedDevice = function () {
        if (this.isAvailable(this._selectedDevice)) {
            this._logger.debug("getSelectedDevice: " + this._selectedDevice);
            return this._selectedDevice;
        }
        else {
            var deviceId = this.getBestDevice();
            this._logger.debug("getSelectedDevice - unknown device selected, returning preferred device: " + deviceId);
            return deviceId;
        }
    };
    DeviceList.prototype.selectDevice = function (deviceId) {
        if (this.isAvailable(deviceId)) {
            this._logger.info("selectDevice: " + deviceId);
            this._selectedDevice = deviceId;
        }
        else {
            this._logger.info("selectDevice - unknown device selected, selecting preferred device");
            this._selectedDevice = null;
        }
    };
    DeviceList.prototype._getDeviceId = function (device) {
        return device ? device.id : null;
    };
    return DeviceList;
}());
var VideoDeviceList = (function (_super) {
    __extends(VideoDeviceList, _super);
    function VideoDeviceList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoDeviceList.prototype.getBestDevice = function () {
        var externalCamera = this._findCamera(1);
        var frontCamera = this._findCamera(2);
        var leftFrontCamera = this._findCamera(5);
        var rightFrontCamera = this._findCamera(6);
        var nonVirtualCamera = this._findCamera();
        var anyCamera = _super.prototype.getBestDevice.call(this);
        return externalCamera || frontCamera || leftFrontCamera || rightFrontCamera || nonVirtualCamera || anyCamera;
    };
    VideoDeviceList.prototype.enumerate = function () {
        var _this = this;
        return _.map(this._list, function (device) { return ({
            id: device.id,
            browserId: device.browserId,
            label: device.label,
            kind: _this._kind,
            position: _this._getCameraPosition(device.cameraFacing),
        }); });
    };
    VideoDeviceList.prototype._findCamera = function (facing) {
        var device = _.find(this._list, function (device) {
            return device.deviceType !== 2 && (!facing || device.cameraFacing === facing);
        });
        return this._getDeviceId(device);
    };
    VideoDeviceList.prototype._getCameraPosition = function (cameraFacing) {
        switch (cameraFacing) {
            case 2:
                return 1;
            case 5:
                return 4;
            case 6:
                return 5;
            case 3:
                return 2;
            case 1:
                return 3;
            default:
                return 0;
        }
    };
    return VideoDeviceList;
}(DeviceList));
var AudioDeviceList = (function (_super) {
    __extends(AudioDeviceList, _super);
    function AudioDeviceList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioDeviceList.prototype.enumerate = function () {
        var _this = this;
        var index = 0;
        return _.map(this._list, function (device) { return ({
            id: device.id,
            browserId: device.browserId,
            label: device.label,
            kind: _this._kind,
            isSystemDefault: index++ === 0,
        }); });
    };
    return AudioDeviceList;
}(DeviceList));
var CompositeAudioDeviceList = (function () {
    function CompositeAudioDeviceList(_logger) {
        this._logger = _logger;
        this._list = [];
        this._logger.log('constructor');
    }
    CompositeAudioDeviceList.prototype.update = function (list) {
        this._list = list;
        this._logger.info("update: " + JSON.stringify(this._list));
    };
    CompositeAudioDeviceList.prototype.enumerate = function () {
        var _this = this;
        return _.map(this._list, function (device) { return ({
            id: null,
            browserId: null,
            label: device.label,
            kind: 4,
            microphoneId: device.microphoneId,
            speakerId: device.speakerId,
            formFactor: _this._getCompositeDeviceFormFactor(device.deviceType),
        }); });
    };
    CompositeAudioDeviceList.prototype._getCompositeDeviceFormFactor = function (type) {
        switch (type) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 5;
            default:
                return 0;
        }
    };
    return CompositeAudioDeviceList;
}());
function getMediaDeviceIdSubstring(mediaDeviceLabel, slimcoreDeviceLabel) {
    var devicePostfix = mediaDeviceLabel.split(slimcoreDeviceLabel)[1].trim();
    var found = devicePostfix.match(/\((.+):(.+)\)/);
    if (found) {
        var _a = found.slice(1), vid = _a[0], pid = _a[1];
        return "vid_" + vid + "&pid_" + pid;
    }
    return undefined;
}
var SlimCoreElectronDeviceManager = (function (_super) {
    __extends(SlimCoreElectronDeviceManager, _super);
    function SlimCoreElectronDeviceManager(logger, _slimCoreInstance, _settings, _loginPromise, _appHooks) {
        var _this = _super.call(this, logger.createChild('DeviceManager')) || this;
        _this._slimCoreInstance = _slimCoreInstance;
        _this._settings = _settings;
        _this._loginPromise = _loginPromise;
        _this._appHooks = _appHooks;
        _this._browserDevices = [];
        _this._startPreviewVideo = function (videoObjectId) {
            return _this._loginPromise.then(function (callHandler) {
                _this._logger.info('Wait AVAILABLE for preview video ' + videoObjectId);
                return SlimCoreCommon.waitForVideoObjectState({
                    slimcoreInstance: _this._slimCoreInstance,
                    callHandler: callHandler,
                    videoObjectId: videoObjectId,
                    logger: _this._logger,
                    resolveStates: [1],
                    rejectStates: [0],
                    timeout: SlimCoreCommon.videoObjectTimeout(_this._settings),
                })
                    .then(function () {
                    _this._logger.info('Starting preview video ' + videoObjectId);
                    _this._slimCoreInstance.videoStart(videoObjectId);
                })
                    .then(function () { return SlimCoreCommon.waitForVideoObjectState({
                    slimcoreInstance: _this._slimCoreInstance,
                    callHandler: callHandler,
                    videoObjectId: videoObjectId,
                    logger: _this._logger,
                    resolveStates: [2, 4],
                    rejectStates: [0],
                    timeout: SlimCoreCommon.videoObjectTimeout(_this._settings),
                }); })
                    .then(function () { return _this._logger.info('Now can use preview video ' + videoObjectId); });
            });
        };
        _this._stopPreviewVideo = function (videoObjectId) {
            return Promise.resolve().then(function () {
                _this._logger.info('Stopping preview video ' + videoObjectId);
                _this._slimCoreInstance.videoStop(videoObjectId);
            });
        };
        _this._createRendererBinding = function (videoObjectId) {
            var binding;
            return _this._previewVideoManager.acquire(_this._rendererBindingManager, videoObjectId)
                .then(function () {
                if (_this._slimCoreInstance.createVideoBindingRenderer) {
                    binding = _this._slimCoreInstance.createVideoBindingRenderer({
                        enableDXVA: _this._settings.enableDXVA,
                    });
                }
                else {
                    binding = SlimCore.createVideoBindingRenderer();
                }
                _this._logger.info('Create rendering binding for preview video ' + videoObjectId);
                return _this._slimCoreInstance.videoCreateBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info('Created rendering binding for preview video ' + videoObjectId);
                return binding;
            });
        };
        _this._releaseRendererBinding = function (videoObjectId, binding) {
            return Promise.resolve().then(function () {
                _this._logger.info('Release rendering binding for preview video ' + videoObjectId);
                return _this._slimCoreInstance.videoReleaseBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info('Released rendering binding for preview video ' + videoObjectId);
                return _this._previewVideoManager.release(_this._rendererBindingManager, videoObjectId);
            });
        };
        _this._createScreenShareBinding = function (videoObjectId) {
            var binding;
            return _this._previewVideoManager.acquire(_this._screenShareBindingManager, videoObjectId)
                .then(function () {
                binding = SlimCore.createVideoBindingScreenShare();
                _this._logger.info('Create screenshare binding for preview video ' + videoObjectId);
                return _this._slimCoreInstance.videoCreateBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info('Created screenshare binding for preview video ' + videoObjectId);
                return binding;
            });
        };
        _this._releaseScreenShareBinding = function (videoObjectId, binding) {
            return Promise.resolve().then(function () {
                _this._logger.info('Release screenshare binding for preview video ' + videoObjectId);
                return _this._slimCoreInstance.videoReleaseBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info('Released screenshare binding for preview video ' + videoObjectId);
                return _this._previewVideoManager.release(_this._screenShareBindingManager, videoObjectId);
            });
        };
        _this._logger.log('constructor');
        _this._cameras = new VideoDeviceList(1, _this._logger.createChild('cameras'));
        _this._microphones = new AudioDeviceList(2, _this._logger.createChild('microphones'));
        _this._speakers = new AudioDeviceList(3, _this._logger.createChild('speakers'));
        _this._compositeDevices = new CompositeAudioDeviceList(_this._logger.createChild('compositeaudiodevices'));
        _this._initPromise = _this._loginPromise.then(function () { return _this._updateBrowserDevices(); });
        _this._initPromise.then(function () {
            _this._updateAudioDevices();
            _this._updateVideoDevices();
            _this._handleDisplaysChanged();
        });
        _this._previewVideoManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._startPreviewVideo, _this._stopPreviewVideo, _this._logger);
        _this._rendererBindingManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._createRendererBinding, _this._releaseRendererBinding, _this._logger);
        _this._screenShareBindingManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._createScreenShareBinding, _this._releaseScreenShareBinding, _this._logger);
        _this.registerCallback(_this._slimCoreInstance.handle('device-list-changed', function (eventData) { return _this._slimCoreDevicesChangedHander(eventData); }));
        _this.registerCallback(_this._appHooks.onDisplaysChanged(function () { return _this._handleDisplaysChanged(); }));
        return _this;
    }
    SlimCoreElectronDeviceManager.prototype.getRendererBindingManager = function () {
        return this._rendererBindingManager;
    };
    SlimCoreElectronDeviceManager.prototype.getScreenShareBindingManager = function () {
        return this._screenShareBindingManager;
    };
    SlimCoreElectronDeviceManager.prototype.getPreviewVideo = function (type, name, path) {
        var _this = this;
        var videoObjectId = 0;
        return this._loginPromise.then(function (callHandler) {
            videoObjectId = _this._slimCoreInstance.createPreviewVideo(type, name, path);
            if (videoObjectId === 0) {
                throw new Error('SlimCore returned invalid video object ID 0');
            }
            _this._logger.info("Got preview video. Waiting for video to become AVAILABLE|STARTING|RUNNING");
            return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimCoreInstance, callHandler, videoObjectId, _this._logger, SlimCoreCommon.videoObjectTimeout(_this._settings));
        }).then(function () { return videoObjectId; });
    };
    Object.defineProperty(SlimCoreElectronDeviceManager.prototype, "isAudioOutputSelectionSupported", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronDeviceManager.prototype._handleDisplaysChanged = function () {
        try {
            this._slimCoreInstance.setDeviceRotation(SlimCore.queryDeviceRotation());
        }
        catch (err) {
            this._logger.warn("Displays Changed handling error: " + err);
        }
    };
    SlimCoreElectronDeviceManager.prototype._updateVideoDevices = function () {
        this._cameras.update(this._fillBrowserDeviceIds(this._slimCoreInstance.getCameraList(), 'videoinput'));
    };
    SlimCoreElectronDeviceManager.prototype._updateAudioDevices = function () {
        this._microphones.update(this._fillBrowserDeviceIds(this._slimCoreInstance.getMicrophoneList(), 'audioinput'));
        this._speakers.update(this._fillBrowserDeviceIds(this._slimCoreInstance.getSpeakerList(), 'audiooutput'));
        if (this._slimCoreInstance.getCompositeAudioDevices) {
            this._compositeDevices.update(this._slimCoreInstance.getCompositeAudioDevices());
        }
        this._selectAudioDevices();
    };
    SlimCoreElectronDeviceManager.prototype._updateBrowserDevices = function () {
        var _this = this;
        if (typeof navigator !== 'object') {
            this._logger.warn('Browser-backed device list won\'t be fetched as navigator is not available');
            return Promise.resolve();
        }
        if (this._browserDevicesPromise) {
            return this._browserDevicesPromise;
        }
        return this._browserDevicesPromise = navigator.mediaDevices.enumerateDevices().then(function (deviceList) {
            _this._browserDevices = deviceList;
            _this._browserDevicesPromise = undefined;
        });
    };
    SlimCoreElectronDeviceManager.prototype._fillBrowserDeviceIds = function (deviceList, kind) {
        if (!deviceList) {
            return deviceList;
        }
        var _loop_1 = function (device) {
            var browserDevice = this_1._browserDevices.find(function (mediaDeviceInfo) {
                if (mediaDeviceInfo.kind !== kind) {
                    return false;
                }
                if (mediaDeviceInfo.label === device.label) {
                    return true;
                }
                else if (mediaDeviceInfo.label.indexOf(device.label) === 0) {
                    var deviceIdSubstring = getMediaDeviceIdSubstring(mediaDeviceInfo.label, device.label);
                    return device.id.indexOf(deviceIdSubstring) > -1;
                }
            });
            if (browserDevice) {
                device.browserId = browserDevice.deviceId;
            }
            else if (this_1._browserDevices.length > 0) {
                this_1._logger.warn("No browser device found for device " + device.label);
            }
        };
        var this_1 = this;
        for (var _i = 0, deviceList_1 = deviceList; _i < deviceList_1.length; _i++) {
            var device = deviceList_1[_i];
            _loop_1(device);
        }
        return deviceList;
    };
    SlimCoreElectronDeviceManager.prototype._selectAudioDevices = function () {
        var microphone = this._microphones.getSelectedDevice();
        var speaker = this._speakers.getSelectedDevice();
        this._logger.info("SlimCore - selectAudioDevices: " + microphone + ", " + speaker);
        this._slimCoreInstance.selectAudioDevices(microphone, speaker);
    };
    SlimCoreElectronDeviceManager.prototype._slimCoreDevicesChangedHander = function (args) {
        var _this = this;
        this._logger.info("SlimCore Devices changed: " + JSON.stringify(args));
        this._updateBrowserDevices().then(function () {
            if (args.video) {
                _this._updateVideoDevices();
            }
            else {
                _this._updateAudioDevices();
            }
            _this._raiseDevicesChanged();
        });
    };
    SlimCoreElectronDeviceManager.prototype._raiseDevicesChanged = function () {
        this.raiseChanged();
        this.event('devicesChanged').raise(this._enumerateDevices());
    };
    SlimCoreElectronDeviceManager.prototype._enumerateDevices = function () {
        var cameras = this._cameras.enumerate();
        var microphones = this._microphones.enumerate();
        var speakers = this._speakers.enumerate();
        var compositeAudioDevices = this._compositeDevices.enumerate();
        return [].concat(cameras, microphones, speakers, compositeAudioDevices);
    };
    SlimCoreElectronDeviceManager.prototype.askDevicePermission = function (constraints) {
        return Promise.resolve().then(function () {
            return { audio: true, video: true };
        });
    };
    SlimCoreElectronDeviceManager.prototype.enumerateDevicesAsync = function () {
        var _this = this;
        return this._initPromise.then(function () {
            return _this._enumerateDevices();
        });
    };
    SlimCoreElectronDeviceManager.prototype.selectDevices = function (devices) {
        var _this = this;
        this._initPromise.then(function () {
            _this._selectDevices(devices);
        });
    };
    SlimCoreElectronDeviceManager.prototype._selectDevices = function (devices) {
        this._logger.debug("selectDevices - " + JSON.stringify(devices));
        if (devices.camera !== undefined) {
            this._cameras.selectDevice(devices.camera);
        }
        if (devices.microphone !== undefined) {
            this._microphones.selectDevice(devices.microphone);
        }
        if (devices.speaker !== undefined) {
            this._speakers.selectDevice(devices.speaker);
        }
        this._selectAudioDevices();
        this._raiseDevicesChanged();
    };
    SlimCoreElectronDeviceManager.prototype.enableTtySupport = function (enable) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            if (_this._slimCoreInstance.createMediaConfig) {
                var config = _this._slimCoreInstance.createMediaConfig();
                if (config.enableTtySupport) {
                    return config.enableTtySupport(enable);
                }
            }
            return _this._slimCoreInstance.enableTtySupport(enable);
        })
            .catch(function (error) {
            _this._logger.error("Error in enableTtySupport(), error = " + error);
        });
    };
    SlimCoreElectronDeviceManager.prototype.getSelectedDevices = function () {
        var result = {
            camera: this._cameras.getSelectedDevice(),
            microphone: this._microphones.getSelectedDevice(),
            speaker: this._speakers.getSelectedDevice(),
        };
        this._logger.debug("getSelectedDevices - " + JSON.stringify(result));
        return result;
    };
    SlimCoreElectronDeviceManager.prototype.getSelectedCamera = function () {
        var deviceId = this._cameras.getSelectedDevice();
        var device = _.find(this._cameras.enumerate(), function (device) { return device.id === deviceId; });
        this._logger.debug("getSelectedCamera - " + JSON.stringify(device));
        return device;
    };
    SlimCoreElectronDeviceManager.prototype.createPreviewRenderer = function (target, options) {
        var renderer = new SlimCoreElectronLocalVideoPreview_1.default(target, this, this._settings, this._logger, 0, options);
        return Promise.resolve()
            .then(function () { return renderer.startVideoAsync(); })
            .then(function () { return renderer; });
    };
    SlimCoreElectronDeviceManager.prototype.createScreenSharingPreviewRenderer = function (target, options) {
        var renderer = new SlimCoreElectronLocalVideoPreview_1.default(target, this, this._settings, this._logger, 1, options);
        return Promise.resolve()
            .then(function () { return renderer.startVideoAsync(); })
            .then(function () { return renderer; });
    };
    SlimCoreElectronDeviceManager.prototype.getDeviceNameAsync = function (deviceId) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var device = _.find(_this._enumerateDevices(), function (device) { return device.id === deviceId; });
            if (!device) {
                throw new Error('Device with id: ' + deviceId + ' not found');
            }
            return device.label;
        });
    };
    return SlimCoreElectronDeviceManager;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronDeviceManager;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SlimCoreElectronEcsProvider = (function () {
    function SlimCoreElectronEcsProvider(_slimCoreInstance) {
        this._slimCoreInstance = _slimCoreInstance;
    }
    SlimCoreElectronEcsProvider.prototype.setEcsConfig = function (config) {
        try {
            this._slimCoreInstance.setEcsConfig(config.ecsBlob, config.userIdentity, config.etag, true);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronEcsProvider.prototype.getEcsQueryParameters = function () {
        try {
            return Promise.resolve(this._slimCoreInstance.getEcsQueryParameters());
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    return SlimCoreElectronEcsProvider;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronEcsProvider;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var VIDEO_OBJECT_WAIT_TIMEOUT_MS = 500;
var SlimCoreElectronLocalScreenShare = (function (_super) {
    __extends(SlimCoreElectronLocalScreenShare, _super);
    function SlimCoreElectronLocalScreenShare(_callObjectId, _callHandler, _slimcoreInstance, _deviceManager, logger, _appHooks, _screenSharingControl) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalScreenShare[" + _this._localVideoObjectId + "]"; })) || this;
        _this._callObjectId = _callObjectId;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._deviceManager = _deviceManager;
        _this._appHooks = _appHooks;
        _this._screenSharingControl = _screenSharingControl;
        _this.isStreaming = false;
        _this.isAvailable = true;
        _this._localVideoObjectId = 0;
        _this._previewVideoObjectId = 0;
        _this._editViewPPTWindowId = 0;
        _this._logger.log('constructor');
        var screenScraperImpl = SlimCoreCommon.isSlimCoreRTModuleAvailable() ? SlimCoreRT.SlimCore.ScreenScraper : SlimCore.ScreenScraper;
        _this._screenScraper = screenScraperImpl ? new screenScraperImpl() : null;
        _this.registerCallback(_this._appHooks.onDisplaysChanged(function () { return _this.handleDisplaysChanged(); }));
        return _this;
    }
    SlimCoreElectronLocalScreenShare.prototype.isActive = function () {
        return this.isAvailable && this.isStreaming;
    };
    SlimCoreElectronLocalScreenShare.prototype._showSharingIndicator = function (region) {
        var _this = this;
        this._appHooks.showSharingIndicator(region);
        var controlInjector = this._appHooks.getControlInjector();
        if (controlInjector && controlInjector.setInjectionRect) {
            controlInjector.setInjectionRect(region).catch(function (error) {
                var errorDetails = JSON.stringify({ errorMsg: error, region: region });
                _this._screenSharingControl.enableScreenSharingControl(false, 0, errorDetails);
                _this._logger.error("Set control Injector failure, disable screen sharing control. Error: " + error);
            });
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._videoObjectChanged = function (eventData) {
        this.isAvailable = SlimCoreCommon.isVideoAvailable(eventData.value);
        this.isStreaming = false;
        if (SlimCoreCommon.isVideoInState(eventData.value, [2, 4])) {
            if (!this._selectedMonitor && !this._selectedWindow) {
                SlimCoreCommon.forgetAndLog(this.stop(), this._logger, 'stopping screen sharing due to no monitor being selected');
            }
            else {
                this.isStreaming = true;
                this._appHooks.showSharingIndicator((this._selectedMonitor && this._selectedMonitor.region) || (this._selectedWindow && this._selectedWindow.windowId));
            }
        }
        if (SlimCoreCommon.isVideoInState(eventData.value, [6])) {
            this._appHooks.hideSharingIndicator();
        }
        this.raiseChanged();
    };
    SlimCoreElectronLocalScreenShare.prototype._setCaptureRegionAndWindow = function (region, windowId) {
        if (this._slimcoreInstance.setScreenCaptureRectangle) {
            this._slimcoreInstance.setScreenCaptureRectangle(this._localVideoObjectId, region, undefined, windowId);
            return;
        }
        if (this._videoBindingScreenShare) {
            this._videoBindingScreenShare.setCaptureRegionAndWindow(region, windowId);
            return;
        }
        throw new Error('Failed to set capture region / window');
    };
    SlimCoreElectronLocalScreenShare.prototype._handleScraperEvent = function (args) {
        this._logger.info('Handle Scraper event, event = ' + args.event + ' window id = ' + args.data);
        var eventWindowId = args.data;
        switch (args.event) {
            case 10:
                this._editViewPPTWindowId = this._selectedWindow.windowId;
                this._selectedWindow.windowId = eventWindowId;
                this._appHooks.showSharingIndicator(eventWindowId);
                this._setCaptureRegionAndWindow(undefined, eventWindowId);
                this._logger.info("shared PPT entered presenter mode");
                break;
            case 11:
                this._selectedWindow.windowId = this._editViewPPTWindowId;
                this._appHooks.showSharingIndicator(this._selectedWindow.windowId);
                this._setCaptureRegionAndWindow(undefined, this._selectedWindow.windowId);
                this._logger.info("shared PPT exited presenter mode");
                break;
            case 9:
                if (this._selectedWindow.windowId !== eventWindowId)
                    return;
                this._logger.info("Application window closed. Stopping the screenshare");
                this.event('windowClosed').raise();
                break;
            default:
                break;
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._startPreviewVideoObject = function () {
        var _this = this;
        if (!this._shouldUseVideoBindingScreenShare()) {
            return Promise.resolve();
        }
        return this._deviceManager.getPreviewVideo(1)
            .then(function (videoObjectId) {
            return _this._deviceManager.getScreenShareBindingManager().acquire(_this, videoObjectId)
                .then(function (binding) {
                _this._previewVideoObjectId = videoObjectId;
                _this._videoBindingScreenShare = binding;
                _this._videoBindingScreenShare.on('scraper-event', function (args) { return _this._handleScraperEvent(args); });
            });
        });
    };
    SlimCoreElectronLocalScreenShare.prototype._stopPreviewVideoObject = function () {
        var _this = this;
        if (!this._shouldUseVideoBindingScreenShare()) {
            return Promise.resolve();
        }
        if (this._previewVideoObjectId && this._videoBindingScreenShare) {
            this._logger.info("calling slimcore video release binding");
            this._videoBindingScreenShare.removeAllListeners('scraper-event');
            var releasePromise = this._deviceManager.getScreenShareBindingManager().release(this, this._previewVideoObjectId)
                .catch(function (error) { return _this._logger.error("Failed on releasing screen sharing binding. Error: " + error); });
            this._previewVideoObjectId = 0;
            this._videoBindingScreenShare = null;
            return releasePromise;
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._shouldUseVideoBindingScreenShare = function () {
        return !this._slimcoreInstance.setScreenCaptureRectangle && SlimCore.createVideoBindingScreenShare;
    };
    SlimCoreElectronLocalScreenShare.prototype.start = function (source) {
        var _this = this;
        this._logger.info("local screen share start");
        if (this._currentStartPromise) {
            this._logger.info("Start requested but pending start exists. Returning previous promise");
            return this._currentStartPromise;
        }
        var sourceInfo = this.sourceToInfo(source);
        this._currentStartPromise = Promise.resolve()
            .then(function () {
            if (_this._currentStopPromise) {
                _this._logger.info("Start requested but pending stop exists. Waiting for previous stop promise");
                return _this._currentStopPromise;
            }
        })
            .then(function () {
            if (!sourceInfo) {
                throw new Error('Unable to start sharing, source could not be found');
            }
        })
            .then(function () {
            _this._logger.info("calling slimcore create local video");
            _this._localVideoObjectId = _this._slimcoreInstance.createLocalVideo(1, '', '');
            _this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 521, _this._localVideoObjectId, function (eventData) { return _this._videoObjectChanged(eventData); }), true);
            var videoStatus = _this._getIntProperty(_this._callHandler, _this._localVideoObjectId, 521);
            _this._videoObjectChanged({
                objectType: 11,
                objectId: _this._localVideoObjectId,
                propKey: 521,
                value: videoStatus,
            });
            _this._callHandler.callAttachSendVideo(_this._callObjectId, _this._localVideoObjectId);
        })
            .then(function () {
            _this._logger.info("waiting for video object to be available");
            return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._localVideoObjectId, _this._logger, VIDEO_OBJECT_WAIT_TIMEOUT_MS);
        })
            .then(function () {
            _this._logger.info("start preview video object");
            return _this._startPreviewVideoObject();
        })
            .then(function () {
            _this._logger.info("calling slimcore video start");
            _this.selectSource(source, sourceInfo);
            _this._slimcoreInstance.videoStart(_this._localVideoObjectId);
            _this.isStreaming = true;
            _this.raiseChanged();
        }).catch(function (error) {
            _this._logger.error("Failed to start LocalScreenShare. Error: " + error);
            _this._currentStartPromise = null;
            _this.stop();
            throw error;
        });
        return this._currentStartPromise;
    };
    SlimCoreElectronLocalScreenShare.prototype.stop = function () {
        var _this = this;
        if (this._currentStopPromise) {
            this._logger.info("Stop requested but pending stop exists. Returning previous promise");
            return this._currentStopPromise;
        }
        var always = function () {
            _this._appHooks.hideSharingIndicator();
            _this.disposeCallbacks();
            _this._localVideoObjectId = 0;
            _this.isStreaming = false;
            _this._selectedMonitor = null;
            _this._selectedWindow = null;
            _this._editViewPPTWindowId = 0;
            _this._currentStopPromise = null;
            _this._currentStartPromise = null;
            _this.raiseChanged();
        };
        this._currentStopPromise = Promise.resolve()
            .then(function () {
            if (_this._currentStartPromise) {
                _this._logger.info("Waiting for start promise to finish.");
                return _this._currentStartPromise;
            }
        })
            .then(function () { return _this._stopPreviewVideoObject(); })
            .then(function () {
            if (_this._localVideoObjectId !== 0) {
                _this._logger.info("calling slimcore video stop");
                _this._slimcoreInstance.videoStop(_this._localVideoObjectId);
            }
        })
            .then(always, function (error) {
            _this._logger.error("Failed to stop LocalScreenShare. Error: " + error);
            always();
            throw error;
        });
        return this._currentStopPromise;
    };
    SlimCoreElectronLocalScreenShare.prototype.dispose = function () {
        this._logger.info('Disposing of LocalScreenShare');
        if (this._localVideoObjectId !== 0 || this._previewVideoObjectId !== 0) {
            this.stop();
        }
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronLocalScreenShare.prototype.selectSource = function (source, sourceInfo) {
        if (source && source.getType() === 2) {
            this.selectWindow(sourceInfo);
        }
        else {
            this.selectMonitor(sourceInfo);
        }
    };
    SlimCoreElectronLocalScreenShare.prototype.selectMonitor = function (monitor) {
        this._showSharingIndicator(monitor.region);
        this._setCaptureRegionAndWindow(monitor.region);
        this._selectedMonitor = monitor;
    };
    SlimCoreElectronLocalScreenShare.prototype.selectWindow = function (window) {
        this._appHooks.showSharingIndicator(window.windowId);
        this._setCaptureRegionAndWindow(undefined, window.windowId);
        this._selectedWindow = window;
    };
    SlimCoreElectronLocalScreenShare.prototype.handleDisplaysChanged = function () {
        if (!this._selectedMonitor || !this._screenScraper)
            return;
        var monitors = this._screenScraper.getMonitorList() || [];
        var monitor = this.handleDuplicateToExtend(monitors) || this.pickSameMonitor(monitors);
        if (monitor) {
            this.selectMonitor(monitor);
        }
        else {
            SlimCoreCommon.forgetAndLog(this.stop(), this._logger, 'stopping screen share because displays changed');
            this.event('sharingSourceLost').raise();
        }
    };
    SlimCoreElectronLocalScreenShare.prototype.pickSameMonitor = function (monitors) {
        var _this = this;
        var id = this._selectedMonitor ? this._selectedMonitor.monitorId : null;
        if (null !== id) {
            return _.find(monitors, function (monitor) {
                return monitor.monitorId === id || _.isEqual(monitor.region, _this._selectedMonitor.region);
            });
        }
        else {
            return null;
        }
    };
    SlimCoreElectronLocalScreenShare.prototype.handleDuplicateToExtend = function (monitors) {
        var isDuplicated = this._selectedMonitor && this._selectedMonitor.isDuplicated;
        if (isDuplicated && this.isExtendConfiguration(monitors)) {
            return _.find(monitors, function (monitor) { return !monitor.isInternal; });
        }
        return null;
    };
    SlimCoreElectronLocalScreenShare.prototype.isExtendConfiguration = function (monitors) {
        var duplicated = count(monitors, function (monitor) { return monitor.isDuplicated; });
        var internal = count(monitors, function (monitor) { return monitor.isInternal; });
        var external = count(monitors, function (monitor) { return !monitor.isInternal; });
        return duplicated === 0 && internal === 1 && external === 1;
    };
    SlimCoreElectronLocalScreenShare.prototype.sourceToInfo = function (source) {
        if (!this._screenScraper) {
            if (!source) {
                this._logger.error('ScreenShare has no way to recover primary monitor');
                return null;
            }
            return {
                monitorId: 0,
                name: source.getDescription(),
                region: source.getBounds(),
                isPrimary: true,
                isInternal: true,
                isDuplicated: false,
            };
        }
        if (!source) {
            var sourceList = this._screenScraper.getMonitorList() || [];
            return _.find(sourceList, function (screen) { return screen.isPrimary; });
        }
        switch (source.getType()) {
            case 2: {
                var sourceList = this._screenScraper.getWindowList() || [];
                return _.find(sourceList, function (application) {
                    return application.windowId === source.getId();
                });
            }
            case 1: {
                var sourceList = this._screenScraper.getMonitorList() || [];
                return _.find(sourceList, function (screen) {
                    return screen.monitorId === source.getId() || _.isEqual(screen.region, source.getBounds());
                });
            }
            default:
                throw new Error("Invalid source type: " + source.getType());
        }
    };
    return SlimCoreElectronLocalScreenShare;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronLocalScreenShare;
function count(collection, predicate) {
    return _.reduce(collection, function (result, item) { return predicate(item) ? result + 1 : result; }, 0);
}


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var VIDEO_OBJECT_WAIT_TIMEOUT = 500;
var SlimCoreElectronLocalVideo = (function (_super) {
    __extends(SlimCoreElectronLocalVideo, _super);
    function SlimCoreElectronLocalVideo(_callObjectId, _callHandler, _slimcoreInstance, _deviceManager, logger) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalVideo[" + _this._videoObjectId + "]"; })) || this;
        _this._callObjectId = _callObjectId;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._deviceManager = _deviceManager;
        _this.isStreaming = false;
        _this.isAvailable = true;
        _this.isStoppingOrNotStarted = false;
        _this.isRendering = false;
        _this.isPaused = false;
        _this._videoObjectId = 0;
        _this._requestedVideoOn = false;
        _this.canToggleVideo = function () {
            return _this._callState === 3 ||
                _this._callState === 4 ||
                _this._callState === 5 ||
                _this._callState === 10;
        };
        _this._logger.log('constructor');
        _this.registerCallback(_this._deviceManager.on('devicesChanged', function () { return _this._devicesChanged(); }));
        return _this;
    }
    SlimCoreElectronLocalVideo.prototype.isActive = function () {
        return this.isAvailable && this.isStreaming;
    };
    SlimCoreElectronLocalVideo.prototype._devicesChanged = function () {
        var _this = this;
        this._logger.info('Devices changed - checking if video needs to be restarted');
        var selectedDevices = this._deviceManager.getSelectedDevices();
        if (this._currentCamera && selectedDevices.camera && selectedDevices.camera !== this._currentCamera.id) {
            this._logger.info("Changing video device to " + selectedDevices.camera);
            this.stop()
                .then(function () { return _this.start(); })
                .catch(function (e) {
                _this._logger.error("Caught error while trying to stopstart local video after device change. Error: " + e);
            });
        }
    };
    SlimCoreElectronLocalVideo.prototype._videoObjectChanged = function (eventData) {
        this._logger.info("Video state changed -> " + eventData.value);
        var isAvailable = SlimCoreCommon.isVideoAvailable(eventData.value);
        var isRunning = eventData.value === 4;
        this.isPaused = eventData.value === 6;
        this.isStoppingOrNotStarted = (eventData.value === 5 || eventData.value === 7);
        this.isAvailable = isAvailable;
        this.isStreaming = isRunning;
        this.isRendering = isRunning;
        this.raiseChanged();
    };
    SlimCoreElectronLocalVideo.prototype._executeOperationAndExpectVideoStateTransition = function (transitionTriggerFunc, videoObjectId, expectedFinalVideoStates) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var done = false;
            var videoStatusChangedCallback = null;
            var _onVideoObjectStateChanged = function (eventData) {
                _this._logger.info("Video state changed for monitored video ID[" + videoObjectId + "] -> " + eventData.value);
                if (!done && _.indexOf(expectedFinalVideoStates, eventData.value) !== -1) {
                    done = true;
                    if (videoStatusChangedCallback) {
                        videoStatusChangedCallback.dispose();
                        videoStatusChangedCallback = null;
                    }
                    resolve();
                }
            };
            setTimeout(function () {
                if (!done) {
                    if (videoStatusChangedCallback) {
                        videoStatusChangedCallback.dispose();
                        videoStatusChangedCallback = null;
                    }
                    var currentState = _this._getIntProperty(_this._callHandler, videoObjectId, 521);
                    _this._logger.info("_executeOperationAndExpectVideoStateTransition[" + videoObjectId + "] time out. Current State = " + currentState + ".");
                    if (_.indexOf(expectedFinalVideoStates, currentState) !== -1) {
                        resolve();
                    }
                    else {
                        var errorMessage = "_executeOperationAndExpectVideoStateTransition[" + videoObjectId + "] time out. Video not in expected final state";
                        _this._logger.info(errorMessage);
                        reject(errorMessage);
                    }
                }
            }, VIDEO_OBJECT_WAIT_TIMEOUT);
            videoStatusChangedCallback = SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 521, videoObjectId, function (eventData) { return _onVideoObjectStateChanged(eventData); });
            transitionTriggerFunc();
        });
    };
    SlimCoreElectronLocalVideo.prototype._startInternalVideo = function () {
        var _this = this;
        if (this._internalVideoStartPromise) {
            return this._internalVideoStartPromise;
        }
        this._internalVideoStartPromise = Promise.resolve(undefined)
            .then(function () {
            var selectedCamera = _this._deviceManager.getSelectedCamera();
            if (!selectedCamera)
                throw new Error('No camera selected to start video on');
            _this._logger.info("Starting local video using camera: " + JSON.stringify(selectedCamera));
            _this._currentCamera = selectedCamera;
            _this._videoObjectId = _this._slimcoreInstance.createLocalVideo(0, selectedCamera.label, selectedCamera.id);
            if (_this._videoObjectId === 0) {
                throw new Error('SlimCore returned invalid video object ID 0');
            }
            _this._callHandler.callAttachSendVideo(_this._callObjectId, _this._videoObjectId);
        })
            .then(function () { return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._videoObjectId, _this._logger); })
            .then(function () {
            _this._logger.info("Local Video is AVAILABLE. Starting Video");
            _this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 521, _this._videoObjectId, function (eventData) { return _this._videoObjectChanged(eventData); }), true);
            var videoStatus = _this._getIntProperty(_this._callHandler, _this._videoObjectId, 521);
            _this._videoObjectChanged({
                objectType: 11,
                objectId: _this._videoObjectId,
                propKey: 521,
                value: videoStatus,
            });
            return _this._executeOperationAndExpectVideoStateTransition(function () {
                _this._slimcoreInstance.videoStart(_this._videoObjectId);
            }, _this._videoObjectId, [4, 2]);
        });
        return this._internalVideoStartPromise;
    };
    SlimCoreElectronLocalVideo.prototype.setCallState = function (callState) {
        this._callState = callState;
        if (this.canToggleVideo() && this._requestedVideoOn) {
            this.start();
        }
    };
    SlimCoreElectronLocalVideo.prototype.start = function () {
        var _this = this;
        this._logger.warn('Local video START requested');
        if (!this.canToggleVideo()) {
            this._logger.warn('Local video start requested but call is not connected, skipping operation');
            this._requestedVideoOn = true;
            return Promise.resolve(null);
        }
        if (this._currentStartPromise) {
            this._logger.info("Start requested but pending start exists. Returning previous promise");
            return this._currentStartPromise;
        }
        var initialPromise;
        if (this._currentStopPromise) {
            this._logger.info("Start requested but pending stop exists. Waiting for previous stop promise");
            initialPromise = this._currentStopPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStartPromise = initialPromise
            .then(function () { return _this._startInternalVideo(); })
            .then(function () {
            _this._currentStartPromise = null;
        })
            .catch(function (error) {
            _this._logger.error("Failed to start Local Video. Err: " + error);
            _this._currentStartPromise = null;
            _this.stop();
            throw error;
        });
        return this._currentStartPromise;
    };
    SlimCoreElectronLocalVideo.prototype.stop = function () {
        var _this = this;
        this._logger.warn('Local video STOP requested');
        var always = function () {
            _this.disposeCallbacks();
            _this._videoObjectId = 0;
            _this._currentCamera = null;
            _this._currentStopPromise = null;
            _this._currentStartPromise = null;
            _this._internalVideoStartPromise = null;
        };
        if (this._currentStopPromise) {
            this._logger.info("Stop requested but pending stop exists. Returning previous promise");
            return this._currentStopPromise;
        }
        var initialPromise;
        if (this._currentStartPromise) {
            this._logger.info("Waiting for start promise to finish.");
            initialPromise = this._currentStartPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStopPromise = initialPromise
            .then(function () {
            _this._logger.info('Stopping SlimCore video objects');
            if (_this._videoObjectId !== 0) {
                _this._slimcoreInstance.videoStop(_this._videoObjectId);
            }
        })
            .then(function () {
            if (_this.canToggleVideo()) {
                return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._videoObjectId, _this._logger);
            }
            else {
                return Promise.resolve();
            }
        })
            .then(function () {
            _this._logger.info('VideoBinding was released');
        })
            .then(always, function (error) {
            _this._logger.error("Failed to stop LocalVideo. Error: " + error);
            always();
            throw error;
        });
        return this._currentStopPromise;
    };
    SlimCoreElectronLocalVideo.prototype.dispose = function () {
        var _this = this;
        var always = function () { return _super.prototype.dispose.call(_this); };
        Promise.resolve(function () { return _this._videoObjectId !== 0 ? _this.stop() : true; })
            .then(always).catch(always);
    };
    return SlimCoreElectronLocalVideo;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronLocalVideo;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronRemoteVideoRenderer_1 = __webpack_require__(14);
var NEXT_RANK = 0;
var SlimCoreElectronRemoteStream = (function (_super) {
    __extends(SlimCoreElectronRemoteStream, _super);
    function SlimCoreElectronRemoteStream(id, type, _callHandler, logger, _slimcoreInstance, _settings) {
        var _this = _super.call(this, logger.createChild(function () { return "RemoteStream[" + _this._remoteVideoId + ":" + _this.rank + ":" + _this._mediaType + "]"; })) || this;
        _this.id = id;
        _this.type = type;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._settings = _settings;
        _this.renderer = null;
        _this._remoteVideoId = 0;
        _this._videoStatus = null;
        _this._stateCancelEvent = new SlimCoreCommon.VideoStateCancelEvent();
        _this._logger.log('constructor');
        _this._remoteVideoId = id;
        _this.rank = NEXT_RANK++;
        _this._mediaType = _this._getIntProperty(_this._callHandler, _this._remoteVideoId, 537);
        _this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(_this._slimcoreInstance, 521, _this.id, function (eventData) { return _this._onVideoObjectStateChanged(eventData); }));
        var videoStatus = _this._getIntProperty(_this._callHandler, _this._remoteVideoId, 521);
        _this._onVideoObjectStateChanged({
            objectType: 11,
            objectId: _this.id,
            propKey: 521,
            value: videoStatus,
        });
        _this.endpointId = _this._getStrProperty(_this._callHandler, _this._remoteVideoId, 5360);
        _this.participantId = _this._getStrProperty(_this._callHandler, _this._remoteVideoId, 5388);
        return _this;
    }
    Object.defineProperty(SlimCoreElectronRemoteStream.prototype, "isAvailable", {
        get: function () {
            return SlimCoreCommon.isVideoAvailable(this._videoStatus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronRemoteStream.prototype, "isStreaming", {
        get: function () {
            return this._videoStatus === 4;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronRemoteStream.prototype.isActive = function () {
        return this.isAvailable && this.isStreaming;
    };
    SlimCoreElectronRemoteStream.prototype._onVideoObjectStateChanged = function (eventData) {
        this._logger.info("VideoStateChanged: " + this._videoStatus + " -> " + eventData.value);
        if (this._videoStatus !== eventData.value) {
            this._videoStatus = eventData.value;
            if (this._videoStatus === 5) {
                SlimCoreCommon.forgetAndLog(this.cleanUpAsync(), this._logger, 'VideoStateChanged: Clean-up failed');
            }
            this.raiseChanged();
        }
    };
    SlimCoreElectronRemoteStream.prototype._startInternalVideo = function () {
        var _this = this;
        this._logger.info('InternalStart');
        if (this._internalVideoStartPromise) {
            this._logger.info('InternalStart: Internal start already called. Returning previous promise');
            return this._internalVideoStartPromise;
        }
        this._internalVideoStartPromise = Promise.resolve(undefined)
            .then(function () {
            _this._logger.info("InternalStart: Waiting for video " + _this._remoteVideoId + " to become AVAILABLE");
            return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._remoteVideoId, _this._logger, 0, _this._stateCancelEvent);
        })
            .then(function () {
            if (!_this._videoBinding) {
                _this._logger.info("InternalStart: Video " + _this._remoteVideoId + " is now AVAILABLE. Creating Video Binding");
                if (_this._slimcoreInstance.createVideoBindingRenderer) {
                    _this._logger.info("InternalStart: createVideoBindingRenderer");
                    _this._videoBinding = _this._slimcoreInstance.createVideoBindingRenderer({
                        enableDXVA: _this._settings.enableDXVA,
                    });
                }
                else {
                    _this._logger.info("InternalStart: old createVideoBindingRenderer");
                    _this._videoBinding = SlimCore.createVideoBindingRenderer();
                }
                _this._logger.info('InternalStart: videoStart');
                _this._slimcoreInstance.videoStart(_this._remoteVideoId);
                _this._logger.info('InternalStart: videoCreateBinding');
                return _this._slimcoreInstance.videoCreateBinding(_this._remoteVideoId, _this._videoBinding)
                    .then(function () {
                    _this._logger.info('InternalStart: binding created');
                    _this._slimcoreInstance.setIncomingTransmissionsDesired(_this._remoteVideoId, true);
                }).catch(function (e) {
                    _this._videoBinding = null;
                    _this._logger.info('InternalStart: Error while creating video binding', e, 'null binding');
                });
            }
        })
            .catch(function (error) {
            _this._logger.error("InternalStart: Failed to start remote video; Error " + error);
            throw error;
        });
        return this._internalVideoStartPromise;
    };
    SlimCoreElectronRemoteStream.prototype.start = function (target, options) {
        var _this = this;
        this._logger.info('Start: requested');
        return Promise.resolve()
            .then(function () {
            if (_this._currentStopPromise) {
                _this._logger.info("Start: pending stop exists. Waiting for previous stop promise");
                return _this._currentStopPromise;
            }
        })
            .then(function () { return _this._startInternalVideo(); })
            .then(function () { return _this.renderer = new SlimCoreElectronRemoteVideoRenderer_1.default(target, _this._mediaType, _this._logger, _this._settings, _this._videoBinding, options); })
            .catch(function (error) {
            _this._logger.error("Start: Failed to start remote video; Error " + error);
            throw error;
        });
    };
    SlimCoreElectronRemoteStream.prototype.stop = function () {
        var _this = this;
        this._logger.info('Stop: Stream ', this._remoteVideoId, 'stop video requested');
        var always = function () {
            _this._logger.info('Stop: cleaning up');
            _this._internalVideoStartPromise = null;
            _this._currentStopPromise = null;
        };
        if (this._currentStopPromise) {
            this._logger.info('Stop: pending stop exists. Returning previous promise');
            return this._currentStopPromise;
        }
        this._currentStopPromise = Promise.resolve()
            .then(function () {
            if (_this._internalVideoStartPromise) {
                _this._logger.info('Stop: awaiting internal video start');
                return _this._internalVideoStartPromise;
            }
        })
            .then(function () {
            if (!_this._internalVideoStartPromise) {
                _this._logger.info('Stop: Video was not started, not much to clean up');
                return;
            }
        })
            .then(always, function (error) {
            _this._logger.error('Failed to stop or release binding.', error);
            always();
            throw error;
        });
        return this._currentStopPromise;
    };
    SlimCoreElectronRemoteStream.prototype.cleanUpAsync = function () {
        var _this = this;
        this._logger.info("CleanUp: requested");
        if (this._currentCleanUpPromise) {
            this._logger.info('CleanUp: pending clean-up already exists');
            return this._currentCleanUpPromise;
        }
        var always = function () {
            _this._logger.info('CleanUp: finished');
            _this._videoBinding = null;
            _this._currentCleanUpPromise = null;
        };
        this._currentCleanUpPromise = Promise.resolve()
            .then(function () {
            _this._logger.info("CleanUp: _internalVideoStartPromise", !!_this._internalVideoStartPromise);
            if (_this._internalVideoStartPromise) {
                return SlimCoreCommon.forgetAndLog(_this.stop(), _this._logger, 'CleanUp: Stop failed, but continuing binding cleanup');
            }
        })
            .then(function () {
            _this._logger.info('CleanUp: _videoBinding', !!_this._videoBinding);
            if (_this._videoBinding) {
                _this._logger.info('CleanUp: Waiting for VideoBinding to be released');
                return _this._slimcoreInstance.videoReleaseBinding(_this._remoteVideoId, _this._videoBinding);
            }
        })
            .then(always, function (error) {
            _this._logger.error('CleanUp: Failed to stop or release binding.', error);
            always();
            throw error;
        });
        this._stateCancelEvent.fire();
        return this._currentCleanUpPromise;
    };
    SlimCoreElectronRemoteStream.prototype.dispose = function () {
        var _this = this;
        this._logger.info('Dispose');
        var always = function () { return _super.prototype.dispose.call(_this); };
        Promise.resolve(function () { return (_this._internalVideoStartPromise || _this._videoBinding) ? _this.stop() : true; })
            .then(function () { return SlimCoreCommon.forgetAndLog(_this.cleanUpAsync(), _this._logger, 'Failed to clean-up remote video stream'); })
            .then(always).catch(always);
    };
    return SlimCoreElectronRemoteStream;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronRemoteStream;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreElectronVideoRenderer_1 = __webpack_require__(22);
var SlimCoreElectronRemoteVideoRenderer = (function (_super) {
    __extends(SlimCoreElectronRemoteVideoRenderer, _super);
    function SlimCoreElectronRemoteVideoRenderer(_renderTarget, _videoType, logger, settings, videoBinding, _options) {
        var _this = _super.call(this, logger.createChild(function () { return 'RemoteVideoRenderer'; }), settings) || this;
        _this._renderTarget = _renderTarget;
        _this._videoType = _videoType;
        _this._options = _options;
        var isScreenShare = (_videoType === 1);
        _this._videoBinding = videoBinding;
        _options = _options || {
            scalingMode: isScreenShare ? 2 : 1,
            transparent: isScreenShare,
        };
        _this._createVideoRenderer(_this._renderTarget, _options, false);
        return _this;
    }
    Object.defineProperty(SlimCoreElectronRemoteVideoRenderer.prototype, "videoRenderer", {
        get: function () {
            return this._renderer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronRemoteVideoRenderer.prototype, "renderTarget", {
        get: function () {
            return this._renderTarget;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronRemoteVideoRenderer.prototype.clone = function (renderTarget) {
        return new SlimCoreElectronRemoteVideoRenderer(renderTarget, this._videoType, this._logger, this._settings, this._videoBinding, this._options);
    };
    SlimCoreElectronRemoteVideoRenderer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._renderTarget = null;
    };
    return SlimCoreElectronRemoteVideoRenderer;
}(SlimCoreElectronVideoRenderer_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronRemoteVideoRenderer;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = __webpack_require__(3);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronScreenSharingManager = (function (_super) {
    __extends(SlimCoreElectronScreenSharingManager, _super);
    function SlimCoreElectronScreenSharingManager(logger, _appHooks) {
        var _this = _super.call(this, logger.createChild('ScreenSharingManager')) || this;
        _this._appHooks = _appHooks;
        _this._screenScraper = null;
        _this._logger.log('constructor');
        var screenScraperImpl = SlimCoreCommon.isSlimCoreRTModuleAvailable() ? SlimCoreRT.SlimCore.ScreenScraper : SlimCore.ScreenScraper;
        _this._screenScraper = screenScraperImpl ? new screenScraperImpl() : null;
        _this.registerCallback(_this._appHooks.onDisplaysChanged(function () { return _this._raiseScreensChanged(); }));
        return _this;
    }
    SlimCoreElectronScreenSharingManager.prototype.enumerateScreensAsync = function () {
        var _this = this;
        return async.asap(function () { return _this._enumerateScreens(); });
    };
    SlimCoreElectronScreenSharingManager.prototype.enumerateWindowsAsync = function () {
        var _this = this;
        return async.asap(function () { return _this._enumerateWindows(); });
    };
    SlimCoreElectronScreenSharingManager.prototype._enumerateScreens = function () {
        try {
            var monitors = this._screenScraper && this._screenScraper.getMonitorList() || [];
            this._logger.debug("ScreenScraper.getMonitorList() result: " + JSON.stringify(monitors));
            var monitorSources = [];
            for (var _i = 0, monitors_1 = monitors; _i < monitors_1.length; _i++) {
                var monitorInfo = monitors_1[_i];
                monitorSources.push(new SlimCoreElectronScreenSharingSource(monitorInfo, this._logger, this._screenScraper));
            }
            return monitorSources;
        }
        catch (error) {
            this._logger.error("ScreenScraper.getMonitorList() failed: " + error);
            throw error;
        }
    };
    SlimCoreElectronScreenSharingManager.prototype._enumerateWindows = function () {
        try {
            var windows = this._screenScraper && this._screenScraper.getWindowList() || [];
            this._logger.debug("ScreenScraper.getWindowList() result: " + JSON.stringify(windows));
            var windowSources = [];
            for (var _i = 0, windows_1 = windows; _i < windows_1.length; _i++) {
                var windowInfo = windows_1[_i];
                windowSources.push(new SlimcoreElectronWindowSharingSource(windowInfo, this._logger, this._screenScraper));
            }
            return windowSources;
        }
        catch (error) {
            this._logger.error("ScreenScraper.getWindowList() failed: " + error);
            throw error;
        }
    };
    SlimCoreElectronScreenSharingManager.prototype._raiseScreensChanged = function () {
        this._logger.debug('raising onScreensChanged');
        this.event('screensChanged').raise();
    };
    return SlimCoreElectronScreenSharingManager;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronScreenSharingManager;
var SlimCoreElectronScreenSharingSource = (function () {
    function SlimCoreElectronScreenSharingSource(_monitorInfo, _logger, _screenScraper) {
        this._monitorInfo = _monitorInfo;
        this._logger = _logger;
        this._screenScraper = _screenScraper;
    }
    SlimCoreElectronScreenSharingSource.prototype.getId = function () {
        return this._monitorInfo.monitorId;
    };
    SlimCoreElectronScreenSharingSource.prototype.getType = function () {
        return 1;
    };
    SlimCoreElectronScreenSharingSource.prototype.getPreviewAsync = function (width, height, asImage) {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getMonitorPreview(_this.getId(), width, height, asImage, _this._monitorInfo.region));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getMonitorPreview(" + _this.getId() + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getMonitorPreview(" + _this.getId() + ") failed: " + error);
            throw error;
        });
    };
    SlimCoreElectronScreenSharingSource.prototype.getDescription = function () {
        return this._monitorInfo.name;
    };
    SlimCoreElectronScreenSharingSource.prototype.getIcon = function (width, height) {
        return Promise.resolve(null);
    };
    SlimCoreElectronScreenSharingSource.prototype.getBounds = function () {
        return {
            x: this._monitorInfo.region.x,
            y: this._monitorInfo.region.y,
            width: this._monitorInfo.region.width,
            height: this._monitorInfo.region.height,
        };
    };
    return SlimCoreElectronScreenSharingSource;
}());
var SlimcoreElectronWindowSharingSource = (function () {
    function SlimcoreElectronWindowSharingSource(_windowInfo, _logger, _screenScraper) {
        this._windowInfo = _windowInfo;
        this._logger = _logger;
        this._screenScraper = _screenScraper;
    }
    SlimcoreElectronWindowSharingSource.prototype.getId = function () {
        return this._windowInfo.windowId;
    };
    SlimcoreElectronWindowSharingSource.prototype.getType = function () {
        return 2;
    };
    SlimcoreElectronWindowSharingSource.prototype.getPreviewAsync = function (width, height, asImage) {
        var _this = this;
        var windowId = this._windowInfo.windowId;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getWindowPreview(windowId, width, height, asImage));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getWindowPreview(" + windowId + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getWindowPreview(" + windowId + ") failed: " + error);
            throw error;
        });
    };
    SlimcoreElectronWindowSharingSource.prototype.getDescription = function () {
        return this._windowInfo.title;
    };
    SlimcoreElectronWindowSharingSource.prototype.getIcon = function (width, height, asImage) {
        var _this = this;
        var windowId = this._windowInfo.windowId;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getWindowIcon(windowId, width, height, asImage));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getWindowIcon(" + windowId + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getWindowIcon(" + windowId + ") failed: " + error);
            throw error;
        });
    };
    SlimcoreElectronWindowSharingSource.prototype.getBounds = function () {
        return undefined;
    };
    return SlimcoreElectronWindowSharingSource;
}());


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SlimCoreElectronSetup = (function () {
    function SlimCoreElectronSetup(_slimCoreInstance) {
        this._slimCoreInstance = _slimCoreInstance;
    }
    SlimCoreElectronSetup.prototype.setString = function (key, value) {
        try {
            this._slimCoreInstance.setupSetStr(key, value);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronSetup.prototype.setNumber = function (key, value) {
        try {
            this._slimCoreInstance.setupSetInt(key, value);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronSetup.prototype.getString = function (key) {
        try {
            var result = this._slimCoreInstance.setupGetStr(key);
            return Promise.resolve(result);
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronSetup.prototype.getNumber = function (key) {
        try {
            var result = this._slimCoreInstance.setupGetInt(key);
            return Promise.resolve(result);
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronSetup.prototype.delete = function (key) {
        try {
            this._slimCoreInstance.setupDelete(key);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    return SlimCoreElectronSetup;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronSetup;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronCallRegistry_1 = __webpack_require__(8);
var SlimCoreElectronDeviceManager_1 = __webpack_require__(9);
var SlimCoreElectronEcsProvider_1 = __webpack_require__(10);
var SlimCoreElectronScreenSharingManager_1 = __webpack_require__(15);
var SlimCoreElectronSetup_1 = __webpack_require__(16);
var SlimCoreUwpEventWrapper_1 = __webpack_require__(23);
var REQUIRED_API_VERSION = 7;
var SlimCoreElectronStackError = (function (_super) {
    __extends(SlimCoreElectronStackError, _super);
    function SlimCoreElectronStackError(message, callSupport) {
        if (callSupport === void 0) { callSupport = 1; }
        var _this = _super.call(this, message) || this;
        _this.callSupport = callSupport;
        return _this;
    }
    return SlimCoreElectronStackError;
}(Error));
var SlimCoreElectronStack = (function () {
    function SlimCoreElectronStack(config) {
        if (!isModuleAvailable()) {
            throw new SlimCoreElectronStackError('slimcore module is not available', 1);
        }
        if (getApiVersion() < REQUIRED_API_VERSION) {
            throw new SlimCoreElectronStackError("slimcore module API version " + getApiVersion() + " incompatible with required " + REQUIRED_API_VERSION, 2);
        }
        this._slimCoreInstance = SlimCoreCommon.wrap(config.slimCoreInstance);
        this._setup = new SlimCoreElectronSetup_1.default(this._slimCoreInstance);
        this._ecsProvider = new SlimCoreElectronEcsProvider_1.default(this._slimCoreInstance);
        var deferredLoginPromise = async.defer();
        var settings = _.assign(config.settings, {
            platform: SlimCoreCommon.PlatformType.Electron,
        });
        this._deviceManager = new SlimCoreElectronDeviceManager_1.default(config.logger, this._slimCoreInstance, settings, deferredLoginPromise.promise, config.appHooks);
        this._callRegistry = new SlimCoreElectronCallRegistry_1.default(config.logger, this._slimCoreInstance, this._deviceManager, settings, config.appHooks);
        this._callRegistry.loginPromise.then(deferredLoginPromise.resolve, deferredLoginPromise.reject);
        this._screenSharingManager = new SlimCoreElectronScreenSharingManager_1.default(config.logger, config.appHooks);
    }
    SlimCoreElectronStack.prototype.getCallRegistry = function () {
        return this._callRegistry;
    };
    SlimCoreElectronStack.prototype.getDeviceManager = function () {
        return this._deviceManager;
    };
    SlimCoreElectronStack.prototype.getScreenSharingManager = function () {
        return this._screenSharingManager;
    };
    SlimCoreElectronStack.prototype.getSetup = function () {
        return this._setup;
    };
    SlimCoreElectronStack.prototype.getEcsProvider = function () {
        return this._ecsProvider;
    };
    SlimCoreElectronStack.prototype.fireIntent = function (callingIntent, identity) {
        if (!this._slimCoreInstance) {
            return;
        }
        var slimcoreIntent = SlimCoreElectronStack._callingIntentToSlimcoreIntent(callingIntent);
        if (!slimcoreIntent) {
            return;
        }
        this._slimCoreInstance.fireIntent(slimcoreIntent, identity);
    };
    SlimCoreElectronStack._callingIntentToSlimcoreIntent = function (callingIntent) {
        switch (callingIntent) {
            case 0:
                return 2;
            case 1:
                return 3;
            case 2:
                return 5;
            default:
                return undefined;
        }
    };
    return SlimCoreElectronStack;
}());
exports.SlimCoreElectronStack = SlimCoreElectronStack;
var SlimCoreUwpStack = (function () {
    function SlimCoreUwpStack(config) {
        this.config = config;
        if (!SlimCoreCommon.isSlimCoreRTModuleAvailable()) {
            throw new SlimCoreElectronStackError('slimcore module is not available', 1);
        }
        this._slimCoreInstance = SlimCoreCommon.wrap(new SlimCoreUwpEventWrapper_1.UwpEngineWrapped(config.slimCoreInstance).objectAsWrapped);
        this._setup = new SlimCoreElectronSetup_1.default(this._slimCoreInstance);
        this._createCallRegistry(config);
        this.config.logger.log('UWP stack config constructor');
        this._screenSharingManager = new SlimCoreElectronScreenSharingManager_1.default(config.logger, config.appHooks);
    }
    SlimCoreUwpStack.prototype._createCallRegistry = function (config) {
        var deferredLoginPromise = async.defer();
        var settings = _.assign(config.settings, {
            platform: SlimCoreCommon.PlatformType.Uwp,
        });
        this._deviceManager = new SlimCoreElectronDeviceManager_1.default(config.logger, this._slimCoreInstance, settings, deferredLoginPromise.promise, config.appHooks);
        this._callRegistry = new SlimCoreElectronCallRegistry_1.default(config.logger, this._slimCoreInstance, this._deviceManager, settings, config.appHooks);
        this._callRegistry.loginPromise.then(deferredLoginPromise.resolve, deferredLoginPromise.reject);
    };
    SlimCoreUwpStack.prototype.getCallRegistry = function () {
        this.config.logger.log('retrieving call registry');
        return this._callRegistry;
    };
    SlimCoreUwpStack.prototype.getDeviceManager = function () {
        this.config.logger.log('retrieving device manager');
        return this._deviceManager;
    };
    SlimCoreUwpStack.prototype.getScreenSharingManager = function () {
        return this._screenSharingManager;
    };
    SlimCoreUwpStack.prototype.getSetup = function () {
        return this._setup;
    };
    SlimCoreUwpStack.prototype.getEcsProvider = function () {
        return null;
    };
    SlimCoreUwpStack.prototype.fireIntent = function (callingIntent, identity) {
    };
    return SlimCoreUwpStack;
}());
exports.SlimCoreUwpStack = SlimCoreUwpStack;
exports.slimCoreElectronStackFactory = {
    build: function (config) {
        return Promise.resolve()
            .then(function () { return new SlimCoreElectronStack(config); })
            .catch(function (error) {
            if (error instanceof SlimCoreElectronStackError) {
                throw error;
            }
            else {
                throw new SlimCoreElectronStackError("" + error);
            }
        });
    },
};
exports.slimCoreUwpStackFactory = {
    build: function (config) {
        return Promise.resolve()
            .then(function () { return new SlimCoreUwpStack(config); })
            .catch(function (error) {
            if (error instanceof SlimCoreElectronStackError) {
                throw error;
            }
            else {
                throw new SlimCoreElectronStackError("" + error);
            }
        });
    },
};
function getApiVersion() {
    return SlimCore.getApiVersion && SlimCore.getApiVersion();
}
function isModuleAvailable() {
    return !!(SlimCore && SlimCore.getVersion);
}


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _ = __webpack_require__(2);
var EventSourceImpl = (function () {
    function EventSourceImpl() {
        this.subscriptions = [];
    }
    EventSourceImpl.prototype.subscribe = function (eventHandler) {
        return new EventSubscriptionImpl(this.subscriptions, eventHandler);
    };
    EventSourceImpl.prototype.dispose = function () {
        this.subscriptions = [];
    };
    EventSourceImpl.prototype.raiseEvents = function (exec) {
        var subscriptions = this.subscriptions.slice();
        subscriptions.forEach(function (subscription) { return subscription.eventHandler && exec(subscription.eventHandler); });
    };
    return EventSourceImpl;
}());
exports.EventSourceImpl = EventSourceImpl;
var EventSubscriptionImpl = (function () {
    function EventSubscriptionImpl(subscriptions, eventHandler) {
        this.subscriptions = subscriptions;
        this.eventHandler = eventHandler;
        this.subscriptions.push(this);
    }
    EventSubscriptionImpl.prototype.dispose = function () {
        var _this = this;
        _.remove(this.subscriptions, function (subscription) { return subscription === _this; });
        this.eventHandler = null;
    };
    return EventSubscriptionImpl;
}());


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Guid = (function () {
    function Guid() {
    }
    Guid.generate = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c == 'x' ? r : r & 3 | 8;
            return v.toString(16);
        });
    };
    return Guid;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Guid;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreElectronBase_1 = __webpack_require__(1);
var MOUSE_EVENT_SIZE = 7;
var KEYBOARD_EVENT_SIZE = 3;
var CTRL_MOUSE_MAXPOS = 65535;
var POLL_TIME = 3000;
var REACT_TIME = 250;
var CTRL_VK_MENU = 0x12;
var CTRL_VK_CONTROL = 0x11;
var CTRL_VK_SHIFT = 0x10;
var CtrlKbdCodeType;
(function (CtrlKbdCodeType) {
    CtrlKbdCodeType[CtrlKbdCodeType["ScanCode"] = 0] = "ScanCode";
    CtrlKbdCodeType[CtrlKbdCodeType["VirtualKey"] = 1] = "VirtualKey";
    CtrlKbdCodeType[CtrlKbdCodeType["NonKbdInput"] = 2] = "NonKbdInput";
    CtrlKbdCodeType[CtrlKbdCodeType["Invalid"] = 3] = "Invalid";
})(CtrlKbdCodeType || (CtrlKbdCodeType = {}));
var SlimCoreElectronControlCapturer = (function (_super) {
    __extends(SlimCoreElectronControlCapturer, _super);
    function SlimCoreElectronControlCapturer(logger, _element, _captureRegionPreserveAspectRatio) {
        if (_captureRegionPreserveAspectRatio === void 0) { _captureRegionPreserveAspectRatio = true; }
        var _this = _super.call(this, logger) || this;
        _this._element = _element;
        _this._captureRegionPreserveAspectRatio = _captureRegionPreserveAspectRatio;
        _this._mouseMoveCount = 0;
        _this._isMouseOnRenderer = false;
        _this._captureMode = 0;
        _this._altKeyDown = false;
        _this._handleResizeEvents = function () {
            clearTimeout(_this._resizeTimerID);
            _this._resizeTimerID = window.setTimeout(function () { return _this.updateCaptureRegion(); }, REACT_TIME);
        };
        _this._handleTouchAsMouseEvents = function (event) {
            var touch = event.changedTouches[0];
            var mouseEventType;
            switch (event.type) {
                case 'touchstart':
                    mouseEventType = 'mousedown';
                    break;
                case 'touchend':
                    mouseEventType = 'mouseup';
                    break;
                case 'touchmove':
                    mouseEventType = 'mousemove';
                    break;
                default:
                    return;
            }
            var mouseEvent = new MouseEvent(mouseEventType, {
                bubbles: true,
                cancelable: true,
                view: window,
                detail: 1,
                screenX: touch.screenX,
                screenY: touch.screenY,
                clientX: touch.clientX,
                clientY: touch.clientY,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                button: 0,
                relatedTarget: null,
            });
            touch.target.dispatchEvent(mouseEvent);
            event.preventDefault();
        };
        _this._handleMouseLeave = function (event) {
            if (!_this._isOnScreenContent(event) && _this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(2);
                _this._logger.info('Mouse leaving render region');
            }
            _this._isMouseOnRenderer = false;
            _this._logger.info('Mouse leaving Teams canvas');
        };
        _this._handleMouseEnter = function (event) {
            _this._logger.info('Mouse entering Teams canvas');
            if (!_this._isOnScreenContent(event))
                return;
            _this._isMouseOnRenderer = true;
            _this._raiseCaptureEvent(1);
            _this._logger.info('Mouse entering render region');
        };
        _this._handleLosingFocus = function (event) {
            _this._altKeyDown = false;
            _this._syncKeyStates(true);
        };
        _this._handleClick = function (event) {
            if (!_this._isOnScreenContent(event))
                return;
            _this._raiseCaptureEvent(0);
            _this._logger.info('Mouse clicked');
        };
        _this._handleMouseMove = function (event) {
            if (!_this._isOnScreenContent(event) && _this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(2);
                _this._isMouseOnRenderer = false;
                _this._logger.info('Mouse leaving render region');
                return;
            }
            else if (_this._isOnScreenContent(event) && !_this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(1);
                _this._isMouseOnRenderer = true;
                _this._logger.info('Mouse entering render region');
            }
            if (_this._captureMode !== 2 && _this._captureMode !== 3)
                return;
            _this._mouseMoveCount++;
            if (!_this._isOnScreenContent(event) || _this._mouseMoveCount % 2 === 0)
                return;
            var data = {
                type: 0,
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleMouseDown = function (event) {
            if (_this._captureMode !== 2 && _this._captureMode !== 3)
                return;
            if (!_this._isOnScreenContent(event))
                return;
            var data = {
                type: 2,
                buttonType: convertButton(event.button),
                buttonDown: true,
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleMouseUp = function (event) {
            if (_this._captureMode !== 2 && _this._captureMode !== 3)
                return;
            if (!_this._isOnScreenContent(event))
                return;
            var data = {
                type: 2,
                buttonType: convertButton(event.button),
                buttonDown: false,
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleKeyDown = function (event) {
            if (event.keyCode !== CTRL_VK_MENU) {
                if (_this._altKeyDown) {
                    _this._raiseKeyboardEvent({
                        codeType: CtrlKbdCodeType.VirtualKey,
                        code: CTRL_VK_MENU,
                        repeat: false,
                        keyUp: false,
                    });
                    _this._altKeyDown = false;
                }
                _this._raiseKeyboardEvent({
                    codeType: CtrlKbdCodeType.VirtualKey,
                    code: event.keyCode,
                    repeat: event.repeat,
                    keyUp: false,
                });
            }
            else {
                _this._altKeyDown = true;
            }
            event.stopPropagation();
            event.preventDefault();
        };
        _this._handleKeyUp = function (event) {
            if (event.keyCode === CTRL_VK_MENU) {
                if (_this._altKeyDown) {
                    _this._raiseKeyboardEvent({
                        codeType: CtrlKbdCodeType.VirtualKey,
                        code: CTRL_VK_MENU,
                        repeat: false,
                        keyUp: false,
                    });
                    _this._altKeyDown = false;
                }
            }
            _this._raiseKeyboardEvent({
                codeType: CtrlKbdCodeType.VirtualKey,
                code: event.keyCode,
                repeat: event.repeat,
                keyUp: true,
            });
            event.stopPropagation();
            event.preventDefault();
        };
        _this._handleWheel = function (event) {
            _this._raiseMouseEvent({
                type: 1,
                wheelRotation: event.deltaY > 0 ? -120 : 120,
            });
        };
        _this._handleContextMenu = function (event) {
            event.preventDefault();
        };
        _this._initialize();
        return _this;
    }
    Object.defineProperty(SlimCoreElectronControlCapturer.prototype, "captureMode", {
        get: function () {
            return this._captureMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronControlCapturer.prototype, "captureRegion", {
        get: function () {
            return this._captureRegion;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronControlCapturer.prototype.dispose = function () {
        this._logger.info('Disposing of Control Capturer');
        window.clearTimeout(this._pollTimerID);
        this._element.ownerDocument.defaultView.removeEventListener('resize', this._handleResizeEvents, false);
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronControlCapturer.prototype.updateVideoSize = function (width, height) {
        this._videoSize.width = width;
        this._videoSize.height = height;
        this.updateCaptureRegion();
    };
    SlimCoreElectronControlCapturer.prototype.updateCaptureRegion = function () {
        if (this._captureRegionPreserveAspectRatio) {
            this._captureRegion.width = this._element.clientWidth;
            this._captureRegion.height = this._element.clientWidth * this._videoSize.height / this._videoSize.width;
            if (this._captureRegion.height > this._element.clientHeight) {
                this._captureRegion.width = this._element.clientHeight * this._videoSize.width / this._videoSize.height;
                this._captureRegion.height = this._element.clientHeight;
                this._captureRegion.left = (this._element.clientWidth - this._captureRegion.width) / 2;
                this._captureRegion.top = 0;
            }
            else {
                this._captureRegion.left = 0;
                this._captureRegion.top = (this._element.clientHeight - this._captureRegion.height) / 2;
            }
        }
        else {
            this._captureRegion.width = this._element.clientWidth;
            this._captureRegion.height = this._element.clientHeight;
            this._captureRegion.top = 0;
            this._captureRegion.left = 0;
        }
    };
    SlimCoreElectronControlCapturer.prototype.setCaptureMode = function (mode) {
        if (this._captureMode === 3 && mode !== 3) {
            this._syncKeyStates(true);
        }
        this._captureMode = mode;
        if (mode !== 0) {
            this._element.addEventListener('mousemove', this._handleMouseMove);
            this._element.addEventListener('mousedown', this._handleMouseDown);
            this._element.addEventListener('mouseup', this._handleMouseUp);
            this._element.addEventListener('mouseleave', this._handleMouseLeave);
            this._element.addEventListener('mouseenter', this._handleMouseEnter);
            this._element.addEventListener('click', this._handleClick);
            this._element.addEventListener('touchstart', this._handleTouchAsMouseEvents);
            this._element.addEventListener('touchend', this._handleTouchAsMouseEvents);
            this._element.addEventListener('touchmove', this._handleTouchAsMouseEvents);
            if (mode === 3) {
                this._element.addEventListener('wheel', this._handleWheel);
                this._element.addEventListener('keydown', this._handleKeyDown);
                this._element.addEventListener('keyup', this._handleKeyUp);
                this._element.addEventListener('contextmenu', this._handleContextMenu);
                this._element.addEventListener('blur', this._handleLosingFocus);
            }
            else {
                this._element.removeEventListener('wheel', this._handleWheel);
                this._element.removeEventListener('keydown', this._handleKeyDown);
                this._element.removeEventListener('keyup', this._handleKeyUp);
                this._element.removeEventListener('contextmenu', this._handleContextMenu);
                this._element.removeEventListener('blur', this._handleLosingFocus);
            }
        }
        else {
            this._element.removeEventListener('mousemove', this._handleMouseMove);
            this._element.removeEventListener('mousedown', this._handleMouseDown);
            this._element.removeEventListener('mouseup', this._handleMouseUp);
            this._element.removeEventListener('mouseleave', this._handleMouseLeave);
            this._element.removeEventListener('mouseenter', this._handleMouseEnter);
            this._element.removeEventListener('blur', this._handleLosingFocus);
            this._element.removeEventListener('click', this._handleClick);
            this._element.removeEventListener('wheel', this._handleWheel);
            this._element.removeEventListener('keydown', this._handleKeyDown);
            this._element.removeEventListener('keyup', this._handleKeyUp);
            this._element.removeEventListener('contextmenu', this._handleContextMenu);
            this._element.removeEventListener('touchstart', this._handleTouchAsMouseEvents);
            this._element.removeEventListener('touchend', this._handleTouchAsMouseEvents);
            this._element.removeEventListener('touchmove', this._handleTouchAsMouseEvents);
        }
    };
    SlimCoreElectronControlCapturer.prototype._initialize = function () {
        this._element.ownerDocument.defaultView.addEventListener('resize', this._handleResizeEvents, false);
        this._captureRegion = { left: 0, top: 0, width: this._element.clientWidth, height: this._element.clientHeight };
        this._videoSize = { width: 640, height: 360 };
        this._origElementSize = { width: 0, height: 0 };
        this._checkElementSize();
    };
    SlimCoreElectronControlCapturer.prototype._checkElementSize = function () {
        var _this = this;
        if (this._origElementSize.width !== this._element.clientWidth || this._origElementSize.height !== this._element.clientHeight) {
            this.updateCaptureRegion();
            this._origElementSize.width = this._element.clientWidth;
            this._origElementSize.height = this._element.clientHeight;
        }
        this._pollTimerID = window.setTimeout(function () { return _this._checkElementSize(); }, POLL_TIME);
    };
    SlimCoreElectronControlCapturer.prototype._raiseMouseEvent = function (data) {
        var buffer = new ArrayBuffer(MOUSE_EVENT_SIZE);
        var dataView = new DataView(buffer);
        var type = (data.type & 3) << 0;
        var buttonType = (data.buttonType & 7) << 2;
        var fButtonDown = (data.buttonDown ? 1 : 0) << 5;
        var fWheelButtonDown = (data.wheelButtonDown ? 1 : 0) << 6;
        var reserved = 0;
        dataView.setUint8(0, 1);
        dataView.setUint8(1, type | buttonType | fButtonDown | fWheelButtonDown | reserved);
        dataView.setUint16(2, data.xPos, true);
        dataView.setUint16(4, data.yPos, true);
        dataView.setUint8(6, data.wheelRotation);
        this._raiseCtrlEvent(buffer);
    };
    SlimCoreElectronControlCapturer.prototype._raiseKeyboardEvent = function (data) {
        var buffer = new ArrayBuffer(KEYBOARD_EVENT_SIZE);
        var dataView = new DataView(buffer);
        var codeType = (data.codeType & 3) << 0;
        var reserved = 0;
        var fKeyUp = (data.keyUp ? 1 : 0) << 4;
        var fRepeat = (data.repeat ? 1 : 0) << 5;
        var fExtended = 0;
        var fExtended1 = 0;
        dataView.setUint8(0, 0);
        dataView.setUint8(1, codeType | reserved | fKeyUp | fRepeat | fExtended | fExtended1);
        dataView.setUint8(2, data.code);
        this._raiseCtrlEvent(buffer);
    };
    SlimCoreElectronControlCapturer.prototype._raiseCtrlEvent = function (data) {
        this.event('controlEvent').raise(new Uint8Array(data));
    };
    SlimCoreElectronControlCapturer.prototype._raiseCaptureEvent = function (event) {
        this.event('captureEvent').raise(event);
    };
    SlimCoreElectronControlCapturer.prototype._normalizeMousePosition = function (event, data) {
        data.xPos = (event.offsetX - this._captureRegion.left) / this._captureRegion.width * CTRL_MOUSE_MAXPOS;
        data.yPos = (event.offsetY - this._captureRegion.top) / this._captureRegion.height * CTRL_MOUSE_MAXPOS;
    };
    SlimCoreElectronControlCapturer.prototype._isOnScreenContent = function (event) {
        var minX = this._captureRegion.left;
        var maxX = this._captureRegion.left + this._captureRegion.width;
        var minY = this._captureRegion.top;
        var maxY = this._captureRegion.top + this._captureRegion.height;
        return (minX <= event.offsetX && event.offsetX < maxX && minY <= event.offsetY && event.offsetY < maxY);
    };
    SlimCoreElectronControlCapturer.prototype._syncKeyStates = function (captureWindowLoseFocus) {
        this._raiseKeyboardEvent({
            codeType: CtrlKbdCodeType.VirtualKey,
            code: CTRL_VK_CONTROL,
            repeat: false,
            keyUp: captureWindowLoseFocus,
        });
        this._raiseKeyboardEvent({
            codeType: CtrlKbdCodeType.VirtualKey,
            code: CTRL_VK_SHIFT,
            repeat: false,
            keyUp: captureWindowLoseFocus,
        });
        this._logger.info('Synced Key states.');
    };
    return SlimCoreElectronControlCapturer;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronControlCapturer;
function convertButton(button) {
    switch (button) {
        case 0:
            return 0;
        case 2:
            return 1;
        case 1:
            return 2;
        default:
            return undefined;
    }
}


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = __webpack_require__(3);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronDataChannel = (function (_super) {
    __extends(SlimCoreElectronDataChannel, _super);
    function SlimCoreElectronDataChannel(logger, _call, _slimcoreInstance, _dataChannel, _dataChannelUsers, id) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronDataChannel"; })) || this;
        _this._call = _call;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._dataChannel = _dataChannel;
        _this._dataChannelUsers = _dataChannelUsers;
        _this.id = id;
        _this._dataChannelActive = false;
        _this._protocolDataSource = null;
        _this._protocolDataSink = null;
        _this._lastDataChannelState = 1;
        _this._hookSlimCorePropertyChangedEvents();
        _this._logger.info('Setting DataChannel on all users');
        for (var i = 0; i < 2; i++) {
            if (_this._dataChannelUsers[i]) {
                try {
                    _this._dataChannelUsers[i].setDataChannel(_this);
                }
                catch (error) {
                    _this._logger.error('Exception calling setDataChannel for i=' + i + ' error=' + error);
                }
            }
        }
        return _this;
    }
    SlimCoreElectronDataChannel.prototype._hookSlimCorePropertyChangedEvents = function () {
        var _this = this;
        this.registerCallback(SlimCoreCommon.onPropertyChanged(this._slimcoreInstance, 5309, function (data) { return _this._onDataChannelStatusChanged(data.value); }), true);
    };
    SlimCoreElectronDataChannel.prototype.start = function () {
        var _this = this;
        if (this._dataChannelActive) {
            this._logger.info('start() called when channel already active');
            return Promise.resolve();
        }
        return async.asap(function () { return _this._startDataChannel(); });
    };
    SlimCoreElectronDataChannel.prototype.stop = function () {
        var _this = this;
        if (!this._dataChannelActive) {
            this._logger.info('stop() called when channel not active');
            return Promise.resolve();
        }
        return async.asap(function () { return _this._stopDataChannel(); });
    };
    SlimCoreElectronDataChannel.prototype.registerDataSource = function (dataSource) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.registerDataSource(dataSource); });
    };
    SlimCoreElectronDataChannel.prototype.unregisterDataSource = function (dataSource) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.unregisterDataSource(dataSource); });
    };
    SlimCoreElectronDataChannel.prototype.registerDataSink = function (dataSink) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.registerDataSink(dataSink); });
    };
    SlimCoreElectronDataChannel.prototype.unregisterDataSink = function (dataSink) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.unregisterDataSink(dataSink); });
    };
    SlimCoreElectronDataChannel.prototype._onDataChannelStatusChanged = function (dataChannelStatus) {
        this._logger.info('Data channel status = ' + dataChannelStatus);
        if (dataChannelStatus === 4) {
            try {
                this._dataChannel.setDataDevices();
            }
            catch (error) {
                this._logger.error('setDataDevices threw exception:' + error);
            }
            if (this._dataChannel && !this._dataChannelActive) {
                this._dataChannelActive = true;
                this._createAndAttachProtocolDevices();
                this._logger.info('Data channel ready');
            }
        }
        else if (dataChannelStatus === 2) {
            if (this._dataChannel && this._dataChannelActive) {
                this._dataChannelActive = false;
                this._detachAndDeleteProtocolDevices();
                this._logger.info('Data channel disposed');
            }
        }
        for (var i = 0; i < 2; i++) {
            try {
                this._dataChannelUsers[i].onDataChannelStatusChanged(dataChannelStatus);
            }
            catch (error) {
                this._logger.error('Exception calling onDataChannelStatusChanged for i=' + i + ' error=' + error);
            }
        }
        if (this._lastDataChannelState !== dataChannelStatus) {
            this.event('stateChange').raise(SlimCoreElectronDataChannel._mapDataChannelStatus(dataChannelStatus));
            this._lastDataChannelState = dataChannelStatus;
        }
    };
    SlimCoreElectronDataChannel.prototype._updateProtocolDataSource = function (dataSource) {
        this._logger.info('Setting Protocol DataSource on all users');
        for (var i = 0; i < 2; i++) {
            if (this._dataChannelUsers[i]) {
                try {
                    this._dataChannelUsers[i].setProtocolDataSource(dataSource);
                }
                catch (error) {
                    this._logger.error('Exception calling setProtocolDataSource for i=' + i + ' error=' + error);
                }
            }
        }
    };
    SlimCoreElectronDataChannel.prototype._createAndAttachProtocolDevices = function () {
        var _this = this;
        this._logger.info('_createAndAttachProtocolDevices()');
        if (!SlimCore.createDataSource || !SlimCore.createDataSink) {
            this._logger.warn('createDataSource or createDataSink not implemented');
            return;
        }
        if (this._dataChannel) {
            if (!this._protocolDataSource) {
                this._protocolDataSource = SlimCore.createDataSource(1);
                try {
                    this._dataChannel.registerDataSource(this._protocolDataSource);
                    this._logger.info('created Protocol data source');
                }
                catch (error) {
                    this._logger.error('registerDataSource threw exception:' + error);
                }
            }
            if (!this._protocolDataSink) {
                this._protocolDataSink = SlimCore.createDataSink(1);
                try {
                    this._dataChannel.registerDataSink(this._protocolDataSink);
                    this._logger.info('created Protocol data sink');
                }
                catch (error) {
                    this._logger.error('registerDataSink threw exception:' + error);
                }
            }
            this._protocolDataSink.on('data', (function (args) {
                try {
                    var protocolMessage = JSON.parse(SlimCoreCommon.bufferToString(args.data));
                    for (var i = 0; i < 2; i++) {
                        if (protocolMessage.type === i) {
                            try {
                                var senderParticipant = _this._call.mapDataChannelSourceIdToParticipant(args.sourceID);
                                _this._dataChannelUsers[i].processProtocolMessage(protocolMessage.message, senderParticipant, args.sourceID);
                            }
                            catch (error) {
                                _this._logger.error('Error calling processProtocolMessage i=' + i + ' error=' + error);
                            }
                            break;
                        }
                    }
                }
                catch (error) {
                    _this._logger.error('Error handling protocol message error=' + error);
                }
            }));
            this._updateProtocolDataSource(this._protocolDataSource);
        }
        else {
            this._logger.warn('_createAndAttachProtocolDevices() null dataChannel');
        }
    };
    SlimCoreElectronDataChannel.prototype._detachAndDeleteProtocolDevices = function () {
        this._logger.info('_detachAndDeleteProtocolDevices()');
        if (this._protocolDataSink) {
            this._protocolDataSink.removeAllListeners('data');
        }
        if (this._dataChannel) {
            if (this._protocolDataSource) {
                try {
                    this._dataChannel.unregisterDataSource(this._protocolDataSource);
                }
                catch (error) {
                    this._logger.error('unregisterDataSource threw exception:' + error);
                }
                this._protocolDataSource = null;
                this._updateProtocolDataSource(null);
                this._logger.info('deleted Protocol data source');
            }
            if (this._protocolDataSink) {
                try {
                    this._dataChannel.unregisterDataSink(this._protocolDataSink);
                }
                catch (error) {
                    this._logger.error('unregisterDataSink threw exception:' + error);
                }
                this._protocolDataSink = null;
                this._logger.info('deleted Protocol data sink');
            }
        }
        else {
            this._logger.warn('_detachAndDeleteProtocolDevices() null dataChannel');
        }
    };
    SlimCoreElectronDataChannel.prototype._startDataChannel = function () {
        this._logger.info('_startDataChannel()');
        if (this._dataChannel) {
            this._lastDataChannelState = 6;
            this.event('stateChange').raise(SlimCoreElectronDataChannel._mapDataChannelStatus(this._lastDataChannelState));
            try {
                this._dataChannel.start();
            }
            catch (error) {
                this._logger.error('_dataChannel.start threw exception:' + error);
            }
            this._logger.info('Data channel started');
        }
    };
    SlimCoreElectronDataChannel.prototype._stopDataChannel = function () {
        this._logger.info('_stopDataChannel()');
        if (this._dataChannel) {
            try {
                this._dataChannel.stop();
            }
            catch (error) {
                this._logger.error('_dataChannel.stop threw exception:' + error);
            }
            this._logger.info('Data channel stopping');
        }
    };
    SlimCoreElectronDataChannel._mapDataChannelStatus = function (dataChannelStatus) {
        switch (dataChannelStatus) {
            case 2:
                return 1;
            case 3:
                return 2;
            case 4:
                return 3;
            case 5:
                return 4;
            case 6:
                return 5;
            case 1:
            default:
                return 0;
        }
    };
    SlimCoreElectronDataChannel.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronDataChannel.dispose()');
        this._detachAndDeleteProtocolDevices();
        this._call = null;
        if (this._dataChannel) {
            if (this._dataChannel.dispose) {
                this._dataChannel.dispose();
            }
            this._dataChannel = null;
        }
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronDataChannel;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronDataChannel;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = __webpack_require__(3);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronVideoRenderer = (function (_super) {
    __extends(SlimCoreElectronVideoRenderer, _super);
    function SlimCoreElectronVideoRenderer(logger, _settings) {
        var _this = _super.call(this, logger) || this;
        _this._settings = _settings;
        _this.isRendering = false;
        _this._paused = false;
        _this._isFrameSinkSet = false;
        _this._frameTypeChanged = function (args) {
            _this._logger.info("frame-type-changed: " + args.type);
            _this.event('frameTypeChanged').raise(convertFrameType(args.type));
        };
        _this._frameSizeChanged = function (args) {
            _this._logger.info("frame-size-changed: " + args.width + " x " + args.height);
        };
        _this._videoUriChangedUwp = function (args) {
            if (_this._videoElement) {
                _this._videoElement.src = args.uri || '';
            }
        };
        _this._videoSizeChangedUwp = function () {
            _this._videoSizeChanged(_this._videoElement.videoWidth, _this._videoElement.videoHeight);
        };
        return _this;
    }
    SlimCoreElectronVideoRenderer.prototype.dispose = function () {
        this._disposeVideoRenderer();
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "rendererType", {
        get: function () {
            if (this._renderer && this._renderer.getRendererType) {
                return convertRendererType(this._renderer.getRendererType());
            }
            if (this._videoElement) {
                return 0;
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "frameType", {
        get: function () {
            if (this._frameSink && this._frameSink.getFrameType) {
                return convertFrameType(this._frameSink.getFrameType());
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "paused", {
        get: function () {
            return this._paused;
        },
        set: function (value) {
            if (this._settings.platform !== SlimCoreCommon.PlatformType.Electron) {
                throw new Error('Only implemented for Electron renderer');
            }
            if (value === this._paused)
                return;
            if (this._frameSink) {
                this._controlFrameSink(!value);
            }
            this._paused = value;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype.captureFrame = function (timeoutMs) {
        if (!this._videoBinding) {
            return Promise.resolve();
        }
        return this._videoBinding.captureFrame({ timeout: timeoutMs })
            .then(function (slimcoreVideoFrame) {
            return new VideoFrame(slimcoreVideoFrame.image, slimcoreVideoFrame.mirror);
        });
    };
    SlimCoreElectronVideoRenderer.prototype.getStats = function () {
        var _this = this;
        return async.asap(function () { return _this._getStats(); });
    };
    SlimCoreElectronVideoRenderer.prototype.setScalingMode = function (scalingMode) {
        var _this = this;
        if (this._renderer) {
            return this._renderer.setScalingMode(convertScalingMode(scalingMode));
        }
        if (this._videoElement) {
            return new Promise(function () {
                _this._videoElement.msZoom = (scalingMode === 1);
            });
        }
        return Promise.reject('No video renderer');
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRenderer = function (target, options, isLocalPreview) {
        switch (this._settings.platform) {
            case SlimCoreCommon.PlatformType.Electron:
                return this._createVideoRendererElectron(target, options);
            case SlimCoreCommon.PlatformType.Uwp:
                return this._createVideoRendererUwp(target, options, isLocalPreview);
            default:
                throw new Error("Unsupported platform: " + this._settings.platform);
        }
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererElectron = function (target, options) {
        var _this = this;
        if (isElectronElement(target)) {
            this._renderer = target.renderer;
        }
        else {
            this._renderer = this._createVideoRendererImpl(target, options);
        }
        this._renderer.on('video-size-changed', function (args) { return _this._videoSizeChanged(args.width, args.height); });
        if (this._frameSink) {
            this._frameSink.on('frame-type-changed', this._frameTypeChanged);
            this._frameSink.on('frame-size-changed', this._frameSizeChanged);
            this._controlFrameSink(true);
        }
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererUwp = function (target, options, isLocalPreview) {
        this._logger.info("Creating uwp video renderer with uri " + this._videoBindingRT.uri);
        this._videoBindingRT.on('video-uri-changed', this._videoUriChangedUwp);
        var container = target;
        this._videoElement = container.ownerDocument.createElement('video');
        container.appendChild(this._videoElement);
        this._videoElement.autoplay = true;
        this._videoElement.msHorizontalMirror = isLocalPreview;
        this._videoElement.msZoom = (options.scalingMode === 1);
        this._videoElement.style.backgroundColor = options.transparent ? '' : 'black';
        this._videoElement.addEventListener('resize', this._videoSizeChangedUwp);
        this._videoElement.src = this._videoBindingRT.uri || '';
    };
    SlimCoreElectronVideoRenderer.prototype._disposeVideoRenderer = function () {
        if (this._frameSink) {
            this._frameSink.removeListener('frame-type-changed', this._frameTypeChanged);
            this._frameSink.removeListener('frame-size-changed', this._frameSizeChanged);
            this._controlFrameSink(false);
        }
        if (this._renderer) {
            this._renderer.removeAllListeners();
            this._renderer.dispose();
            this._renderer = null;
        }
        if (this._videoBindingRT) {
            this._videoBindingRT.removeListener('video-uri-changed', this._videoUriChangedUwp);
        }
        if (this._videoElement) {
            this._videoElement.removeEventListener('resize', this._videoSizeChangedUwp);
            this._videoElement.remove();
            this._videoElement = null;
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "_frameSink", {
        get: function () {
            return this._renderer ? this._renderer.getFrameSink() : null;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._videoSizeChanged = function (width, height) {
        this._logger.info("video-size-changed: " + width + " x " + height);
        this.streamSize = { width: width, height: height };
        this.isRendering = width > 0 && height > 0;
        this.raiseChanged();
    };
    SlimCoreElectronVideoRenderer.prototype._getStats = function () {
        if (!this._frameSink) {
            throw new Error('Renderer is not initialized');
        }
        if (this._frameSink.getStats) {
            return this._frameSink.getStats();
        }
        else {
            throw new Error('Renderer does not support stats');
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "frameSinkMetadata", {
        get: function () {
            if (!this._frameSink || !this._frameSink.getMetadata)
                return null;
            return this._frameSink.getMetadata();
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererImpl = function (container, options) {
        var args = {
            container: container,
            transparent: options.transparent,
            scalingMode: convertScalingMode(options.scalingMode),
            useCropInfo: true,
            useWebGL2: true,
            useLowPowerGPU: true,
            useBufferSharing: !!this._settings.enableBufferSharing,
            logger: this._logger,
        };
        var method;
        try {
            if (this._settings.useChromiumRenderer) {
                this._logger.info('createVideoRenderer: creating ChromiumVideoRenderer');
                method = 'createChromiumVideoRenderer';
                return VideoRenderer.createChromiumVideoRenderer(SlimCore.createPepperFrameSink(), args);
            }
            else if (this._settings.usePepperRenderer) {
                this._logger.info('createVideoRenderer: creating PepperVideoRenderer');
                method = 'createPepperVideoRenderer';
                return VideoRenderer.createPepperVideoRenderer(SlimCore.createPepperFrameSink(), args);
            }
            else {
                this._logger.info('createVideoRenderer: creating CanvasVideoRenderer');
                method = 'createCanvasVideoRenderer';
                return VideoRenderer.createCanvasVideoRenderer(SlimCore.createCanvasFrameSink(), args);
            }
        }
        catch (error) {
            this._logger.error(method + " failed: " + error);
            throw new SlimCoreElectronRendererError(error, convertRendererError(error));
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "_videoBindingRT", {
        get: function () {
            return this._videoBinding;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._controlFrameSink = function (shouldBeSet) {
        if (this._videoBinding && this._isFrameSinkSet !== shouldBeSet) {
            this._isFrameSinkSet = shouldBeSet;
            if (shouldBeSet) {
                this._videoBinding.addFrameSink(this._frameSink);
            }
            else {
                this._videoBinding.removeFrameSink(this._frameSink);
            }
        }
    };
    return SlimCoreElectronVideoRenderer;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronVideoRenderer;
var VideoFrame = (function () {
    function VideoFrame(_imageData, _mirrored) {
        this._imageData = _imageData;
        this._mirrored = _mirrored;
    }
    VideoFrame.prototype.getImageData = function () {
        return this._imageData;
    };
    VideoFrame.prototype.getSize = function () {
        return { width: this._imageData.width, height: this._imageData.height };
    };
    VideoFrame.prototype.isMirrored = function () {
        return this._mirrored;
    };
    return VideoFrame;
}());
var SlimCoreElectronRendererError = (function () {
    function SlimCoreElectronRendererError(reason, errorType) {
        if (errorType === void 0) { errorType = -1; }
        this.reason = reason;
        this.errorType = errorType;
    }
    SlimCoreElectronRendererError.prototype.toString = function () {
        return "Reason=" + this.reason + ", errorType=" + this.errorType;
    };
    return SlimCoreElectronRendererError;
}());
function isElectronElement(target) {
    return target.renderer !== undefined;
}
function convertRendererType(type) {
    switch (type) {
        case 1:
            return 1;
        case 2:
            return 2;
        case 3:
            return 3;
        case 4:
            return 0;
        default:
            return -1;
    }
}
function convertFrameType(type) {
    switch (type) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
            return 2;
        default:
            return -1;
    }
}
function convertRendererError(error) {
    var videoRendererError = error;
    if (videoRendererError.reason === 1) {
        return 2;
    }
    else {
        return 1;
    }
}
function convertScalingMode(scalingMode) {
    switch (scalingMode) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
            return 2;
        default:
            return undefined;
    }
}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreCommon = __webpack_require__(0);
var MetatagType;
(function (MetatagType) {
    MetatagType[MetatagType["Integer"] = 0] = "Integer";
    MetatagType[MetatagType["String"] = 1] = "String";
    MetatagType[MetatagType["Binary"] = 2] = "Binary";
})(MetatagType || (MetatagType = {}));
var UwpNativeWrapper = (function () {
    function UwpNativeWrapper(objectToWrap) {
        var _this = this;
        var methodNames = objectToWrap['wrappableUwpPublicMethodNames'];
        if (methodNames) {
            Object.keys(methodNames).forEach(function (key) {
                var value = methodNames[key];
                if (objectToWrap[value] && !_this[value]) {
                    _this[value] = function wrapper() {
                        return objectToWrap[value].apply(objectToWrap, arguments);
                    };
                }
            });
        }
    }
    Object.defineProperty(UwpNativeWrapper.prototype, "objectAsWrapped", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    return UwpNativeWrapper;
}());
exports.UwpNativeWrapper = UwpNativeWrapper;
var UwpEventWrapper = (function (_super) {
    __extends(UwpEventWrapper, _super);
    function UwpEventWrapper(objectToWrap) {
        var _this = _super.call(this, objectToWrap) || this;
        _this.eventListenerArrays = {};
        if (objectToWrap['oncommonwrapperevent'] !== undefined) {
            objectToWrap['oncommonwrapperevent'] = function (eventPayload) {
                var args = _this.argsFromCommonWrapperEventPayload(eventPayload);
                var eventListeners = _this.eventListenerArrays[eventPayload.target];
                if (eventListeners) {
                    eventListeners.forEach(function (listener) {
                        listener(args);
                    });
                }
            };
        }
        return _this;
    }
    UwpEventWrapper.prototype.argsFromCommonWrapperEventPayload = function (eventPayload) {
        if (eventPayload.target === 'object-property-changed') {
            var args = {};
            var sourceArgs = eventPayload.detail[0];
            args.objectType = sourceArgs.objectType;
            args.objectId = sourceArgs.objectId;
            args.propKey = sourceArgs.propKey;
            switch (sourceArgs.value.type) {
                case MetatagType.Integer:
                    args.value = sourceArgs.value.intVal;
                    break;
                case MetatagType.String:
                    args.value = sourceArgs.value.strVal;
                    break;
                case MetatagType.Binary:
                    args.value = sourceArgs.value.binVal;
                    break;
                default:
                    break;
            }
            return args;
        }
        return eventPayload.detail[0];
    };
    UwpEventWrapper.prototype.addListener = function (event, listener) {
        var eventListeners = this.eventListenerArrays[event];
        if (!eventListeners)
            eventListeners = this.eventListenerArrays[event] = [];
        if (eventListeners.indexOf(listener) === -1)
            eventListeners.push(listener);
        return;
    };
    UwpEventWrapper.prototype.on = function (event, listener) {
        return this.addListener(event, listener);
    };
    UwpEventWrapper.prototype.once = function (event, listener) {
        return this.addListener(event, listener);
    };
    UwpEventWrapper.prototype.removeListener = function (event, listener) {
        var eventListeners = this.eventListenerArrays[event];
        if (eventListeners) {
            var index = eventListeners.indexOf(listener);
            if (index > -1)
                eventListeners.splice(index, 1);
        }
        return;
    };
    UwpEventWrapper.prototype.removeAllListeners = function (event) {
        var _this = this;
        if (event) {
            var eventListeners = this.eventListenerArrays[event];
            if (eventListeners)
                eventListeners = this.eventListenerArrays[event] = [];
            return;
        }
        Object.keys(this.eventListenerArrays).forEach(function (key) {
            _this.eventListenerArrays[key] = [];
        });
        return;
    };
    UwpEventWrapper.prototype.getMaxListeners = function () {
        return 0;
    };
    UwpEventWrapper.prototype.setMaxListeners = function (n) {
    };
    UwpEventWrapper.prototype.listeners = function (event) {
        return this.eventListenerArrays[event];
    };
    UwpEventWrapper.prototype.emit = function (event, args) {
        var eventListeners = this.eventListenerArrays[event];
        if (eventListeners) {
            eventListeners.forEach(function (listener) {
                listener(args);
            });
        }
        return true;
    };
    return UwpEventWrapper;
}(UwpNativeWrapper));
exports.UwpEventWrapper = UwpEventWrapper;
var UwpEngineWrapped = (function (_super) {
    __extends(UwpEngineWrapped, _super);
    function UwpEngineWrapped(objectToWrap) {
        var _this = _super.call(this, objectToWrap) || this;
        _this.objectToWrap = objectToWrap;
        return _this;
    }
    Object.defineProperty(UwpEngineWrapped.prototype, "config", {
        get: function () {
            return this.objectToWrap.config;
        },
        set: function (config) {
            this.objectToWrap.config = config;
        },
        enumerable: true,
        configurable: true
    });
    UwpEngineWrapped.prototype.login = function (userId, skypeToken, displayName) {
        this._skypeToken = skypeToken;
        this.objectToWrap.login(userId, skypeToken, displayName);
    };
    UwpEngineWrapped.prototype.loginAgain = function () {
        this.objectAsWrapped.updateSkypeToken(this._skypeToken);
    };
    UwpEngineWrapped.prototype.createVideoBindingRenderer = function (args) {
        var slimcoreVideoBinding = this.objectToWrap.createVideoBindingRenderer();
        var slimcoreVideoBindingWrapped = new UwpVideoBindingWrapped(slimcoreVideoBinding);
        return SlimCoreCommon.wrap(slimcoreVideoBindingWrapped.objectAsWrapped);
    };
    UwpEngineWrapped.prototype.videoCreateBinding = function (videoObjectId, videoBinding) {
        var bindingResolver = null;
        var bindingCreatePromise = new Promise(function (resolver) {
            bindingResolver = resolver;
        });
        if ((videoBinding.objectToWrap)['onvideobindingcreatedevent'] !== undefined) {
            (videoBinding.objectToWrap)['onvideobindingcreatedevent'] = function () {
                bindingResolver();
            };
        }
        this.objectToWrap.videoCreateBinding(videoObjectId, videoBinding.objectToWrap);
        return bindingCreatePromise;
    };
    UwpEngineWrapped.prototype.videoReleaseBinding = function (videoObjectId, videoBinding) {
        var bindingResolver = null;
        var bindingReleasePromise = new Promise(function (resolver) {
            bindingResolver = resolver;
        });
        if ((videoBinding.objectToWrap)['onvideobindingreleasedevent'] !== undefined) {
            (videoBinding.objectToWrap)['onvideobindingreleasedevent'] = function () {
                bindingResolver();
            };
        }
        this.objectToWrap.videoReleaseBinding(videoObjectId, videoBinding.objectToWrap);
        return bindingReleasePromise;
    };
    return UwpEngineWrapped;
}(UwpEventWrapper));
exports.UwpEngineWrapped = UwpEngineWrapped;
var UwpCallHandlerWrapped = (function (_super) {
    __extends(UwpCallHandlerWrapped, _super);
    function UwpCallHandlerWrapped(objectToWrap) {
        return _super.call(this, objectToWrap) || this;
    }
    return UwpCallHandlerWrapped;
}(UwpEventWrapper));
exports.UwpCallHandlerWrapped = UwpCallHandlerWrapped;
var UwpVideoBindingWrapped = (function (_super) {
    __extends(UwpVideoBindingWrapped, _super);
    function UwpVideoBindingWrapped(_objectToWrap) {
        var _this = _super.call(this, _objectToWrap) || this;
        _this._objectToWrap = _objectToWrap;
        return _this;
    }
    Object.defineProperty(UwpVideoBindingWrapped.prototype, "uri", {
        get: function () {
            return this._objectToWrap.uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UwpVideoBindingWrapped.prototype, "objectToWrap", {
        get: function () {
            return this._objectToWrap;
        },
        enumerable: true,
        configurable: true
    });
    return UwpVideoBindingWrapped;
}(UwpEventWrapper));
exports.UwpVideoBindingWrapped = UwpVideoBindingWrapped;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SlimCoreElectronStack_1 = __webpack_require__(17);
exports.slimCoreElectronStackFactory = SlimCoreElectronStack_1.slimCoreElectronStackFactory;
exports.slimCoreUwpStackFactory = SlimCoreElectronStack_1.slimCoreUwpStackFactory;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var AsyncOperationHandler = (function () {
    function AsyncOperationHandler(logger) {
        this._endOperationDeferred = async.defer();
        this._deferredOperations = {};
        this._deferredOperationGroups = {};
        this._logger = logger;
    }
    AsyncOperationHandler.prototype.registerPromise = function (asyncOperationName, asyncOperation) {
        var asyncOperationDone = false;
        var always = function () { asyncOperationDone = true; };
        asyncOperation.then(always, always);
        var endOperationPromise = this._endOperationDeferred.promise.catch(function (error) {
            if (!asyncOperationDone) {
                throw new Error('Operation ' + asyncOperationName + ' did not complete, reason:' + error);
            }
        });
        return Promise.race([endOperationPromise, asyncOperation]);
    };
    AsyncOperationHandler.prototype.createDeferred = function (deferredOperationName, deferredOperationId) {
        var _this = this;
        var deferredOperation = async.defer();
        this._logger.info('createDeferred operation:', deferredOperationName);
        if (deferredOperationId) {
            if (!this._deferredOperationGroups[deferredOperationName]) {
                this._deferredOperationGroups[deferredOperationName] = {};
            }
            if (this._deferredOperationGroups[deferredOperationName][deferredOperationId]) {
                this._logger.warn('Deferred operation with given name and operation id is already defined:' + deferredOperationName + '/' + deferredOperationId);
                return Promise.reject(new Error('Deferred operation with given name is already defined:' + deferredOperationName + '/' + deferredOperationId));
            }
            else {
                this._deferredOperationGroups[deferredOperationName][deferredOperationId] = deferredOperation;
            }
        }
        else {
            if (!this._deferredOperations[deferredOperationName]) {
                this._deferredOperations[deferredOperationName] = deferredOperation;
            }
            else {
                this._logger.warn('Deferred operation with given name is already defined:' + deferredOperationName);
                return Promise.reject(new Error('Deferred operation with given name is already defined:' + deferredOperationName));
            }
        }
        var endOperationPromise = this._endOperationDeferred.promise.catch(function (error) {
            if (_this.hasDeferred(deferredOperationName, deferredOperationId)) {
                return Promise.reject(new Error('Operation ' + deferredOperationName + ' did not complete, reason:' + error));
            }
            return Promise.resolve();
        });
        return Promise.race([endOperationPromise, deferredOperation.promise]);
    };
    AsyncOperationHandler.prototype.hasDeferred = function (deferredOperationName, deferredOperationId) {
        if (!deferredOperationId) {
            return !!this._deferredOperations[deferredOperationName];
        }
        else if (this._deferredOperationGroups[deferredOperationName]) {
            return !!this._deferredOperationGroups[deferredOperationName][deferredOperationId];
        }
        return false;
    };
    AsyncOperationHandler.prototype.waitForDeferred = function (deferredOperationName, deferredOperationId) {
        if (this._deferredOperations[deferredOperationName]) {
            return this._deferredOperations[deferredOperationName].promise;
        }
        else if (deferredOperationId &&
            this._deferredOperationGroups[deferredOperationName] &&
            this._deferredOperationGroups[deferredOperationName][deferredOperationId]) {
            return this._deferredOperationGroups[deferredOperationName][deferredOperationId].promise;
        }
        return Promise.reject('Unable to find deferred operation: ' + deferredOperationName + '/' + deferredOperationId);
    };
    AsyncOperationHandler.prototype.resolveDeferred = function (deferredOperationName, resolveResult, deferredOperationId) {
        this._logger.info('resolveDeferred operation:', deferredOperationName);
        if (!deferredOperationName) {
            return Promise.reject('Unable to resolve deferred operation with empty name');
        }
        if (this._deferredOperations[deferredOperationName]) {
            var promise = this._deferredOperations[deferredOperationName].promise;
            this._deferredOperations[deferredOperationName].resolve(resolveResult);
            delete this._deferredOperations[deferredOperationName];
            return promise;
        }
        if (this._deferredOperationGroups[deferredOperationName] &&
            this._deferredOperationGroups[deferredOperationName][deferredOperationId]) {
            var promise = this._deferredOperationGroups[deferredOperationName][deferredOperationId].promise;
            this._deferredOperationGroups[deferredOperationName][deferredOperationId].resolve(resolveResult);
            delete this._deferredOperationGroups[deferredOperationName][deferredOperationId];
            return promise;
        }
        return Promise.reject('Unable to resolve deferred operation ' + deferredOperationName + '/' + deferredOperationId);
    };
    AsyncOperationHandler.prototype.maybeResolveDeferred = function (deferredOperationName, resolveResult, deferredOperationId) {
        if (this.hasDeferred(deferredOperationName, deferredOperationId)) {
            return this.resolveDeferred(deferredOperationName, resolveResult, deferredOperationId);
        }
        this._logger.log('Maybe resolve deferred:', deferredOperationName, ' ', deferredOperationId, ' is undefined, ignoring');
        return Promise.resolve();
    };
    AsyncOperationHandler.prototype.rejectDeferred = function (deferredOperationName, reason, deferredOperationId) {
        this._logger.info('rejectDeferred operation:', deferredOperationName);
        if (!deferredOperationName) {
            return Promise.reject('Unable to reject deferred operation with empty name');
        }
        if (this._deferredOperations[deferredOperationName]) {
            var promise = this._deferredOperations[deferredOperationName].promise;
            this._deferredOperations[deferredOperationName].reject(reason);
            delete this._deferredOperations[deferredOperationName];
            return promise;
        }
        if (this._deferredOperationGroups[deferredOperationName] &&
            this._deferredOperationGroups[deferredOperationName][deferredOperationId]) {
            var promise = this._deferredOperationGroups[deferredOperationName][deferredOperationId].promise;
            this._deferredOperationGroups[deferredOperationName][deferredOperationId].reject(reason);
            delete this._deferredOperationGroups[deferredOperationName][deferredOperationId];
            return promise;
        }
        return Promise.reject('Unable to reject deferred operation' + deferredOperationName + '/' + deferredOperationId);
    };
    AsyncOperationHandler.prototype.maybeRejectDeferred = function (deferredOperationName, reason, deferredOperationId) {
        if (this.hasDeferred(deferredOperationName, deferredOperationId)) {
            return this.rejectDeferred(deferredOperationName, reason, deferredOperationId);
        }
        this._logger.log('Maybe reject deferred:', deferredOperationName, ' ', deferredOperationId, ' is undefined, ignoring');
        return Promise.resolve();
    };
    AsyncOperationHandler.prototype.rejectPendingOperations = function (reason) {
        this._logger.info('rejectPendingOperations reason:', reason);
        var rejectDeferred = function (deferred, reason) { return deferred.reject(reason); };
        _.each(this._deferredOperations, rejectDeferred);
        _.each(this._deferredOperationGroups, function (deferredGroup) {
            _.each(deferredGroup, rejectDeferred);
        });
        this._deferredOperations = {};
        this._deferredOperationGroups = {};
        this._endOperationDeferred.reject(reason);
    };
    return AsyncOperationHandler;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AsyncOperationHandler;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var ContentSharingSession = (function () {
    function ContentSharingSession(_platformImpl, _logger) {
        var _this = this;
        this._platformImpl = _platformImpl;
        this._logger = _logger;
        this._pendingDeferreds = [];
        this._updateContentSharingSessionStateDeferredPromises = {};
        this.onJoinResultEvent = function (event) {
            if (!_this._joinContenSharingDeferredPromise) {
                _this._logger.warn("No pending promise for join. Event data: " + event);
                return;
            }
            _this._logger.log("JoinContentSharing completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._joinContenSharingDeferredPromise);
            }
            else {
                _this._rejectDeferred(_this._joinContenSharingDeferredPromise, "Join failed with reason " + _this._platformImpl.convertFailureReason(event.failureReason));
            }
        };
        this.onUpdateParticipantStateResultEvent = function (event) {
            if (!_this._updateParticipantStateDeferredPromise) {
                _this._logger.warn("No pending promise for update participant state. Event data: " + event);
                return;
            }
            _this._logger.log("UpdateContentSharingParticipantStateToViewer completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._updateParticipantStateDeferredPromise);
            }
            else {
                _this._rejectDeferred(_this._updateParticipantStateDeferredPromise, "Update participant state failed with reason " + _this._platformImpl.convertFailureReason(event.failureReason));
            }
        };
        this.onSessionStateResultEvent = function (event) {
            _this._logger.log("UpdateContentSharingSessionState completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (_this._updateContentSharingSessionStateDeferredPromises.hasOwnProperty(event.id)) {
                if (event.failureReason === _this._platformImpl.noFailureReason) {
                    _this._updateContentSharingSessionStateDeferredPromises[event.id].resolve();
                }
                else {
                    _this._updateContentSharingSessionStateDeferredPromises[event.id].reject("Update SessionState failed with reason " + _this._platformImpl.convertFailureReason(event.failureReason));
                }
            }
        };
        this.onTakeControlResultEvent = function (event) {
            if (!_this._takeControlDeferredPromise) {
                _this._logger.warn("No pending promise for take control. Event data: " + event);
                return;
            }
            _this._logger.log("TakeContentSharingControl completed for: " + _this._platformImpl.contentSharingGuid + ", " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._takeControlDeferredPromise);
            }
            else {
                _this._rejectDeferred(_this._takeControlDeferredPromise, "Take content sharing control failed with reason " + _this._platformImpl.convertFailureReason(event.failureReason));
            }
        };
    }
    ContentSharingSession.prototype.statusChanged = function (status) {
        if (status === 7 ||
            status === 8) {
            if (this._stopContentSharingDeferredPromise) {
                this._invokeDeferred(this._stopContentSharingDeferredPromise);
            }
            this._rejectPendingPromises('Content sharing is disconnected');
        }
        else if (status === 2 ||
            status === 5) {
            if (this._stopContentSharingDeferredPromise) {
                this._rejectDeferred(this._stopContentSharingDeferredPromise, 'Content sharing cannot be ended when not presenting');
            }
        }
        else if (status === 3) {
            if (this._startContentSharingDeferredPromise) {
                this._invokeDeferred(this._startContentSharingDeferredPromise);
            }
            if (this._takeControlDeferredPromise) {
                this._invokeDeferred(this._takeControlDeferredPromise);
            }
        }
    };
    ContentSharingSession.prototype.startContentSharing = function () {
        var _this = this;
        if (this._startContentSharingDeferredPromise) {
            return this._startContentSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 0) {
            throw (new Error("Content sharing cannot be started as it is not in the initial state"));
        }
        this._logger.log("Start content sharing for : " + this._platformImpl.contentSharingGuid);
        this._startContentSharingDeferredPromise = async.defer();
        var always = function () {
            _this._startContentSharingDeferredPromise = null;
        };
        this._startContentSharingDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStartContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._startContentSharingDeferredPromise); })
            .then(function () { return _this._startContentSharingDeferredPromise.promise; })
            .catch(function (error) {
            _this._logger.error("Error in startContentSharing(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype.joinContentSharing = function () {
        var _this = this;
        if (this._joinContenSharingDeferredPromise) {
            return this._joinContenSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 2) {
            throw (new Error("Content sharing is not in ringing state"));
        }
        this._logger.log("Join content sharing for : " + this._platformImpl.contentSharingGuid);
        this._joinContenSharingDeferredPromise = async.defer();
        var always = function () {
            _this._joinContenSharingDeferredPromise = null;
        };
        this._joinContenSharingDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStartContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._joinContenSharingDeferredPromise); })
            .then(function () { return _this._joinContenSharingDeferredPromise.promise; })
            .catch(function (error) {
            _this._logger.error("Error in joinContentSharing(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype.updateContentSharingParticipantStateToViewer = function () {
        var _this = this;
        if (this._updateParticipantStateDeferredPromise) {
            return this._updateParticipantStateDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 4) {
            throw (new Error("Content sharing is not in connected state"));
        }
        this._logger.log("Update content sharing participant state for : " + this._platformImpl.contentSharingGuid);
        this._updateParticipantStateDeferredPromise = async.defer();
        var always = function () {
            _this._updateParticipantStateDeferredPromise = null;
        };
        this._updateParticipantStateDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callUpdateContentSharingParticipantState(); })
            .then(function () { return _this._pendingDeferreds.push(_this._updateParticipantStateDeferredPromise); })
            .then(function () { return _this._updateParticipantStateDeferredPromise.promise; })
            .catch(function (error) {
            _this._logger.error("Error in updateContentSharingParticipantStateToViewer(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype.updateContentSharingSessionState = function (id, sessionState) {
        var _this = this;
        if (this._updateContentSharingSessionStateDeferredPromises[id]) {
            return this._updateContentSharingSessionStateDeferredPromises[id].promise;
        }
        if (this._platformImpl.contentSharingStatus !== 3) {
            throw (new Error("Content sharing is not in presenting state"));
        }
        var deferred = async.defer();
        this._updateContentSharingSessionStateDeferredPromises[id] = deferred;
        var always = function () {
            delete _this._updateContentSharingSessionStateDeferredPromises[id];
        };
        this._updateContentSharingSessionStateDeferredPromises[id].promise.then(always, always);
        this._logger.log("Update content sharing session state for : " + this._platformImpl.contentSharingGuid);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callUpdateContentSharingSessionState(id, sessionState); })
            .then(function () { return _this._updateContentSharingSessionStateDeferredPromises[id].promise; })
            .catch(function (error) {
            _this._logger.error("Error in updateContentSharingSessionState(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype.takeContentSharingControl = function () {
        var _this = this;
        if (this._takeControlDeferredPromise) {
            return this._takeControlDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 5) {
            throw (new Error("Content sharing is not in viewing state"));
        }
        this._logger.log("Taking control of content sharing for : " + this._platformImpl.contentSharingGuid);
        this._takeControlDeferredPromise = async.defer();
        var always = function () {
            _this._takeControlDeferredPromise = null;
        };
        this._takeControlDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callTakeContentSharingControl(); })
            .then(function () { return _this._pendingDeferreds.push(_this._takeControlDeferredPromise); })
            .then(function () { return _this._takeControlDeferredPromise; })
            .catch(function (error) {
            _this._logger.error("Error in takeContentSharingControl(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype.stopContentSharing = function () {
        var _this = this;
        if (this._stopContentSharingDeferredPromise) {
            return this._stopContentSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus === 2 ||
            this._platformImpl.contentSharingStatus === 4 ||
            this._platformImpl.contentSharingStatus === 5) {
            throw (new Error("Incoming content sharing cannot be stopped"));
        }
        this._stopContentSharingDeferredPromise = async.defer();
        var always = function () {
            _this._stopContentSharingDeferredPromise = null;
        };
        this._stopContentSharingDeferredPromise.promise.then(always, always);
        this._logger.log("Stop content sharing for : " + this._platformImpl.contentSharingGuid);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStopContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._stopContentSharingDeferredPromise); })
            .then(function () { return _this._stopContentSharingDeferredPromise; })
            .catch(function (error) {
            _this._logger.error("Error in stopContentSharing(), contentSharingGuid = " + _this._platformImpl.contentSharingGuid + ", error = " + error);
            throw error;
        });
    };
    ContentSharingSession.prototype._rejectPendingPromises = function (terminatedReason) {
        this._logger.info('rejectPendingPromises');
        this._pendingDeferreds.forEach(function (deferred) {
            deferred.reject(terminatedReason);
        });
        this._pendingDeferreds = [];
        _.forEach(this._updateContentSharingSessionStateDeferredPromises, function (deferred) {
            deferred.reject(terminatedReason);
        });
        this._updateContentSharingSessionStateDeferredPromises = {};
    };
    ContentSharingSession.prototype._invokeDeferred = function (deferred) {
        this._logger.info('_invokeDeferred');
        if (deferred) {
            _.pull(this._pendingDeferreds, deferred);
            deferred.resolve();
        }
    };
    ContentSharingSession.prototype._rejectDeferred = function (deferred, terminatedReason) {
        this._logger.info('_invokeDeferred');
        if (deferred) {
            _.pull(this._pendingDeferreds, deferred);
            deferred.reject(terminatedReason);
        }
    };
    return ContentSharingSession;
}());
exports.ContentSharingSession = ContentSharingSession;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = __webpack_require__(18);
var ObservableBase = (function (_super) {
    __extends(ObservableBase, _super);
    function ObservableBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObservableBase.prototype.changed = function (callback) {
        return this.subscribe({
            changed: callback,
            on: null
        });
    };
    ObservableBase.prototype.on = function (eventName, callback) {
        return this.subscribe({
            changed: null,
            on: {
                name: eventName,
                handler: this._toEventCallback(callback)
            }
        });
    };
    ObservableBase.prototype.once = function (eventName, callback) {
        var _this = this;
        var subscription;
        var onceSubscription = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            subscription.dispose();
            _this._toEventCallback(callback).apply(void 0, args);
        };
        return subscription = this.on(eventName, this._fromEventCallback(onceSubscription));
    };
    ObservableBase.prototype.raiseChanged = function () {
        this.raiseEvents(function (callback) { return callback.changed && callback.changed(); });
    };
    ObservableBase.prototype.event = function (eventName) {
        var _this = this;
        return {
            raise: this._fromEventCallback(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this._raiseEventImpl.apply(_this, [eventName].concat(args));
            })
        };
    };
    ObservableBase.prototype._raiseEventImpl = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.raiseEvents(function (callback) {
            return callback.on && callback.on.name === eventName && (_a = callback.on).handler.apply(_a, args);
            var _a;
        });
    };
    ObservableBase.prototype._toEventCallback = function (callback) {
        return callback;
    };
    ObservableBase.prototype._fromEventCallback = function (callback) {
        return callback;
    };
    return ObservableBase;
}(events_1.EventSourceImpl));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ObservableBase;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SlimCoreElectronBindingManager = (function () {
    function SlimCoreElectronBindingManager(_create, _release, _logger) {
        this._create = _create;
        this._release = _release;
        this._logger = _logger;
        this._bindingMap = {};
        this._logger.log('BindingManager created');
    }
    SlimCoreElectronBindingManager.prototype.acquire = function (owner, videoObjectId) {
        var _this = this;
        if (!this._bindingMap[videoObjectId] || this._bindingMap[videoObjectId].releasePromise) {
            var chained = false;
            var prequisitePromise = void 0;
            if (this._bindingMap[videoObjectId]) {
                prequisitePromise = this._bindingMap[videoObjectId].releasePromise.catch(function (e) { return _this._logger.log("Release binding error: " + e); });
                chained = true;
            }
            else {
                prequisitePromise = Promise.resolve();
            }
            var createPromise = prequisitePromise.then(function () { return _this._create(videoObjectId); }).then(function (binding) {
                return binding;
            }).catch(function (e) {
                delete _this._bindingMap[videoObjectId];
                throw e;
            });
            this._bindingMap[videoObjectId] = { createPromise: createPromise, owners: [], chained: chained };
        }
        this._bindingMap[videoObjectId].owners.push(owner);
        return this._bindingMap[videoObjectId].createPromise;
    };
    SlimCoreElectronBindingManager.prototype.release = function (owner, videoObjectId) {
        var _this = this;
        if (this._bindingMap[videoObjectId]) {
            return this._bindingMap[videoObjectId].createPromise.then(function (binding) {
                var index = _this._bindingMap[videoObjectId].owners.indexOf(owner);
                if (index > -1) {
                    _this._bindingMap[videoObjectId].owners.splice(index, 1);
                }
                if (_this._bindingMap[videoObjectId].owners.length === 0) {
                    _this._bindingMap[videoObjectId].releasePromise = _this._release(videoObjectId, binding)
                        .then(function () {
                        if (!_this._bindingMap[videoObjectId].chained) {
                            delete _this._bindingMap[videoObjectId];
                        }
                    });
                    return _this._bindingMap[videoObjectId].releasePromise;
                }
            });
        }
        return Promise.resolve();
    };
    return SlimCoreElectronBindingManager;
}());
exports.SlimCoreElectronBindingManager = SlimCoreElectronBindingManager;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreCommon = __webpack_require__(0);
var contentSharingSession_1 = __webpack_require__(27);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronContentSharing = (function (_super) {
    __extends(SlimCoreElectronContentSharing, _super);
    function SlimCoreElectronContentSharing(_slimcoreInstance, _slimcoreCallHandler, slimCoreContentSharingObjectId, _nativeContentSharing, parentLogger) {
        var _this = _super.call(this, parentLogger.createChild(function () { return "ContentSharing[" + _this.slimCoreContentSharingObjectId + "]"; })) || this;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._slimcoreCallHandler = _slimcoreCallHandler;
        _this.slimCoreContentSharingObjectId = slimCoreContentSharingObjectId;
        _this._nativeContentSharing = _nativeContentSharing;
        _this.noFailureReason = 0;
        _this._logger.log('constructor');
        _this._session = new contentSharingSession_1.ContentSharingSession(_this, _this._logger);
        _this._onContentSharingPropertyChanged(5133, function (data) { return _this._onContentSharingStatusChanged(data); });
        _this._onContentSharingPropertyChanged(5140, function (data) { return _this._onContentSharingStateChanged(data); });
        _this._callId = _this.getIntProperty(5125);
        _this.contentSharingStatus = _this.convertContentSharingStatus(_this.getIntProperty(5133));
        _this.contentSharingGuid = _this.getStrProperty(5136);
        _this.contentSharingState = _this.getStrProperty(5140);
        _this.contentSharingIdentity = _this.getStrProperty(5128);
        _this._nativeContentSharing.on('update-session-state-result', function (data) { return _this._onSessionStateResult(data); });
        _this._nativeContentSharing.on('take-control-result', function (data) { return _this._onTakeControlResult(data); });
        _this._nativeContentSharing.on('update-participant-state-result', function (data) { return _this._onUpdateParticipantStateResult(data); });
        _this._nativeContentSharing.on('join-result', function (data) { return _this._onJoinResult(data); });
        return _this;
    }
    SlimCoreElectronContentSharing.prototype._onContentSharingPropertyChanged = function (propKey, listener) {
        this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(this._slimcoreInstance, propKey, this.slimCoreContentSharingObjectId, listener), true);
    };
    SlimCoreElectronContentSharing.prototype.setContentSharingStatus = function (status) {
        this._logger.log("setContentSharingStatus. currentStatus: " + this.contentSharingStatus + " newStatus: " + status);
        if (this.contentSharingStatus === status) {
            return;
        }
        if (this.contentSharingStatus === 7 || this.contentSharingStatus === 8) {
            return;
        }
        this._logger.log("Changing content sharing status to: " + status);
        this.contentSharingStatus = status;
        if (status === 7 ||
            status === 8) {
            var failure = this.getIntProperty(5297);
            var code = this.getIntProperty(5301);
            var subCode = this.getIntProperty(5305);
            var reason = this.convertFailureReason(failure);
            this._logger.info("setting failure reason for content sharing session. reason: " + reason);
            this.contentSharingTerminationReason = {
                terminatedReason: reason,
                terminatedReasonCode: code,
                terminatedReasonSubCode: subCode,
            };
        }
        this._session.statusChanged(status);
        this.raiseChanged();
    };
    SlimCoreElectronContentSharing.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._slimcoreCallHandler, this.slimCoreContentSharingObjectId, property, fallback);
    };
    SlimCoreElectronContentSharing.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._slimcoreCallHandler, this.slimCoreContentSharingObjectId, property, fallback);
    };
    SlimCoreElectronContentSharing.prototype._onContentSharingStatusChanged = function (eventData) {
        this._logger.log("_onContentSharingStateChanged called");
        this.setContentSharingStatus(this.convertContentSharingStatus(eventData.value));
    };
    SlimCoreElectronContentSharing.prototype._onContentSharingStateChanged = function (eventData) {
        this._logger.log("_onContentSharingStateChanged called");
        this.contentSharingState = eventData.value;
        this.raiseChanged();
    };
    SlimCoreElectronContentSharing.prototype.convertContentSharingStatus = function (slimCoreContentSharingStatus) {
        switch (slimCoreContentSharingStatus) {
            case 1:
                return 1;
            case 2:
                return 2;
            case 4:
                return 4;
            case 3:
                return 3;
            case 5:
                return 5;
            case 6:
                return 6;
            case 7:
            case 8:
            case 9:
                return 7;
            default:
                return 0;
        }
    };
    SlimCoreElectronContentSharing.prototype.startContentSharing = function () {
        return this._session.startContentSharing();
    };
    SlimCoreElectronContentSharing.prototype.joinContentSharing = function () {
        return this._session.joinContentSharing();
    };
    SlimCoreElectronContentSharing.prototype._onJoinResult = function (eventData) {
        this._session.onJoinResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype.updateContentSharingParticipantStateToViewer = function () {
        return this._session.updateContentSharingParticipantStateToViewer();
    };
    SlimCoreElectronContentSharing.prototype._onUpdateParticipantStateResult = function (eventData) {
        this._session.onUpdateParticipantStateResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype.updateContentSharingSessionState = function (id, sessionState) {
        return this._session.updateContentSharingSessionState(id, sessionState);
    };
    SlimCoreElectronContentSharing.prototype._onSessionStateResult = function (eventData) {
        this._session.onSessionStateResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype.takeContentSharingControl = function () {
        return this._session.takeContentSharingControl();
    };
    SlimCoreElectronContentSharing.prototype._onTakeControlResult = function (eventData) {
        this._session.onTakeControlResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype.stopContentSharing = function () {
        return this._session.stopContentSharing();
    };
    SlimCoreElectronContentSharing.prototype.deleteContentSharing = function () {
        return Promise.reject('deleteContentSharing not implemented');
    };
    SlimCoreElectronContentSharing.prototype.callStartContentSharing = function () {
        this._nativeContentSharing.startContentSharing();
        return Promise.resolve();
    };
    SlimCoreElectronContentSharing.prototype.callStopContentSharing = function () {
        this._nativeContentSharing.stopContentSharing();
        return Promise.resolve();
    };
    SlimCoreElectronContentSharing.prototype.callUpdateContentSharingSessionState = function (commandId, sessionState) {
        this._nativeContentSharing.updateContentSharingSessionState(commandId, sessionState);
        return Promise.resolve();
    };
    SlimCoreElectronContentSharing.prototype.callTakeContentSharingControl = function () {
        this._nativeContentSharing.takeContentSharingControl();
        return Promise.resolve();
    };
    SlimCoreElectronContentSharing.prototype.callUpdateContentSharingParticipantState = function () {
        this._nativeContentSharing.updateContentSharingParticipantState();
        return Promise.resolve();
    };
    SlimCoreElectronContentSharing.prototype.convertFailureReason = function (reason) {
        switch (reason) {
            case 0:
                return 1;
            case 2:
                return 34;
            case 3:
                return 35;
            case 1:
                return 32;
            default:
                return 32;
        }
    };
    SlimCoreElectronContentSharing.prototype.dispose = function () {
        this.slimCoreContentSharingObjectId = 0;
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronContentSharing;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronContentSharing;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = __webpack_require__(3);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronControlCapturer_1 = __webpack_require__(20);
var CTRL_MOUSE_MAXPOS = 65535;
var ANNOTATION_EVENT_SIZE = 17;
var PAUSE_EVENT_SIZE = 1;
var RESUME_EVENT_SIZE = 1;
var DELETE_ANNOTATION_EVENT_SIZE = 8;
var RECOVER_ANNOTATION_EVENT_SIZE = 7;
var REQUEST_ID_SIZE = 4;
var HOLOGRAPHIC_INTERACTION_DATAID = 12;
var VIDEOCLONE_TIMEOUT = 10000;
var CAPTUREDFRAME_ELEMENT_CLASSNAME = 'captured-frame';
var HolographicEvent;
(function (HolographicEvent) {
    HolographicEvent[HolographicEvent["PlaceArrow"] = 0] = "PlaceArrow";
    HolographicEvent[HolographicEvent["DeleteAnnotation"] = 1] = "DeleteAnnotation";
    HolographicEvent[HolographicEvent["RecoverAnnotation"] = 2] = "RecoverAnnotation";
    HolographicEvent[HolographicEvent["PauseVideo"] = 3] = "PauseVideo";
    HolographicEvent[HolographicEvent["ResumeVideo"] = 4] = "ResumeVideo";
    HolographicEvent[HolographicEvent["InkingStart"] = 5] = "InkingStart";
    HolographicEvent[HolographicEvent["InkingStop"] = 6] = "InkingStop";
    HolographicEvent[HolographicEvent["InkingInProgress"] = 7] = "InkingInProgress";
})(HolographicEvent || (HolographicEvent = {}));
var CapturedFrame = (function () {
    function CapturedFrame(_logger, _element, _attachment, _renderer) {
        this._logger = _logger;
        this._element = _element;
        this._attachment = _attachment;
        this._renderer = _renderer;
    }
    Object.defineProperty(CapturedFrame.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CapturedFrame.prototype, "attachment", {
        get: function () {
            return this._attachment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CapturedFrame.prototype, "renderer", {
        get: function () {
            return this._renderer;
        },
        enumerable: true,
        configurable: true
    });
    CapturedFrame.prototype.dispose = function () {
        if (this._logger) {
            this._logger.info('Disposing captured frame');
            this._logger = null;
        }
        if (this._renderer) {
            this._renderer.dispose();
            this._renderer = null;
        }
        if (this._element) {
            this._element.remove();
            this._element = null;
        }
        this._attachment = null;
    };
    return CapturedFrame;
}());
var AnnotationEvent;
(function (AnnotationEvent) {
    AnnotationEvent[AnnotationEvent["AnnotationCreated"] = 0] = "AnnotationCreated";
    AnnotationEvent[AnnotationEvent["AnnotationModified"] = 1] = "AnnotationModified";
    AnnotationEvent[AnnotationEvent["AnnotationRemoved"] = 2] = "AnnotationRemoved";
    AnnotationEvent[AnnotationEvent["InteractionReady"] = 3] = "InteractionReady";
    AnnotationEvent[AnnotationEvent["InteractionTerminated"] = 4] = "InteractionTerminated";
})(AnnotationEvent || (AnnotationEvent = {}));
var SlimCoreElectronHolographicInteractionControl = (function (_super) {
    __extends(SlimCoreElectronHolographicInteractionControl, _super);
    function SlimCoreElectronHolographicInteractionControl(logger, callId) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronHolographicInteractionControl"; })) || this;
        _this.callId = callId;
        _this._featureFlagEnabled = false;
        _this._interactionVideoRenderer = null;
        _this._dataChannel = null;
        _this._annotationDataSource = null;
        _this._annotationDataSink = null;
        _this._controlCapturer = null;
        _this._holographicControlEventSubscription = null;
        _this._holographicCaptureEventSubscription = null;
        _this._holographicInteractionMode = 1;
        _this._participant = null;
        _this._dataChannelActive = false;
        _this._wasLeftMouseButtonDown = false;
        _this._isStarted = false;
        _this._currentPoseAndProjection = null;
        _this._legacyRenderer = null;
        _this.defaultColorOther = 0x5558AF;
        _this.defaultColorSelf = 0x3CD139;
        _this._isInkingInProgress = false;
        _this._currentRequestId = 0;
        _this._logger.log('constructor');
        _this.color = _this.defaultColorSelf;
        _this._disposeControlCapturer();
        return _this;
    }
    Object.defineProperty(SlimCoreElectronHolographicInteractionControl.prototype, "state", {
        get: function () {
            if (this._isStarted && this._dataChannelActive) {
                return 2;
            }
            else if (this._isStarted) {
                return 1;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronHolographicInteractionControl.prototype, "mode", {
        get: function () {
            return this._holographicInteractionMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronHolographicInteractionControl.prototype, "color", {
        get: function () {
            return this._holographicInteractionColor;
        },
        set: function (newColor) {
            this._holographicInteractionColor = newColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronHolographicInteractionControl.prototype, "controlCapturer", {
        get: function () {
            return this._controlCapturer;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronHolographicInteractionControl.prototype.setFeatureFlag = function (enabled) {
        this._featureFlagEnabled = enabled;
    };
    SlimCoreElectronHolographicInteractionControl.prototype.startHolographicInteraction = function (renderer) {
        var _this = this;
        this._logger.info('startHolographicInteraction');
        if (this.state !== 0 || !this._dataChannel || !this._featureFlagEnabled) {
            return Promise.reject(new Error('cannot start holographic interaction'));
        }
        this._legacyRenderer = renderer;
        return Promise.resolve()
            .then(function () { return _this._dataChannel.start(); })
            .then(function () { return _this._start(); });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.stopHolographicInteraction = function () {
        var _this = this;
        this._logger.info('stopHolographicInteraction');
        this._legacyRenderer = null;
        return this._setRenderer(null)
            .then(function () { return _this._stop(); });
    };
    SlimCoreElectronHolographicInteractionControl.prototype._start = function () {
        this._isStarted = true;
    };
    SlimCoreElectronHolographicInteractionControl.prototype._stop = function () {
        this._isStarted = false;
    };
    SlimCoreElectronHolographicInteractionControl.prototype.setParticipant = function (sharer) {
        this._logger.info('setParticipant()');
        if (this._participant) {
            if (this._participant.id !== sharer.id) {
                this._logger.info('setParticipant() sharer switched, new sharer id=' + sharer.id);
            }
        }
        else {
            this._logger.info('setParticipant() setting sharer to id=' + sharer.id);
        }
        this._participant = sharer;
    };
    SlimCoreElectronHolographicInteractionControl.prototype.removeParticipant = function (sharer) {
        this._logger.info('removeParticipant()');
        if (sharer === null || sharer === undefined ||
            (this._participant !== null && sharer.id === this._participant.id)) {
            this._logger.info('removeParticipant: set participant to null');
            this._participant = null;
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronHolographicInteractionControl - dispose()');
        this._detachAndDeleteControlDevices();
        this._disposeControlCapturer();
        this._participant = null;
        this._dataChannel = null;
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronHolographicInteractionControl.prototype.handleCallDisconnected = function () {
        this._logger.info('handleCallDisconnected()');
        this._participant = null;
        this._detachAndDeleteControlDevices();
        this._disposeControlCapturer();
    };
    SlimCoreElectronHolographicInteractionControl.prototype.deleteAnnotations = function (requestIds, isPermanent) {
        var _this = this;
        return async.asap(function () {
            var buffer = new ArrayBuffer(DELETE_ANNOTATION_EVENT_SIZE + requestIds.length * REQUEST_ID_SIZE);
            var dataView = new DataView(buffer);
            dataView.setUint8(0, HolographicEvent.DeleteAnnotation);
            dataView.setUint32(1, 1, true);
            dataView.setUint8(5, isPermanent ? 1 : 0);
            dataView.setUint16(6, requestIds.length, true);
            for (var index = 0; index < requestIds.length; ++index) {
                dataView.setUint32(8 + index * REQUEST_ID_SIZE, requestIds[index], true);
            }
            _this._sendHolographicData(new Uint8Array(buffer));
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.deleteAllAnnotations = function () {
        var _this = this;
        return async.asap(function () {
            var buffer = new ArrayBuffer(DELETE_ANNOTATION_EVENT_SIZE);
            var dataView = new DataView(buffer);
            dataView.setUint8(0, HolographicEvent.DeleteAnnotation);
            dataView.setUint32(1, 1, true);
            dataView.setUint8(5, 1);
            dataView.setUint16(6, 0, true);
            _this._sendHolographicData(new Uint8Array(buffer), true);
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.recoverAnnotations = function (requestIds) {
        var _this = this;
        return async.asap(function () {
            var buffer = new ArrayBuffer(RECOVER_ANNOTATION_EVENT_SIZE + requestIds.length * REQUEST_ID_SIZE);
            var dataView = new DataView(buffer);
            dataView.setUint8(0, HolographicEvent.RecoverAnnotation);
            dataView.setUint32(1, 1, true);
            dataView.setUint16(5, requestIds.length, true);
            for (var index = 0; index < requestIds.length; ++index) {
                dataView.setUint32(7 + index * REQUEST_ID_SIZE, requestIds[index], true);
            }
            _this._sendHolographicData(new Uint8Array(buffer));
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.disableAnnotations = function () {
        var _this = this;
        if (!this.controlCapturer) {
            return Promise.resolve();
        }
        return async.asap(function () {
            _this._currentPoseAndProjection = null;
            _this._setCapture(0);
            _this._setRenderer(null);
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.enableAnnotations = function (frameContainer) {
        var _this = this;
        if (this.state !== 2 || !this._dataChannel || !this._featureFlagEnabled) {
            return Promise.reject(new Error('cannot enable annotations!'));
        }
        return this._captureFrame(frameContainer)
            .then(function (capturedFrame) {
            _this._currentPoseAndProjection = capturedFrame.attachment;
            var renderer = !!_this._legacyRenderer ? _this._legacyRenderer : capturedFrame.renderer;
            return _this._setRenderer(renderer)
                .then(function () { return capturedFrame; });
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.switchToArrows = function () {
        var _this = this;
        return async.asap(function () { _this._holographicInteractionMode = 0; });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.switchToDrawing = function () {
        var _this = this;
        return async.asap(function () { _this._holographicInteractionMode = 1; });
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setRenderer = function (renderer) {
        var _this = this;
        return async.asap(function () { return _this._setViewingRenderer(renderer); });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.setDataChannel = function (channel) {
        var _this = this;
        return async.asap(function () { return _this._setDataChannel(channel); });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.onDataChannelStatusChanged = function (dataChannelStatus) {
        var _this = this;
        return async.asap(function () { return _this._onDataChannelStatusChanged(dataChannelStatus); });
    };
    SlimCoreElectronHolographicInteractionControl.prototype.setProtocolDataSource = function (source) {
        return Promise.resolve();
    };
    SlimCoreElectronHolographicInteractionControl.prototype.processProtocolMessage = function (message, sender, senderSourceId) {
        return Promise.resolve();
    };
    SlimCoreElectronHolographicInteractionControl.prototype._createAndAttachControlDevices = function () {
        var _this = this;
        this._logger.info('_createAndAttachControlDevices()');
        if (this._dataChannel) {
            if (!this._annotationDataSource) {
                this._annotationDataSource = SlimCore.createDataSource(HOLOGRAPHIC_INTERACTION_DATAID);
                try {
                    this._dataChannel.registerDataSource(this._annotationDataSource);
                    this._logger.info('created annotation data source');
                }
                catch (error) {
                    this._logger.info('registerDataSource threw exception: ' + error);
                }
            }
            if (!this._annotationDataSink) {
                this._annotationDataSink = SlimCore.createDataSink(HOLOGRAPHIC_INTERACTION_DATAID);
                try {
                    this._dataChannel.registerDataSink(this._annotationDataSink);
                }
                catch (error) {
                    this._logger.info('registerDataSink threw exception: ' + error);
                }
                this._logger.info('created Control data sink');
                this._annotationDataSink.on('data', (function (args) {
                    _this._logger.info('Received data on AnnotationDataSink: ' + args);
                    _this._processIncomingMessage(args);
                }));
            }
            this.event('interactionReady').raise();
        }
        else {
            this._logger.warn('_createAndAttachControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._detachAndDeleteControlDevices = function () {
        this._logger.info('_detachAndDeleteControlDevices()');
        if (this._annotationDataSink !== null) {
            this._annotationDataSink.removeAllListeners('data');
        }
        if (this._dataChannel) {
            if (this._annotationDataSource !== null) {
                try {
                    this._dataChannel.unregisterDataSource(this._annotationDataSource);
                }
                catch (error) {
                    this._logger.warn('unregisterDataSource threw exception: ' + error);
                }
                this._annotationDataSource = null;
                this._logger.info('deleted Annotation data source');
            }
            if (this._annotationDataSink !== null) {
                try {
                    this._dataChannel.unregisterDataSink(this._annotationDataSink);
                }
                catch (error) {
                    this._logger.warn('unregisterDataSink threw exception: ' + error);
                }
                this._annotationDataSink = null;
                this._logger.info('deleted Annotation data sink');
            }
            this.event('interactionTerminated').raise(0);
        }
        else {
            this._logger.warn('_detachAndDeleteControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._videoSizeChanged = function (width, height) {
        if (this._controlCapturer != null) {
            this._controlCapturer.updateVideoSize(width, height);
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setViewingRenderer = function (renderer) {
        var _this = this;
        this._logger.info('_setViewingRenderer()');
        try {
            this._interactionVideoRenderer = null;
            this._disposeControlCapturer();
            var videoStreamRenderer = renderer;
            if (videoStreamRenderer) {
                this._interactionVideoRenderer = videoStreamRenderer.videoRenderer;
                this._interactionVideoRenderer.on('video-size-changed', function (args) { return _this._videoSizeChanged(args.width, args.height); });
                this._controlCapturer = new SlimCoreElectronControlCapturer_1.default(this._logger, videoStreamRenderer.renderTarget, false);
                this._setCapture(3);
                this._logger.info('_setViewingRenderer: _interactionVideoRenderer is set');
            }
            else {
                this._logger.info('_setViewingRenderer: _interactionVideoRenderer is null');
            }
        }
        catch (error) {
            this._logger.error('_setViewingRenderer: unable to set _interactionVideoRenderer error = ' + error);
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setCapture = function (captureMode) {
        this._logger.info('_setCapture() - new CaptureMode: ' + captureMode);
        if (!!this._controlCapturer) {
            if (captureMode !== 0 && captureMode !== 3) {
                this._logger.error('_setCapture(): Unable to set the capture mode to: ' + captureMode);
                return;
            }
            if (this._controlCapturer.captureMode === captureMode) {
                return;
            }
            this._controlCapturer.setCaptureMode(captureMode);
            this._clearCapturerEventSubscriptions();
            if (captureMode === 0) {
                this.event('interactionDisabled').raise();
                var buffer = new ArrayBuffer(RESUME_EVENT_SIZE);
                var dataView = new DataView(buffer);
                dataView.setUint8(0, HolographicEvent.ResumeVideo);
                this._sendHolographicData(new Uint8Array(buffer), true);
            }
            else if (captureMode === 3) {
                this._setCapturerEventSubscriptions();
                this.event('interactionEnabled').raise();
                var poseAndProjection = this._getPoseAndProjection();
                var buffer = new ArrayBuffer(PAUSE_EVENT_SIZE + poseAndProjection.length);
                var dataView = new DataView(buffer);
                dataView.setUint8(0, HolographicEvent.PauseVideo);
                var packet = new Uint8Array(buffer);
                packet.set(poseAndProjection, PAUSE_EVENT_SIZE);
                this._sendHolographicData(new Uint8Array(buffer));
            }
        }
        else {
            this._logger.warn('_controlCapturer not found when trying to setup viewer capture mode');
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setDataChannel = function (channel) {
        if (this._dataChannel && channel === null) {
            this._detachAndDeleteControlDevices();
        }
        this._dataChannel = channel;
    };
    SlimCoreElectronHolographicInteractionControl.prototype._mapParticipantToSourceId = function (participant) {
        var sourceId = -1;
        if (participant !== null) {
            var p = participant;
            sourceId = p.getSourceIdForMediaType(4);
        }
        else {
            this._logger.error('_mapParticipantToSourceId unexpected null participant');
        }
        return sourceId;
    };
    SlimCoreElectronHolographicInteractionControl.prototype._getHoloLensRenderer = function () {
        if (!this._participant)
            throw new Error('HIC in wrong state: No active participant has been set');
        var streams = this._participant.streams[0];
        if (streams.length === 0)
            throw new Error('HIC in wrong state: HoloLens is not sending video');
        if (streams.length !== 1)
            throw new Error('HIC in wrong state: HoloLens should only be able to send one stream');
        var stream = streams[0];
        return stream.renderer;
    };
    SlimCoreElectronHolographicInteractionControl.prototype._getPoseAndProjection = function () {
        if (this._currentPoseAndProjection)
            return this._currentPoseAndProjection;
        var renderer = this._getHoloLensRenderer();
        if (!renderer || !renderer.frameSinkMetadata)
            return new Uint8Array(0);
        var attachment = renderer.frameSinkMetadata.attachment;
        if (!attachment)
            return new Uint8Array(0);
        return attachment;
    };
    SlimCoreElectronHolographicInteractionControl.prototype._captureFrame = function (frameContainer) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var renderer = _this._getHoloLensRenderer();
            if (!renderer)
                throw new Error("HIC has no renderer for the remote participant");
            var rendererContainer = frameContainer.ownerDocument.createElement('div');
            rendererContainer.className = CAPTUREDFRAME_ELEMENT_CLASSNAME;
            var clonedRenderer = renderer.clone(rendererContainer);
            var changedSubscription = null;
            var timeoutId = window.setTimeout(function () {
                changedSubscription && changedSubscription.dispose();
                clonedRenderer.dispose();
                reject(new Error('Timed out while waiting for cloned renderer to start rendering'));
            }, VIDEOCLONE_TIMEOUT);
            changedSubscription = clonedRenderer.changed(function () {
                if (clonedRenderer.isRendering) {
                    changedSubscription && changedSubscription.dispose();
                    window.clearTimeout(timeoutId);
                    clonedRenderer.paused = true;
                    frameContainer.appendChild(rendererContainer);
                    var attachment = !!clonedRenderer.frameSinkMetadata ? clonedRenderer.frameSinkMetadata.attachment : null;
                    resolve(new CapturedFrame(_this._logger, rendererContainer, attachment, clonedRenderer));
                }
            });
        });
    };
    SlimCoreElectronHolographicInteractionControl.prototype._getNextRequestId = function () {
        this._currentRequestId = ++SlimCoreElectronHolographicInteractionControl.annotationRequestId;
        return this._currentRequestId;
    };
    Object.defineProperty(SlimCoreElectronHolographicInteractionControl.prototype, "currentRequestId", {
        get: function () {
            return this._currentRequestId;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronHolographicInteractionControl.prototype._setCapturerEventSubscriptions = function () {
        this._logger.info('_setCapturerEventSubscriptions()');
        this._setHolographicInteractionControlSubscriptions();
        this._setHolographicInteractionCaptureSubscriptions();
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setHolographicInteractionControlSubscriptions = function () {
        var _this = this;
        this._holographicControlEventSubscription = this._controlCapturer.on('controlEvent', (function (data) {
            if (!data || data.length === 0) {
                _this._logger.warn('_controlCapturer on controlEvent: received an empty event data!');
                return;
            }
            var view = new DataView(data.buffer);
            var isMouseEvent = (view.getUint8(0) === 1);
            if (isMouseEvent) {
                var mouseEventType = (view.getUint8(1) & 3);
                var button = (view.getUint8(1) >> 2 & 7);
                var isButtonDown = ((view.getUint8(1) >> 5 & 1) === 1);
                var xPos = view.getUint16(2, true);
                var yPos = view.getUint16(4, true);
                var isMouseButtonEvent = (mouseEventType === 2 && button === 0);
                switch (_this._holographicInteractionMode) {
                    case 0:
                        if (isMouseButtonEvent && !isButtonDown && _this._wasLeftMouseButtonDown) {
                            _this._prepareAndSendHolographicData(HolographicEvent.PlaceArrow, xPos, yPos, _this._getNextRequestId());
                        }
                        break;
                    case 1:
                        if (isMouseButtonEvent && isButtonDown) {
                            if (_this._isInkingInProgress) {
                                _this._logger.error('Inking was already in progress when attempting to start new inking stroke!');
                            }
                            _this._isInkingInProgress = true;
                            _this._prepareAndSendHolographicData(HolographicEvent.InkingStart, xPos, yPos, _this._getNextRequestId());
                        }
                        else if (mouseEventType === 0 && _this._isInkingInProgress) {
                            _this._prepareAndSendHolographicData(HolographicEvent.InkingInProgress, xPos, yPos, _this._currentRequestId);
                        }
                        else if (isMouseButtonEvent && !isButtonDown && _this._isInkingInProgress) {
                            _this._isInkingInProgress = false;
                            _this._prepareAndSendHolographicData(HolographicEvent.InkingStop, xPos, yPos, _this._currentRequestId);
                        }
                        break;
                    default:
                        _this._logger.info('unsupported interaction mode!');
                        break;
                }
                if (isMouseButtonEvent) {
                    _this._wasLeftMouseButtonDown = isButtonDown;
                }
            }
        }));
    };
    SlimCoreElectronHolographicInteractionControl.prototype._setHolographicInteractionCaptureSubscriptions = function () {
        var _this = this;
        this._holographicCaptureEventSubscription = this._controlCapturer.on('captureEvent', (function (data) {
            if (_this._holographicInteractionMode === 1) {
                if (_this._isInkingInProgress && data === 2) {
                    _this._logger.info('_controlCapturer: inking stop on mouse leaving the area');
                    _this._prepareAndSendHolographicData(HolographicEvent.InkingStop, 0, 0, _this._currentRequestId);
                    _this._isInkingInProgress = false;
                }
            }
        }));
    };
    SlimCoreElectronHolographicInteractionControl.prototype._prepareAndSendHolographicData = function (eventType, xPos, yPos, requestId) {
        var captureRegion = this._controlCapturer.captureRegion;
        var buffer = new ArrayBuffer(ANNOTATION_EVENT_SIZE);
        var dataView = new DataView(buffer);
        dataView.setUint8(0, eventType);
        dataView.setUint16(1, xPos, true);
        dataView.setUint16(3, yPos, true);
        dataView.setUint16(5, captureRegion.width, true);
        dataView.setUint16(7, captureRegion.height, true);
        dataView.setUint32(9, this.color, true);
        dataView.setUint32(13, requestId, true);
        var xScreenPosition = Math.round((xPos / CTRL_MOUSE_MAXPOS * captureRegion.width));
        var yScreenPosition = Math.round((yPos / CTRL_MOUSE_MAXPOS * captureRegion.height));
        switch (eventType) {
            case HolographicEvent.PlaceArrow:
                this._logger.info('_controlCapturer: placing arrow at x=' + xScreenPosition + '/' + captureRegion.width + ' (width)'
                    + ', y=' + yScreenPosition + '/' + captureRegion.height + ' (height)' + ', color=' + this.color.toString(16));
                this.event('arrowPlace').raise(requestId, xScreenPosition, yScreenPosition, this.color);
                break;
            case HolographicEvent.InkingStart:
                this._logger.info('_controlCapturer: inking start at x=' + xScreenPosition + ', y=' + yScreenPosition + ', color=' + this.color.toString(16));
                this.event('inkingStart').raise(requestId, xScreenPosition, yScreenPosition, this.color);
                break;
            case HolographicEvent.InkingInProgress:
                this.event('inkingInProgress').raise(requestId, xScreenPosition, yScreenPosition);
                break;
            case HolographicEvent.InkingStop:
                this._logger.info('_controlCapturer: inking stop at x=' + xScreenPosition + ', y=' + yScreenPosition);
                this.event('inkingStop').raise();
                break;
            default:
                this._logger.info('_controlCapturer: unsupported event type!');
                break;
        }
        this._sendHolographicData(new Uint8Array(buffer));
    };
    SlimCoreElectronHolographicInteractionControl.prototype._sendHolographicData = function (data, sendIfDisabled) {
        if (sendIfDisabled === void 0) { sendIfDisabled = false; }
        if (!!this._annotationDataSource
            && ((!!this._controlCapturer && this._controlCapturer.captureMode !== 0) || sendIfDisabled)
            && !!this._participant
            && this.state === 2) {
            var sharerSourceId = this._mapParticipantToSourceId(this._participant);
            var recipients = [sharerSourceId];
            this._annotationDataSource.sendData(data, recipients);
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processIncomingMessage = function (args) {
        var view = new DataView(args.data.buffer);
        var messageType = view.getUint8(0);
        switch (messageType) {
            case AnnotationEvent.AnnotationCreated:
                this._processAnnotationCreatedMessage(view);
                break;
            case AnnotationEvent.AnnotationModified:
                this._processAnnotationModifiedMessage(view);
                break;
            case AnnotationEvent.AnnotationRemoved:
                this._processAnnotationRemovedMessage(view);
                break;
            case AnnotationEvent.InteractionReady:
                this._processInteractionReadyMessage(view);
                break;
            case AnnotationEvent.InteractionTerminated:
                this._processInteractionTerminatedMessage(view);
                break;
            default:
                this._logger.error('Unexpected message type received: type = ' + messageType);
                break;
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processAnnotationCreatedMessage = function (view) {
        var ownerId = view.getUint32(1, true);
        var requestId = view.getUint32(5, true);
        var annotationId = view.getUint32(9, true);
        var annotationType = view.getUint8(13);
        var positionX = view.getFloat32(14, true);
        var positionY = view.getFloat32(18, true);
        var scale = view.getFloat32(22, true);
        var angleInDegrees = view.getFloat32(26, true);
        var color = 0;
        if (view.byteLength > 30) {
            color = view.getUint32(30, true);
            this._logger.info('Using color provided with annotationCreated message: ' + color.toString(16));
        }
        else {
            if (ownerId === 0) {
                color = this.defaultColorOther;
            }
            else if (ownerId === 1) {
                color = this.defaultColorSelf;
            }
            else {
                this._logger.error('Returning default color for an unknown owner ID (red)');
                color = 0xFF0000;
            }
            this._logger.info('Using default color (annotationCreated message does not have color information): ' + color.toString(16));
        }
        this.event('annotationCreated').raise(ownerId, requestId, annotationId, annotationType, positionX, positionY, scale, angleInDegrees, color);
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processAnnotationModifiedMessage = function (view) {
        var ownerId = view.getUint32(1, true);
        var requestId = view.getUint32(5, true);
        var annotationId = view.getUint32(9, true);
        var annotationType = view.getUint8(13);
        var positionX = view.getFloat32(14, true);
        var positionY = view.getFloat32(18, true);
        this.event('annotationModified').raise(ownerId, requestId, annotationId, annotationType, positionX, positionY);
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processAnnotationRemovedMessage = function (view) {
        var ownerId = view.getUint32(1, true);
        var requestId = view.getUint32(5, true);
        var annotationId = view.getUint32(9, true);
        var isPermanent = view.getUint8(13) === 1;
        this.event('annotationRemoved').raise(ownerId, requestId, annotationId, isPermanent);
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processInteractionReadyMessage = function (view) {
        this.event('interactionReady').raise();
    };
    SlimCoreElectronHolographicInteractionControl.prototype._processInteractionTerminatedMessage = function (view) {
        var terminatedReason = view.getUint8(1);
        this.event('interactionTerminated').raise(terminatedReason);
    };
    SlimCoreElectronHolographicInteractionControl.prototype._clearCapturerEventSubscriptions = function () {
        this._logger.info('_clearCapturerEventSubscriptions()');
        if (this._holographicControlEventSubscription) {
            this._holographicControlEventSubscription.dispose();
            this._holographicControlEventSubscription = null;
        }
        if (this._holographicCaptureEventSubscription) {
            this._holographicCaptureEventSubscription.dispose();
            this._holographicCaptureEventSubscription = null;
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._disposeControlCapturer = function () {
        this._logger.info('_disposeControlCapturer');
        this._clearCapturerEventSubscriptions();
        if (this._controlCapturer) {
            this._controlCapturer.dispose();
            this._controlCapturer = null;
        }
    };
    SlimCoreElectronHolographicInteractionControl.prototype._onDataChannelStatusChanged = function (dataChannelStatus) {
        if (!this._featureFlagEnabled) {
            return;
        }
        this._logger.info('Data channel status = ' + dataChannelStatus);
        if (dataChannelStatus === 4) {
            if (this._dataChannel && !this._dataChannelActive) {
                this._dataChannelActive = true;
                this._createAndAttachControlDevices();
                this._logger.info('_onDataChannelStatusChanged() - setting CaptureMode to Control');
            }
        }
        else if (dataChannelStatus === 2) {
            if (this._dataChannel && this._dataChannelActive) {
                this._dataChannelActive = false;
                this._detachAndDeleteControlDevices();
                this._logger.info('_onDataChannelStatusChanged() - setting CaptureMode to Disabled');
            }
        }
    };
    return SlimCoreElectronHolographicInteractionControl;
}(SlimCoreElectronBase_1.default));
SlimCoreElectronHolographicInteractionControl.annotationRequestId = 0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronHolographicInteractionControl;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronCall_1 = __webpack_require__(4);
var SlimCoreCommon = __webpack_require__(0);
var _ = __webpack_require__(2);
var async = __webpack_require__(3);
var validStateTransitions = (_a = {},
    _a[0] = [1, 2, 3, 4],
    _a[1] = [2, 3, 4],
    _a[2] = [3, 4],
    _a[3] = [4],
    _a[4] = [],
    _a);
var SlimCoreElectronLightWeightMeeting = (function (_super) {
    __extends(SlimCoreElectronLightWeightMeeting, _super);
    function SlimCoreElectronLightWeightMeeting(_callHandler, logger, _slimcoreInstance) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronLightWeightMeeting"; })) || this;
        _this._callHandler = _callHandler;
        _this._slimcoreInstance = _slimcoreInstance;
        _this.metadata = null;
        _this.state = 0;
        _this.stateReason = null;
        _this._pendingDeferreds = [];
        _this._logger.log('constructor');
        _this._waitForStartLightWeightMeeting = async.defer();
        _this._pendingDeferreds.push(_this._waitForStartLightWeightMeeting);
        return _this;
    }
    SlimCoreElectronLightWeightMeeting.prototype.waitForLightWeightMeetinJoin = function () {
        var _this = this;
        return Promise.resolve(undefined)
            .then(function () { return _this._waitForStartLightWeightMeeting.promise; });
    };
    SlimCoreElectronLightWeightMeeting.prototype.attachSlimCoreLightWeightMeetingId = function (attachLightWeightMeetingId) {
        var _this = this;
        if (this.slimCoreLightWeightMeetingId && this.slimCoreLightWeightMeetingId !== 0) {
            this._logger.warn('Attach called on existing light weight meeting');
            return;
        }
        this.slimCoreLightWeightMeetingId = attachLightWeightMeetingId;
        this.metadata = this.getStrProperty(5328);
        this._onLightWeightMeetingPropertyChanged(5325, function (data) { return _this._onStatusChanged(data); });
        this._onLightWeightMeetingPropertyChanged(5328, function (data) { return _this._metadataChanged(data); });
        var lightWeightMeetingStatus = this.getIntProperty(5325);
        this._onStatusChanged({
            objectType: 14,
            objectId: this.slimCoreLightWeightMeetingId,
            propKey: 5325,
            value: lightWeightMeetingStatus,
        });
        this.raiseChanged();
    };
    SlimCoreElectronLightWeightMeeting.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._callHandler, this.slimCoreLightWeightMeetingId, property, fallback);
    };
    SlimCoreElectronLightWeightMeeting.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._callHandler, this.slimCoreLightWeightMeetingId, property, fallback);
    };
    SlimCoreElectronLightWeightMeeting.prototype._onLightWeightMeetingPropertyChanged = function (propKey, listener) {
        this.registerCallback(SlimCoreCommon.onObjectPropertyChanged(this._slimcoreInstance, propKey, this.slimCoreLightWeightMeetingId, listener), true);
    };
    SlimCoreElectronLightWeightMeeting.prototype._metadataChanged = function (eventData) {
        var metadata = eventData.value;
        if (metadata !== this.metadata) {
            this._logger.info("Metadata for light weight meeting changed");
            this.metadata = metadata;
            this.raiseChanged();
        }
    };
    SlimCoreElectronLightWeightMeeting.prototype._onStatusChanged = function (data) {
        this._logger.info("Light weight meeting status changed " + data.value);
        this.setState(SlimCoreElectronLightWeightMeeting.convertLightWeightMeetingStatus(data.value));
    };
    SlimCoreElectronLightWeightMeeting.prototype.setState = function (state) {
        if (this.state === state) {
            return;
        }
        var validNextStates = validStateTransitions[this.state];
        var isValidNextState = validNextStates.indexOf(state) >= 0;
        if (!isValidNextState) {
            throw new Error("Invalid state transition " + this.state + " -> " + state + " attempted for light weight meeting");
        }
        this._logger.info("setState for light weight meeting called. state: " + this.state + " -> " + state);
        this.state = state;
        if (this.state === 2) {
            this._invokeDeferred(this._waitForStartLightWeightMeeting);
        }
        else if (this.state === 4) {
            var failure = this.getIntProperty(5333);
            var code = this.getIntProperty(5337);
            var subCode = this.getIntProperty(5341);
            var reason = SlimCoreElectronCall_1.default.convertLightWeightFailureReasonToTerminatedReason(failure);
            this._logger.info("set failure reason for light weight meeting called. reason: " + reason);
            this.stateReason = {
                terminatedReason: reason,
                terminatedReasonCode: code,
                terminatedReasonSubCode: subCode,
            };
            this._rejectPendingPromises(reason);
        }
        this.raiseChanged();
    };
    SlimCoreElectronLightWeightMeeting.convertLightWeightMeetingStatus = function (status) {
        switch (status) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            case 3:
                return 3;
            case 4:
                return 4;
            default:
                return 0;
        }
    };
    SlimCoreElectronLightWeightMeeting.prototype._rejectPendingPromises = function (terminatedReason) {
        this._logger.info('rejectPendingPromises : Terminated, reason = ' + terminatedReason);
        this._pendingDeferreds.forEach(function (deferred) {
            deferred.reject(new Error('Light weight meeting is terminated. Reason = ' + terminatedReason));
        });
        this._pendingDeferreds = [];
    };
    SlimCoreElectronLightWeightMeeting.prototype._invokeDeferred = function (deferred) {
        this._logger.info('_invokeDeferred');
        if (deferred) {
            _.pull(this._pendingDeferreds, deferred);
            deferred.resolve();
        }
    };
    SlimCoreElectronLightWeightMeeting.prototype.dispose = function () {
        this.slimCoreLightWeightMeetingId = 0;
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronLightWeightMeeting;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronLightWeightMeeting;
var _a;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async = __webpack_require__(3);
var guid_1 = __webpack_require__(19);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(1);
var SlimCoreElectronControlCapturer_1 = __webpack_require__(20);
var SlimCoreElectronDataChannel_1 = __webpack_require__(21);
var CONTROL_REQUEST_WAIT_TIMEOUT = 30000;
var CONTROL_ACK_WAIT_TIMEOUT = 10000;
var AVAILABLE_ACK_WAIT_TIMEOUT = 5000;
var INPUT_RAW_ERROR_REPORTING_WAIT_TIMEOUT = 10000;
var AVAILABLE_RETRY_LIMIT = 5;
var LOCAL_PARTICIPANT_MRI = '';
var SlimCoreElectronScreenSharingControl = (function (_super) {
    __extends(SlimCoreElectronScreenSharingControl, _super);
    function SlimCoreElectronScreenSharingControl(logger, callId, _controlInjector) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronScreenSharingControl"; })) || this;
        _this.callId = callId;
        _this._controlInjector = _controlInjector;
        _this.controlState = 0;
        _this.role = 0;
        _this.controlDataChannelStatus = { id: null, readyForControl: false, state: 0 };
        _this._enabled = false;
        _this._availableAckEnabled = true;
        _this._dataChannelActive = false;
        _this._dataChannelAvailableSent = false;
        _this._protocolDataSource = null;
        _this._controlDataSource = null;
        _this._controlDataSink = null;
        _this._controlRequest = null;
        _this._controllerParticipant = null;
        _this._screenSharingVideoRenderer = null;
        _this._sharerParticipant = null;
        _this._controlCapturer = null;
        _this._captureEventSubscription = null;
        _this._controlEventSubscription = null;
        _this._requestControlTimer = null;
        _this._grantControlTimer = null;
        _this._acceptControlTimer = null;
        _this._terminateControlTimer = null;
        _this._availableAckTimer = null;
        _this._retryAttempt = 0;
        _this._injectRawInputErrorTimer = null;
        _this._lastInjectRawInputErrorCount = 0;
        _this._logger.log('constructor');
        return _this;
    }
    SlimCoreElectronScreenSharingControl.prototype.enableScreenSharingControl = function (enabled, reason, detail) {
        if (this._availableAckEnabled === enabled) {
            return;
        }
        if (!enabled) {
            if (reason === 0) {
                var controlError = {
                    reason: 2,
                    detail: detail
                };
                this.event('sharingControlError').raise(controlError);
            }
            this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
        }
        else {
            this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
        }
        this._availableAckEnabled = enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.setScreenSharingControlFeatureFlag = function (enabled) {
        this._enabled = enabled;
        this._availableAckEnabled = enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.isScreenSharingControlEnabled = function () {
        return this._enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.setRenderer = function (renderer) {
        var _this = this;
        return async.asap(function () { return _this._setViewingRenderer(renderer); });
    };
    SlimCoreElectronScreenSharingControl.prototype.setDataChannel = function (channel) {
        var _this = this;
        return async.asap(function () { return _this._setDataChannel(channel); });
    };
    SlimCoreElectronScreenSharingControl.prototype._setDataChannel = function (channel) {
        this._logger.info("Setting DataChannel " + (channel && channel.id));
        if (this._dataChannel && !channel) {
            this._detachAndDeleteControlDevices();
        }
        this._dataChannel = channel;
        if (channel) {
            this.controlDataChannelStatus = {
                id: channel.id,
                readyForControl: false,
                state: SlimCoreElectronDataChannel_1.default._mapDataChannelStatus(channel._lastDataChannelState),
            };
            this.event('controlDataChannelStateChanged').raise(this.controlDataChannelStatus);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.setProtocolDataSource = function (source) {
        var _this = this;
        return async.asap(function () { return _this._setProtocolDataSource(source); });
    };
    SlimCoreElectronScreenSharingControl.prototype._setProtocolDataSource = function (source) {
        this._protocolDataSource = source;
    };
    SlimCoreElectronScreenSharingControl.prototype._raiseScreenSharingControlCapableEvent = function (isCapable, participantId) {
        if (this._enabled) {
            this._logger.info('_raiseScreenSharingControlCapableEvent() enabled is true, raising control capability, capable=' + isCapable);
            var capable = { capable: isCapable, id: participantId };
            this.event('sharingControlCapable').raise(capable);
        }
        else {
            this._logger.info('_raiseScreenSharingControlCapableEvent() enabled is false, disabling control capability');
            var capable = { capable: false, id: participantId };
            this.event('sharingControlCapable').raise(capable);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.initControlForSharer = function () {
        this._logger.info('initControlForSharer()');
        this._resetControlState();
        this._screenSharingVideoRenderer = null;
        this._disposeControlCapturer();
        this.role = 1;
        this._dataChannelAvailableSent = false;
        this._setInjectorMode(0);
        this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
    };
    SlimCoreElectronScreenSharingControl.prototype.shutdownControlForSharer = function () {
        this._logger.info('shutdownControlForSharer()');
        if (this._controlRequest) {
            this._logger.warn('Rejecting pending control requests');
            var controlRequesterSourceId = this._mapParticipantToSourceId(this._controlRequest.participant);
            this._controlRequest = null;
            this._sendRequest({ action: 4, terminatedReason: 5 }, controlRequesterSourceId);
        }
        this.role = 0;
        if (this._controllerParticipant) {
            var controlInfo = {
                inControl: false,
                id: this._controllerParticipant.id,
                terminatedReason: 5,
            };
            this.event('sharingControlChanged').raise(controlInfo);
        }
        this._teardownSharerRemoteControl();
        this._resetControlState();
        this._availableAckEnabled = this._enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.initControlForViewer = function (sharer) {
        this._logger.info('initControlForViewer()');
        this.role = 2;
        if (this._sharerParticipant) {
            if (this._sharerParticipant.id !== sharer.id) {
                this._logger.info('initControlForViewer() sharer switched, new sharer id=' + sharer.id);
                this._dataChannelAvailableSent = false;
                if (this.controlState === 4) {
                    this._terminateControl(false);
                }
            }
        }
        else {
            this._logger.info('initControlForViewer() setting sharer to id=' + sharer.id);
            this._sharerParticipant = sharer;
            this._dataChannelAvailableSent = false;
        }
        if (this._dataChannel && this._dataChannelActive && !this._dataChannelAvailableSent) {
            this._resetControlState();
            this.role = 2;
            this._sharerParticipant = sharer;
            var sharerSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
            this._logger.info('initControlForViewer() sending Available message to sharer');
            this._startAvailableHandshake(sharerSourceId);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.shutdownControlForViewer = function (sharer) {
        this._logger.info('shutdownControlForViewer()');
        var shouldShutdownControlForViewer = false;
        if (!sharer ||
            (this._sharerParticipant && sharer.id === this._sharerParticipant.id)) {
            this._logger.info('shutdownControlForViewer: setting shouldShutdownControlForViewer to true');
            shouldShutdownControlForViewer = true;
        }
        if (shouldShutdownControlForViewer && this._isViewing()) {
            if (this.controlState === 1) {
                if (this._sharerParticipant) {
                    var sharerSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
                    this._sendRequest({ action: 2, terminatedReason: 6 }, sharerSourceId);
                }
                else {
                    this._logger.warn('shutdownControlForViewer: sharer participant is null');
                }
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6,
                };
                if (this._requestControlPromise) {
                    this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
                }
                else {
                    this._logger.error('Unexpected, no promise could be resolved - state =ControlState.RequestSent action =shutdownControlForViewer');
                }
            }
            else if (this.controlState === 4) {
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6,
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
            this._teardownViewerRemoteControl();
            this._resetControlState();
            this._screenSharingVideoRenderer = null;
            this._disposeControlCapturer();
            if (this._terminateAvailableHandshake) {
                this._terminateAvailableHandshake(2);
            }
            this._dataChannelAvailableSent = false;
            this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.handleParticipantRemoved = function (participantId) {
        if (this._isSharing()) {
            if (this._controllerParticipant && this._controllerParticipant.id === participantId) {
                this._logger.info('handleParticipantRemoved: controller left call, tearing down control session');
                this._teardownSharerRemoteControl();
                this.controlState = 0;
                this._controllerParticipant = null;
                var controlInfo = {
                    inControl: false,
                    id: participantId,
                    terminatedReason: 5,
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
            this._raiseScreenSharingControlCapableEvent(false, participantId);
        }
        else {
            if (this._sharerParticipant && this._sharerParticipant.id === participantId && this.controlState === 4) {
                this._logger.info('handleParticipantRemoved: sharer left call, tearing down control session');
                this._teardownViewerRemoteControl();
                this.controlState = 0;
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6,
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.handleCallDisconnected = function () {
        this._logger.info('handleCallDisconnected()');
        if (this._isSharing()) {
            this.shutdownControlForSharer();
        }
        else {
            this.shutdownControlForViewer();
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._videoSizeChanged = function (width, height) {
        if (this._controlCapturer != null) {
            this._controlCapturer.updateVideoSize(width, height);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._setViewingRenderer = function (renderer) {
        var _this = this;
        try {
            this._screenSharingVideoRenderer = null;
            this._disposeControlCapturer();
            var screenSharingRenderer = renderer;
            if (screenSharingRenderer) {
                this._screenSharingVideoRenderer = screenSharingRenderer.videoRenderer;
                this._screenSharingVideoRenderer.on('video-size-changed', function (args) { return _this._videoSizeChanged(args.width, args.height); });
                this._controlCapturer = new SlimCoreElectronControlCapturer_1.default(this._logger, screenSharingRenderer.renderTarget);
                if (this.controlState === 4) {
                    this._logger.info('_setViewingRenderer: detected local state is controlling');
                    this._setupViewerRemoteControl();
                }
                else {
                    this._setCapturerMode(0);
                }
            }
            else {
                this._logger.error('_setViewingRenderer: screenSharingRenderer is null');
            }
        }
        catch (error) {
            this._logger.error('_setViewingRenderer: unable to set _screenSharingVideoRenderer error = ' + error);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._isSharing = function () {
        return (this.role === 1);
    };
    SlimCoreElectronScreenSharingControl.prototype._isViewing = function () {
        return (this.role === 2);
    };
    SlimCoreElectronScreenSharingControl.prototype._createAndAttachControlDevices = function () {
        var _this = this;
        this._logger.info('_createAndAttachControlDevices()');
        if (!SlimCore.createDataSource || !SlimCore.createDataSink) {
            this._logger.warn('createDataSource or createDataSink not implemented');
            return;
        }
        if (this._dataChannel) {
            var registerDataSource = Promise.resolve();
            var registerDataSink = Promise.resolve();
            if (!this._controlDataSource) {
                this._controlDataSource = SlimCore.createDataSource(2);
                this._logger.info('created Control DataSource');
                registerDataSource = this._dataChannel.registerDataSource(this._controlDataSource)
                    .then(function () { return _this._logger.info('registered Control DataSource'); })
                    .catch(function (error) { return _this._logger.error('registerDataSource threw exception:' + error); });
            }
            if (!this._controlDataSink) {
                this._controlDataSink = SlimCore.createDataSink(2);
                this._logger.info('created Control DataSink');
                registerDataSink = this._dataChannel.registerDataSink(this._controlDataSink)
                    .then(function () { return _this._logger.info('registered Control DataSink'); })
                    .catch(function (error) { return _this._logger.error('registerDataSink threw exception:' + error); });
            }
            Promise.all([registerDataSource, registerDataSink]).then(function () {
                _this.controlDataChannelStatus.readyForControl = true;
                _this.event('controlDataChannelStateChanged').raise(_this.controlDataChannelStatus);
            });
            this._controlDataSink.on('data', (function (args) {
                _this._controlInjector.injectRawInput(args.data, args.sourceID).catch(function (error) {
                    _this._lastInjectRawInputErrorCount++;
                    if (_this._injectRawInputErrorTimer === null) {
                        _this._injectRawInputErrorTimer = setTimeout(function () {
                            var controlError = {
                                reason: 1,
                                detail: JSON.stringify({ count: _this._lastInjectRawInputErrorCount, errorMsg: error })
                            };
                            _this.event('sharingControlError').raise(controlError);
                            _this._lastInjectRawInputErrorCount = 0;
                            _this._injectRawInputErrorTimer = null;
                        }, INPUT_RAW_ERROR_REPORTING_WAIT_TIMEOUT);
                    }
                });
            }));
        }
        else {
            this._logger.warn('_createAndAttachControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._detachAndDeleteControlDevices = function () {
        var _this = this;
        this._logger.info('_detachAndDeleteControlDevices()');
        if (this._controlDataSink) {
            this._controlDataSink.removeAllListeners('data');
        }
        if (this._dataChannel) {
            if (this._controlDataSource) {
                this._dataChannel.unregisterDataSource(this._controlDataSource)
                    .then(function () { return _this._logger.info('Control DataSource unregistered'); })
                    .catch(function (error) { return _this._logger.warn('unregisterDataSource threw exception:' + error); });
                this._controlDataSource = null;
                this._logger.info('deleted Control data source');
            }
            if (this._controlDataSink) {
                this._dataChannel.unregisterDataSink(this._controlDataSink)
                    .then(function () { return _this._logger.info('Control DataSink unregistered'); })
                    .catch(function (error) { return _this._logger.warn('unregisterDataSink threw exception:' + error); });
                this._controlDataSink = null;
                this._logger.info('deleted Control data sink');
            }
        }
        else {
            this._logger.warn('_detachAndDeleteControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.onDataChannelStatusChanged = function (dataChannelStatus) {
        var _this = this;
        return async.asap(function () { return _this._onDataChannelStatusChanged(dataChannelStatus); });
    };
    SlimCoreElectronScreenSharingControl.prototype._onDataChannelStatusChanged = function (dataChannelStatus) {
        this._logger.info('Data channel status = ' + dataChannelStatus);
        this.controlDataChannelStatus.readyForControl = this.controlDataChannelStatus.readyForControl && dataChannelStatus === 4;
        this.controlDataChannelStatus.state = SlimCoreElectronDataChannel_1.default._mapDataChannelStatus(dataChannelStatus);
        this.event('controlDataChannelStateChanged').raise(this.controlDataChannelStatus);
        if (dataChannelStatus === 4) {
            if (this._enabled) {
                if (this._dataChannel && !this._dataChannelActive) {
                    this._dataChannelActive = true;
                    this._createAndAttachControlDevices();
                    if (this._isViewing()) {
                        if (!this._dataChannelAvailableSent) {
                            if (this._sharerParticipant) {
                                var sharerSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
                                this._logger.info('_onDataChannelStatusChanged() sending Available message to sharer');
                                this._startAvailableHandshake(sharerSourceId);
                            }
                            else {
                                this._logger.error('Unexpected null _sharerParticipant trying to send Available to sharer');
                            }
                        }
                    }
                    else if (this._isSharing()) {
                        this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
                    }
                }
            }
        }
        else {
            if (this._dataChannel && this._dataChannelActive) {
                this._dataChannelActive = false;
                this._dataChannelAvailableSent = false;
                if (this._terminateAvailableHandshake) {
                    this._terminateAvailableHandshake(3);
                }
                else {
                    var controlError = {
                        reason: 6,
                    };
                    this.event('sharingControlError').raise(controlError);
                }
                this._detachAndDeleteControlDevices();
                this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
            }
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._mapParticipantToSourceId = function (participant) {
        var sourceId = -1;
        if (participant) {
            var p = participant;
            sourceId = p.getSourceIdForMediaType(4);
        }
        else {
            this._logger.error('_mapParticipantToSourceId unexpected null participant');
        }
        return sourceId;
    };
    SlimCoreElectronScreenSharingControl.prototype.processProtocolMessage = function (message, sender, senderSourceId) {
        var _this = this;
        return async.asap(function () { return _this._processProtocolMessage(message, sender, senderSourceId); });
    };
    SlimCoreElectronScreenSharingControl.prototype._processProtocolMessage = function (message, sender, senderSourceId) {
        var controlMessage = JSON.parse(message);
        this._logger.info('_processProtocolMessage action=' + controlMessage.action + ' sender=' + senderSourceId);
        if (controlMessage.action === 0) {
            if (this._enabled === false) {
                this._logger.info('feature flag is off. no need to answer the available ack');
            }
            else if (this._availableAckEnabled === false) {
                this._logger.info('available ack is off. no need to answer the available ack');
            }
            else {
                if (sender && sender.id) {
                    this._raiseScreenSharingControlCapableEvent(true, sender.id);
                    this._logger.info("Acking Available for handShake:" + senderSourceId + ":" + controlMessage.handshakeId);
                    this.event('controlAvailableHandshake').raise(controlMessage.handshakeId, senderSourceId, 3);
                    this._sendRequest({ action: 9, terminatedReason: 0, handshakeId: controlMessage.handshakeId }, senderSourceId);
                }
                else {
                    this._logger.error('Got Available message but could not find a sender participant, ignoring');
                    this.event('controlAvailableHandshake').raise(controlMessage.handshakeId, senderSourceId, 4, 6);
                }
            }
        }
        else if (controlMessage.action === 1) {
            if (this._enabled === false) {
                this._logger.warn('Sharer control is disabled - rejecting request');
                this._sendRequest({ action: 4, terminatedReason: 9 }, senderSourceId);
            }
            else if (this._controlRequest) {
                this._logger.warn('Sharer is already processing a control request...rejecting new requests');
                this._sendRequest({ action: 4, terminatedReason: 3 }, senderSourceId);
            }
            else if (sender === this._controllerParticipant) {
                this._logger.warn('Got control request for someone already in control');
                this._sendRequest({ action: 3, terminatedReason: 0 }, senderSourceId);
            }
            else {
                if (sender) {
                    this._controlRequest = { timestamp: new Date(), participant: sender };
                    this.event('sharingIncomingControlRequest').raise(sender.id);
                }
                else {
                    this._logger.error('Got ControlRequest message but could not find a sender participant, ignoring');
                }
            }
        }
        else if (controlMessage.action === 3) {
            if (this.controlState === 1) {
                var sent = this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
                if (sent) {
                    this._setupViewerRemoteControl();
                    this.controlState = 4;
                    if (this._requestControlPromise) {
                        this._requestControlPromise.resolve();
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =ControlState.RequestSent action =" + controlMessage.action);
                    }
                }
                else {
                    if (this._requestControlPromise) {
                        this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: undefined, details: 'request control is accepted, but fail to send ack' })));
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =" + this.controlState + " action =" + controlMessage.action);
                    }
                }
                this._cancelRequestControlTimer();
            }
            else {
                this._logger.warn('AcceptRequest message received in controlState=' + this.controlState);
            }
        }
        else if (controlMessage.action === 4) {
            if (this.controlState === 1) {
                this.controlState = 0;
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: controlMessage.terminatedReason,
                };
                if (this._requestControlPromise) {
                    this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
                }
                else {
                    this._logger.error("Unexpected, no promise could be resolved - state =ControlState.RequestSent action =" + controlMessage.action);
                }
                this._cancelRequestControlTimer();
            }
            else {
                this._logger.warn('RejectRequest message received in controlState=' + this.controlState + ' reason=' + controlMessage.terminatedReason);
            }
        }
        else if (controlMessage.action === 2) {
            if (this._controlRequest) {
                var controlRequesterId = this._controlRequest.participant.id;
                this._controlRequest = null;
                this.event('sharingIncomingControlRequestCancelled').raise(controlRequesterId);
            }
        }
        else if (controlMessage.action === 6) {
            var sent = this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
            if (sent) {
                this._setupViewerRemoteControl();
                this.controlState = 4;
                var controlInfo = {
                    inControl: true,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: controlMessage.terminatedReason,
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
        }
        else if (controlMessage.action === 5) {
            if (this.controlState === 2) {
                if (sender === this._controllerParticipant) {
                    var controllerSourceId = this._mapParticipantToSourceId(this._controllerParticipant);
                    this._logger.info('Setting up remote control for controller source id=' + controllerSourceId);
                    this._setupSharerRemoteControl(controllerSourceId);
                    this.controlState = 3;
                    var controlInfo = {
                        inControl: true,
                        id: this._controllerParticipant.id,
                        terminatedReason: controlMessage.terminatedReason,
                    };
                    this.event('sharingControlChanged').raise(controlInfo);
                    if (this._grantControlPromise) {
                        this._grantControlPromise.resolve();
                        this._cancelGrantControlTimer();
                    }
                    else if (this._acceptControlPromise) {
                        this._acceptControlPromise.resolve();
                        this._cancelAcceptControlTimer();
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =ControlState.WaitingForControlAck action =" + controlMessage.action);
                    }
                }
                else if (sender) {
                    this._logger.warn('Ignoring ack from participant that does not match controller id =' + sender.id);
                }
                else {
                    this._logger.warn('Ignoring ack from null participant source id =' + senderSourceId);
                }
            }
            else if (this.controlState === 5) {
                this.controlState = 0;
                this._controllerParticipant = null;
                if (this._terminateControlPromise) {
                    this._terminateControlPromise.resolve();
                    this._cancelTerminateControlTimer();
                }
                else {
                    this._logger.error("Unexpected, no promise could be resolved - state =ControlState.WaitingForTerminateAck action =" + controlMessage.action);
                }
            }
            else {
                this._logger.warn("Unexpected ack in control state = " + this.controlState);
            }
        }
        else if (controlMessage.action === 7 ||
            controlMessage.action === 8) {
            var controllerId = void 0;
            if (this._isViewing()) {
                this._teardownViewerRemoteControl();
                controllerId = LOCAL_PARTICIPANT_MRI;
            }
            else {
                this._teardownSharerRemoteControl();
                if (sender) {
                    controllerId = sender.id;
                }
                else {
                    this._logger.error('Got terminate message but could not find a sender participant!');
                }
            }
            this.controlState = 0;
            this._controllerParticipant = null;
            var controlInfo = {
                inControl: false,
                id: controllerId,
                terminatedReason: controlMessage.terminatedReason,
            };
            this.event('sharingControlChanged').raise(controlInfo);
            if (controlMessage.action === 8) {
                this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
            }
        }
        else if (controlMessage.action === 9) {
            if (this._terminateAvailableHandshake) {
                this._terminateAvailableHandshake(1, controlMessage.handshakeId);
            }
            this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
        }
        else {
            this._logger.error('Unknown request action received on control protocol data sink, action=' + controlMessage.action);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._sendRequest = function (data, sourceID) {
        var returnVal = false;
        var dataSource = this._protocolDataSource;
        if (sourceID < 0) {
            this._logger.error('Unexpected: invalid sourceID=' + sourceID);
            return returnVal;
        }
        if (dataSource) {
            this._logger.info('sending control message action=' + data.action + 'to sourceID=' + sourceID);
            var protocolMessage = {
                type: 0,
                message: JSON.stringify(data),
            };
            try {
                var recipients = [sourceID];
                dataSource.sendData(SlimCoreCommon.stringToBuffer(JSON.stringify(protocolMessage)), recipients);
                returnVal = true;
            }
            catch (error) {
                this._logger.error('Unexpected: failure in call to sendData. Error=' + error);
                var controlError = {
                    reason: 5
                };
                this.event('sharingControlError').raise(controlError);
            }
        }
        else {
            this._logger.error('Unexpected: null dataSource in _sendRequest');
        }
        return returnVal;
    };
    SlimCoreElectronScreenSharingControl.prototype._resetControlState = function () {
        this._logger.info('_resetControlState()');
        this.controlState = 0;
        this._controllerParticipant = null;
        this._sharerParticipant = null;
        this._controlRequest = null;
        this._cancelRequestControlTimer();
        this._cancelAcceptControlTimer();
        this._cancelGrantControlTimer();
        this._cancelTerminateControlTimer();
    };
    SlimCoreElectronScreenSharingControl.prototype._setupSharerRemoteControl = function (sourceId) {
        var _this = this;
        this._logger.info('_setupSharerRemoteControl() sourceId=' + sourceId);
        this._setInjectorMode(1);
        this._controlInjector.allowSingleController(sourceId).catch(function (error) {
            var controlError = {
                reason: 3,
                detail: JSON.stringify({ sourceId: sourceId, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._teardownSharerRemoteControl = function () {
        var _this = this;
        this._logger.info('_teardownSharerRemoteControl()');
        this._controlInjector.allowSingleController(0).catch(function (error) {
            var controlError = {
                reason: 3,
                detail: JSON.stringify({ sourceId: 0, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
        this._setInjectorMode(0);
    };
    SlimCoreElectronScreenSharingControl.prototype._setupViewerRemoteControl = function () {
        this._logger.info('_setupViewerRemoteControl()');
        this._setCapturerMode(3);
    };
    SlimCoreElectronScreenSharingControl.prototype._teardownViewerRemoteControl = function () {
        this._logger.info('_teardownViewerRemoteControl()');
        this._setCapturerMode(0);
    };
    SlimCoreElectronScreenSharingControl.prototype._setInjectorMode = function (injectorMode) {
        var _this = this;
        this._logger.info('_setInjectorMode() mode=' + injectorMode);
        var injectorConfig = {
            mode: injectorMode,
            noMotionTimeoutMs: 0,
            noMotionSharerTimeoutMs: 0,
        };
        this._controlInjector.setInjectorConfig(injectorConfig).catch(function (error) {
            var controlError = {
                reason: 0,
                detail: JSON.stringify({ mode: injectorMode, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._clearCapturerEventSubscriptions = function () {
        this._logger.info('_clearCapturerEventSubscriptions()');
        if (this._captureEventSubscription) {
            this._captureEventSubscription.dispose();
            this._captureEventSubscription = null;
        }
        if (this._controlEventSubscription) {
            this._controlEventSubscription.dispose();
            this._controlEventSubscription = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._setCapturerMode = function (capturerMode) {
        var _this = this;
        this._logger.info('_setCapturerMode() capturerMode=' + capturerMode);
        if (this._controlCapturer) {
            this._controlCapturer.setCaptureMode(capturerMode);
            this._clearCapturerEventSubscriptions();
            if (capturerMode === 1) {
                this._captureEventSubscription = this._controlCapturer.on('captureEvent', (function (event) {
                    if (event === 0) {
                        _this.event('sharingRendererClicked').raise();
                    }
                }));
            }
            else if (capturerMode === 2) {
                this._captureEventSubscription = this._controlCapturer.on('captureEvent', (function (event) {
                    if (event === 1) {
                        _this.event('sharingRendererMouseEntering').raise();
                    }
                    else if (event === 2) {
                        _this.event('sharingRendererMouseLeaving').raise();
                    }
                }));
            }
            else if (capturerMode === 3) {
                this._controlEventSubscription = this._controlCapturer.on('controlEvent', (function (data) {
                    if (_this._controlDataSource && _this._sharerParticipant) {
                        var sharerSourceId = _this._mapParticipantToSourceId(_this._sharerParticipant);
                        var recipients = [sharerSourceId];
                        _this._controlDataSource.sendData(data, recipients);
                    }
                }));
                this._captureEventSubscription = this._controlCapturer.on('captureEvent', (function (event) {
                    if (event === 1) {
                        _this.event('sharingRendererMouseEntering').raise();
                    }
                    else if (event === 2) {
                        _this.event('sharingRendererMouseLeaving').raise();
                    }
                }));
            }
        }
        else {
            this._logger.warn('_controlCapturer not found when trying to setup viewer capture mode');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.setPointerImage = function (participant, base64str) {
        var sourceId = 0;
        if (participant) {
            sourceId = this._mapParticipantToSourceId(participant);
        }
        if (sourceId < 0) {
            return Promise.reject(new Error('setPointerImage unable to map participant to sourceId'));
        }
        else if (base64str.length === 0) {
            return Promise.reject(new Error('setPointerImage invalid image length'));
        }
        return this._setPointerImage(sourceId, base64str);
    };
    SlimCoreElectronScreenSharingControl.prototype._setPointerImage = function (sourceId, base64str) {
        if (!this._isSharing()) {
            this._logger.warn('_setPointerImage called when not sharing');
        }
        return this._controlInjector.setAvatar(SlimCoreCommon.stringToBuffer(base64str), sourceId);
    };
    SlimCoreElectronScreenSharingControl.prototype.startPointerMode = function () {
        var _this = this;
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('startPointerMode when data channel not active'));
        }
        else if (this.controlState !== 0) {
            return Promise.reject(new Error('startPointerMode called in bad control state=' + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('startPointerMode when not viewing'));
        }
        return async.asap(function () { return _this._setCapturerMode(2); });
    };
    SlimCoreElectronScreenSharingControl.prototype.stopPointerMode = function () {
        var _this = this;
        if (this.controlState !== 0) {
            return Promise.reject(new Error('stopPointerMode called in bad control state=' + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('stopPointerMode when not viewing'));
        }
        return async.asap(function () { return _this._setCapturerMode(1); });
    };
    SlimCoreElectronScreenSharingControl.prototype._startAvailableHandshake = function (sharerSourceId) {
        var _this = this;
        var handshakeId = guid_1.default.generate();
        this._logger.info("_startAvailableHandshake() - handshakeId: " + sharerSourceId + ":" + handshakeId);
        this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, 1);
        if (this._terminateAvailableHandshake) {
            this._logger.warn('Replacing existing availble handshake');
            this._terminateAvailableHandshake(4);
        }
        var sent = this._sendRequest({ action: 0, terminatedReason: 0, handshakeId: handshakeId }, sharerSourceId);
        if (!sent) {
            this._logger.error('Failed to send Available message to sharer, will retry after backoff');
        }
        this._dataChannelAvailableSent = true;
        this._waitForAvailableAck(sharerSourceId, handshakeId);
        this._terminateAvailableHandshake = function (reason, ackHandshakeId) {
            if (reason === void 0) { reason = 0; }
            _this._logger.info("_terminateAvailableHandshake() - handshakeId: " + sharerSourceId + ":" + handshakeId + ", status: " + reason);
            _this._terminateAvailableHandshake = null;
            _this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, reason === 1 ? 5 : 6, reason);
            if (ackHandshakeId && ackHandshakeId !== handshakeId) {
                _this._logger.warn("AvailableSeries: Got handshake from another series - expected: " + handshakeId + ", received: " + ackHandshakeId);
            }
            if (_this._availableAckTimer) {
                clearTimeout(_this._availableAckTimer);
                _this._availableAckTimer = null;
            }
            _this._retryAttempt = 0;
        };
    };
    SlimCoreElectronScreenSharingControl.prototype._waitForAvailableAck = function (sharerSourceId, handshakeId) {
        var _this = this;
        this._logger.info('_waitForAvailableAck()');
        this._availableAckTimer = setTimeout(function () {
            _this._logger.warn('No Ack received for Available message from attempt=' + _this._retryAttempt);
            _this._availableAckTimer = null;
            if (_this._retryAttempt <= AVAILABLE_RETRY_LIMIT) {
                _this._logger.info("Re-sending Available message handshakeId: " + sharerSourceId + ":" + handshakeId);
                _this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, 2);
                _this._sendRequest({ action: 0, terminatedReason: 0, handshakeId: handshakeId }, sharerSourceId);
                _this._waitForAvailableAck(sharerSourceId, handshakeId);
            }
            else {
                _this._logger.error('Reached Available retry limit! Control capability will be false');
                if (_this._terminateAvailableHandshake) {
                    _this._terminateAvailableHandshake(5);
                }
                else {
                    var controlError = {
                        reason: 4,
                    };
                    _this.event('sharingControlError').raise(controlError);
                }
            }
        }, (AVAILABLE_ACK_WAIT_TIMEOUT * this._retryAttempt++));
    };
    SlimCoreElectronScreenSharingControl.prototype.requestControl = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('requestControl when data channel not active'));
        }
        else if (this.controlState !== 0) {
            return Promise.reject(new Error('requestControl called in bad state=' + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('requestControl when not viewing'));
        }
        else if (!this._sharerParticipant) {
            return Promise.reject(new Error('requestControl unexpected null sharer'));
        }
        if (this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has not been resolved yet while requesting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while requesting control'));
        }
        return this._requestControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._requestControl = function () {
        var _this = this;
        this._logger.info('_requestControl()');
        this._requestControlPromise = async.defer();
        var always = function () {
            _this._requestControlPromise = null;
        };
        this._requestControlPromise.promise.then(always, always);
        var sharerSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
        var sent = this._sendRequest({ action: 1, terminatedReason: 0 }, sharerSourceId);
        if (!sent) {
            var controlInfo = {
                inControl: false,
                id: LOCAL_PARTICIPANT_MRI,
                terminatedReason: 7,
            };
            this._requestControlPromise.reject(new Error());
            return Promise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
        }
        this.controlState = 1;
        this._requestControlTimer = setTimeout(function () {
            if (_this.controlState === 1) {
                _this.controlState = 0;
                _this._logger.warn('No response to control request - canceling');
                var sent_1 = _this._sendRequest({ action: 2, terminatedReason: 2 }, sharerSourceId);
                if (!sent_1) {
                    _this._logger.error('fail to send the cancel control request');
                }
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 2,
                };
                if (_this._requestControlPromise) {
                    _this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: 'we did not get any response to the control - terminating control' })));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.RequestSent');
                }
            }
            else {
                if (_this._requestControlPromise) {
                    _this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: undefined, details: 'request control - times out in bad state - do nothing' })));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ' + _this.controlState);
                }
            }
            _this._requestControlTimer = null;
        }, CONTROL_REQUEST_WAIT_TIMEOUT);
        return this._requestControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelRequestControlTimer = function () {
        if (this._requestControlTimer) {
            if (this._requestControlPromise) {
                this._requestControlPromise.reject(new Error('cancelled by _cancelRequestControlTimer'));
            }
            clearTimeout(this._requestControlTimer);
            this._requestControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.cancelControl = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('cancelControl when data channel not active'));
        }
        else if (this.controlState !== 1) {
            return Promise.reject(new Error('cancelControl called in bad state=' + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('cancelControl when not viewing'));
        }
        else if (!this._sharerParticipant) {
            return Promise.reject(new Error('cancelControl unexpected null sharer'));
        }
        if (!this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has been resolved while cancelling control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while cancelling control'));
        }
        return this._cancelControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelControl = function () {
        this._logger.info('_cancelControl()');
        var sharerSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
        if (this.controlState === 1) {
            this._cancelRequestControlTimer();
            this.controlState = 0;
            this._logger.info('Viewer cancel the control');
            var sent = this._sendRequest({ action: 2, terminatedReason: 8 }, sharerSourceId);
            if (sent) {
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 8,
                };
                this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
            }
            else {
                return Promise.reject(new Error('fail to send cancel control request'));
            }
        }
        else {
            return Promise.reject(new Error('cancel control - in bad state - do nothing'));
        }
        return new Promise(function (resolve, reject) { resolve(); });
    };
    SlimCoreElectronScreenSharingControl.prototype.acceptControlRequest = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('acceptControlRequest when data channel not active'));
        }
        else if (!this._controlRequest) {
            return Promise.reject(new Error('acceptControlRequest while no control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('acceptControlRequest when not sharing'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while accepting control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while accepting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while accepting control'));
        }
        return this._acceptControlRequest();
    };
    SlimCoreElectronScreenSharingControl.prototype._acceptControlRequest = function () {
        var _this = this;
        this._logger.info('_acceptControlRequest()');
        this._acceptControlPromise = async.defer();
        var always = function () {
            _this._acceptControlPromise = null;
        };
        this._acceptControlPromise.promise.then(always, always);
        if (this._controllerParticipant) {
            this._logger.warn('_acceptControlRequest called while another participant already has control - terminating control');
            this._teardownSharerRemoteControl();
            var controllerSourceId = this._mapParticipantToSourceId(this._controllerParticipant);
            var sent_2 = this._sendRequest({ action: 7, terminatedReason: 5 }, controllerSourceId);
            if (!sent_2) {
                this._logger.error('fail to send the terminateNoAck request');
            }
            this._controllerParticipant = null;
        }
        var controlRequesterSourceId = this._mapParticipantToSourceId(this._controlRequest.participant);
        var controlRequesterId = this._controlRequest.participant.id;
        var sent = this._sendRequest({ action: 3, terminatedReason: 0 }, controlRequesterSourceId);
        if (!sent) {
            this._logger.error('fail to send the accept control request');
            this._acceptControlPromise.reject(new Error());
            return Promise.reject(new Error('fail to send the accept control request!'));
        }
        this._controllerParticipant = this._controlRequest.participant;
        this._controlRequest = null;
        this.controlState = 2;
        this._acceptControlTimer = setTimeout(function () {
            if (_this.controlState === 2) {
                _this.controlState = 0;
                _this._controllerParticipant = null;
                _this._logger.error('No ack received when accepting control request - terminating control');
                var sent_3 = _this._sendRequest({ action: 7, terminatedReason: 4 }, controlRequesterSourceId);
                if (!sent_3) {
                    _this._logger.error('fail to send the TerminateNoAck request');
                }
                var controlInfo = {
                    inControl: false,
                    id: controlRequesterId,
                    terminatedReason: 4,
                };
                _this.event('sharingControlChanged').raise(controlInfo);
                if (_this._acceptControlPromise) {
                    _this._acceptControlPromise.reject(new Error('No ack received when accept control - terminating control'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForControlAck');
                }
            }
            else {
                if (_this._acceptControlPromise) {
                    _this._acceptControlPromise.reject(new Error('accept control - times out in bad state - do nothing'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ' + _this.controlState);
                }
            }
            _this._acceptControlTimer = null;
        }, CONTROL_ACK_WAIT_TIMEOUT);
        return this._acceptControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelAcceptControlTimer = function () {
        if (this._acceptControlTimer) {
            if (this._acceptControlPromise) {
                this._acceptControlPromise.reject(new Error('cancelled by _cancelAcceptControlTimer'));
            }
            clearTimeout(this._acceptControlTimer);
            this._acceptControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.denyControlRequest = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('denyControlRequest when data channel not active'));
        }
        else if (!this._controlRequest) {
            return Promise.reject(new Error('denyControlRequest while no control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('denyControlRequest when not sharing'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while denying control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while denying control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while denying control'));
        }
        return this._denyControlRequest();
    };
    SlimCoreElectronScreenSharingControl.prototype._denyControlRequest = function () {
        this._logger.info('_denyControlRequest()');
        var controlRequesterSourceId = this._mapParticipantToSourceId(this._controlRequest.participant);
        this._controlRequest = null;
        var sent = this._sendRequest({ action: 4, terminatedReason: 1 }, controlRequesterSourceId);
        if (!sent) {
            return Promise.reject(new Error('fail to send the deny control requst'));
        }
        return new Promise(function (resolve, reject) { resolve(); });
    };
    SlimCoreElectronScreenSharingControl.prototype.grantControl = function (participant) {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('grantControl when data channel not active'));
        }
        else if (this._controlRequest) {
            return Promise.reject(new Error('grantControl called while control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('grantControl when not sharing'));
        }
        else if (!participant) {
            return Promise.reject(new Error('grantControl null participant'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while granting control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while granting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while granting control'));
        }
        return this._grantControl(participant);
    };
    SlimCoreElectronScreenSharingControl.prototype._grantControl = function (participant) {
        var _this = this;
        this._logger.info('_grantControl()');
        this._grantControlPromise = async.defer();
        var always = function () {
            _this._grantControlPromise = null;
        };
        this._grantControlPromise.promise.then(always, always);
        if (this.controlState === 3) {
            if (this._controllerParticipant === participant) {
                this._logger.warn('grantControl called for participant who already has control');
                this._grantControlPromise.resolve();
                return new Promise(function (resolve, reject) { resolve(); });
            }
            else {
                this._logger.warn('_grantControl called while another participant already has control - terminating control');
                this._teardownSharerRemoteControl();
                var controllerSourceId = this._mapParticipantToSourceId(this._controllerParticipant);
                var sent_4 = this._sendRequest({ action: 7, terminatedReason: 5 }, controllerSourceId);
                if (!sent_4) {
                    this._logger.error('fail to send the terminateNoAck request');
                }
            }
        }
        var participantSourceId = this._mapParticipantToSourceId(participant);
        var sent = this._sendRequest({ action: 6, terminatedReason: 0 }, participantSourceId);
        if (!sent) {
            this._logger.error('fail to send the grant control request');
            this._grantControlPromise.reject(new Error());
            return Promise.reject(new Error('fail to send the grant control request!'));
        }
        this._controllerParticipant = participant;
        this.controlState = 2;
        this._grantControlTimer = setTimeout(function () {
            if (_this.controlState === 2) {
                _this.controlState = 0;
                _this._controllerParticipant = null;
                _this._logger.error('No ack received when granting control - terminating control');
                var sent_5 = _this._sendRequest({ action: 7, terminatedReason: 4 }, participantSourceId);
                if (!sent_5) {
                    _this._logger.error('fail to send the terminateNoAck request');
                }
                if (_this._grantControlPromise) {
                    _this._grantControlPromise.reject(new Error('No ack received when granting control - terminating control'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForControlAck');
                }
            }
            else {
                if (_this._grantControlPromise) {
                    _this._grantControlPromise.reject(new Error('grant control - times out in bad state - do nothing'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ' + _this.controlState);
                }
            }
            _this._grantControlTimer = null;
        }, CONTROL_ACK_WAIT_TIMEOUT);
        return this._grantControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelGrantControlTimer = function () {
        if (this._grantControlTimer) {
            if (this._grantControlPromise) {
                this._grantControlPromise.reject(new Error('cancelled by _cancelGrantControlTimer'));
            }
            clearTimeout(this._grantControlTimer);
            this._grantControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.terminateControl = function () {
        if (this._isViewing()) {
            if (this.controlState !== 4) {
                return Promise.reject(new Error('terminateControl called while not in control'));
            }
            else if (!this._sharerParticipant) {
                return Promise.reject(new Error('terminateControl called but _sharerParticipant is null'));
            }
        }
        else if (this._isSharing()) {
            if (!this._controllerParticipant) {
                return Promise.reject(new Error('terminateControl called but controllerParticipant is null'));
            }
        }
        else {
            return Promise.reject(new Error('terminateControl called but not sharing nor viewing'));
        }
        if (this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has not been resolved yet while terminating control'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while terminating control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while terminating control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while terminating control'));
        }
        return this._terminateControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._terminateControl = function (waitForAck) {
        var _this = this;
        if (waitForAck === void 0) { waitForAck = true; }
        this._logger.info('_terminateControl()');
        this._terminateControlPromise = async.defer();
        var always = function () {
            _this._terminateControlPromise = null;
        };
        this._terminateControlPromise.promise.then(always, always);
        var reason = 0;
        var controlAction = waitForAck ? 8 : 7;
        var recipientSourceId;
        var controllerId;
        if (this._isViewing()) {
            if (this.controlState === 4) {
                this._teardownViewerRemoteControl();
                reason = 6;
                recipientSourceId = this._mapParticipantToSourceId(this._sharerParticipant);
                controllerId = LOCAL_PARTICIPANT_MRI;
            }
            else {
                this._logger.error('Local viewer called terminateControl when not controlling');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('Local viewer called terminateControl when not controlling'));
            }
        }
        else {
            if (this.controlState === 3 &&
                this._controllerParticipant) {
                this._teardownSharerRemoteControl();
                reason = 5;
                recipientSourceId = this._mapParticipantToSourceId(this._controllerParticipant);
                controllerId = this._controllerParticipant.id;
            }
            else {
                this._logger.error('Local sherer called terminateControl when no one is in control');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('Local sherer called terminateControl when no one is in control'));
            }
        }
        var sent = this._sendRequest({ action: controlAction, terminatedReason: reason }, recipientSourceId);
        if (!sent) {
            if (waitForAck) {
                this._logger.error('fail to send the terminate control request');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('fail to send the grant control request!'));
            }
            else {
                this._logger.error('fail to send the terminateNoAck request');
            }
        }
        this.controlState = waitForAck ? 5 : 0;
        var controlInfo = {
            inControl: false,
            id: controllerId,
            terminatedReason: reason,
        };
        this.event('sharingControlChanged').raise(controlInfo);
        if (waitForAck) {
            this._terminateControlTimer = setTimeout(function () {
                if (_this.controlState === 5) {
                    _this.controlState = 0;
                    _this._controllerParticipant = null;
                    _this._logger.error('No ack received when terminating control - resending terminate request');
                    var sent_6 = _this._sendRequest({ action: 7, terminatedReason: 4 }, recipientSourceId);
                    if (!sent_6) {
                        _this._logger.error('fail to send the terminateNoAck request');
                    }
                    if (_this._terminateControlPromise) {
                        _this._terminateControlPromise.reject(new Error('No ack received when terminating control - resending terminate request'));
                    }
                    else {
                        _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForTerminateAck');
                    }
                }
                else {
                    if (_this._terminateControlPromise) {
                        _this._terminateControlPromise.reject(new Error('terminate control - times out in bad state - do nothing'));
                    }
                    else {
                        _this._logger.error('Unexpected, no promise could be resolved - controlState = ' + _this.controlState);
                    }
                }
                _this._terminateControlTimer = null;
            }, CONTROL_ACK_WAIT_TIMEOUT);
        }
        else {
            this._terminateControlPromise.resolve();
            return new Promise(function (resolve, reject) { resolve(); });
        }
        return this._terminateControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelTerminateControlTimer = function () {
        if (this._terminateControlTimer) {
            if (this._terminateControlPromise) {
                this._terminateControlPromise.reject(new Error('cancelled by _cancelTerminateControlTimer'));
            }
            clearTimeout(this._terminateControlTimer);
            this._terminateControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._disposeControlCapturer = function () {
        this._logger.info('_disposeControlCapturer');
        this._clearCapturerEventSubscriptions();
        if (this._controlCapturer) {
            this._controlCapturer.dispose();
            this._controlCapturer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronScreenSharingControl.dispose()');
        this._detachAndDeleteControlDevices();
        this._resetControlState();
        if (this._dataChannel) {
            this._dataChannel = null;
        }
        this._disposeControlCapturer();
        this._cancelRequestControlTimer();
        this._cancelAcceptControlTimer();
        this._cancelGrantControlTimer();
        this._cancelTerminateControlTimer();
        if (this._terminateAvailableHandshake) {
            this._terminateAvailableHandshake(2);
        }
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronScreenSharingControl;
}(SlimCoreElectronBase_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SlimCoreElectronScreenSharingControl;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var undef = 'undefined';
var globalReference = typeof (window) !== undef ? window :
    typeof (self) !== undef ? self :
        typeof (global) !== undef ? global :
            Object.create(null);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalReference;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
__webpack_require__(1);
__webpack_require__(4);
__webpack_require__(7);
__webpack_require__(8);
__webpack_require__(9);
__webpack_require__(10);
__webpack_require__(11);
__webpack_require__(12);
__webpack_require__(5);
__webpack_require__(13);
__webpack_require__(6);
__webpack_require__(14);
__webpack_require__(15);
__webpack_require__(16);
__webpack_require__(17);
module.exports = __webpack_require__(24);


/***/ })
/******/ ]);
});
//# sourceMappingURL=skype-calling-electron-embedded.bundle.js.map