/*!
 *  RootToolsManager.ts
 *  AUF
 *
 *  Created by Johan Blumenberg on 2016-12-29
 *  Copyright 2016 Microsoft. All rights reserved.
 *
 */
import * as SyncTasks from 'synctasks';
import { LogLevel, LogLineMetaData, FilterOptions, LogFileOptions } from './AufLog';
import { AbstractLogAppender } from './Appenders';
import * as EcsConfig from './internal/EcsConfig';
export declare enum BuildType {
    InternalBuild = 0,
    PublicBuild = 1,
}
export declare function setBuildType(type: BuildType): BuildType;
export interface NativeFilter {
    component: string;
    level: LogLevel;
}
export interface NativeFilterOptions {
    includeUnsafe?: boolean;
    reverse?: boolean;
    filter?: NativeFilter[];
}
export interface NativeBuffer {
    size: number;
    level: LogLevel;
}
export interface NativeBufferOptions {
    storeUnsafe: boolean;
    buffers: NativeBuffer[];
}
export interface NativeTriggerConfig {
    name: string;
    ecsNs: string;
    conditions: EcsConfig.LogTriggerCondition[];
    resetCondition: EcsConfig.LogTriggerCondition;
    filters: NativeFilter[];
    reenableAfterTriggering: boolean;
    includeUnsafe: boolean;
    dumpFile: boolean;
    metadata: {
        [key: string]: string;
    };
}
export interface NativeLogFileOptions extends LogFileOptions {
}
export interface NativeLogLineMetaData {
    timestamp: number;
    component: string;
    level: LogLevel;
}
export interface DumpingStats {
    matchedLines: number;
    totalLines: number;
}
export interface NativeLogTriggerListener {
    triggered(config: NativeTriggerConfig, timestamp: number): void;
    triggeredPartially(config: NativeTriggerConfig, md: NativeLogLineMetaData, logId: number, fmt: string, args: any[]): void;
    reset(config: NativeTriggerConfig): void;
}
export interface IAufNativeLogConfig {
    setLogLevelConfig(levels: {
        component: string;
        level: LogLevel;
    }[]): void;
    setLogBufferConfig(enabled: boolean, options: NativeBufferOptions, levels: {
        component: string;
        level: LogLevel;
    }[]): void;
    setLogTriggerConfig(triggers: NativeTriggerConfig[], options: NativeLogFileOptions): void;
    addLogTriggerListener(listener: NativeLogTriggerListener): void;
    removeLogTriggerListener(listener: NativeLogTriggerListener): void;
    dumpLogBuffer(filter: NativeFilterOptions, options: any, callback: (data: string) => void): any;
    mergeAndDumpLogBuffer(data: string, filter: NativeFilterOptions, options: NativeLogFileOptions, callback: (data: string) => void): void;
    listLogFiles(): any;
}
export interface IAufNative {
    log_config: IAufNativeLogConfig;
}
/**
 * Interface to be implemented by clients to hook RootToolsManager to ECS client and telemetry client
 */
export interface IRootToolsManagerDelegate {
    /**
     * Fetch ECS config for a specivic ECS namespace and key
     *
     * @param ecsNs ECS Namespace to fetch config for
     * @param ecsKey ECS key within the namespace to fetch config for
     */
    fetchEcsConfig<T>(ecsNs: string, ecsKey: string): SyncTasks.Promise<T>;
    /**
     * Send a telemetry event
     *
     * @param tenant The tenant id to send the telemetry event to
     * @param data Metadata key/value pairs to add to the event
     */
    sendTelemetry(tenant: string, data: {
        [name: string]: string;
    }): void;
    /**
     * Sends logging event to native side.
     * @param message JSON serialized message. current message format is
     *  {
     *      eventType: string,
     *      mutualSubmissionType: string,
     *      experimentTarget: string,
     *      callId: string,
     *      payload: {[name: string]: any}
     * };
     * @param auxiliaryPayload Arbitary auxilary message data. Optimization to avoid extra encoding for buffer passing
     */
    sendLoggingEventToNative?(message: string, auxiliaryPayload: string): void;
    /**
     * Sets a callback to process logging events gentrated by native side
     */
    setNativeLoggingEventCallback?(callback: (message: string, auxiliaryPayload: string) => void): void;
}
/**
 * BRB log event specification, used for brb-mutal submission event
 */
export interface BRBLogEvent {
    [key: string]: any;
}
/**
 * The RootTools manager is managing logging configuration and communication with native layer
 */
export interface IRootToolsManager {
    /**
     * Set a delegate that the RootToolsManager should use for ECS and telemetry
     *
     * @param delegate A delegate object
     */
    setDelegate(delegate: IRootToolsManagerDelegate): any;
    /**
     * Check whether RootToolsManager has delegate for ECS and telemetry
     *
     * @return true if RootToolsManager has delegate
     */
    isDelegateSet(): boolean;
    /**
     * Set a reference to the RT native bridge
     *
     * @param native Native implementation object
     */
    setNativeFunctions(native: IAufNative): any;
    /**
     * Signal that there was an ECS update
     */
    OnEcsChange(): any;
    /**
     * Set local log level config
     *
     * @param levels Log levels to set
     */
    setLocalLogLevelConfig(levels: {
        [component: string]: LogLevel;
    }): any;
    /**
     * Dump contents of circular buffer
     *
     * @param filter Filter that mathces log lines that should be dumped to file
     * @param options Log file options that should be used
     *
     * @return The name of the file that was dumped.
     */
    dumpLogBuffer(filter: FilterOptions, options: LogFileOptions): SyncTasks.Promise<string>;
    /**
     * Sends BRBLogEvent to remote party. Remote parties are the members of ongoing or last
     * call/meeting and are found automatically by SlimCore logging messaging side.
     * Available only in SlimCore empowered clients.
     * @param event BRB log event metadata
     */
    sendBRBEvent(event: BRBLogEvent): any;
    /**
     * Sets up a callback for BRB Mutual submission events received from other call participants
     * @param callback callback function
     */
    setBRBCallback(callback: (event: BRBLogEvent) => void): any;
    /**
     * Logs a message into SlimCore log. Should be used to trigger UL upload event from non UL onboarded components.
     * NB! No PII is allowed be logged via this method including no data that can be corellated with user.
     * Message and parameters should only describe event that has happend. Thay will be logged to safe log component and can be uploaded.
     * @param message - log message to log. No PII is allowed in message.
     * @param parameters - additional log parameters if needed i.e error codes. No PII is allowed in message.
     */
    logExternalForDDL(message: string, parameters?: string): any;
    /**
     * Stops all ongoing asyncronus operations. To be used on application stop.
     */
    stopAsyncOperations(): any;
}
export declare class CircularBuffer extends AbstractLogAppender {
    private _circularBuffer;
    private _circularBufferMaxSize;
    private _includeUnsafe;
    private _onBufferOverflow;
    constructor(includeUnsafe: boolean, circularBufferMaxSize: number, onBufferOwerflow?: () => void);
    private formatMessage(args);
    log(md: LogLineMetaData, logId: number, fmt: string, args: any[]): void;
    visitReverseOrder(v: (md: LogLineMetaData, logId: number, args: any[]) => void): void;
    visitForwardOrder(v: (md: LogLineMetaData, logId: number, args: any[]) => void): void;
    needReset(includeUnsafe: boolean, circularBufferMaxSize: number): boolean;
    dumpLogBuffer(filter: FilterOptions, maxUploadSize?: number, dumpingStats?: DumpingStats): string;
    private filterMatches(md, logId, args, filters);
    clear(): void;
    size(): number;
    empty(): boolean;
    capacity(): number;
}
export declare var RootToolsManager: IRootToolsManager;
