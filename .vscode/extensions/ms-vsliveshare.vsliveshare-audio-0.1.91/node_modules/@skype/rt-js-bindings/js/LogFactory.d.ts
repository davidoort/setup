/*!
 *  LogFactory.ts
 *  AUF
 *
 *  Created by Johan Blumenberg on 2016-12-29
 *  Copyright 2016 Microsoft. All rights reserved.
 *
 */
import { LogLevel, ILogAppender, LogComponent } from './AufLog';
/**
 * Singleton factory class for accessing logging configuration and registration.
 */
export declare abstract class LogFactory {
    /**
     * Get the LogFactory singleton instance
     * @return The LogFactory singleton instance
     */
    static instance(): LogFactory;
    /**
     * Convert a log level to a printable string.
     *
     * @param level The log level to convert
     * @return A string literal containing the name of the log level
     */
    static levelToString(level: LogLevel): string;
    private static _levelFromString;
    /**
     * Parse a log level from a string.
     *
     * @param level Can be one of the strings returned by levelToString() or a decimal value
     * @return A log level
     */
    static levelFromString(level: string): number;
    /**
     * Add an appender to receive log messages.
     *
     * @param appender The appender to add.
     * @param flags See AppenderFlags.
     *
     * @return A handle that can be used to remove the appender
     */
    abstract addAppender(appender: ILogAppender, flags?: number): number;
    /**
     * Remove an appender.
     *
     * When this function returns, the appender is no longer used, and the log
     * system has no references left to the appender. All pending logs have been
     * flushed.
     *
     * @param handle The appender to remove, as returned from addAppender
     */
    abstract removeAppender(handle: number): any;
    /**
     * Get a log component.
     *
     * @param compName The name of the component to get
     * @return A log cmoponent for the given name
     */
    abstract component(name: string): LogComponent;
    /**
     * Return the root log component, which is the parent of all other
     * log components.
     *
     * @return The root log component
     */
    abstract rootComponent(): LogComponent;
    /**
     * Use this method to declare a log component as safe or unsafe.
     * All sub components will inherit the value.
     *
     * @param name Name of the component
     * @param safe True to mark the component as safe, false to mark it as unsafe
     */
    abstract declareComponentSafe(name: string, safe: boolean): any;
    /**
     * Use this method to set the description of a log component.
     *
     * @param name Name of the component
     * @param desc The description to set to the component
     */
    abstract declareComponentDescription(name: string, desc: string): any;
    /**
     * Use this method to add extended application defined information of a log component.
     *
     * @param name Name of the component
     * @param extendedInfo The extended info to set to the component
     */
    abstract declareComponentExtendedInfo(name: string, extendedInfo: any): any;
    abstract setComponentBlacklist(list: string[]): any;
}
