"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AufNative = require('./rt-electron-bindings');
var g_listeners = [];
var native = {
    log_config: {
        setLogLevelConfig: AufNative.setLogLevelConfig,
        setLogBufferConfig: AufNative.setLogBufferConfig,
        setLogTriggerConfig: AufNative.setLogTriggerConfig,
        dumpLogBuffer: AufNative.dumpLogBuffer,
        mergeAndDumpLogBuffer: AufNative.mergeAndDumpLogBuffer,
        listLogFiles: AufNative.listLogFiles,
        addLogTriggerListener: function (listener) {
            if (g_listeners.length === 0) {
                AufNative.enableLogTriggerEvents();
            }
            g_listeners.push(listener);
        },
        removeLogTriggerListener: function (listener) {
            var i = g_listeners.indexOf(listener);
            if (i >= 0)
                g_listeners.splice(i, 1);
            if (g_listeners.length === 0) {
                AufNative.disableLogTriggerEvents();
            }
        }
    }
};
AufNative.addTriggeredCallback(function (e) {
    try {
        g_listeners.forEach(function (l) { return l.triggered(e.config, e.timestamp); });
    }
    catch (e) {
        console.log('Caught exception', e);
    }
});
AufNative.addTriggeredPartiallyCallback(function (e) {
    try {
        g_listeners.forEach(function (l) { return l.triggeredPartially(e.config, e.md, e.logId, e.fmt, e.args); });
    }
    catch (e) {
        console.log('Caught exception', e);
    }
});
AufNative.addResetCallback(function (e) {
    try {
        g_listeners.forEach(function (l) { return l.reset(e.config); });
    }
    catch (e) {
        console.log('Caught exception', e);
    }
});
AufNative.aufInit();
exports.default = native;
