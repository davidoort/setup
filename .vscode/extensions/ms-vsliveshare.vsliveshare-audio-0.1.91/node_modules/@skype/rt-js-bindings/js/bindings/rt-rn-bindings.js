"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_1 = require("react-native");
var native = null;
if (!react_native_1.NativeModules.AufLogConfig) {
    console.warn('No native implementation for AufLogConfig was found');
}
else {
    var g_listeners = [];
    native = {
        log_config: {
            setLogLevelConfig: react_native_1.NativeModules.AufLogConfig.setLogLevelConfig,
            setLogBufferConfig: react_native_1.NativeModules.AufLogConfig.setLogBufferConfig,
            setLogTriggerConfig: react_native_1.NativeModules.AufLogConfig.setLogTriggerConfig,
            dumpLogBuffer: react_native_1.NativeModules.AufLogConfig.dumpLogBuffer,
            mergeAndDumpLogBuffer: react_native_1.NativeModules.AufLogConfig.mergeAndDumpLogBuffer,
            listLogFiles: react_native_1.NativeModules.AufLogConfig.listLogFiles,
            addLogTriggerListener: function (listener) {
                if (g_listeners.length === 0) {
                    react_native_1.NativeModules.AufLogConfig.enableLogTriggerEvents();
                }
                g_listeners.push(listener);
            },
            removeLogTriggerListener: function (listener) {
                var i = g_listeners.indexOf(listener);
                if (i >= 0)
                    g_listeners.splice(i, 1);
                if (g_listeners.length === 0) {
                    react_native_1.NativeModules.AufLogConfig.disableLogTriggerEvents();
                }
            }
        }
    };
    react_native_1.DeviceEventEmitter.addListener('auf::log_config::logTriggerListener::triggered', function (e) {
        try {
            g_listeners.forEach(function (l) { return l.triggered(e.config, e.timestamp); });
        }
        catch (e) {
            console.log('Caught exception', e);
        }
    });
    react_native_1.DeviceEventEmitter.addListener('auf::log_config::logTriggerListener::triggeredPartially', function (e) {
        try {
            g_listeners.forEach(function (l) { return l.triggeredPartially(e.config, e.md, e.logId, e.fmt, e.args); });
        }
        catch (e) {
            console.log('Caught exception', e);
        }
    });
    react_native_1.DeviceEventEmitter.addListener('auf::log_config::logTriggerListener::reset', function (e) {
        try {
            g_listeners.forEach(function (l) { return l.reset(e.config); });
        }
        catch (e) {
            console.log('Caught exception', e);
        }
    });
    react_native_1.NativeModules.Auf.init();
}
exports.default = native;
