"use strict";
/*!
 *  LogFactory.ts
 *  AUF
 *
 *  Created by Johan Blumenberg on 2016-12-29
 *  Copyright 2016 Microsoft. All rights reserved.
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AufLog_1 = require("./AufLog");
var InstalledAppender = (function () {
    function InstalledAppender() {
    }
    return InstalledAppender;
}());
function hash(fmt) {
    if (fmt === null) {
        return -1;
    }
    else {
        var r = 0;
        for (var i = fmt.length - 1; i >= 0; i--) {
            r = (37 * r + fmt.charCodeAt(i)) | 0;
        }
        var pfx = '__auf_literal:';
        for (var i = pfx.length - 1; i >= 0; i--) {
            r = (37 * r + pfx.charCodeAt(i)) | 0;
        }
        return r;
    }
}
var LogSafety;
(function (LogSafety) {
    LogSafety[LogSafety["Unsafe"] = 0] = "Unsafe";
    LogSafety[LogSafety["Safe"] = 1] = "Safe";
    LogSafety[LogSafety["Inherited_Unsafe"] = 2] = "Inherited_Unsafe";
    LogSafety[LogSafety["Inherited_Safe"] = 3] = "Inherited_Safe";
    LogSafety[LogSafety["Blacklisted_Unsafe"] = 4] = "Blacklisted_Unsafe";
})(LogSafety || (LogSafety = {}));
var LogComponentImpl = (function () {
    function LogComponentImpl(name, parent) {
        this._level = AufLog_1.LogLevel.Debug4;
        this._threshold = 255;
        this._safe = LogSafety.Inherited_Unsafe;
        this._name = name;
        if (parent) {
            this._level = parent.level();
            this._safe = parent.safe() ? LogSafety.Inherited_Safe : LogSafety.Inherited_Unsafe;
            this._extendedInfo = parent.extendedInfo();
        }
    }
    LogComponentImpl.prototype.name = function () {
        return this._name;
    };
    LogComponentImpl.prototype.safe = function () {
        return this._safe === LogSafety.Safe || this._safe === LogSafety.Inherited_Safe;
    };
    LogComponentImpl.prototype.safety = function () {
        return this._safe;
    };
    LogComponentImpl.prototype.setSafety = function (safe) {
        this._safe = safe;
    };
    LogComponentImpl.prototype.description = function () {
        return this._desc;
    };
    LogComponentImpl.prototype.setDescription = function (desc) {
        this._desc = desc;
    };
    LogComponentImpl.prototype.level = function () {
        return this._level;
    };
    LogComponentImpl.prototype.setLevel = function (level) {
        _inst.setLevel(this, level);
    };
    LogComponentImpl.prototype._setLevel = function (level) {
        this._level = level;
    };
    LogComponentImpl.prototype._setThreshold = function (level) {
        this._threshold = level;
    };
    LogComponentImpl.prototype.isEnabled = function (level) {
        return this._threshold <= level;
    };
    LogComponentImpl.prototype.setExtendedInfo = function (extendedInfo) {
        this._extendedInfo = extendedInfo;
    };
    LogComponentImpl.prototype.extendedInfo = function () {
        return this._extendedInfo;
    };
    LogComponentImpl.prototype.trace = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Trace, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug6 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug6, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug5 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug5, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug4 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug4, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug3 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug3, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug2 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug2, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.debug1 = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Debug1, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.warn = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Warning, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.error = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Error, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.fatal = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.Fatal, hash(fmt), fmt].concat(args));
    };
    LogComponentImpl.prototype.meta = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _inst.log.apply(_inst, [this, AufLog_1.LogLevel.MetaData, hash(fmt), fmt].concat(args));
    };
    return LogComponentImpl;
}());
var _inst;
/**
 * Singleton factory class for accessing logging configuration and registration.
 */
var LogFactory = (function () {
    function LogFactory() {
    }
    /**
     * Get the LogFactory singleton instance
     * @return The LogFactory singleton instance
     */
    LogFactory.instance = function () {
        return _inst;
    };
    /**
     * Convert a log level to a printable string.
     *
     * @param level The log level to convert
     * @return A string literal containing the name of the log level
     */
    LogFactory.levelToString = function (level) {
        // Compared using <= instead of == to allow for log levels in between to be matched
        if (level <= AufLog_1.LogLevel.Trace) {
            return 'TRACE';
        }
        else if (level <= AufLog_1.LogLevel.Debug6) {
            return 'DEBUG6';
        }
        else if (level <= AufLog_1.LogLevel.Debug5) {
            return 'DEBUG5';
        }
        else if (level <= AufLog_1.LogLevel.Debug4) {
            return 'DEBUG4';
        }
        else if (level <= AufLog_1.LogLevel.Debug3) {
            return 'DEBUG3';
        }
        else if (level <= AufLog_1.LogLevel.Debug2) {
            return 'DEBUG2';
        }
        else if (level <= AufLog_1.LogLevel.Debug1) {
            return 'DEBUG1';
        }
        else if (level <= AufLog_1.LogLevel.Warning) {
            return 'WARN';
        }
        else if (level <= AufLog_1.LogLevel.Error) {
            return 'ERROR';
        }
        else if (level <= AufLog_1.LogLevel.Fatal) {
            return 'FATAL';
        }
        else if (level <= AufLog_1.LogLevel.MetaData) {
            return 'META';
        }
        else {
            return 'META';
        }
    };
    /**
     * Parse a log level from a string.
     *
     * @param level Can be one of the strings returned by levelToString() or a decimal value
     * @return A log level
     */
    LogFactory.levelFromString = function (level) {
        return this._levelFromString[level] || parseInt(level, 10);
    };
    return LogFactory;
}());
LogFactory._levelFromString = {
    'TRACE': AufLog_1.LogLevel.Trace,
    'DEBUG6': AufLog_1.LogLevel.Debug6,
    'DEBUG5': AufLog_1.LogLevel.Debug5,
    'DEBUG4': AufLog_1.LogLevel.Debug4,
    'DEBUG3': AufLog_1.LogLevel.Debug3,
    'DEBUG2': AufLog_1.LogLevel.Debug2,
    'DEBUG1': AufLog_1.LogLevel.Debug1,
    'WARN': AufLog_1.LogLevel.Warning,
    'ERROR': AufLog_1.LogLevel.Error,
    'FATAL': AufLog_1.LogLevel.Fatal,
    'META': AufLog_1.LogLevel.MetaData
};
exports.LogFactory = LogFactory;
function findLevel(levels, c) {
    var n = c.name();
    while (n.length > 0) {
        if (levels[n]) {
            return levels[n];
        }
        else {
            var i = n.lastIndexOf('.');
            if (i < 0) {
                n = "";
            }
            else {
                n = n.substr(0, i);
            }
        }
    }
    if (levels[""]) {
        return levels[""];
    }
    else {
        return AufLog_1.LogLevel.Debug4; // c.defaultLevel();
    }
}
function findThreshold(c, appenders) {
    var t = 255;
    appenders.forEach(function (j) {
        var _t = 255; //j->forceThreshold();
        if (j.appender.levels()) {
            _t = Math.min(_t, findLevel(j.appender.levels(), c));
        }
        else if (!j.appender.receiveAll()) {
            _t = Math.min(_t, c.level());
        }
        // _t = std::max(_t, j->threshold());
        t = Math.min(t, _t);
    });
    return t;
}
function appenderMatches(a, c, level) {
    if (a.appender.receiveAll()) {
        return true;
    }
    else if (a.appender.levels()) {
        return level >= findLevel(a.appender.levels(), c);
    }
    else {
        return level >= c.level();
    }
}
var LogFactoryImpl = (function (_super) {
    __extends(LogFactoryImpl, _super);
    function LogFactoryImpl() {
        var _this = _super.call(this) || this;
        _this._nextId = 0;
        _this._appenders = [];
        _this._components = {};
        _this._componentBlacklist = [];
        _this._components[""] = new LogComponentImpl("", null);
        return _this;
    }
    LogFactoryImpl.prototype.toHex = function (v) {
        return (0x100000000 + v).toString(16).substr(-8);
    };
    LogFactoryImpl.prototype.addAppender = function (appender, flags) {
        if (flags === void 0) { flags = 0; }
        var handle = this._nextId++;
        if (flags & AufLog_1.AppenderFlags.InsertFront) {
            this._appenders.unshift({
                appender: appender,
                handle: handle
            });
        }
        else {
            this._appenders.push({
                appender: appender,
                handle: handle
            });
        }
        this.recalcComponentThresholds();
        return handle;
    };
    LogFactoryImpl.prototype.removeAppender = function (handle) {
        for (var i = 0; i < this._appenders.length; i++) {
            if (this._appenders[i].handle === handle) {
                this._appenders.splice(i, 1);
                break;
            }
        }
        this.recalcComponentThresholds();
    };
    LogFactoryImpl.prototype.log = function (component, level, logId, fmt) {
        var args = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            args[_i - 4] = arguments[_i];
        }
        try {
            if (component.isEnabled(level)) {
                var md_1 = {
                    timestamp: new Date().getTime(),
                    component: component,
                    level: level
                };
                this._appenders.forEach(function (a) {
                    if (appenderMatches(a, component, level)) {
                        a.appender.log(md_1, logId, fmt, args);
                    }
                });
            }
        }
        catch (e) { } // just suppress it
    };
    LogFactoryImpl.prototype.parent = function (name) {
        while (true) {
            var p = name.lastIndexOf('.');
            name = (p >= 0) ? name.substr(0, p) : "";
            if (this._components[name]) {
                return this._components[name];
            }
        }
    };
    LogFactoryImpl.prototype.children = function (name) {
        var result = [];
        for (var c in this._components) {
            if (this.parent(c).name() === name) {
                result.push(this._components[c]);
            }
        }
        return result;
    };
    LogFactoryImpl.prototype.component = function (name) {
        if (this._components[name]) {
            return this._components[name];
        }
        else {
            var c = new LogComponentImpl(name, this.parent(name));
            this._components[name] = c;
            var t = findThreshold(c, this._appenders);
            c._setThreshold(t);
            return c;
        }
    };
    LogFactoryImpl.prototype.rootComponent = function () {
        return this.component("");
    };
    LogFactoryImpl.prototype.setSafetyRecursive = function (name, safe) {
        var _this = this;
        this.children(name).forEach(function (c) {
            if (c.safety() === LogSafety.Inherited_Safe || c.safety() === LogSafety.Inherited_Unsafe) {
                c.setSafety(safe);
                _this.setSafetyRecursive(c.name(), safe);
            }
        });
    };
    LogFactoryImpl.prototype.declareComponentSafe = function (name, safe) {
        var c = this.component(name);
        if (this._componentBlacklist.indexOf(c.name()) !== -1) {
            c.setSafety(LogSafety.Blacklisted_Unsafe);
        }
        else {
            c.setSafety(safe ? LogSafety.Safe : LogSafety.Unsafe);
        }
        this.setSafetyRecursive(name, safe ? LogSafety.Inherited_Safe : LogSafety.Inherited_Unsafe);
    };
    LogFactoryImpl.prototype.declareComponentDescription = function (name, desc) {
        var c = this.component(name);
        c.setDescription(desc);
    };
    LogFactoryImpl.prototype.setExtendedInfoRecursive = function (name, extendedInfo) {
        var _this = this;
        this.children(name).forEach(function (c) {
            if (c.extendedInfo() === undefined) {
                c.setExtendedInfo(extendedInfo);
                _this.setExtendedInfoRecursive(c.name(), extendedInfo);
            }
        });
    };
    LogFactoryImpl.prototype.declareComponentExtendedInfo = function (name, extendedInfo) {
        var c = this.component(name);
        c.setExtendedInfo(extendedInfo);
        this.setExtendedInfoRecursive(c.name(), extendedInfo);
    };
    LogFactoryImpl.prototype.recalcComponentThresholds = function () {
        for (var i in this._components) {
            var c = this._components[i];
            var t = findThreshold(c, this._appenders);
            c._setThreshold(t);
        }
    };
    LogFactoryImpl.prototype.setLevel = function (component, level) {
        if (component.name() === "") {
            for (var i in this._components) {
                var c = this._components[i];
                c._setLevel(level);
                var t = findThreshold(c, this._appenders);
                c._setThreshold(t);
            }
        }
        else {
            var name_1 = component.name() + '.';
            component._setLevel(level);
            var t = findThreshold(component, this._appenders);
            component._setThreshold(t);
            for (var i in this._components) {
                var c = this._components[i];
                if (c.name().substr(0, name_1.length) === name_1) {
                    c._setLevel(level);
                    var t_1 = findThreshold(c, this._appenders);
                    c._setThreshold(t_1);
                }
            }
        }
    };
    LogFactoryImpl.prototype.setComponentBlacklist = function (list) {
        this._componentBlacklist = list;
        for (var i in this._components) {
            var c = this._components[i];
            if (this._componentBlacklist.indexOf(c.name()) !== -1) {
                c.setSafety(LogSafety.Blacklisted_Unsafe);
            }
        }
    };
    return LogFactoryImpl;
}(LogFactory));
_inst = new LogFactoryImpl();
