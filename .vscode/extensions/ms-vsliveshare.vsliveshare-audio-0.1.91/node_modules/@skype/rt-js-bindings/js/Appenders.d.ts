/*!
 *  Appenders.ts
 *  AUF
 *
 *  Created by Johan Blumenberg on 2016-12-29
 *  Copyright 2016 Microsoft. All rights reserved.
 *
 */
import { LogLevel, LogLineMetaData, ILogAppender, ILogFormatter } from './AufLog';
/**
 * Abstract base class for writing log appenders.
 */
export declare abstract class AbstractLogAppender implements ILogAppender {
    private _formatter;
    constructor(formatter?: ILogFormatter);
    formatter(): ILogFormatter;
    abstract log(md: LogLineMetaData, id: number, fmt: string, args: (string | number | Object)[]): void;
    receiveAll(): boolean;
    levels(): any;
}
/**
 * Flags controlling how an instance of the standard log formatter will format log messages.
 */
export declare enum SLF_Flags {
    Timestamp = 1,
    Component = 4,
    Level = 8,
    FullDate = 32,
    LogId = 64,
}
/**
 * Create a log formatter that formats log messages as:
 *
 *   HH:MM:SS.mmm [&lt;level&gt;] [&lt;component&gt;] &lt;msg&gt;\n
 *
 * HH:MM:SS.mmmm is the log timestamp with millisecond precision
 * &lt;level&gt; is the log level of the message
 * &lt;component&gt; is the name of the component where the message was logged
 * &lt;msg&gt; is the printf style format string formatted using the provided arguments
 *
 * Parts of the format can be disabled using the provided flags. See SLF_Flags.
 * By default all parts are enabled.
 */
export declare class StandardLogFormatter implements ILogFormatter {
    private _flags;
    constructor(flags?: number);
    format(md: LogLineMetaData, id: number, fmt: string, args: any[]): string;
}
/**
 * Appender that outputs logs to the console object
 */
export declare class ConsoleAppender extends AbstractLogAppender {
    log(md: LogLineMetaData, logId: number, fmt: string, args: any[]): void;
}
export declare class ChainedLogAppender implements ILogAppender {
    private _chained;
    constructor(chained: ILogAppender);
    log(md: LogLineMetaData, logId: number, fmt: string, args: any[]): void;
    receiveAll(): boolean;
    levels(): {
        [component: string]: LogLevel;
    };
}
export declare function wrapAppenderWithLogLevels(appender: ILogAppender, levels: {
    [component: string]: LogLevel;
}): ILogAppender;
