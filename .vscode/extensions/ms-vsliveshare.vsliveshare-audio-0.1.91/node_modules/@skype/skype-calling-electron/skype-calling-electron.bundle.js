(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"), require("@skype/rt-js-bindings"));
	else if(typeof define === 'function' && define.amd)
		define("skype-calling-electron", ["lodash", "@skype/rt-js-bindings"], factory);
	else if(typeof exports === 'object')
		exports["skype-calling-electron"] = factory(require("lodash"), require("@skype/rt-js-bindings"));
	else
		root["skype-calling-electron"] = factory(root["lodash"], root["@skype/rt-js-bindings"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_7__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 39);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var events_1 = __webpack_require__(23);
_.defaults(window, { SlimCore: {} });
_.defaults(SlimCore, { Enums: {} });
if (isSlimCoreRTModuleAvailable()) {
    var enumsRt = window.SlimCoreRT.SlimCore.Enums;
    copyAllEnumObjects(enumsRt, SlimCore.Enums);
    correctAllEnumObjectsForValueNames(SlimCore.Enums);
}
if (Proxy) {
    SlimCore.Enums = new Proxy(SlimCore.Enums, {
        get: function (target, name) { return (name in target) ? target[name] : {}; }
    });
}
var Enums = SlimCore.Enums;
function isSlimCoreRTModuleAvailable() {
    return !!(window.SlimCoreRT
        && window.SlimCoreRT.SlimCore
        && window.SlimCoreRT.SlimCore.Enums);
}
exports.isSlimCoreRTModuleAvailable = isSlimCoreRTModuleAvailable;
function firstLetterToUpperCase(inputString) {
    return inputString[0].toUpperCase() + inputString.substr(1);
}
function correctEnumObjectValueName(enumObject, valueName) {
    var correctedValueName = firstLetterToUpperCase(valueName);
    if (correctedValueName !== valueName) {
        var value = enumObject[valueName];
        enumObject[value] = correctedValueName;
        delete enumObject[valueName];
        enumObject[correctedValueName] = value;
    }
}
function correctEnumObjectValueNames(enumObject) {
    Object.keys(enumObject).forEach(function (key) {
        correctEnumObjectValueName(enumObject, key);
    });
}
function correctAllEnumObjectsForValueNames(enumObjects) {
    Object.keys(enumObjects).forEach(function (key) {
        correctEnumObjectValueNames(enumObjects[key]);
    });
}
function copyEnumObject(sourceKey, sourceValue, destination) {
    destination[sourceKey] = {};
    Object.keys(sourceValue).forEach(function (key) {
        destination[sourceKey][key] = sourceValue[key];
    });
}
function copyAllEnumObjects(source, destination) {
    Object.keys(source).forEach(function (key) {
        copyEnumObject(key, source[key], destination);
    });
}
var AVAILABLE_VIDEO_STATES = [Enums.VideoStatus.Available, Enums.VideoStatus.Starting, Enums.VideoStatus.Running];
function isMatch(value, pattern) {
    for (var key in pattern) {
        if (!pattern.hasOwnProperty(key)) {
            continue;
        }
        if (value[key] !== pattern[key]) {
            return false;
        }
    }
    return true;
}
function makeFilteredListener(listener, filter) {
    return function (args) {
        if (isMatch(args, filter)) {
            listener(args);
        }
    };
}
function wrap(target, settings) {
    if (settings === void 0) { settings = {}; }
    var handle = function (event, filter, listener) {
        var callback = filter ? makeFilteredListener(listener, filter) : listener;
        target.addListener(event, callback);
        return {
            dispose: function () {
                target.removeListener(event, callback);
            }
        };
    };
    if (settings.enableNativeHandle && 'handle' in target) {
        return target;
    }
    return _.assign(target, { handle: handle });
}
exports.wrap = wrap;
var PlatformType;
(function (PlatformType) {
    PlatformType[PlatformType["Electron"] = 1] = "Electron";
    PlatformType[PlatformType["Uwp"] = 2] = "Uwp";
})(PlatformType = exports.PlatformType || (exports.PlatformType = {}));
function forgetAndLog(promise, _logger, logMessage) {
    if (promise) {
        _logger.info("Promise executing: " + logMessage);
        return promise.catch(function (err) {
            _logger.logFailure("Promise execution failed: " + err);
        });
    }
    _logger.logFailure("Undefined promise @ " + new Error().stack);
    return Promise.resolve();
}
exports.forgetAndLog = forgetAndLog;
function getStrProperty(slimcoreObject, logger, objectId, propertyKey, fallback) {
    try {
        return slimcoreObject.getStrProperty(objectId, propertyKey);
    }
    catch (error) {
        logger.logFailure("getStrProperty failed for objectId=" + objectId + ", propertyKey=" + propertyKey + ": " + error);
        return fallback;
    }
}
exports.getStrProperty = getStrProperty;
function getIntProperty(slimcoreObject, logger, objectId, propertyKey, fallback) {
    try {
        return slimcoreObject.getIntProperty(objectId, propertyKey);
    }
    catch (error) {
        logger.logFailure("getIntProperty failed: " + error);
        return fallback;
    }
}
exports.getIntProperty = getIntProperty;
function hasFeature(feature) {
    return feature in Enums.Feature;
}
exports.hasFeature = hasFeature;
var VideoStateCancelEvent = (function (_super) {
    __extends(VideoStateCancelEvent, _super);
    function VideoStateCancelEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoStateCancelEvent.prototype.fire = function () {
        this.raiseEvents(function (e) { return e(); });
    };
    return VideoStateCancelEvent;
}(events_1.EventSourceImpl));
exports.VideoStateCancelEvent = VideoStateCancelEvent;
function waitForVideoObjectState(options) {
    return new Promise(function (resolve, reject) {
        var done = false;
        var videoStateChangedCallback = null;
        var timeoutId = 0;
        var cancelSub;
        var _cleanupAndReturn = function (error) {
            done = true;
            if (videoStateChangedCallback) {
                videoStateChangedCallback.dispose();
                videoStateChangedCallback = null;
            }
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = 0;
            }
            if (cancelSub) {
                cancelSub.dispose();
            }
            if (error) {
                reject(error);
            }
            else {
                resolve();
            }
        };
        var onVideoObjectStateChanged = function (value) {
            if (done) {
                return;
            }
            options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] state changed -> " + value + " (" + Enums.VideoStatus[value] + ")");
            if (isVideoInState(value, options.resolveStates)) {
                _cleanupAndReturn();
            }
            else if (options.rejectStates && isVideoInState(value, options.rejectStates)) {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] rejecting state " + value + " (" + Enums.VideoStatus[value] + ")");
            }
        };
        var timeoutHandler = function () {
            if (done) {
                return;
            }
            options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] timeout. Checking state again.");
            var videoStatus = getIntProperty(options.slimcoreObject, options.logger, options.videoObjectId, Enums.Property.VideoStatus);
            if (isVideoInState(videoStatus, options.resolveStates)) {
                _cleanupAndReturn();
            }
            else if (options.rejectStates && isVideoInState(videoStatus, options.rejectStates)) {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] rejecting state " + videoStatus);
            }
            else {
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] timeout.");
            }
        };
        if (options.timeout) {
            timeoutId = setTimeout(timeoutHandler, options.timeout);
        }
        if (options.cancelEvent) {
            cancelSub = options.cancelEvent.subscribe(function () {
                options.logger.info("waitForVideoObjectState[" + options.videoObjectId + "] canceled.");
                _cleanupAndReturn("waitForVideoObjectState[" + options.videoObjectId + "] canceled.");
            });
        }
        videoStateChangedCallback = options.slimcoreInstance.handle('object-property-changed', { objectId: options.videoObjectId, propKey: Enums.Property.VideoStatus }, function (data) { return onVideoObjectStateChanged(data.value); });
        var videoStatus = getIntProperty(options.slimcoreObject, options.logger, options.videoObjectId, Enums.Property.VideoStatus);
        onVideoObjectStateChanged(videoStatus);
    });
}
exports.waitForVideoObjectState = waitForVideoObjectState;
function isVideoInState(state, expected) {
    return expected.indexOf(state) !== -1;
}
exports.isVideoInState = isVideoInState;
function videoObjectTimeout(settings) {
    return (settings.platform === PlatformType.Uwp) ? 5000 : 500;
}
exports.videoObjectTimeout = videoObjectTimeout;
function waitForVideoObjectToBeAvailable(slimcoreInstance, slimcoreObject, videoObjectId, logger, timeout, cancelEvent) {
    return waitForVideoObjectState({
        slimcoreInstance: slimcoreInstance,
        slimcoreObject: slimcoreObject,
        videoObjectId: videoObjectId,
        logger: logger,
        resolveStates: AVAILABLE_VIDEO_STATES,
        rejectStates: [],
        timeout: timeout,
        cancelEvent: cancelEvent
    });
}
exports.waitForVideoObjectToBeAvailable = waitForVideoObjectToBeAvailable;
function waitForVideoObjectToBeRunning(slimcoreInstance, slimcoreObject, videoObjectId, logger, timeout, cancelEvent) {
    return waitForVideoObjectState({
        slimcoreInstance: slimcoreInstance,
        slimcoreObject: slimcoreObject,
        videoObjectId: videoObjectId,
        logger: logger,
        resolveStates: [Enums.VideoStatus.Running],
        rejectStates: [Enums.VideoStatus.Stopping],
        timeout: timeout,
        cancelEvent: cancelEvent
    });
}
exports.waitForVideoObjectToBeRunning = waitForVideoObjectToBeRunning;
function waitForVideoObjectToBeStopped(slimcoreInstance, slimcoreObject, videoObjectId, logger, timeout, cancelEvent) {
    return waitForVideoObjectState({
        slimcoreInstance: slimcoreInstance,
        slimcoreObject: slimcoreObject,
        videoObjectId: videoObjectId,
        logger: logger,
        resolveStates: [Enums.VideoStatus.NotStarted, Enums.VideoStatus.Available, Enums.VideoStatus.NotAvailable],
        rejectStates: [],
        timeout: timeout,
        cancelEvent: cancelEvent
    });
}
exports.waitForVideoObjectToBeStopped = waitForVideoObjectToBeStopped;
function isVideoAvailable(state) {
    return isVideoInState(state, AVAILABLE_VIDEO_STATES);
}
exports.isVideoAvailable = isVideoAvailable;
function bufferToString(buf) {
    return String.fromCharCode.apply(null, buf);
}
exports.bufferToString = bufferToString;
function stringToBuffer(msg) {
    var buf = new ArrayBuffer(msg.length);
    var bufView = new Uint8Array(buf);
    for (var i = 0; i < msg.length; i++) {
        bufView[i] = msg.charCodeAt(i);
    }
    return bufView;
}
exports.stringToBuffer = stringToBuffer;
function mapMediaTypeStringToMediaType(mediaTypeStr) {
    switch (mediaTypeStr) {
        case 'audio':
            return 0;
        case 'video':
            return 1;
        case 'panoramic-video':
            return 2;
        case 'applicationsharing-video':
            return 3;
        case 'data':
            return 4;
        default:
            return undefined;
    }
}
exports.mapMediaTypeStringToMediaType = mapMediaTypeStringToMediaType;
function mapToEmptyStrIfFalsy(inputString) {
    if (inputString) {
        return inputString;
    }
    else {
        return '';
    }
}
exports.mapToEmptyStrIfFalsy = mapToEmptyStrIfFalsy;
function hasCreateDataSource(engine) {
    return !!(engine.createDataSource || SlimCore.createDataSource);
}
exports.hasCreateDataSource = hasCreateDataSource;
function hasCreateDataSink(engine) {
    return !!(engine.createDataSink || SlimCore.createDataSink);
}
exports.hasCreateDataSink = hasCreateDataSink;
function createDataSource(engine, dataId) {
    if (engine.createDataSource) {
        return engine.createDataSource(dataId);
    }
    else {
        return SlimCore.createDataSource(dataId);
    }
}
exports.createDataSource = createDataSource;
function createDataSink(engine, dataId) {
    if (engine.createDataSink) {
        return engine.createDataSink(dataId);
    }
    else {
        return SlimCore.createDataSink(dataId);
    }
}
exports.createDataSink = createDataSink;
function convertImageData(image) {
    if (image.isImage) {
        return image;
    }
    else {
        var array = image.data;
        var data = new Uint8ClampedArray(array.buffer, array.byteOffset, array.byteLength);
        return new ImageData(data, image.width, image.height);
    }
}
exports.convertImageData = convertImageData;
function convertEndpointScope(value) {
    switch (value) {
        case 0:
            return Enums.RemoveEndpointScope.RemoveEndpointScopeSpecified;
        case 1:
            return Enums.RemoveEndpointScope.RemoveEndpointScopeOther;
        default:
            return undefined;
    }
}
exports.convertEndpointScope = convertEndpointScope;
function selectMonitorForScreenSharing(selectedMonitor, monitors) {
    var pickSameMonitor = function (monitors) {
        return _.find(monitors, function (monitor) {
            return monitor.monitorId === selectedMonitor.monitorId || _.isEqual(monitor.region, selectedMonitor.region);
        });
    };
    var handleDuplicateToExtend = function (monitors) {
        if (selectedMonitor.isDuplicated && isExtendConfiguration(monitors)) {
            return _.find(monitors, function (monitor) { return !monitor.isInternal; });
        }
        return null;
    };
    var handleExtendToDuplicate = function (monitors) {
        if (!selectedMonitor.isDuplicated && isDuplicateConfiguration(monitors)) {
            return _.find(monitors, function (monitor) { return monitor.isPrimary; });
        }
        return null;
    };
    return (!selectedMonitor) ? null : handleDuplicateToExtend(monitors) || handleExtendToDuplicate(monitors) || pickSameMonitor(monitors);
}
exports.selectMonitorForScreenSharing = selectMonitorForScreenSharing;
function isExtendConfiguration(monitors) {
    var duplicated = count(monitors, function (monitor) { return monitor.isDuplicated; });
    var primary = count(monitors, function (monitor) { return monitor.isPrimary; });
    return duplicated === 0 && primary === 1 && monitors.length > 1;
}
function isDuplicateConfiguration(monitors) {
    var duplicated = count(monitors, function (monitor) { return monitor.isDuplicated; });
    var primary = count(monitors, function (monitor) { return monitor.isPrimary; });
    return duplicated === 1 && primary === 1;
}
function count(collection, predicate) {
    return _.reduce(collection, function (result, item) { return predicate(item) ? result + 1 : result; }, 0);
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CAUSEID_LENGTH = 8;
function generateCauseId() {
    var alphanumerals = 'abcdefghijklmnopqrstuvwxyz0123456789';
    var lenAlphanumerals = alphanumerals.length;
    var causeId = '';
    for (var i = 0; i < CAUSEID_LENGTH; i++) {
        causeId += alphanumerals.charAt(Math.floor(Math.random() * lenAlphanumerals));
    }
    return causeId;
}
exports.generateCauseId = generateCauseId;
function validateCauseId(causeId) {
    var regExp = new RegExp('^[a-z0-9]{8}$');
    return regExp.test(causeId) && causeId.length === CAUSEID_LENGTH;
}
exports.validateCauseId = validateCauseId;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var observableBase_1 = __webpack_require__(40);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase = (function (_super) {
    __extends(SlimCoreElectronBase, _super);
    function SlimCoreElectronBase(_logger, _settings, _slimcoreInstance) {
        var _this = _super.call(this, _logger) || this;
        _this._logger = _logger;
        _this._settings = _settings;
        _this._slimcoreInstance = _slimcoreInstance;
        _this._disposables = [];
        _this._objectPropertyChangedHandlers = new Map();
        return _this;
    }
    SlimCoreElectronBase.prototype.dispose = function (causeId) {
        this._logger.info('dispose');
        this._disposables.forEach(function (disposable) { return disposable.dispose(causeId); });
        this._disposables = [];
        this._objectPropertyChangedHandlers.clear();
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronBase.prototype._registerDisposable = function (disposable) {
        if (!disposable) {
            this._logger.error("Attempt to register null disposable, ignoring");
            return;
        }
        this._disposables.push(disposable);
    };
    SlimCoreElectronBase.prototype._getProperties = function (callHandler, objectId, strProperties, intProperties) {
        if (callHandler.getProperties && this._settings.enableNativeGetProperties) {
            return callHandler.getProperties(objectId, strProperties, intProperties);
        }
        var result = {};
        for (var _i = 0, _a = Object.keys(strProperties); _i < _a.length; _i++) {
            var key = _a[_i];
            var item = strProperties[key];
            result[key] = SlimCoreCommon.getStrProperty(callHandler, this._logger, item.objectId || objectId, item.propKey, item.fallback);
        }
        for (var _b = 0, _c = Object.keys(intProperties); _b < _c.length; _b++) {
            var key = _c[_b];
            var item = intProperties[key];
            result[key] = SlimCoreCommon.getIntProperty(callHandler, this._logger, item.objectId || objectId, item.propKey, item.fallback);
        }
        return result;
    };
    SlimCoreElectronBase.prototype._getStrProperty = function (callHandler, objectId, propertyKey, fallback) {
        return SlimCoreCommon.getStrProperty(callHandler, this._logger, objectId, propertyKey, fallback);
    };
    SlimCoreElectronBase.prototype._getIntProperty = function (callHandler, objectId, propertyKey, fallback) {
        return SlimCoreCommon.getIntProperty(callHandler, this._logger, objectId, propertyKey, fallback);
    };
    SlimCoreElectronBase.prototype._onObjectPropertyChanged = function (objectId, propKey, listener) {
        var _this = this;
        if (!this._objectPropertyChangedHandlers.has(objectId)) {
            this._objectPropertyChangedHandlers.set(objectId, new Map());
            this._registerDisposable(this._slimcoreInstance.handle('object-property-changed', { objectId: objectId }, function (data) { return _this._onObjectPropertyChangedCallback(data); }));
        }
        var handlers = this._objectPropertyChangedHandlers.get(objectId);
        handlers.set(propKey, listener);
    };
    SlimCoreElectronBase.prototype._onObjectPropertyChangedCallback = function (data) {
        var handlers = this._objectPropertyChangedHandlers.get(data.objectId);
        if (!handlers) {
            return;
        }
        var handler = handlers.get(data.propKey);
        if (this._settings.enableSlimCoreEventsCounting) {
            var propKey = SlimCore.Enums.Property[data.propKey] || data.propKey;
            var objectType = SlimCore.Enums.ObjectType[data.objectType] || data.objectType;
            this._logger.debug("_onObjectPropertyChangedCallback - objectId: " + data.objectId + ", objectType: " + objectType + ", propKey: " + propKey + ", value: " + data.value + ", handler: " + !!handler);
        }
        if (handler) {
            handler.call(this, data);
        }
    };
    SlimCoreElectronBase.prototype.raiseChanged = function () {
        try {
            _super.prototype.raiseChanged.call(this);
        }
        catch (err) {
            this._logger.error("Change handling error: " + err);
        }
    };
    SlimCoreElectronBase.prototype._raiseEventImpl = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        try {
            _super.prototype._raiseEventImpl.apply(this, [eventName].concat(args));
        }
        catch (err) {
            this._logger.error("Event '" + eventName + "' handling error: " + err);
        }
    };
    return SlimCoreElectronBase;
}(observableBase_1.default));
exports.default = SlimCoreElectronBase;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
function asap(exec) {
    return new Promise(function (resolve) {
        resolve(exec());
    });
}
exports.asap = asap;
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
var Timer = (function () {
    function Timer(ontimeout) {
        this.ontimeout = ontimeout;
    }
    Timer.prototype.start = function (timeout) {
        this.timeoutId = setTimeout(this.ontimeout, timeout);
    };
    Timer.prototype.stop = function () {
        clearTimeout(this.timeoutId);
    };
    return Timer;
}());
exports.Timer = Timer;
function defer() {
    var resolve;
    var reject;
    var promise = new Promise(function (resolveFn, rejectFn) {
        resolve = resolveFn;
        reject = rejectFn;
    });
    return { promise: promise, resolve: resolve, reject: reject };
}
exports.defer = defer;
function timedDefer(timeout, timeoutMessage) {
    if (timeoutMessage === void 0) { timeoutMessage = "deferred timed out after " + timeout + "ms"; }
    var resolve;
    var reject;
    var rejectTimer = new Timer(function () { return reject(new TimeoutError(timeoutMessage)); });
    var promise = new Promise(function (resolveFn, rejectFn) {
        resolve = function (value) {
            rejectTimer.stop();
            resolveFn(value);
        };
        reject = function (error) {
            rejectTimer.stop();
            rejectFn(error);
        };
    });
    rejectTimer.start(timeout);
    return { promise: promise, resolve: resolve, reject: reject };
}
exports.timedDefer = timedDefer;
function delay(time) {
    return new Promise(function (resolve) { return setTimeout(resolve, time); });
}
exports.delay = delay;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rt_js_bindings_1 = __webpack_require__(7);
function scrubMriOrOmit(mri) {
    if (typeof mri === 'string') {
        return rt_js_bindings_1.pii.Mri(mri);
    }
    else {
        return rt_js_bindings_1.pii.Omit(mri);
    }
}
exports.scrubMriOrOmit = scrubMriOrOmit;
function scrubMriOrOmitList(mriList) {
    return mriList.forEach(scrubMriOrOmit);
}
exports.scrubMriOrOmitList = scrubMriOrOmitList;
function mriOrId(mriOrId) {
    return mriOrId && rt_js_bindings_1.pii.Mri(mriOrId);
}
exports.mriOrId = mriOrId;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function noop() { undefined; }
exports.noop = noop;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CALL_OPERATIONS;
(function (CALL_OPERATIONS) {
    CALL_OPERATIONS["INITIALIZE"] = "Initialize";
    CALL_OPERATIONS["START_CALL"] = "StartCall";
    CALL_OPERATIONS["START_TRANSFER_TARGET_CALL"] = "StartTransferTargetCall";
    CALL_OPERATIONS["STOP_CALL"] = "StopCall";
    CALL_OPERATIONS["STOP_CALL_WITH_BEACON"] = "StopCallWithBeacon";
    CALL_OPERATIONS["JOIN_CALL"] = "JoinCall";
    CALL_OPERATIONS["JOIN_PREHEATED_CALL"] = "JoinPreheatedCall";
    CALL_OPERATIONS["SUBSCRIBE"] = "Subscribe";
    CALL_OPERATIONS["START_CALL_TO_VOICE_MAIL"] = "StartCallToVoiceMail";
    CALL_OPERATIONS["ACKNOWLEDGE"] = "Acknowledge";
    CALL_OPERATIONS["ACCEPT"] = "Accept";
    CALL_OPERATIONS["REJECT"] = "Reject";
    CALL_OPERATIONS["START_VIDEO"] = "StartVideo";
    CALL_OPERATIONS["STOP_VIDEO"] = "StopVideo";
    CALL_OPERATIONS["HOLD"] = "Hold";
    CALL_OPERATIONS["UNHOLD"] = "Unhold";
    CALL_OPERATIONS["UPDATE_ENDPOINT_METADATA"] = "UpdateEndpointMetadata";
    CALL_OPERATIONS["SEND_DTMF_TONE"] = "SendDtmfTone";
    CALL_OPERATIONS["SET_AUDIO_USAGE"] = "SetAudioUsage";
    CALL_OPERATIONS["DUMP_VIDEO_SOURCE_IMAGES"] = "DumpVideoSourceImages";
    CALL_OPERATIONS["BLIND_TRANSFER"] = "BlindTransfer";
    CALL_OPERATIONS["SAFE_TRANSFER"] = "SafeTransfer";
    CALL_OPERATIONS["TRANSFER_TO_VOICEMAIL"] = "TransferToVoicemail";
    CALL_OPERATIONS["CONSULTATIVE_TRANSFER"] = "ConsultativeTransfer";
    CALL_OPERATIONS["START_SCREEN_SHARING"] = "StartScreenSharing";
    CALL_OPERATIONS["STOP_SCREEN_SHARING"] = "StopScreenSharing";
    CALL_OPERATIONS["START_DATA_CHANNEL"] = "StartDataChannel";
    CALL_OPERATIONS["STOP_DATA_CHANNEL"] = "StopDataChannel";
    CALL_OPERATIONS["SHARE_SYSTEM_SOUNDS"] = "ShareSystemSounds";
    CALL_OPERATIONS["MUTE"] = "Mute";
    CALL_OPERATIONS["UNMUTE"] = "Unmute";
    CALL_OPERATIONS["MUTE_SPEAKER"] = "MuteSpeaker";
    CALL_OPERATIONS["UNMUTE_SPEAKER"] = "UnmuteSpeaker";
    CALL_OPERATIONS["MUTE_PARTICIPANTS"] = "MuteParticipants";
    CALL_OPERATIONS["UPDATE_MEETING_ROLE"] = "UpdateMeetingRole";
    CALL_OPERATIONS["START_AUDIO"] = "StartAudio";
    CALL_OPERATIONS["STOP_AUDIO"] = "StopAudio";
    CALL_OPERATIONS["ASSIMILATE"] = "Assimilate";
    CALL_OPERATIONS["SET_MAX_VIDEO_CHANNELS"] = "SetMaxVideoChannels";
    CALL_OPERATIONS["CREATE_CONTENT_SHARING_SESSION"] = "CreateContentSharingSession";
    CALL_OPERATIONS["START_CALL_WITH_NUDGE"] = "StartCallWithNudge";
    CALL_OPERATIONS["START_CALL_AND_UNPARK"] = "StartCallAndUnpark";
    CALL_OPERATIONS["PARK_CALL"] = "ParkCall";
    CALL_OPERATIONS["NUDGE_PARTICIPANTS"] = "NudgeParticipants";
    CALL_OPERATIONS["LWJ_FALLBACK"] = "LwjFallback";
    CALL_OPERATIONS["ELECTRON_PROVIDE_CQF"] = "ElectronProvideCQF";
    CALL_OPERATIONS["MERGE_CALL"] = "MergeCall";
    CALL_OPERATIONS["ADD_GROUP_MODALITY"] = "AddGroupModality";
    CALL_OPERATIONS["MERGE_WITH_PICKUP_CODE"] = "MergeWithPickupCode";
})(CALL_OPERATIONS = exports.CALL_OPERATIONS || (exports.CALL_OPERATIONS = {}));
var CALL_OPERATIONS_INTERNAL;
(function (CALL_OPERATIONS_INTERNAL) {
    CALL_OPERATIONS_INTERNAL["CALL_START_OR_JOIN_INITIATED"] = "_CallStartOrJoinInitiated";
    CALL_OPERATIONS_INTERNAL["INCOMING_INITIALIZE"] = "_IncomingInitialize";
    CALL_OPERATIONS_INTERNAL["CALL_ENDED"] = "_CallEnded";
    CALL_OPERATIONS_INTERNAL["RECONNECT"] = "_Reconnect";
    CALL_OPERATIONS_INTERNAL["RENEGOTIATE"] = "_Renegotiate";
    CALL_OPERATIONS_INTERNAL["RENEGOTIATE_OUTGOING"] = "_RenegotiateOutgoing";
    CALL_OPERATIONS_INTERNAL["RENEGOTIATE_INCOMING"] = "_RenegotiateIncoming";
    CALL_OPERATIONS_INTERNAL["COMPLETE_NEGOTIATION_FAILED"] = "_CompleteNegotiationFailed";
    CALL_OPERATIONS_INTERNAL["UPDATE_LOCAL_MEDIA_STATUS"] = "_UpdateLocalMediaStatus";
    CALL_OPERATIONS_INTERNAL["START_PREVIEW_VIDEO"] = "_StartPreviewVideo";
    CALL_OPERATIONS_INTERNAL["START_LOCAL_VIDEO"] = "_StartLocalVideo";
    CALL_OPERATIONS_INTERNAL["SET_LOCAL_VIDEO"] = "_SetLocalVideo";
    CALL_OPERATIONS_INTERNAL["CALL_TRANSFER_IN_PROGRESS"] = "_CallTransferInProgress";
    CALL_OPERATIONS_INTERNAL["ON_TRANSFER_REQUESTED"] = "_OnTransferRequested";
    CALL_OPERATIONS_INTERNAL["ON_TRANSFER_REQUESTED_INVALID"] = "_OnTransferRequestedInvalid";
    CALL_OPERATIONS_INTERNAL["ON_INCOMING_CALL_REPLACEMENT"] = "_onIncomingCallReplacement";
    CALL_OPERATIONS_INTERNAL["GET_CALL_REPLACEMENT_DETAILS"] = "_GetCallReplacementDetails";
    CALL_OPERATIONS_INTERNAL["SET_CALL_STATE"] = "_SetCallState";
    CALL_OPERATIONS_INTERNAL["SET_TRANSFER_STATE"] = "_SetTransferState";
    CALL_OPERATIONS_INTERNAL["SET_PARK_STATE"] = "_SetParkState";
    CALL_OPERATIONS_INTERNAL["SET_MUTED"] = "_SetMuted";
    CALL_OPERATIONS_INTERNAL["SET_MUTED_SPEAKER"] = "_SetMutedSpeaker";
    CALL_OPERATIONS_INTERNAL["SET_SCREEN_SHARING"] = "_SetScreenSharing";
    CALL_OPERATIONS_INTERNAL["SET_CALL_ORIGIN"] = "_SetCallOrigin";
    CALL_OPERATIONS_INTERNAL["CONNECT_CALL"] = "_ConnectCall";
    CALL_OPERATIONS_INTERNAL["WAIT_FOR_ANSWER"] = "_WaitForAnswer";
    CALL_OPERATIONS_INTERNAL["MEDIA_ACKNOWLEDGMENT"] = "_MediaAcknowledgment";
    CALL_OPERATIONS_INTERNAL["SIGNALING_STATE_CHANGED"] = "_SignalingStateChanged";
    CALL_OPERATIONS_INTERNAL["CALL_TERMINATION_INFO"] = "_CallTerminationInfo";
    CALL_OPERATIONS_INTERNAL["MEDIA_WHITELISTING_ISSUE_DETECTED"] = "_MediaWhiteListingIssueDetected";
    CALL_OPERATIONS_INTERNAL["CALL_ESCALATED_TO_CONFERENCE"] = "_CallEscalatedToConference";
    CALL_OPERATIONS_INTERNAL["WEB_ON_OFFER"] = "_WebOnOffer";
    CALL_OPERATIONS_INTERNAL["WEB_ON_ANSWER"] = "_WebOnAnswer";
    CALL_OPERATIONS_INTERNAL["WEB_ON_RETARGET_SUCCESS"] = "_WebRetargetSuccess";
    CALL_OPERATIONS_INTERNAL["WEB_ON_RETARGET_FAILURE"] = "_WebRetargetFailure";
    CALL_OPERATIONS_INTERNAL["WEB_ON_ESCALATION_SUCCESS"] = "_WebOnEscalationSuccess";
    CALL_OPERATIONS_INTERNAL["WEB_ON_ESCALATION_FAILURE"] = "_WebOnEscalationFailure";
    CALL_OPERATIONS_INTERNAL["CALL_USES_MIXER"] = "_CallUsesMixer";
    CALL_OPERATIONS_INTERNAL["ESCALATION_IN_PROGRESS"] = "_EscalationInProgress";
    CALL_OPERATIONS_INTERNAL["ESCALATION_COMPLETED"] = "_EscalationCompleted";
    CALL_OPERATIONS_INTERNAL["ELECTRON_WAIT_FOR_HANDLE_PUSH"] = "_ElectronWaitForHandlePush";
    CALL_OPERATIONS_INTERNAL["ELECTRON_WAIT_FOR_RINGING"] = "_ElectronWaitForRinging";
    CALL_OPERATIONS_INTERNAL["ELECTRON_START_SCREEN_SHARING"] = "_ElectronStartScreenSharing";
    CALL_OPERATIONS_INTERNAL["ELECTRON_STOP_SCREEN_SHARING"] = "_ElectronStopScreenSharing";
    CALL_OPERATIONS_INTERNAL["ELECTRON_SLIMCORE_READY"] = "_ElectronSlimcoreReady";
    CALL_OPERATIONS_INTERNAL["ELECTRON_DATA_CHANNEL_CREATED"] = "_ElectronDataChannelCreated";
    CALL_OPERATIONS_INTERNAL["ELECTRON_ATTACH_SLIMCORE_CALL"] = "_ElectronAttachSlimcoreCall";
    CALL_OPERATIONS_INTERNAL["ELECTRON_ATTACH_SLIMCORE_CALL_FAILED"] = "_ElectronAttachSlimcoreCallFailed";
    CALL_OPERATIONS_INTERNAL["ELECTRON_LEAVE_CALL"] = "_ElectronLeaveCall";
    CALL_OPERATIONS_INTERNAL["PROCESS_CALL_START_OPTIONS"] = "_ProcessCallStartOptions";
})(CALL_OPERATIONS_INTERNAL = exports.CALL_OPERATIONS_INTERNAL || (exports.CALL_OPERATIONS_INTERNAL = {}));
var OPERATION_VARIANTS;
(function (OPERATION_VARIANTS) {
    OPERATION_VARIANTS["CCWM"] = "CCWM";
    OPERATION_VARIANTS["ENCRYPTED"] = "Encrypted";
    OPERATION_VARIANTS["LWJ"] = "LWJ";
    OPERATION_VARIANTS["PREHEAT"] = "Preheat";
})(OPERATION_VARIANTS = exports.OPERATION_VARIANTS || (exports.OPERATION_VARIANTS = {}));
var MEDIA_EVENT;
(function (MEDIA_EVENT) {
    MEDIA_EVENT["AUDIO_QUALITY_CHANGED"] = "AudioQualityChanged";
    MEDIA_EVENT["SESSION_ERROR"] = "SessionError";
    MEDIA_EVENT["NEGOTIATION_REQUIRED"] = "NegotiationRequired";
    MEDIA_EVENT["OUTGOING_NEGOTIATION_FAILURE"] = "OutgoingNegotiationFailure";
    MEDIA_EVENT["INCOMING_NEGOTIATION_FAILURE"] = "IncomingNegotiationFailure";
    MEDIA_EVENT["NEGOTIATION_FATAL_ERROR"] = "NegotiationFatalError";
    MEDIA_EVENT["NEGOTIATION_COMPLETION"] = "NegotiationCompletion";
    MEDIA_EVENT["AUDIO_STATE_CHANGED"] = "AudioStateChanged";
    MEDIA_EVENT["INCOMPATIBLE_OFFER"] = "IncompatibleOffer";
    MEDIA_EVENT["NEW_OFFER_FAILED"] = "NewOfferFailed";
})(MEDIA_EVENT = exports.MEDIA_EVENT || (exports.MEDIA_EVENT = {}));
var PARTICIPANT_OPERATIONS;
(function (PARTICIPANT_OPERATIONS) {
    PARTICIPANT_OPERATIONS["ADD_PARTICIPANT"] = "AddParticipant";
    PARTICIPANT_OPERATIONS["REMOVE_PARTICIPANT"] = "RemoveParticipant";
    PARTICIPANT_OPERATIONS["ADMIT_PARTICIPANT"] = "AdmitParticipant";
    PARTICIPANT_OPERATIONS["CALL_ME_BACK"] = "CallMeBack";
    PARTICIPANT_OPERATIONS["ADD_PARTICIPANTS"] = "AddParticipants";
})(PARTICIPANT_OPERATIONS = exports.PARTICIPANT_OPERATIONS || (exports.PARTICIPANT_OPERATIONS = {}));
var PARTICIPANT_OPERATIONS_INTERNAL;
(function (PARTICIPANT_OPERATIONS_INTERNAL) {
    PARTICIPANT_OPERATIONS_INTERNAL["SET_PARTICIPANT_STATE"] = "_SetParticipantState";
    PARTICIPANT_OPERATIONS_INTERNAL["SET_PARTICIPANT_STATE_INVALID"] = "_SetParticipantStateInvalid";
    PARTICIPANT_OPERATIONS_INTERNAL["UPDATE_PARTICIPANT_STREAM"] = "_UpdateParticipantStream";
    PARTICIPANT_OPERATIONS_INTERNAL["UPDATE_LOCAL_PARTICIPANT_STREAM"] = "_UpdateLocalParticipantStream";
    PARTICIPANT_OPERATIONS_INTERNAL["PARTICIPANT_JOINED"] = "_ParticipantJoined";
    PARTICIPANT_OPERATIONS_INTERNAL["SELF_PARTICIPANT_UPDATED"] = "_SelfParticipantUpdated";
    PARTICIPANT_OPERATIONS_INTERNAL["ELECTRON_ATTACH_SLIMCORE_PARTICIPANT_FAILED"] = "_ElectronAttachSlimcoreParticipantFailed";
})(PARTICIPANT_OPERATIONS_INTERNAL = exports.PARTICIPANT_OPERATIONS_INTERNAL || (exports.PARTICIPANT_OPERATIONS_INTERNAL = {}));
var CONTENT_SHARING_OPERATIONS;
(function (CONTENT_SHARING_OPERATIONS) {
    CONTENT_SHARING_OPERATIONS["START_CONTENT_SHARING"] = "StartContentSharing";
    CONTENT_SHARING_OPERATIONS["STOP_CONTENT_SHARING"] = "StopContentSharing";
    CONTENT_SHARING_OPERATIONS["JOIN_CONTENT_SHARING"] = "JoinContentSharing";
    CONTENT_SHARING_OPERATIONS["TAKE_CONTENT_SHARING_CONTROL"] = "TakeContentSharingControl";
    CONTENT_SHARING_OPERATIONS["UPDATE_CONTENT_SHARING_SESSION_STATE"] = "UpdateContentSharingSessionState";
    CONTENT_SHARING_OPERATIONS["UPDATE_PARTICIPANT_STATE"] = "UpdateParticipantState";
})(CONTENT_SHARING_OPERATIONS = exports.CONTENT_SHARING_OPERATIONS || (exports.CONTENT_SHARING_OPERATIONS = {}));
var CONTENT_SHARING_OPERATIONS_INTERNAL;
(function (CONTENT_SHARING_OPERATIONS_INTERNAL) {
    CONTENT_SHARING_OPERATIONS_INTERNAL["SET_CONTENT_SHARING_STATUS"] = "_SetContentSharingStatus";
})(CONTENT_SHARING_OPERATIONS_INTERNAL = exports.CONTENT_SHARING_OPERATIONS_INTERNAL || (exports.CONTENT_SHARING_OPERATIONS_INTERNAL = {}));
exports.UNPARK_CODE = {
    PARK: '*11',
    SHARED_LINE: '*12',
    SERVER_HOLD: '*13'
};
var TRANSACTION_END_CODE;
(function (TRANSACTION_END_CODE) {
    TRANSACTION_END_CODE[TRANSACTION_END_CODE["SUCCESS"] = 0] = "SUCCESS";
    TRANSACTION_END_CODE[TRANSACTION_END_CODE["FORBIDDEN"] = 403] = "FORBIDDEN";
    TRANSACTION_END_CODE[TRANSACTION_END_CODE["CLIENT_ERROR"] = 499] = "CLIENT_ERROR";
    TRANSACTION_END_CODE[TRANSACTION_END_CODE["SIGNALING_ERROR"] = 599] = "SIGNALING_ERROR";
})(TRANSACTION_END_CODE = exports.TRANSACTION_END_CODE || (exports.TRANSACTION_END_CODE = {}));
var TRANSACTION_END_SUBCODE;
(function (TRANSACTION_END_SUBCODE) {
    TRANSACTION_END_SUBCODE[TRANSACTION_END_SUBCODE["LOCAL_REJECT"] = 0] = "LOCAL_REJECT";
    TRANSACTION_END_SUBCODE[TRANSACTION_END_SUBCODE["TRANSACTION_NOT_ALLOWED"] = 3548] = "TRANSACTION_NOT_ALLOWED";
})(TRANSACTION_END_SUBCODE = exports.TRANSACTION_END_SUBCODE || (exports.TRANSACTION_END_SUBCODE = {}));
var TRANSACTION_END_PHRASE;
(function (TRANSACTION_END_PHRASE) {
    TRANSACTION_END_PHRASE["TRANSACTION_COMPLETE"] = "TransactionComplete";
    TRANSACTION_END_PHRASE["TRANSACTION_ALLOWED"] = "TransactionAllowed";
    TRANSACTION_END_PHRASE["TRANSACTION_DISALLOWED"] = "TransactionDisallowed";
    TRANSACTION_END_PHRASE["UNKNOWN"] = "Unknown";
})(TRANSACTION_END_PHRASE = exports.TRANSACTION_END_PHRASE || (exports.TRANSACTION_END_PHRASE = {}));


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PROP_WHITELIST = ['response', 'responseText', 'responseURL',
    'status', 'state', 'statusText', 'timeout', 'withCredentials',
    'stack', 'message', 'name', 'error', 'piiSafe', 'phase', 'code',
    'participantId', 'endpointId', 'phrase', 'subCode', 'reason'];
function getPIISafeObject(obj) {
    try {
        return JSON.parse(JSON.stringify(obj, PROP_WHITELIST, 4));
    }
    catch (e) {
        return { error: 'failed to parse object' };
    }
}
exports.getPIISafeObject = getPIISafeObject;
function getPrintableObject(obj, all) {
    if (all === void 0) { all = false; }
    var processStackTrace = function (stack) {
        try {
            return stack.split('\n')[0];
        }
        catch (e) {
            return 'invalid stack';
        }
    };
    if (obj === undefined) {
        return 'void';
    }
    else if (obj instanceof Error) {
        return obj.toString();
    }
    else if (obj instanceof String || obj instanceof Number || obj instanceof Boolean) {
        return obj.toString();
    }
    else {
        try {
            if (obj.stack) {
                obj.stack = processStackTrace(obj.stack);
            }
            return (all ? JSON.stringify(obj) : JSON.stringify(obj, PROP_WHITELIST, 4)).replace(/(\r\n\t|\n|\r\t|\s)/gm, '');
        }
        catch (e) {
            return "failed to get error information:" + (obj && typeof obj.toString === 'function' && obj.toString()) + " " + (obj && obj.response && JSON.stringify(obj.response));
        }
    }
}
exports.getPrintableObject = getPrintableObject;
function safeJsonStringify(obj) {
    try {
        return JSON.stringify(obj);
    }
    catch (e) {
        return 'failed to stringify obj';
    }
}
exports.safeJsonStringify = safeJsonStringify;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getTsCallingVersion() {
    return '2019.35.01.3';
}
exports.getTsCallingVersion = getTsCallingVersion;
function getOvb() {
    return 'b1de1e4a28cc16424809a116003ce37f3a43f26d';
}
exports.getOvb = getOvb;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreElectronDataChannel_1 = __webpack_require__(12);
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var callConstants_1 = __webpack_require__(8);
var callTelemetry_1 = __webpack_require__(13);
var mriUtils_1 = __webpack_require__(25);
var operationDecorators_1 = __webpack_require__(14);
var operationHandler_1 = __webpack_require__(15);
var piiUtils = __webpack_require__(5);
var constants_1 = __webpack_require__(42);
var stateUtils = __webpack_require__(43);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronCallParticipant_1 = __webpack_require__(26);
var SlimCoreElectronContentSharing_1 = __webpack_require__(45);
var SlimCoreElectronDataChannelAdapter_1 = __webpack_require__(47);
var EnumConverter = __webpack_require__(19);
var SlimCoreElectronLocalScreenShare_1 = __webpack_require__(29);
var SlimCoreElectronLocalVideo_1 = __webpack_require__(31);
var SlimCoreElectronRemoteStream_1 = __webpack_require__(18);
var SlimCoreElectronRemoteStreamManager_1 = __webpack_require__(17);
var SlimCoreElectronScreenSharingControl_1 = __webpack_require__(48);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var fn_1 = __webpack_require__(6);
var logUtils_1 = __webpack_require__(9);
function isTransactionEnd(error) {
    return error.code !== undefined;
}
var SlimCoreElectronCall = (function (_super) {
    __extends(SlimCoreElectronCall, _super);
    function SlimCoreElectronCall(logger, settings, engine, _slimcoreCallHandler, _deviceManager, _appHooks, threadId, callId, currentUserSkypeIdentity, participantId, _telemetryService, messageId) {
        var _a;
        var _this = _super.call(this, logger.createChild(function () {
            var endpointIdPrefix = (_this.endpointId || '').substr(0, 8);
            var participantIdPrefix = (_this.participantId || '').substr(0, 8);
            return "Electron[" + _this.slimcoreCallId + ":" + _this.callId + "][" + endpointIdPrefix + "][" + participantIdPrefix + "][" + _this.state + "]";
        }), settings, engine) || this;
        _this._slimcoreCallHandler = _slimcoreCallHandler;
        _this._deviceManager = _deviceManager;
        _this._appHooks = _appHooks;
        _this.threadId = threadId;
        _this.callId = callId;
        _this.currentUserSkypeIdentity = currentUserSkypeIdentity;
        _this.participantId = participantId;
        _this._telemetryService = _telemetryService;
        _this.participants = [];
        _this.participantMap = {};
        _this.isMuted = false;
        _this.isSpeakerMuted = false;
        _this.isServerMuted = false;
        _this.isVideoOn = false;
        _this.isScreenSharingOn = false;
        _this.dominantSpeakerInfo = { speakerList: [], timestamp: null };
        _this.callStartedAt = null;
        _this.callHeldAt = null;
        _this.failureType = 2;
        _this.slimcoreCallId = 0;
        _this.isHostless = true;
        _this.callType = -1;
        _this.isIncomingOneOnOneVideoCall = false;
        _this.contentSharingSessions = [];
        _this.screenSharingControl = null;
        _this.dataChannelAdapter = null;
        _this.isPreheatEnabled = false;
        _this.localMediaStreams = [];
        _this.mediaStreams = (_a = {},
            _a[0] = [],
            _a[1] = [],
            _a);
        _this._streamContextMap = {};
        _this._isAudioStreamConnected = false;
        _this._wasAudioStreamConnected = false;
        _this._callGotConnected = false;
        _this._enableGroupCallMeetupGeneration = false;
        _this._mediaPeerType = 0;
        _this._dataChannel = null;
        _this._dataChannelUsers = [];
        _this._isRelayWhiteListingIssue = false;
        _this._isOptimizedSpeakerEventingEnabled = false;
        _this._isSetVideoChannelsRenegotiated = false;
        _this._callIsSetupComplete = false;
        _this._transferState = 0;
        _this._parkState = 0;
        _this._capabilityFlags = Enums.SelfCapability.None;
        _this._capabilities = { canMuteOthers: false, canUnmuteSelf: false };
        _this.inCallTelemetryReported = false;
        _this.setupTelemetryReported = false;
        _this.connectCallPromise = Promise.resolve();
        _this._videoRequestedOnWhileConnecting = false;
        _this._videoRequestedOffWhileConnecting = false;
        _this._callStartTime = new Date().getTime();
        _this._state = 0;
        _this.isServerMuteUnmuteEnabled = function () {
            if (!_this.endpoints) {
                return false;
            }
            return _.some(_this.endpoints.endpointDetails, function (endpoint) {
                if (_this.endpointId === endpoint.endpointId) {
                    return endpoint.capabilities && endpoint.capabilities.serverMuteUnmute === 'enabled';
                }
                return false;
            });
        };
        _this.isMuteDisabled = function () {
            return _this.isMuted;
        };
        _this.isUnMuteDisabled = function () {
            if (_this.callType === 1) {
                return !_this.isMuted;
            }
            else if (_this.callType === 2) {
                if (!_this.isServerMuteUnmuteEnabled()) {
                    return !_this.isMuted;
                }
                return !_this.isServerMuted && !_this.isMuted;
            }
            return false;
        };
        _this.cleanUp = function (causeId) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._logger.info("[" + causeId + "][cleanup]start");
                        return [4, Promise.all([this._getCallEndOperation(), this._cleanCallResources(causeId)])];
                    case 1:
                        _a.sent();
                        this._callOperationHandler.rejectPendingOperations(61);
                        this._participantOperationHandler.rejectPendingOperations(47);
                        this._callTelemetry.setTerminationState(this.state);
                        this._callTelemetry.setTerminationReason(this.terminatedReason);
                        this._reportTsCallingTelemetry(!this._callIsSetupComplete);
                        return [2];
                }
            });
        }); };
        _this._getCallEndOperation = function () {
            if (_this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.STOP_CALL)) {
                return _this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.STOP_CALL);
            }
            else if (_this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.REJECT)) {
                return _this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.REJECT);
            }
            else {
                return Promise.resolve();
            }
        };
        _this._getFirstParticipantFailureReason = function (fnLogger) {
            try {
                if (_this.participants.length) {
                    var participantFailureReason = _.head(_this.participants).getIntProperty(Enums.Property.ParticipantFailureReason);
                    fnLogger.info("participantFailureReason=" + participantFailureReason);
                    return participantFailureReason;
                }
                fnLogger.logFailure("no participants , can't query for participantFailureReason");
                return undefined;
            }
            catch (e) {
                _this._logger.logFailure("participantFailureReason=" + logUtils_1.getPrintableObject(e));
                return undefined;
            }
        };
        _this._setTransferState = function (state, causeId) {
            if (_this.transferState !== state) {
                _this._logger.info("Transfer: state set: " + state);
                _this._transferState = state;
                _this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_TRANSFER_STATE, { state: state }, causeId);
                _this.raiseChanged();
            }
        };
        _this._setParkState = function (state, causeId) {
            if (_this.parkState !== state) {
                _this._logger.info("Park: state set: " + state);
                _this._parkState = state;
                _this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_PARK_STATE, { state: state }, causeId);
                _this.raiseChanged();
            }
        };
        _this._logger.info('constructor');
        _this.terminatedReason = 0;
        _this._setupCallTelemetry();
        _this._setParticipantId(_this.participantId);
        _this._setThreadId(_this.threadId);
        _this._setCallId(_this.callId);
        _this._setCallOrigin(0);
        _this._setMessageId(messageId);
        _this._setIsEmergency(false);
        try {
            _this._setEndpointId(_this._slimcoreInstance.getRegistrationId(_this.currentUserSkypeIdentity.id));
        }
        catch (error) {
            _this._logger.warn("getRegistrationId is missing!");
        }
        _this.screenSharingControl = new SlimCoreElectronScreenSharingControl_1.default(_this._logger, _this._settings, _this._slimcoreInstance, _this, _this._appHooks.getControlInjector(), _this._telemetryService);
        _this.raiseRenderedAtViewer = _this.raiseRenderedAtViewer.bind(_this);
        _this.screenSharingControl.setRaiseRenderedAtViewer(_this.raiseRenderedAtViewer);
        _this.dataChannelAdapter = new SlimCoreElectronDataChannelAdapter_1.default(_this._logger, _this._slimcoreInstance);
        _this._dataChannelUsers = [_this.screenSharingControl, _this.dataChannelAdapter];
        _this._callOperationHandler = new operationHandler_1.default(_this._logger, _this._callTelemetry);
        _this._participantOperationHandler = new operationHandler_1.default(_this._logger, _this._callTelemetry);
        _this._dataChannelCreatedPromise = _this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_DATA_CHANNEL_CREATED);
        _this._dataChannelCreatedPromise.catch(fn_1.noop);
        _this._streamContextMap[0] = new SlimCoreElectronRemoteStream_1.SlimCoreElectronRemoteStreamContext(_this._logger);
        _this._streamContextMap[1] = new SlimCoreElectronRemoteStream_1.SlimCoreElectronRemoteStreamContext(_this._logger);
        return _this;
    }
    Object.defineProperty(SlimCoreElectronCall.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            this._state = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCall.prototype, "transferState", {
        get: function () {
            return this._transferState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCall.prototype, "parkState", {
        get: function () {
            return this._parkState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCall.prototype, "capabilities", {
        get: function () {
            return this._capabilities;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCall.prototype.init = function (callInitOptions) {
        this._setMessageId(callInitOptions.messageId);
        if (callInitOptions.threadId) {
            this._setThreadId(callInitOptions.threadId);
        }
        this._meetingInfo = callInitOptions.meetingInfo;
        this._enableGroupCallMeetupGeneration = !!callInitOptions.enableGroupCallMeetupGeneration;
        if (callInitOptions.transferContext) {
            this._transferContext = callInitOptions.transferContext;
            if (callInitOptions.transferContext.transferType === 1) {
                this._setCallOrigin(2);
            }
            else if (callInitOptions.transferContext.transferType === 0) {
                this._setCallOrigin(1);
            }
            else if (callInitOptions.transferContext.transferType === 2) {
                this._setCallOrigin(3);
            }
            if (callInitOptions.transferContext.transferorMri) {
                this._updateTransferorMri(callInitOptions.transferContext.transferorMri);
            }
        }
        this._endpointMetadata = callInitOptions.endpointMetadata;
        this.onBehalfOfMri = callInitOptions.onBehalfOf;
        this._emergencyContent = callInitOptions.emergencyContent;
        this._locationContent = callInitOptions.locationContent;
        this._mediaPeerType = callInitOptions.mediaPeerType;
        if (this.broadcastMeeting) {
            this.broadcastMeeting.context = callInitOptions.broadcastContext;
        }
        this._setIsEmergency(!!callInitOptions.isEmergency);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype.processCallStartOptions = function (options, causeId) {
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS_INTERNAL.PROCESS_CALL_START_OPTIONS, causeId);
        try {
            if (options.preheatFlags & 1) {
                this.isPreheatEnabled = true;
            }
        }
        catch (error) {
            fnLogger.logFailure(error);
        }
    };
    SlimCoreElectronCall.prototype.join = function (context, callStartOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var operationData;
            return __generator(this, function (_a) {
                this._setCallerMri(mriUtils_1.stripMriAliases(context.groupCallInitiator), causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.INCOMING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.JOIN);
                if (callStartOptions.preheatFlags & 1) {
                    this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.JOIN_CALL, callConstants_1.OPERATION_VARIANTS.PREHEAT);
                }
                if (callStartOptions.muteFlags) {
                    operationData = {
                        muteMicrophone: !!(callStartOptions.muteFlags & 1),
                        muteSpeaker: !!(callStartOptions.muteFlags & 2)
                    };
                    this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.JOIN_CALL, operationData, causeId);
                }
                this._callTelemetry.setPreheatFlags(callStartOptions.preheatFlags);
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.JOIN_CALL);
                return [2, this._joinOrStartCall({
                        audioDirection: callStartOptions.audioDirection,
                        videoDirection: callStartOptions.videoDirection !== undefined ?
                            callStartOptions.videoDirection :
                            (callStartOptions.withVideo ? 4 : 1),
                        screenshareDirection: callStartOptions.screenshareDirection,
                        datachannelDirection: callStartOptions.datachannelDirection,
                        muteFlags: callStartOptions.muteFlags,
                        conversationUrl: context.conversationUrl,
                        preheatFlags: callStartOptions.preheatFlags,
                        label: callStartOptions.label,
                        conversationType: context.conversationType,
                        enableLightWeightMeeting: false,
                        maxVideoChannels: callStartOptions.maxVideoChannels,
                        negotiationTag: callStartOptions.negotiationTag,
                        scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.scenario)
                    }, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.start = function (callStartOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, operationData, slimcoreContext_1, isVideoEnabled_1;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_CALL, causeId);
                this._setCallerMri(mriUtils_1.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.OUTGOING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLER);
                if (callStartOptions.preheatFlags & 1) {
                    this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.START_CALL, callConstants_1.OPERATION_VARIANTS.PREHEAT);
                }
                else if (callStartOptions.encryptedKey) {
                    this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.START_CALL, callConstants_1.OPERATION_VARIANTS.ENCRYPTED);
                }
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_CALL);
                if (callStartOptions.muteFlags) {
                    operationData = {
                        muteMicrophone: !!(callStartOptions.muteFlags & 1),
                        muteSpeaker: !!(callStartOptions.muteFlags & 2)
                    };
                    this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.START_CALL, operationData, causeId);
                }
                this._callTelemetry.setPreheatFlags(callStartOptions.preheatFlags);
                if (this._transferContext) {
                    fnLogger.info('Transfer: Starting transfered call.');
                    slimcoreContext_1 = this._transferContext.context;
                    if (!slimcoreContext_1.newCallObjectId) {
                        return [2, Promise.reject(new Error('Transfer: Transfered context is invalid. Missing callObjectId or newCallObjectId'))];
                    }
                    this._setCallType(1);
                    isVideoEnabled_1 = callStartOptions.withVideo || (callStartOptions.videoDirection === 4);
                    if (this._transferContext.transferType === 2) {
                        isVideoEnabled_1 = false;
                    }
                    return [2, this._callOperationHandler.execute(function () { return _this._startTransferTargetCall(slimcoreContext_1.newCallObjectId, isVideoEnabled_1, causeId); }, callConstants_1.CALL_OPERATIONS.START_TRANSFER_TARGET_CALL)];
                }
                if (callStartOptions.withVideo) {
                    callStartOptions.videoDirection = 4;
                }
                return [2, this._joinOrStartCall({
                        audioDirection: callStartOptions.audioDirection,
                        videoDirection: callStartOptions.videoDirection,
                        screenshareDirection: callStartOptions.screenshareDirection,
                        datachannelDirection: callStartOptions.datachannelDirection,
                        ringOthers: callStartOptions.ringOthers,
                        preheatFlags: callStartOptions.preheatFlags,
                        label: callStartOptions.label,
                        conversationType: this.isEmergency ? 'emergencyGroupCall' : (callStartOptions.isCast ? 'cast' : ''),
                        enableLightWeightMeeting: false,
                        callKey: callStartOptions.callKey,
                        encryptedKey: callStartOptions.encryptedKey,
                        connectionType: callStartOptions.connectionType,
                        mediaConfiguration: callStartOptions.mediaConfiguration,
                        maxVideoChannels: callStartOptions.maxVideoChannels,
                        routingFlags: callStartOptions.routingFlags,
                        muteFlags: callStartOptions.muteFlags,
                        negotiationTag: callStartOptions.negotiationTag,
                        scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.scenario)
                    }, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.startCallToVoicemail = function (callStartOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._setCallerMri(mriUtils_1.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.OUTGOING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLER);
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_CALL_TO_VOICE_MAIL);
                return [2, this._joinOrStartCall({
                        callToVoicemail: true,
                        voicemailResourcePath: callStartOptions.voicemailResourcePath,
                        voicemailItemId: callStartOptions.voicemailItemId
                    }, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.startCallWithNudge = function (participants, callStartOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger;
            return __generator(this, function (_a) {
                this._setCallerMri(mriUtils_1.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, causeId);
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_CALL_WITH_NUDGE, causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.OUTGOING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLER);
                if (callStartOptions.encryptedKey) {
                    this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.START_CALL_WITH_NUDGE, callConstants_1.OPERATION_VARIANTS.ENCRYPTED);
                }
                if (_.isEmpty(participants)) {
                    fnLogger.logFailure('No participants provided to nudge');
                    return [2, Promise.reject(new Error('No participants provided to nudge'))];
                }
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_CALL_WITH_NUDGE);
                return [2, this._joinOrStartCall({
                        audioDirection: callStartOptions.audioDirection,
                        videoDirection: callStartOptions.videoDirection !== undefined ?
                            callStartOptions.videoDirection :
                            (callStartOptions.withVideo ? 4 : 1),
                        screenshareDirection: callStartOptions.screenshareDirection,
                        datachannelDirection: callStartOptions.datachannelDirection,
                        ringOthers: false,
                        label: callStartOptions.label,
                        conversationType: callStartOptions.isCast ? 'cast' : '',
                        enableLightWeightMeeting: false,
                        callKey: callStartOptions.callKey,
                        encryptedKey: callStartOptions.encryptedKey,
                        connectionType: callStartOptions.connectionType,
                        mediaConfiguration: callStartOptions.mediaConfiguration,
                        participantsToNudge: participants,
                        invitationType: Enums.InvitationType.Nudge,
                        negotiationTag: callStartOptions.negotiationTag,
                        scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.scenario)
                    }, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.startAndUnpark = function (context, pickupCode, callStartOptions, causeId) {
        if (callStartOptions === void 0) { callStartOptions = {}; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, parkContextMri;
            return __generator(this, function (_a) {
                this._setCallerMri(mriUtils_1.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, causeId);
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_CALL_AND_UNPARK, causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.OUTGOING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLER);
                if (callStartOptions.encryptedKey) {
                    this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.START_CALL_AND_UNPARK, callConstants_1.OPERATION_VARIANTS.ENCRYPTED);
                }
                this._setCallType(1);
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_CALL_AND_UNPARK);
                if (callStartOptions.withVideo) {
                    callStartOptions.videoDirection = 4;
                }
                parkContextMri = context === 0 ? callConstants_1.UNPARK_CODE.PARK :
                    (context === 1 ? callConstants_1.UNPARK_CODE.SHARED_LINE : callConstants_1.UNPARK_CODE.SERVER_HOLD);
                this.addParticipant("4:" + parkContextMri, undefined, causeId)
                    .catch(function (e) { return fnLogger.logFailure("Failed to add participant to unparked call=" + e); });
                return [2, this._joinOrStartCall({
                        audioDirection: callStartOptions.audioDirection,
                        videoDirection: callStartOptions.videoDirection,
                        screenshareDirection: callStartOptions.screenshareDirection,
                        datachannelDirection: callStartOptions.datachannelDirection,
                        ringOthers: callStartOptions.ringOthers,
                        label: callStartOptions.label,
                        conversationType: callStartOptions.isCast ? 'cast' : '',
                        enableLightWeightMeeting: false,
                        callKey: callStartOptions.callKey,
                        encryptedKey: callStartOptions.encryptedKey,
                        connectionType: callStartOptions.connectionType,
                        mediaConfiguration: callStartOptions.mediaConfiguration,
                        maxVideoChannels: callStartOptions.maxVideoChannels,
                        routingFlags: callStartOptions.routingFlags,
                        muteFlags: callStartOptions.muteFlags,
                        parkContext: context,
                        pickupCode: pickupCode,
                        scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.scenario)
                    }, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.joinCallWithoutCallModality = function (context, callStartOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, props, slimcoreCallId, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._setCallerMri(mriUtils_1.stripMriAliases(context.groupCallInitiator), causeId);
                        fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, causeId);
                        fnLogger.info("joinCallWithoutCallModality: " + context.conversationUrl);
                        this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.OUTGOING);
                        this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.SUBSCRIBE);
                        if (!context.conversationUrl) {
                            this._callTelemetry.setOperationVariant(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, callConstants_1.OPERATION_VARIANTS.CCWM);
                        }
                        if (this.state !== 0) {
                            fnLogger.logFailure('Trying to start a call that has already been acted on');
                            return [2, Promise.reject(new Error('Trying to start a call that has already been acted on'))];
                        }
                        props = this._getSlimCoreCallProperties({
                            audioDirection: Enums.MediaDirection.Disabled,
                            videoDirection: Enums.MediaDirection.Disabled,
                            screenshareDirection: Enums.MediaDirection.Disabled,
                            datachannelDirection: Enums.MediaDirection.Disabled,
                            mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(this._mediaPeerType),
                            isVideoEnabled: false,
                            isGoLive: !callStartOptions.ringOthers,
                            isHostless: true,
                            participantLegId: this.participantId,
                            enableGroupCallMeetupGeneration: this._enableGroupCallMeetupGeneration,
                            threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.threadId),
                            messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.messageId),
                            subject: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.label),
                            conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(context.conversationType),
                            meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(this._meetingInfo)),
                            endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(this._endpointMetadata),
                            onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(this.onBehalfOfMri),
                            enableLightWeightMeeting: false,
                            emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._emergencyContent),
                            broadcastContext: this.broadcastMeeting && this.broadcastMeeting.context ? JSON.stringify(this.broadcastMeeting.context) : null,
                            callKey: '',
                            encryptedKey: '',
                            invitationType: Enums.InvitationType.None,
                            connectionType: Enums.ConnectionType.AllSupported,
                            maxVideoChannels: (callStartOptions.maxVideoChannels !== undefined) ? callStartOptions.maxVideoChannels : 0,
                            muteFlags: callStartOptions.muteFlags,
                            negotiationTag: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.negotiationTag),
                            routingFlags: callStartOptions.routingFlags,
                            scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(callStartOptions.scenario),
                            locationContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._locationContent),
                            mediaConfigurationJson: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(callStartOptions.mediaConfiguration))
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        slimcoreCallId = this._slimcoreCallHandler.subscribe(JSON.stringify({
                            conversationUrl: context.conversationUrl,
                            conversationId: this.callId,
                            conversationType: context.conversationType
                        }), props);
                        this._setCallState(8, causeId);
                        return [4, this.attachSlimCoreCallObject(slimcoreCallId, causeId, true, 'joinCallWithoutCallModality')];
                    case 2:
                        _a.sent();
                        if (!SlimCoreCommon.hasFeature(Enums.Feature.ObservingStateSupported)) {
                            return [2, Promise.resolve()];
                        }
                        else {
                            return [2, this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, undefined, causeId)];
                        }
                        return [3, 4];
                    case 3:
                        error_1 = _a.sent();
                        fnLogger.logFailure("sync failure, cleaning up slimcore ready operation: error=" + logUtils_1.getPrintableObject(error_1));
                        this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, { error: logUtils_1.getPIISafeObject(error_1) }, causeId);
                        this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY);
                        throw error_1;
                    case 4: return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype._assertSlimcoreObjectId = function (id, errorString) {
        if (id === 0) {
            throw new Error(errorString + " Failed. Slimcore returned objectId of 0");
        }
    };
    SlimCoreElectronCall.prototype.joinPreheatedCall = function (joinPreheatedCallOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL, causeId);
                if (this.state !== 11 && this.state !== 12) {
                    fnLogger.logFailure('Trying to join a call that is not in preheating state');
                    return [2, Promise.reject(new Error('Trying to join a call that is not in preheating state'))];
                }
                if ((joinPreheatedCallOptions.muteFlags & 1) === 1) {
                    fnLogger.info("isMuted set to true in joinPreheatedCall");
                    this.isMuted = true;
                }
                if ((joinPreheatedCallOptions.muteFlags & 2) === 2) {
                    fnLogger.info("isSpeakerMuted set to true in joinPreheatedCall");
                    this.isSpeakerMuted = true;
                }
                this._setCallState(2, causeId);
                this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL);
                try {
                    this._slimcoreCallHandler.joinPreheatedCall(this.slimcoreCallId, causeId, joinPreheatedCallOptions.muteFlags);
                }
                catch (error) {
                    this.stopInternal(causeId);
                    fnLogger.logFailure(error);
                    throw error;
                }
                return [2, this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL, undefined, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.startVideoSafe = function (causeId) {
        var _this = this;
        return this.startVideo(causeId).catch(function (error) {
            _this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_VIDEO, causeId).logFailure(error);
        });
    };
    SlimCoreElectronCall.prototype.startVideo = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, startVideoPromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_VIDEO, causeId);
                if (!this.callStateCanToggleVideo()) {
                    fnLogger.info('startVideo called but call is not in togglable state - starting preview only, video will start once available');
                    this._videoRequestedOnWhileConnecting = true;
                    this._videoRequestedOffWhileConnecting = false;
                    this._setVideoOn(true, causeId);
                    return [2];
                }
                startVideoPromise = Promise.resolve()
                    .then(function () { return _this._startLocalVideo(negotiationTag, causeId); })
                    .then(function () { return _this._setVideoOn(true, causeId); });
                return [2, this._callOperationHandler.registerPromise(callConstants_1.CALL_OPERATIONS.START_VIDEO, startVideoPromise).catch(function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.START_VIDEO, { error: logUtils_1.getPIISafeObject(error) }, causeId);
                        _this._logger.logFailure(error);
                        _this.stopVideo(negotiationTag, causeId).catch(fn_1.noop);
                        throw error;
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.stopVideo = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, cleanUp, stopVideoPromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.STOP_VIDEO, causeId);
                if (!this.callStateCanToggleVideo()) {
                    if (this._videoRequestedOnWhileConnecting) {
                        fnLogger.info('stopVideo called but call is not in togglable state - video will stop once available');
                        this._videoRequestedOffWhileConnecting = true;
                    }
                    else {
                        fnLogger.info('stopVideo called but call is not in togglable state - enabling video was not requested anyway, so ignoring');
                    }
                    return [2, Promise.resolve()];
                }
                cleanUp = function () {
                    if (_this._localVideo) {
                        _this._localVideo.dispose(causeId);
                        _this._localVideo = null;
                    }
                    _this._setVideoOn(false, causeId);
                };
                stopVideoPromise = Promise.resolve()
                    .then(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this._localVideo) return [3, 2];
                                return [4, SlimCoreCommon.forgetAndLog(this._localVideo.stop(causeId, negotiationTag), fnLogger, 'stopVideo: stopping localVideo failed')];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2: return [2];
                        }
                    });
                }); });
                return [2, this._callOperationHandler.registerPromise(callConstants_1.CALL_OPERATIONS.STOP_VIDEO, stopVideoPromise)
                        .then(cleanUp, function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.STOP_VIDEO, { error: logUtils_1.getPIISafeObject(error) }, causeId);
                        fnLogger.logFailure(error);
                        cleanUp();
                    })];
            });
        });
    };
    Object.defineProperty(SlimCoreElectronCall.prototype, "endpointId", {
        get: function () {
            return this._endpointId;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCall.prototype._setEndpointId = function (endpointId) {
        this._endpointId = endpointId;
        this._callTelemetry.setEndpointId(endpointId);
    };
    SlimCoreElectronCall.prototype._setFailureType = function (failureType) {
        this._callTelemetry.setFailureType(failureType);
        this.failureType = failureType;
    };
    SlimCoreElectronCall.prototype._setThreadId = function (threadId) {
        this._logger.info("Set threadId:" + threadId);
        this.threadId = threadId;
        this._callTelemetry.setThreadId(threadId);
    };
    SlimCoreElectronCall.prototype._setMessageId = function (messageId) {
        this._logger.info("Set messageId:" + messageId);
        this.messageId = messageId;
        this._callTelemetry.setMesageId(messageId);
    };
    SlimCoreElectronCall.prototype._setCallType = function (callType) {
        this._logger.info("Set callType:" + callType);
        this.callType = callType;
        this._callTelemetry.setCallType(callType);
    };
    SlimCoreElectronCall.prototype._setCallerMri = function (callerMri, causeId) {
        this._logger.info("[" + causeId + "]Set callerMri:" + callerMri);
        this.callerMri = callerMri;
    };
    SlimCoreElectronCall.prototype._setCallOrigin = function (origin) {
        this._logger.info("Set origin:" + origin);
        this._origin = origin;
        this._callTelemetry.setCallOrigin(origin);
    };
    SlimCoreElectronCall.prototype._setIsCast = function (isCast) {
        this._logger.info("Set isCast:" + isCast);
        this.isCast = isCast;
        this._callTelemetry.setIsCast(isCast);
    };
    SlimCoreElectronCall.prototype._setIsEmergency = function (isEmergency) {
        this._logger.info("Set isEmergency:" + isEmergency);
        this.isEmergency = isEmergency;
        this._callTelemetry.setIsEmergency(isEmergency);
    };
    SlimCoreElectronCall.prototype._startLocalVideo = function (negotiationTag, causeId) {
        if (!this._localVideo) {
            this._localVideo = new SlimCoreElectronLocalVideo_1.default(this._logger, this._settings, this._slimcoreInstance, this, this.slimcoreCallId, this._slimcoreCallHandler, this._deviceManager);
        }
        return this._localVideo.start(causeId, negotiationTag);
    };
    SlimCoreElectronCall.prototype.dumpVideoSourceImages = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this._localVideo) {
                    return [2, Promise.reject(new Error('Cannot dump video effects debug images when there is no local video'))];
                }
                return [2, this._localVideo.dumpVideoSourceImages()];
            });
        });
    };
    SlimCoreElectronCall.prototype.startScreenSharing = function (source, cropRegion, negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                    this.screenSharingControl.shutdownControlForViewer();
                }
                return [2, Promise.resolve()
                        .then(function () {
                        if (!_this._localScreenShareStream) {
                            _this._localScreenShareStream = new SlimCoreElectronLocalScreenShare_1.default(_this._logger, _this._settings, _this._slimcoreInstance, _this.slimcoreCallId, _this._slimcoreCallHandler, _this._deviceManager, _this._appHooks, _this.screenSharingControl, _this._callTelemetry);
                            _this._localScreenShareStream.changed(function () { return _this._onLocalScreenShareStreamChanged(causeId); });
                            _this._localScreenShareStream.on('sharingSourceLost', function () { return _this._onLocalScreenShareSourceLost(); });
                            _this._localScreenShareStream.on('windowClosed', function () { return _this.stopScreenSharing(false, negotiationTag, causeId); });
                            _this._localScreenShareStream.on('scraperEvent', function (args) { return _this._onScraperEvent(args); });
                        }
                    })
                        .then(function () { return _this._localScreenShareStream.start(causeId, source, cropRegion, negotiationTag); })];
            });
        });
    };
    SlimCoreElectronCall.prototype.changeCropRegion = function (cropRegion) {
        if (this._localScreenShareStream) {
            this._localScreenShareStream.changeCropRegion(cropRegion);
        }
    };
    SlimCoreElectronCall.prototype._onLocalScreenShareSourceLost = function () {
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.shutdownControlForSharer();
        }
        if (this._localScreenShareStream.isStreaming) {
            this.event('sharingDropped').raise();
        }
    };
    SlimCoreElectronCall.prototype._onScraperEvent = function (args) {
        var eventArgs = {
            event: args.event,
            data: args.data
        };
        this.event('scraperEvent').raise(eventArgs);
    };
    SlimCoreElectronCall.prototype.raiseRenderedAtViewer = function (id) {
        this.event('sharingRenderedAtViewer').raise(id);
    };
    SlimCoreElectronCall.prototype._onLocalScreenShareStreamChanged = function (causeId) {
        if (this._localScreenShareStream.isStreaming) {
            if (!this.isScreenSharingOn && this._dataChannel && this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                this.screenSharingControl.initControlForSharer(this._localScreenShareStream.negotiationTag);
                this._dataChannel.start();
            }
            this._setScreenSharingOn(true, causeId);
        }
        else if (!this._localScreenShareStream.isAvailable) {
            if (this.isScreenSharingOn && this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
                this.screenSharingControl.shutdownControlForSharer();
            }
            this._setScreenSharingOn(false, causeId);
        }
    };
    SlimCoreElectronCall.prototype.stopScreenSharing = function (isSharerSwitch, negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, always, stopScreenSharingPromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.STOP_SCREEN_SHARING, causeId);
                always = function () {
                    if (_this._localScreenShareStream) {
                        _this._localScreenShareStream.dispose(causeId);
                        _this._localScreenShareStream = null;
                    }
                    _this._setScreenSharingOn(false, causeId);
                    if (_this.screenSharingControl && _this.screenSharingControl.isScreenSharingControlEnabled()) {
                        _this.screenSharingControl.shutdownControlForSharer();
                    }
                };
                stopScreenSharingPromise = Promise.resolve()
                    .then(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this._localScreenShareStream) return [3, 2];
                                return [4, SlimCoreCommon.forgetAndLog(this._localScreenShareStream.stop(causeId, negotiationTag), fnLogger, 'stopScreenSharing: stopping screen sharing failed')];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2: return [2];
                        }
                    });
                }); });
                return [2, this._callOperationHandler.registerPromise(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_STOP_SCREEN_SHARING, stopScreenSharingPromise)
                        .then(always, function (error) {
                        fnLogger.logFailure(error);
                        always();
                        throw error;
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.startDataChannel = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._dataChannelCreatedPromise];
                    case 1:
                        _a.sent();
                        return [2, this._dataChannel.start(negotiationTag)];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.stopDataChannel = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._dataChannelCreatedPromise];
                    case 1:
                        _a.sent();
                        return [2, this._dataChannel.stop(negotiationTag)];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.sendUserEvents = function (events, participantIds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._dataChannelCreatedPromise];
                    case 1:
                        _a.sent();
                        return [2, this._dataChannel.sendUserEvents(events, participantIds)];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.shareSystemSound = function (enable) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this._logger.info("shareSystemSound: " + enable);
                return [2, Promise.resolve().then(function () {
                        _this._slimcoreCallHandler.callShareSystemSound(_this.slimcoreCallId, enable);
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.transferCall = function (transferTargetMri) {
        this._logger.warn('transferCall is deprecated, please use callBlindTransfer instead');
        return this.callBlindTransfer(transferTargetMri);
    };
    SlimCoreElectronCall.prototype.callBlindTransfer = function (transferTargetMri, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var transferInfo;
            return __generator(this, function (_a) {
                transferInfo = {
                    transferTarget: transferTargetMri,
                    transferType: 0,
                    transferStatusSuccessList: [Enums.CallStatus.Transferring, Enums.CallStatus.Transferred]
                };
                return [2, this._transferCall(transferInfo, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.callSafeTransfer = function (transferTargetMri, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var transferInfo;
            return __generator(this, function (_a) {
                transferInfo = {
                    transferTarget: transferTargetMri,
                    transferType: 0,
                    transferStatusSuccessList: [Enums.CallStatus.Transferred]
                };
                return [2, this._transferCall(transferInfo, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.transferCallToVoicemail = function (transferOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var transferInfo = {
            transferTarget: transferOptions.transferTargetMri,
            transferType: 2,
            transferStatusSuccessList: [Enums.CallStatus.Transferred]
        };
        return this._transferCall(transferInfo, causeId);
    };
    SlimCoreElectronCall.prototype.callConsultativeTransfer = function (callWithTarget, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var transferInfo;
            return __generator(this, function (_a) {
                transferInfo = {
                    targetCallId: callWithTarget.slimcoreCallId,
                    transferType: 0,
                    transferStatusSuccessList: [Enums.CallStatus.Transferred]
                };
                return [2, this._transferCall(transferInfo, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.consultativeTransferWithPickupCode = function (pickupCode, causeId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, Promise.reject("not yet implemented")];
            });
        });
    };
    SlimCoreElectronCall.prototype._transferCall = function (transferInfo, causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, transferCompletePromise;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger("Transfer", causeId);
                fnLogger.info('start');
                this._setTransferState(1, causeId);
                transferCompletePromise = this._waitForTransferSuccessOrFailure(transferInfo.transferStatusSuccessList, 0, causeId);
                if (transferInfo.transferTarget && transferInfo.transferType === 2) {
                    this._slimcoreCallHandler.startCallTransfer(this.slimcoreCallId, transferInfo.transferTarget, Enums.TransferType.TransferToVoicemail);
                }
                else if (transferInfo.transferTarget) {
                    this._slimcoreCallHandler.startCallTransfer(this.slimcoreCallId, transferInfo.transferTarget, Enums.TransferType.TransferStandard);
                }
                else if (transferInfo.targetCallId) {
                    this._slimcoreCallHandler.startConsultativeCallTransfer(transferInfo.targetCallId, this.slimcoreCallId);
                }
                else {
                    return [2, Promise.reject(new Error('Either transferTarget/transfereeCallId should be present'))];
                }
                return [2, transferCompletePromise];
            });
        });
    };
    SlimCoreElectronCall.prototype.park = function (context, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var parkInfo, slimcoreParkContext;
            var _this = this;
            return __generator(this, function (_a) {
                parkInfo = {
                    context: context,
                    parkStatusSuccessList: [Enums.CallStatus.Parked]
                };
                this._setParkState(1, causeId);
                this._parkCompletePromise = this._waitForTransferSuccessOrFailure(parkInfo.parkStatusSuccessList, 1, causeId);
                slimcoreParkContext = this.mapParkContext(parkInfo.context);
                if (slimcoreParkContext === Enums.ParkContext.Invalid) {
                    return [2, Promise.reject(32)];
                }
                this._slimcoreCallHandler.startCallPark(this.slimcoreCallId, slimcoreParkContext);
                return [2, this._parkCompletePromise
                        .then(function () {
                        try {
                            var pickupCode = _this.getStrProperty(Enums.Property.CallParkPickupCode);
                            _this._serverHoldLocation = _this.getStrProperty(Enums.Property.CallServerHoldLocation);
                            return Promise.resolve(pickupCode);
                        }
                        catch (e) {
                            return Promise.reject(32);
                        }
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.getServerHoldLocation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this._parkCompletePromise
                        .then(function () {
                        _this._logger.info("getServerHoldLocation=" + _this._serverHoldLocation);
                        return Promise.resolve(_this._serverHoldLocation);
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.mapParkContext = function (context) {
        switch (context) {
            case 0: return Enums.ParkContext.Team;
            case 1: return Enums.ParkContext.Sharedline;
            case 2: return Enums.ParkContext.Serverhold;
            default: return Enums.ParkContext.Invalid;
        }
    };
    SlimCoreElectronCall.prototype._waitForTransferSuccessOrFailure = function (transferSuccessStatusList, transferType, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('WaitForTransfer', causeId);
        fnLogger.info("successStatusList=" + transferSuccessStatusList + ", type=" + transferType);
        var transferPromise = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS, undefined, causeId);
        var slimcoreTransferStatusProperty = transferType === 0 ? Enums.Property.CallTransferStatus : Enums.Property.CallParkStatus;
        var slimcoreTransferFailureReasonProperty = transferType === 0 ? Enums.Property.CallTransferFailureReason : Enums.Property.CallParkFailureReason;
        var onTransferStatusChanged = function (value) {
            fnLogger.info("status changed: " + value + " (" + Enums.CallStatus[value] + ")");
            if (transferSuccessStatusList.indexOf(value) !== -1 || value === Enums.CallStatus.Failed) {
                if (callTransferStatus) {
                    callTransferStatus.dispose();
                    callTransferStatus = null;
                }
                if (transferSuccessStatusList.indexOf(value) !== -1) {
                    _this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS, 1);
                }
                else {
                    var failureReason = _this.getIntProperty(slimcoreTransferFailureReasonProperty);
                    var terminatedReason = SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(EnumConverter.convertFailureReasonToParticipantReason(failureReason));
                    var telemetryData = {
                        reason: failureReason,
                        code: _this.transferDiagnosticsInfo && _this.transferDiagnosticsInfo.callControllerCode,
                        subcode: _this.transferDiagnosticsInfo && _this.transferDiagnosticsInfo.callControllerSubCode
                    };
                    _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS, telemetryData, causeId);
                    fnLogger.logFailure("failureReason=" + failureReason + " => terminatedReason=" + terminatedReason + ", diagnostic info: " + logUtils_1.getPrintableObject(_this.transferDiagnosticsInfo));
                    _this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS, terminatedReason);
                }
            }
        };
        var callTransferStatus = this._slimcoreInstance.handle('object-property-changed', { objectId: this.slimcoreCallId, propKey: slimcoreTransferStatusProperty }, function (data) { return onTransferStatusChanged(data.value); });
        return transferPromise;
    };
    SlimCoreElectronCall.prototype.mute = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.isMuteDisabled()) {
                    return [2, Promise.reject(new Error('Cannot mute when already locally muted'))];
                }
                return [2, this._muteUnmute(true, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.unmute = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.isUnMuteDisabled()) {
                    return [2, Promise.reject(new Error('Cannot unmute when already locally and server unmuted'))];
                }
                return [2, this._muteUnmute(false, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.muteSpeaker = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.isSpeakerMuted) {
                    return [2, Promise.reject(new Error('Cannot mute speaker when already muted'))];
                }
                return [2, this._muteUnmuteSpeaker(true, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.unmuteSpeaker = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isSpeakerMuted) {
                    return [2, Promise.reject(new Error('Cannot unmute speaker when already unmuted'))];
                }
                return [2, this._muteUnmuteSpeaker(false, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.muteParticipants = function (muteScope, callParticipants, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this._muteParticipants(muteScope, callParticipants, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.hold = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this._holdUnhold(true, causeId, negotiationTag)];
            });
        });
    };
    SlimCoreElectronCall.prototype.unhold = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this._holdUnhold(false, causeId, negotiationTag)];
            });
        });
    };
    SlimCoreElectronCall.prototype.updateEndpointMetadata = function (endpointMetadata, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.state !== 3) {
                    this._logger.warn("Trying to updateEndpointMetadata in a call which is not connected, callId = " + this.callId);
                    return [2, Promise.reject(new Error('cannot updateEndpointMetadata in a call which is not connected'))];
                }
                this._endpointMetadata = endpointMetadata;
                return [2, this._updateEndpointMetadata(this._endpointMetadata, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.sendDtmfTone = function (dtmfTone, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._logger.info("DTMF tone <omitted>");
                return [2, this._sendDtmfTone(dtmfTone, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.setAudioUsageMode = function (audioUsageMode, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this._setAudioUsageMode(audioUsageMode, causeId)];
            });
        });
    };
    SlimCoreElectronCall.prototype.getTechnicalInformationJson = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, Promise.resolve().then(function () {
                        try {
                            return _this._slimcoreCallHandler.callGetTechnicalInformationJson(_this.slimcoreCallId);
                        }
                        catch (error) {
                            _this._logger.error("Error in callGetTechnicalInformationJson callId: " + _this.callId + ", error: " + error);
                            throw error;
                        }
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.startAudio = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, startAudioPromise;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.START_AUDIO, causeId);
                if (this.state !== 3) {
                    fnLogger.logFailure('cannot startAudio when call is not connected');
                    return [2, Promise.reject(60)];
                }
                startAudioPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_AUDIO, undefined, causeId);
                this._slimcoreCallHandler.callStartAudio(this.slimcoreCallId, negotiationTag);
                return [2, startAudioPromise];
            });
        });
    };
    SlimCoreElectronCall.prototype.stopAudio = function (negotiationTag, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, stopAudioPromise;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.STOP_AUDIO, causeId);
                if (this.state !== 3) {
                    fnLogger.logFailure('cannot stopAudio when call is not connected');
                    return [2, Promise.reject(60)];
                }
                stopAudioPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.STOP_AUDIO, undefined, causeId);
                this._slimcoreCallHandler.callStopAudio(this.slimcoreCallId, negotiationTag);
                return [2, stopAudioPromise];
            });
        });
    };
    SlimCoreElectronCall.prototype.assimilate = function (callToAssimilate, threadId, messageId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.ASSIMILATE, causeId);
                fnLogger.info("assimilate: " + callToAssimilate.callId + " threadId: " + threadId + ", messageId: " + messageId + ", causeId: " + causeId);
                this._slimcoreCallHandler.callAssimilate(this.slimcoreCallId, callToAssimilate.slimcoreCallId, threadId, messageId);
                return [2, Promise.resolve({ code: 0 })];
            });
        });
    };
    SlimCoreElectronCall.prototype._onMediaNegotiationStatusChanged = function (eventData) {
        var fnLogger = this._logger.createFnLogger('onMediaNegotiationStatusChanged', eventData.causeId);
        fnLogger.info("_onMediaNegotiationStatusChanged modalityType: " + eventData.modalityType + "\n            mediaNegotiationStatusCode: " + eventData.mediaNegotiationStatusCode);
        var operationName;
        switch (eventData.modalityType) {
            case Enums.ModalityType.Audio:
                operationName = (this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.START_AUDIO)) ?
                    callConstants_1.CALL_OPERATIONS.START_AUDIO : callConstants_1.CALL_OPERATIONS.STOP_AUDIO;
                break;
            case Enums.ModalityType.Video:
                operationName = callConstants_1.CALL_OPERATIONS.SET_MAX_VIDEO_CHANNELS;
                break;
            default:
                return;
        }
        if (this._callOperationHandler.hasPendingOperation(operationName)) {
            if (eventData.mediaNegotiationStatusCode === Enums.MediaNegotiationStatusCode.Succeeded) {
                this._callOperationHandler.maybeResolveOperation(operationName, eventData.mediaNegotiationStatusCode, undefined, eventData.causeId);
            }
            else {
                this._callOperationHandler.maybeRejectOperation(operationName, eventData.mediaNegotiationStatusCode, undefined, eventData.causeId);
            }
        }
    };
    SlimCoreElectronCall.prototype.stop = function (forEveryone, causeId) {
        if (forEveryone === void 0) { forEveryone = false; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.STOP_CALL, causeId);
        if (this.state === 6) {
            fnLogger.logFailure("Trying to stop a call which is already Disconnecting, callId = " + this.callId);
            return Promise.reject(new Error('cannot stop call in Disconnecting state'));
        }
        if (this.state === 7) {
            fnLogger.logFailure("Trying to stop a call which is already Disconnected, callId = " + this.callId);
            return Promise.reject(new Error('cannot stop call in Disconnected state'));
        }
        return this.stopInternal(causeId, undefined, forEveryone);
    };
    SlimCoreElectronCall.prototype.reject = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this.state !== 1 ?
            Promise.reject(60) :
            this.stopInternal(causeId);
    };
    SlimCoreElectronCall.prototype.stopInternal = function (causeId, terminatedReason, forEveryone) {
        var _this = this;
        if (terminatedReason === void 0) { terminatedReason = 0; }
        if (forEveryone === void 0) { forEveryone = false; }
        var fnLogger = this._logger.createFnLogger('stopInternal', causeId);
        if (this.state === 6) {
            fnLogger.info("Trying to stop a call which is already Disconnecting");
            return this.disconnectingPromise;
        }
        if (this.state === 7) {
            fnLogger.info("Trying to stop a call which is already Disconnected");
            return this.disconnectingPromise;
        }
        this._setCallState(6, causeId, terminatedReason);
        this.disconnectingPromise = Promise.resolve()
            .then(function () {
            fnLogger.info("Leaving from call");
            return _this._leaveSlimCoreCall(forEveryone, causeId);
        })
            .catch(function (error) {
            _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.STOP_CALL, { error: logUtils_1.getPIISafeObject(error) }, causeId);
            fnLogger.logFailure(error);
            _this._setCallState(7, causeId, error);
            throw error;
        });
        return this.disconnectingPromise;
    };
    SlimCoreElectronCall.prototype._leaveSlimCoreCall = function (forEveryone, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_LEAVE_CALL, causeId);
        fnLogger.info("forEveryone: " + forEveryone);
        if (this.slimcoreCallId === 0) {
            fnLogger.logFailure("slimcoreCallId == 0");
            return Promise.reject(32);
        }
        var waitForEndCallPromise = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_ENDED);
        return Promise.resolve()
            .then(function () {
            if (forEveryone) {
                _this._slimcoreCallHandler.endCallForAll(_this.slimcoreCallId);
            }
            else {
                _this._slimcoreCallHandler.leaveCall(_this.slimcoreCallId);
            }
        })
            .then(function () { return fnLogger.info('Waiting for SlimCore to end call'); })
            .then(function () { return waitForEndCallPromise; })
            .then(function () {
            fnLogger.info('SlimCore ended the call');
        }, function (err) {
            var reason = 25;
            fnLogger.logFailure("Error in leaveSlimCoreCall().. ignoring, error = " + logUtils_1.getPrintableObject(err) + ", reason = " + reason);
            return Promise.reject(reason);
        });
    };
    SlimCoreElectronCall.prototype.incomingCallInit = function (callObjectId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS_INTERNAL.INCOMING_INITIALIZE, causeId);
        try {
            this.callerMri = mriUtils_1.stripMriAliases(this._getStrProperty(this._slimcoreCallHandler, callObjectId, Enums.Property.CallerMriIdentity));
            if (!this.callerMri) {
                fnLogger.logFailure('Unable to get callerMRI from call object. Ignoring incoming call');
                return;
            }
            var props = this._getProperties(this._slimcoreCallHandler, callObjectId, {
                callQueueInfo: { propKey: Enums.Property.CallQueueInfo },
                transferorMri: { propKey: Enums.Property.CallTransferorMri },
                transferorDisplayName: { propKey: Enums.Property.CallTransferorDisplayName },
                transferorType: { propKey: Enums.Property.CallTransferorType },
                onBehalfOfMri: { propKey: Enums.Property.CallOnBehalfOfMri },
                incomingCallType: { propKey: Enums.Property.CallIncomingType },
                consultativeCallId: { propKey: Enums.Property.CallConsultativeTransferCallId },
                messageId: { propKey: Enums.Property.CallMessageId }
            }, {
                status: { propKey: Enums.Property.CallStatus },
                isIncomingOneOnOneVideoCall: { propKey: Enums.Property.CallIsIncomingOneOnOneVideoCall }
            });
            this.transferorMri = mriUtils_1.stripMriAliases(props.transferorMri);
            this.transferorDisplayName = props.transferorDisplayName;
            this.transferorType = props.transferorType;
            this.onBehalfOfMri = mriUtils_1.stripMriAliases(props.onBehalfOfMri);
            this.callQueueInfo = props.callQueueInfo && JSON.parse(props.callQueueInfo).callQueueInfo;
            this.incomingCallType = props.incomingCallType;
            this.consultativeCallId = props.consultativeCallId;
            this.isIncomingOneOnOneVideoCall = !!props.isIncomingOneOnOneVideoCall;
            this.messageId = props.messageId;
            this.attachSlimCoreCallObject(callObjectId, causeId);
            if (props.status === Enums.CallStatus.RingingIn) {
                this._setCallState(1, causeId);
                this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.INCOMING);
                this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLEE);
            }
        }
        catch (error) {
            fnLogger.logFailure("sync failure, cleaning up slimcore ready operation: error=" + logUtils_1.getPrintableObject(error));
            this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS_INTERNAL.INCOMING_INITIALIZE, { error: logUtils_1.getPIISafeObject(error) }, causeId);
            this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY);
            throw error;
        }
    };
    SlimCoreElectronCall.prototype.acknowledge = function (incomingCallPayload, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.ACKNOWLEDGE, causeId);
        if (this.state !== 0 && this.state !== 8) {
            this._callTelemetry.maybeRecordOperationSuccess(callConstants_1.CALL_OPERATIONS.ACKNOWLEDGE, { code: 4 });
            return Promise.reject(new Error('Trying to acknowledge a call that has already been acted on'));
        }
        this._setCallerMri(mriUtils_1.stripMriAliases(incomingCallPayload.callerId), causeId);
        this._callTelemetry.setDirection(callTelemetry_1.DIRECTION.INCOMING);
        this._callTelemetry.setSelfParticipantRole(callTelemetry_1.SELF_PARTICIPANT_ROLE.CALLEE);
        var correlationIds = {
            callId: incomingCallPayload.convoCallId,
            callerId: incomingCallPayload.callerId,
            launchTime: incomingCallPayload.launchTime.toString(),
            pushReceivedTime: incomingCallPayload.pushReceivedTime.toString(),
            registrationId: incomingCallPayload.registrationId,
            participantId: incomingCallPayload.participantId
        };
        var token = this._slimcoreInstance.handlePushNotification({
            eventType: incomingCallPayload.body.evt,
            servicePayload: incomingCallPayload.body.gp,
            correlationIdsJson: JSON.stringify(correlationIds),
            callKey: incomingCallPayload.callKey,
            connectionType: SlimCoreElectronCall.convertConnectionType(incomingCallPayload.connectionType),
            accountIdentity: this.currentUserSkypeIdentity.id,
            mediaConfigurationJson: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(incomingCallPayload.mediaConfiguration))
        });
        var callbacks = [];
        var waitForHandlePush = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_HANDLE_PUSH, undefined, causeId);
        callbacks.push(this._slimcoreInstance.handle('push-handling-complete', { token: token }, function (event) {
            if (event.token !== token) {
                fnLogger.logFailure("HandlePushNotification: Received unexpected token " + event.token + " (expected " + token + ")");
                return;
            }
            fnLogger.info("HandlePushNotification: Received event for token: " + event.token + " result: " + event.result);
            if (event.result === Enums.PushHandlingResult.CallSetupSucceeded) {
                fnLogger.logSuccess('HandlePushNotification: Succeeded');
                _this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_HANDLE_PUSH, { code: 1, success: true }, undefined, causeId).catch(function (e) {
                    fnLogger.logFailure("HandlePushNotification: Failed " + e);
                });
            }
            else if (event.result === Enums.PushHandlingResult.CallSetupProgress) {
                fnLogger.info('HandlePushNotification: In progress, keep waiting...');
            }
            else {
                var message = "HandlePushNotification: Failed " + event.result;
                fnLogger.logFailure(message);
                _this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_HANDLE_PUSH, SlimCoreElectronCall.convertPushHandlingResult(event.result), undefined, causeId).catch(function (e) {
                    fnLogger.logFailure("HandlePushNotification: Failed " + e);
                });
            }
        }));
        var waitForRinging = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_RINGING);
        waitForRinging.catch(fn_1.noop);
        callbacks.push(this._slimcoreInstance.handle('object-property-changed', { objectType: Enums.ObjectType.Call }, function (event) {
            var callId = _this._getStrProperty(_this._slimcoreCallHandler, event.objectId, Enums.Property.CallName);
            var status = _this._getIntProperty(_this._slimcoreCallHandler, event.objectId, Enums.Property.CallStatus);
            if (callId !== _this.callId) {
                fnLogger.info("Ignoring SlimCore event for incorrect call " + event.objectId + "/" + callId);
                return;
            }
            if (status === Enums.CallStatus.RingingIn) {
                _this.attachSlimCoreCallObject(event.objectId, causeId, false, 'acknowledge');
                _this._fillIncomingCallProperties(causeId);
                if (_this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_RINGING)) {
                    _this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_RINGING, undefined, undefined, causeId)
                        .then(function () {
                        fnLogger.logSuccess('Reached ringing/active state for call pending acknowledgement');
                    }, function (e) {
                        fnLogger.logFailure("Reached ringing/active state for call pending acknowledgement " + e);
                    });
                }
                _this.raiseChanged();
            }
        }));
        var unsubscribe = function () { return _.each(callbacks, function (c) { return c.dispose(); }); };
        var clearPendingOperations = function (result) {
            _this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_RINGING, result, undefined, causeId);
            _this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_WAIT_FOR_HANDLE_PUSH, result, undefined, causeId);
        };
        return waitForHandlePush.then(function (pushResult) {
            if (!pushResult.success) {
                clearPendingOperations(pushResult);
                return pushResult;
            }
            return waitForRinging.then(function () {
                _this._setCallState(1, causeId);
                return pushResult;
            });
        }).then(function (result) {
            fnLogger.logSuccess('Acknowledge done');
            unsubscribe();
            return result;
        }).catch(function (error) {
            fnLogger.logFailure("sync failure, cleaning up slimcore ready operation: error=" + logUtils_1.getPrintableObject(error));
            _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS_INTERNAL.INCOMING_INITIALIZE, { error: logUtils_1.getPIISafeObject(error) }, causeId);
            _this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY);
            unsubscribe();
            clearPendingOperations(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype.accept = function (callAcceptOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, acceptCallPromise, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.ACCEPT, causeId);
                        fnLogger.info("accept, answerMediaType: " + callAcceptOptions.answerMediaType + ",\n                            withVideo: " + callAcceptOptions.withVideo + ",\n                            muted: " + callAcceptOptions.muted);
                        if (callAcceptOptions.muted) {
                            fnLogger.logFailure('Accepting call muted is not implemented');
                        }
                        this._setCallState(2, causeId);
                        this.connectCallPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.ACCEPT);
                        acceptCallPromise = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, undefined, causeId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        this._acceptCall(callAcceptOptions, causeId);
                        this._updateCallType(this.getIntProperty(Enums.Property.CallIsConference), causeId);
                        if (!(callAcceptOptions.answerMediaType === 1)) return [3, 3];
                        fnLogger.info('Call has been answered - turning on video');
                        return [4, this.startVideoSafe(causeId)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4, acceptCallPromise];
                    case 4:
                        _a.sent();
                        this._setCallState(3, causeId);
                        return [3, 6];
                    case 5:
                        error_2 = _a.sent();
                        this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.ACCEPT, { error: logUtils_1.getPIISafeObject(error_2) }, causeId);
                        this.stopInternal(causeId);
                        this._logger.error("Error in accept(), callId = " + this.callId + ", error = " + error_2);
                        throw error_2;
                    case 6: return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.mergeWithPickupCode = function (payload, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, mergePromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, causeId);
                fnLogger.info("mergeWithPickupCode: pickup code: " + payload.pickupCode + ", threadId: " + payload.threadId + " messageId: " + payload.messageId);
                if (!payload.pickupCode) {
                    fnLogger.info("mergeWithPickupCode: pickup code cannot be empty");
                    return [2, Promise.reject({
                            code: callConstants_1.TRANSACTION_END_CODE.CLIENT_ERROR,
                            subcode: callConstants_1.TRANSACTION_END_SUBCODE.LOCAL_REJECT,
                            phrase: callConstants_1.TRANSACTION_END_PHRASE.TRANSACTION_DISALLOWED
                        })];
                }
                mergePromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, payload.pickupCode, causeId);
                return [2, Promise.resolve()
                        .then(function () { return _this._mergeWithPickupCode(payload.pickupCode, payload.threadId, payload.messageId, causeId); })
                        .catch(function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, { error: logUtils_1.getPIISafeObject(error) }, causeId);
                        fnLogger.logFailure(error);
                        var result = error;
                        if (isTransactionEnd(error)) {
                            result = error;
                        }
                        else {
                            result = {
                                code: callConstants_1.TRANSACTION_END_CODE.CLIENT_ERROR,
                                subcode: callConstants_1.TRANSACTION_END_SUBCODE.TRANSACTION_NOT_ALLOWED,
                                phrase: logUtils_1.getPrintableObject(error)
                            };
                        }
                        return Promise.reject(result);
                    })
                        .then(function () { return mergePromise; })];
            });
        });
    };
    SlimCoreElectronCall.prototype.merge = function (callToMerge, callMergeOptions, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participantMri, participant, addParticipantPromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.MERGE_CALL, causeId);
                fnLogger.info("merge: " + callToMerge.callId + " threadId: " + callMergeOptions.threadId + ", messageId: " + callMergeOptions.messageId);
                if (callToMerge.participants && callToMerge.participants.length === 1) {
                    participantMri = callToMerge.participants[0].id;
                }
                else {
                    fnLogger.error("error invalid number of participants on call to be merged " + callToMerge.participants.length);
                    return [2, Promise.reject({
                            code: callConstants_1.TRANSACTION_END_CODE.CLIENT_ERROR,
                            subcode: callConstants_1.TRANSACTION_END_SUBCODE.LOCAL_REJECT,
                            phrase: callConstants_1.TRANSACTION_END_PHRASE.TRANSACTION_DISALLOWED
                        })];
                }
                participant = this._getOrCreateParticipant(participantMri, causeId);
                this._addParticipantToCall(participant, causeId);
                addParticipantPromise = this._participantOperationHandler.createPendingOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant.id, causeId);
                return [2, Promise.resolve()
                        .then(function () { return _this._slimcoreCallHandler.callMerge(_this.slimcoreCallId, callToMerge.slimcoreCallId, callMergeOptions.threadId, callMergeOptions.messageId, causeId); })
                        .catch(function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, { error: logUtils_1.getPIISafeObject(error) }, causeId, participantMri);
                        fnLogger.logFailure(error);
                        _this._handleParticipantRemoved(participantMri, causeId, error);
                        var result = error;
                        if (isTransactionEnd(error)) {
                            result = error;
                        }
                        else {
                            result = {
                                code: callConstants_1.TRANSACTION_END_CODE.CLIENT_ERROR,
                                subcode: callConstants_1.TRANSACTION_END_SUBCODE.TRANSACTION_NOT_ALLOWED,
                                phrase: logUtils_1.getPrintableObject(error)
                            };
                        }
                        return Promise.reject(result);
                    })
                        .then(function () { return addParticipantPromise; })
                        .then(function () {
                        return Promise.resolve({
                            code: callConstants_1.TRANSACTION_END_CODE.SUCCESS,
                            subCode: 0,
                            phrase: callConstants_1.TRANSACTION_END_PHRASE.TRANSACTION_COMPLETE
                        });
                    })
                        .catch(function (error) {
                        fnLogger.logFailure(error);
                        _this._handleParticipantRemoved(participantMri, causeId, error);
                        var result = error;
                        if (isTransactionEnd(error)) {
                            result = error;
                        }
                        return Promise.reject(result);
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype._acceptCall = function (callAcceptOptions, causeId) {
        try {
            if (callAcceptOptions.withVideo) {
                callAcceptOptions.answerMediaType = 1;
            }
            this._slimcoreCallHandler.acceptCall(this.slimcoreCallId, SlimCoreElectronCall.toAnswerMediaType(callAcceptOptions.answerMediaType));
        }
        catch (error) {
            this._logger.info("acceptCall is missing from the slimcore electron module: " + error);
            if (callAcceptOptions.answerMediaType === 1) {
                callAcceptOptions.withVideo = true;
            }
            this._slimcoreCallHandler.answerCall(this.slimcoreCallId, callAcceptOptions.withVideo);
        }
    };
    SlimCoreElectronCall.prototype.reconnect = function () {
        return Promise.reject(new Error('Retargeting is not supported'));
    };
    SlimCoreElectronCall.prototype.provideCallQualityFeedback = function (questionaryId, trackingReason, rating, problemTokens) {
        var _this = this;
        this._logger.info('provideCallQualityFeedback');
        return Promise.resolve().then(function () {
            try {
                _this._slimcoreCallHandler.provideCallQualityFeedback(_this.callId, _this.participantId, questionaryId, trackingReason, rating, problemTokens);
            }
            catch (error) {
                _this._logger.error("Error in provideCallQualityFeedback callId: " + _this.callId + ", error: " + error);
                throw error;
            }
        });
    };
    SlimCoreElectronCall.prototype._mergeWithPickupCode = function (pickupCode, threadId, messageId, causeId) {
        this._logger.info("_mergeWithPickupCode: pickupCode = " + pickupCode + " threadId = " + threadId + " messageId = " + messageId + " causeId = " + causeId);
        this._slimcoreCallHandler.mergeCall(this.slimcoreCallId, pickupCode, SlimCoreCommon.mapToEmptyStrIfFalsy(threadId), SlimCoreCommon.mapToEmptyStrIfFalsy(messageId), SlimCoreCommon.mapToEmptyStrIfFalsy(causeId));
    };
    SlimCoreElectronCall.prototype._onCallOriginChanged = function (callOrigin) {
        if (callOrigin === Enums.OriginType.Transfer) {
            this._setCallOrigin(1);
        }
        else if (callOrigin === Enums.OriginType.Park) {
            this._setCallOrigin(2);
        }
        else if (callOrigin === Enums.OriginType.Unspecified) {
            this._setCallOrigin(0);
        }
        else if (callOrigin === Enums.OriginType.TransferToVoicemail) {
            this._setCallOrigin(3);
        }
        else {
            this._logger.info('Unknown origin');
        }
    };
    SlimCoreElectronCall.prototype._onCallMutedUnmuted = function (callIsMuted) {
        var inLobby = this.state === 10;
        this._logger.info("onCallMutedUnmuted current: " + this.isMuted + " new: " + callIsMuted);
        this._logger.info("onCallMutedUnmuted isServerMuted: " + this.isServerMuted + " inLobby: " + inLobby);
        if ((!this.isServerMuted || inLobby) && !callIsMuted) {
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.MUTE);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNMUTE);
        }
        if (callIsMuted) {
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.MUTE);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNMUTE);
        }
        if (this.isMuted !== callIsMuted) {
            this._logger.info("isMuted set to " + callIsMuted + " in _onCallMutedUnmuted");
            this.isMuted = callIsMuted;
            this._logger.info("onCallMutedUnmuted isMuted: " + this.isMuted);
            this._updateCapabilities(causeId_1.generateCauseId());
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallMutedUnmutedSpeaker = function (speakerMuted, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('onCallMutedUnmutedSpeaker', causeId);
        fnLogger.info("current: " + this.isSpeakerMuted + " new: " + speakerMuted);
        if (!speakerMuted) {
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNMUTE_SPEAKER, undefined, undefined, causeId);
        }
        else {
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.MUTE_SPEAKER, undefined, undefined, causeId);
        }
        this._setMutedSpeaker(speakerMuted, causeId);
    };
    SlimCoreElectronCall.prototype._onCallIsServerMuted = function (isServerMuted, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        this._logger.info("_onCallIsServerMuted " + isServerMuted);
        if (isServerMuted !== this.isServerMuted) {
            this.isServerMuted = isServerMuted;
            this._callTelemetry.recordEvent(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.SELF_PARTICIPANT_UPDATED, { isServerMuted: this.isServerMuted }, causeId);
            this.event('serverMutedChanged').raise(isServerMuted);
            this._updateCapabilities(causeId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallCapabilitiesChanged = function (value) {
        if (value !== this._capabilityFlags) {
            this._logger.info("_onCallCapabilitiesChanged: new value is " + value);
            this._capabilityFlags = value;
            this._updateCapabilities(causeId_1.generateCauseId(), true);
        }
    };
    SlimCoreElectronCall.prototype._updateCapabilities = function (causeId, raiseIfChanged) {
        if (raiseIfChanged === void 0) { raiseIfChanged = false; }
        var canUnmuteSelf = false;
        var canMuteOthers = false;
        if (!stateUtils.callStateIsAnyOf(this.state, [11, 12])) {
            canUnmuteSelf = !this.isUnMuteDisabled() &&
                (!this.isServerMuted || !!(this._capabilityFlags & Enums.SelfCapability.UnmuteSelf));
            canMuteOthers = !!(this._capabilityFlags & Enums.SelfCapability.MuteOthers);
        }
        if (this._capabilities.canUnmuteSelf !== canUnmuteSelf ||
            this._capabilities.canMuteOthers !== canMuteOthers) {
            this._capabilities.canUnmuteSelf = canUnmuteSelf;
            this._capabilities.canMuteOthers = canMuteOthers;
            this._logger.info("[" + causeId + "]_updateCapabilities Computed capabilities: " + JSON.stringify(this._capabilities));
            if (raiseIfChanged) {
                this.raiseChanged();
            }
        }
    };
    SlimCoreElectronCall.prototype._getCallParticipantMriMap = function () {
        var result = {};
        var slimcoreParticipantsInCall = this._slimcoreCallHandler.callGetParticipants(this.slimcoreCallId) || [];
        var mriPropQuery = {};
        for (var _i = 0, slimcoreParticipantsInCall_1 = slimcoreParticipantsInCall; _i < slimcoreParticipantsInCall_1.length; _i++) {
            var objectId = slimcoreParticipantsInCall_1[_i];
            mriPropQuery[objectId] = { objectId: objectId, propKey: Enums.Property.ParticipantMriIdentity };
        }
        var participantMris = this._getProperties(this._slimcoreCallHandler, 0, mriPropQuery, {});
        for (var _a = 0, slimcoreParticipantsInCall_2 = slimcoreParticipantsInCall; _a < slimcoreParticipantsInCall_2.length; _a++) {
            var participantId = slimcoreParticipantsInCall_2[_a];
            var mri = participantMris[participantId];
            if (mri) {
                result[mri] = participantId;
            }
        }
        return result;
    };
    SlimCoreElectronCall.prototype._getParticipantsData = function (participantsToFetch) {
        var strPropQuery = {};
        var intPropQuery = {};
        var participantMriMap = {};
        var propNameSeparator = '_';
        var getPropName = function (objectId, propName) { return "" + objectId + propNameSeparator + propName; };
        for (var _i = 0, participantsToFetch_1 = participantsToFetch; _i < participantsToFetch_1.length; _i++) {
            var info = participantsToFetch_1[_i];
            for (var _a = 0, _b = Object.keys(SlimCoreElectronCallParticipant_1.participantStrProps); _a < _b.length; _a++) {
                var propName = _b[_a];
                strPropQuery[getPropName(info.objectId, propName)] = {
                    objectId: info.objectId,
                    propKey: SlimCoreElectronCallParticipant_1.participantStrProps[propName].propKey,
                    fallback: SlimCoreElectronCallParticipant_1.participantStrProps[propName].fallback
                };
            }
            for (var _c = 0, _d = Object.keys(SlimCoreElectronCallParticipant_1.participantIntProps); _c < _d.length; _c++) {
                var propName = _d[_c];
                intPropQuery[getPropName(info.objectId, propName)] = {
                    objectId: info.objectId,
                    propKey: SlimCoreElectronCallParticipant_1.participantIntProps[propName].propKey,
                    fallback: SlimCoreElectronCallParticipant_1.participantIntProps[propName].fallback
                };
            }
            participantMriMap[info.objectId] = info.mri;
        }
        var participantsProps = {};
        if (participantsToFetch.length) {
            var fetchedProps = this._getProperties(this._slimcoreCallHandler, 0, strPropQuery, intPropQuery);
            for (var _e = 0, _f = Object.keys(fetchedProps); _e < _f.length; _e++) {
                var fetchedProp = _f[_e];
                var _g = fetchedProp.split(propNameSeparator), id = _g[0], propKey = _g[1];
                if (!participantsProps[id]) {
                    participantsProps[id] = {
                        objectId: Number(id),
                        mri: participantMriMap[id],
                        props: {}
                    };
                }
                participantsProps[id].props[propKey] = fetchedProps[fetchedProp];
            }
        }
        var result = [];
        for (var _h = 0, _j = Object.keys(participantsProps); _h < _j.length; _h++) {
            var id = _j[_h];
            result.push(participantsProps[id]);
        }
        return result;
    };
    SlimCoreElectronCall.prototype._callGetParticipantsData = function (currentParticipants, causeId) {
        var newRoster = this._getCallParticipantMriMap();
        var participantsToAdd = [];
        var participantsToRemove = [];
        this._logger.info("[" + causeId + "]onParticipantJoinedOrRemoved # of participants in roster=" + Object.keys(newRoster).length);
        var existsInRoster = function (participant) { return newRoster.hasOwnProperty(participant.mri); };
        var hasSlimcoreObjectId = function (participant) { return participant.objectId; };
        var isSameAsInRoster = function (participant) { return participant.objectId === newRoster[participant.mri]; };
        currentParticipants.forEach(function (currentParticipant) {
            if (existsInRoster(currentParticipant)) {
                if (!hasSlimcoreObjectId(currentParticipant)) {
                    participantsToAdd.push(currentParticipant);
                    delete newRoster[currentParticipant.objectId];
                }
                else if (!isSameAsInRoster(currentParticipant)) {
                    participantsToRemove.push(currentParticipant);
                }
            }
            else {
                participantsToRemove.push(currentParticipant);
            }
        });
        Object.keys(newRoster).forEach(function (mri) { return participantsToAdd.push({ mri: mri, objectId: newRoster[mri] }); });
        var newParticipantsData = [];
        if (this._settings.enableParticipantsGetPropsAggregation) {
            newParticipantsData = this._getParticipantsData(participantsToAdd);
        }
        else {
            newParticipantsData = participantsToAdd;
        }
        return { newParticipantsData: newParticipantsData, participantsToRemove: participantsToRemove };
    };
    SlimCoreElectronCall.prototype._onParticipantJoinedOrRemoved = function (causeId) {
        var _this = this;
        var _a = this._callGetParticipantsData(this.participants.map(function (p) {
            return ({ objectId: p.slimcoreObjectId, mri: p.id });
        }), causeId), newParticipantsData = _a.newParticipantsData, participantsToRemove = _a.participantsToRemove;
        participantsToRemove.forEach(function (participant) {
            return _this._handleParticipantRemoved(participant.mri, causeId, _this.participantMap[participant.mri].stateReason);
        });
        Object.keys(newParticipantsData).forEach(function (objectId) { return _this._handleParticipantJoined(newParticipantsData[objectId], causeId); });
    };
    SlimCoreElectronCall.prototype._updateDominantSpeakerList = function () {
        var _this = this;
        if (this._isOptimizedSpeakerEventingEnabled) {
            return { fullOrderMatches: true, topSpeakerMatches: false };
        }
        var sortedDominantSpeakerIds = _.map(_.sortBy(_.map(_.filter(this.participants, function (p) { return p.state === 3; }), function (participant) {
            return {
                mri: participant.id,
                rank: participant.dominantSpeakerRank ? participant.dominantSpeakerRank : _this.participants.length + 1
            };
        }), 'rank'), function (elem) {
            return elem.mri;
        });
        var fullOrderMatches = _.isEqual(this.dominantSpeakerInfo.speakerList, sortedDominantSpeakerIds);
        var topSpeakerMatches = fullOrderMatches;
        if (!topSpeakerMatches) {
            topSpeakerMatches = !_.isEmpty(this.dominantSpeakerInfo.speakerList)
                && !_.isEmpty(sortedDominantSpeakerIds)
                && (_.head(this.dominantSpeakerInfo.speakerList) === _.head(sortedDominantSpeakerIds));
        }
        this.dominantSpeakerInfo = {
            speakerList: sortedDominantSpeakerIds,
            timestamp: new Date()
        };
        if (!fullOrderMatches) {
            this._logger.info("_updateDominantSpeakerList: " + this.dominantSpeakerInfo.speakerList.length);
        }
        return { fullOrderMatches: fullOrderMatches, topSpeakerMatches: topSpeakerMatches };
    };
    SlimCoreElectronCall.prototype._handleParticipantRemoved = function (participantId, causeId, reason) {
        if (reason === void 0) { reason = 0; }
        var fnLogger = this._logger.createFnLogger('handleParticipantRemoved', causeId);
        fnLogger.info("reason=" + reason);
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.handleParticipantRemoved(participantId);
        }
        var participant = this._removeParticipantEntry(participantId);
        if (!participant) {
            fnLogger.logFailure("unable to remove participant");
            return;
        }
        participant.setState(4, causeId, reason);
        this._participantOperationHandler.maybeRejectOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, reason, participantId);
        this._participantOperationHandler.maybeResolveOperation(callConstants_1.PARTICIPANT_OPERATIONS.REMOVE_PARTICIPANT, reason, participantId);
        participant.rejectAdmitParticipantDeferred(reason);
        participant.dispose();
        this._updateDominantSpeakerList();
        this.event('participantRemoved').raise(participant);
        this.raiseChangedDeferred();
    };
    SlimCoreElectronCall.prototype._handleParticipantJoined = function (data, causeId) {
        var _this = this;
        this._logger.debug("[" + causeId + "]handleParticipantJoined: " + piiUtils.scrubMriOrOmit(data.mri));
        var participant = this._getOrCreateParticipant(data.mri, causeId, data.objectId, data);
        if (SlimCoreElectronCallParticipant_1.default.isParticipantActive(participant.state) &&
            this._participantOperationHandler.hasPendingOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, data.mri)) {
            this._participantOperationHandler.resolveOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant, data.mri);
            this._callTelemetry.recordOperationSuccess(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, null, data.mri);
            var getEndpointsDetails = function (participant) {
                return (participant && participant.endpoints && participant.endpoints.endpointDetails) || [];
            };
            this._callTelemetry.recordOperationSuccess(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.PARTICIPANT_JOINED, callTelemetry_1.getEndpointInformationForTelemetry(getEndpointsDetails(participant)), data.mri, causeId);
        }
        if (!this._handleParticipantJoinedDefer) {
            this._handleParticipantJoinedDefer = _.defer(function () {
                delete _this._handleParticipantJoinedDefer;
                if (!_this._updateDominantSpeakerList().fullOrderMatches) {
                    _this.raiseChangedDeferred();
                }
            });
        }
    };
    SlimCoreElectronCall.prototype._admitParticipantToSlimCoreElectronCall = function (participantId) {
        var participantsToAdmit = [participantId];
        this._slimcoreCallHandler.admitParticipants(this.slimcoreCallId, participantsToAdmit);
        return Promise.resolve();
    };
    SlimCoreElectronCall.prototype.admitParticipant = function (participantId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participant, waitForAdmitParticipant, promise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.PARTICIPANT_OPERATIONS.ADMIT_PARTICIPANT, causeId);
                fnLogger.info("participantId = " + piiUtils.scrubMriOrOmit(participantId));
                if (this.slimcoreCallId === 0) {
                    return [2, Promise.reject(11)];
                }
                participant = this._getOrCreateParticipant(participantId, causeId);
                if (participant.state !== 7) {
                    return [2, Promise.reject(43)];
                }
                waitForAdmitParticipant = async.defer();
                promise = this._admitParticipantToSlimCoreElectronCall(participantId)
                    .then(function () { return participant.addAdmitParticipantDeferred(waitForAdmitParticipant); })
                    .then(function () { return waitForAdmitParticipant.promise; })
                    .then(function () { return fnLogger.logSuccess("admitted"); })
                    .catch(function (error) {
                    fnLogger.logFailure(error);
                    _this._handleParticipantOperationFailure(callConstants_1.PARTICIPANT_OPERATIONS.ADMIT_PARTICIPANT, error, causeId, participantId);
                    return Promise.reject(error);
                });
                this.raiseChanged();
                return [2, promise];
            });
        });
    };
    SlimCoreElectronCall.prototype._addParticipantToSlimCoreElectronCall = function (participantId, threadId, messageId, participantInvitationData) {
        this._logger.info("addParticipantToSlimCoreElectronCall: participantId = " + piiUtils.scrubMriOrOmit(participantId) + " threadId = " + threadId + " messageId = " + messageId + " participantInvitationData = " + piiUtils.scrubMriOrOmit(participantInvitationData));
        var objectId = this._slimcoreCallHandler.addParticipant(this.slimcoreCallId, participantId, SlimCoreCommon.mapToEmptyStrIfFalsy(threadId), SlimCoreCommon.mapToEmptyStrIfFalsy(messageId), SlimCoreCommon.mapToEmptyStrIfFalsy(participantInvitationData));
        if (objectId === 0) {
            return Promise.reject(new Error('AddParticipant call to slimcore failed'));
        }
        else {
            return Promise.resolve(objectId);
        }
    };
    SlimCoreElectronCall.prototype.callMeBack = function (participantMri, assertedMri, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, waitForCallMeBackPromise, currentUserMri;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, causeId);
                fnLogger.info("callMeBack: participantMri = " + piiUtils.scrubMriOrOmit(participantMri) + " assertedMri = " + piiUtils.scrubMriOrOmit(assertedMri));
                if (this.slimcoreCallId === 0) {
                    fnLogger.logFailure('call is not initialized yet');
                    return [2, Promise.reject(new Error('call is not initialized yet'))];
                }
                waitForCallMeBackPromise = this._participantOperationHandler.waitForOperation(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, participantMri);
                currentUserMri = mriUtils_1.generateAliasedMri("" + mriUtils_1.MRI_SKYPE_PREFIX + this.currentUserSkypeIdentity.id, this.currentUserSkypeIdentity.sipUri);
                return [2, Promise.resolve()
                        .then(function () {
                        _this._slimcoreCallHandler.callMeBack(_this.slimcoreCallId, participantMri, assertedMri || currentUserMri, causeId);
                        return waitForCallMeBackPromise;
                    })
                        .catch(function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, { error: logUtils_1.getPIISafeObject(error) }, causeId, participantMri);
                        _this._participantOperationHandler.maybeRejectOperation(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, 1, participantMri, causeId);
                        fnLogger.logFailure("Error in callMeBack(), callId = " + _this.callId + ", error = " + error);
                        throw error;
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.nudgeParticipants = function (context, participants, payload, causeId) {
        if (payload === void 0) { payload = {}; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participantInvitationData, waitForNudgeParticipantPromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, causeId);
                fnLogger.info("nudgeParticipants: context = " + context);
                if (this.state !== 2 && this.state !== 3) {
                    return [2, Promise.reject(48)];
                }
                if (this.slimcoreCallId === 0) {
                    return [2, Promise.reject(new Error('call is not initialized yet'))];
                }
                if (payload.sipUri) {
                    return [2, Promise.reject(new Error('sipUri not supported yet'))];
                }
                if (payload.participantInvitationData) {
                    try {
                        participantInvitationData = JSON.stringify(payload.participantInvitationData);
                    }
                    catch (error) {
                        fnLogger.logFailure(error);
                        return [2, Promise.reject(error)];
                    }
                }
                fnLogger.info("nudgeParticipants: context = " + context + " threadId = " + payload.threadId + " messageId = " + payload.messageId + " participantInvitationData = " + piiUtils.scrubMriOrOmit(participantInvitationData));
                waitForNudgeParticipantPromise = this._participantOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, context);
                return [2, Promise.resolve()
                        .then(function () {
                        _this._slimcoreCallHandler.nudgeParticipants(_this.slimcoreCallId, participants, SlimCoreCommon.mapToEmptyStrIfFalsy(context), SlimCoreCommon.mapToEmptyStrIfFalsy(payload.threadId), SlimCoreCommon.mapToEmptyStrIfFalsy(payload.messageId), SlimCoreCommon.mapToEmptyStrIfFalsy(participantInvitationData));
                        return waitForNudgeParticipantPromise;
                    })
                        .catch(function (error) {
                        _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, { error: logUtils_1.getPIISafeObject(error) }, causeId, context);
                        _this._participantOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, 38, context, causeId);
                        fnLogger.logFailure("Error in NudgeParticipants(), callId = " + _this.callId + ", context = " + context + ", error = " + error);
                        throw error;
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype._handleParticipantOperationFailure = function (eventName, error, causeId, participantId) {
        this._callTelemetry.updateOperationData(eventName, { error: logUtils_1.getPIISafeObject(error) }, causeId, participantId);
        var participantErrorReason = EnumConverter.convertFailureReasonToParticipantReason(error);
        var telemetryData = {
            callId: this.callId,
            reason: participantErrorReason
        };
        var participant = this._getOrCreateParticipant(participantId, causeId);
        if (participant.callEndDiagnosticsInfo) {
            telemetryData.code = participant.callEndDiagnosticsInfo.callControllerCode;
            telemetryData.subCode = participant.callEndDiagnosticsInfo.callControllerSubCode;
        }
        this._callTelemetry.recordOperationFailure(eventName, telemetryData, participantId, causeId);
        return participantErrorReason;
    };
    SlimCoreElectronCall.prototype.updateMeetingRoles = function (participants, meetingRole, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, updateMeetingRolePromise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, causeId);
                fnLogger.info("updateMeetingRole: participants = " + piiUtils.scrubMriOrOmitList(participants) + ", role = " + meetingRole);
                if ((this.state !== 2 && this.state !== 3) ||
                    !SlimCoreCommon.hasFeature(Enums.Feature.StructuredMeetings)) {
                    return [2, Promise.reject({
                            code: constants_1.CONSTANTS.CODE.CLIENT_ERROR_CODE,
                            subCode: constants_1.CONSTANTS.SUB_CODE.ACTION_NOT_ALLOWED,
                            phrase: 'ActionNotAllowed'
                        })];
                }
                updateMeetingRolePromise = this._participantOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, causeId);
                return [2, Promise.resolve()
                        .then(function () {
                        _this._slimcoreCallHandler.updateMeetingRoles(_this.slimcoreCallId, participants, meetingRole, causeId);
                        return updateMeetingRolePromise;
                    })
                        .catch(function (error) {
                        fnLogger.logFailure("Error in UpdateMeetingRoles(), callId = " + _this.callId + ", error = " + error);
                        _this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, { error: logUtils_1.getPIISafeObject(error) }, causeId);
                        _this._participantOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, 38, causeId, causeId);
                        throw error;
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.addParticipant = function (participantId, payload, causeId) {
        if (payload === void 0) { payload = {}; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participantInvitationData, participant, disconnectedStates, addParticipantPromise, promise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, causeId);
                if (this.isEmergency &&
                    this.slimcoreCallId === 0 &&
                    this.participants.length !== 0) {
                    return [2, Promise.reject(new Error('Only 1 participant (the emergency operator) may be added to unstarted emergency calls'))];
                }
                if (payload.sipUri) {
                    fnLogger.logFailure('sipUri not supported yet');
                }
                if (payload.participantInvitationData) {
                    try {
                        participantInvitationData = JSON.stringify(payload.participantInvitationData);
                    }
                    catch (error) {
                        fnLogger.logFailure(error);
                        throw error;
                    }
                }
                fnLogger.info("participantId = " + piiUtils.scrubMriOrOmit(participantId) + " threadId = " + payload.threadId + " messageId = " + payload.messageId + " participantInvitationData = " + piiUtils.scrubMriOrOmit(participantInvitationData));
                participant = this._getOrCreateParticipant(participantId, causeId);
                if (this.slimcoreCallId === 0) {
                    return [2, Promise.resolve(participant)];
                }
                disconnectedStates = [0, 4];
                if (disconnectedStates.indexOf(participant.state) === -1) {
                    return [2, Promise.resolve(participant)];
                }
                addParticipantPromise = this._participantOperationHandler.waitForOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant.id);
                promise = Promise.resolve()
                    .then(function () { return _this._addParticipantToCall(participant, causeId); })
                    .then(function () { return _this._addParticipantToSlimCoreElectronCall(participant.id, payload.threadId, payload.messageId, participantInvitationData); })
                    .then(function (participantObjectId) { return participant.attachSlimcoreObjectId(participantObjectId, causeId); })
                    .catch(function (error) {
                    _this._callTelemetry.updateOperationData(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, { error: logUtils_1.getPIISafeObject(error) }, causeId, participantId);
                    fnLogger.logFailure(error);
                    return Promise.reject(1);
                })
                    .then(function () { return addParticipantPromise; })
                    .then(function () { return participant; })
                    .catch(function (error) {
                    fnLogger.logFailure(error);
                    _this._handleParticipantOperationFailure(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, error, causeId, participantId);
                    _this._handleParticipantRemoved(participantId, causeId, error);
                    return Promise.reject(error);
                });
                this.raiseChanged();
                return [2, promise];
            });
        });
    };
    SlimCoreElectronCall.prototype.addParticipants = function (participantIds, payload, causeId) {
        if (payload === void 0) { payload = {}; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participantInvitationData, newParticipants, newParticipantIds, promiseList, disconnectedStates;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANTS, causeId);
                if (this.isEmergency &&
                    this.slimcoreCallId === 0 &&
                    (this.participants.length !== 0 || participantIds.length !== 1)) {
                    return [2, Promise.reject(new Error('Only 1 participant (the emergency operator) may be added to unstarted emergency calls'))];
                }
                if (payload.participantInvitationData) {
                    try {
                        participantInvitationData = JSON.stringify(payload.participantInvitationData);
                    }
                    catch (error) {
                        fnLogger.logFailure(error);
                        throw error;
                    }
                }
                fnLogger.info("threadId = " + payload.threadId + " messageId = " + payload.messageId + " participantInvitationData = " + piiUtils.scrubMriOrOmit(participantInvitationData));
                newParticipants = [];
                newParticipantIds = [];
                promiseList = [];
                disconnectedStates = [0, 4];
                participantIds.forEach(function (participantId) {
                    var participant = _this._getOrCreateParticipant(participantId, causeId);
                    if (_this.slimcoreCallId === 0) {
                        promiseList.push(Promise.resolve(participant));
                    }
                    else if (disconnectedStates.indexOf(participant.state) !== -1) {
                        newParticipants.push(participant);
                        newParticipantIds.push(participantId);
                        _this._addParticipantToCall(participant, causeId);
                        promiseList.push(_this._participantOperationHandler.createPendingOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant.id, causeId));
                    }
                    else if (_this._participantOperationHandler.hasPendingOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant.id)) {
                        promiseList.push(_this._participantOperationHandler.waitForOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT, participant.id));
                    }
                    else {
                        promiseList.push(Promise.resolve(participant));
                    }
                });
                if (newParticipants.length === 0) {
                    return [2, Promise.resolve(promiseList)];
                }
                return [2, Promise.resolve()
                        .then(function () {
                        return _this._slimcoreCallHandler.addParticipantsToCall(_this.slimcoreCallId, newParticipantIds, SlimCoreCommon.mapToEmptyStrIfFalsy(payload.threadId), SlimCoreCommon.mapToEmptyStrIfFalsy(payload.messageId), SlimCoreCommon.mapToEmptyStrIfFalsy(participantInvitationData), (payload.disableUnmute !== undefined ? payload.disableUnmute : false), causeId);
                    })
                        .then(function (participantObjectIds) {
                        if (!participantObjectIds || participantObjectIds.length === 0) {
                            throw new Error('addParticipants: participantObjectIds null or empty');
                        }
                        for (var i = 0; i < participantObjectIds.length; i++) {
                            newParticipants[i].attachSlimcoreObjectId(participantObjectIds[i], causeId);
                        }
                        return promiseList;
                    })
                        .catch(function (error) {
                        fnLogger.logFailure(error);
                        newParticipantIds.forEach(function (participantId) {
                            _this._handleParticipantRemoved(participantId, causeId, error);
                        });
                        return Promise.reject(1);
                    })];
            });
        });
    };
    SlimCoreElectronCall.prototype.removeParticipant = function (participantId, causeId, endpoint, endpointScope) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participant, scope, waitForRemoveParticipant, promise;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger(callConstants_1.PARTICIPANT_OPERATIONS.REMOVE_PARTICIPANT, causeId);
                fnLogger.info("removeParticipant: participantId = " + piiUtils.scrubMriOrOmit(participantId) + ", endpointScope =" + endpointScope);
                if (this.participantMap.hasOwnProperty(participantId)) {
                    participant = this.participantMap[participantId];
                }
                if (participant) {
                    fnLogger.info("removeParticipant: current participant state: " + participant.state);
                    if (participant.state === 0 || participant.state === 4) {
                        fnLogger.logFailure('Participant in invalid state, None or Disconnected');
                        return [2, Promise.reject(new Error('Participant already in disconnected state'))];
                    }
                }
                scope = SlimCoreCommon.convertEndpointScope(endpointScope);
                if (endpointScope && !scope) {
                    this._logger.error("Slimcore mapping for endpointScope failed: " + endpointScope + " => " + scope);
                    return [2, Promise.reject(60)];
                }
                waitForRemoveParticipant = async.defer();
                promise = Promise.resolve()
                    .then(function () {
                    if (!participant) {
                        _this._assertSlimcoreObjectId(_this.slimcoreCallId, 'removeParticipantByMri');
                        _this._slimcoreCallHandler.removeParticipantByMri(_this.slimcoreCallId, participantId, endpoint, scope);
                        waitForRemoveParticipant.resolve();
                    }
                    else {
                        _this._assertSlimcoreObjectId(participant.slimcoreObjectId, 'removeParticipant');
                        _this._slimcoreCallHandler.removeParticipant(participant.slimcoreObjectId, scope);
                        participant.addRemoveParticipantDeferred(waitForRemoveParticipant);
                    }
                })
                    .then(function () {
                    if (!SlimCoreCommon.hasFeature(Enums.Feature.AttendeeBlackList)) {
                        waitForRemoveParticipant.resolve();
                    }
                    return waitForRemoveParticipant.promise;
                })
                    .then(function () { return fnLogger.logSuccess("removed"); })
                    .catch(function (error) {
                    fnLogger.logFailure(error);
                    _this._handleParticipantOperationFailure(callConstants_1.PARTICIPANT_OPERATIONS.REMOVE_PARTICIPANT, error, causeId, participantId);
                    return Promise.reject(error);
                });
                this.raiseChanged();
                return [2, promise];
            });
        });
    };
    SlimCoreElectronCall.prototype._startTransferTargetCall = function (transferedCallObjectId, isVideoEnabled, causeId) {
        var _this = this;
        this._logger.info('Transfer: _startTransferTargetCall', transferedCallObjectId);
        return this.attachSlimCoreCallObject(transferedCallObjectId, causeId, false, '_startTransferTargetCall')
            .then(function () { return _this._slimcoreCallHandler.startTransferTargetCall(transferedCallObjectId, isVideoEnabled, _this.threadId, _this.messageId); });
    };
    SlimCoreElectronCall.prototype._getSlimCoreCallProperties = function (props) {
        this._logger.info('_getSlimCoreCallProperties');
        if (!SlimCoreCommon.isSlimCoreRTModuleAvailable()) {
            return props;
        }
        try {
            var propsRT = new window.SlimCoreRT.SlimCore.CallProperties();
            propsRT.audioDirection = props.audioDirection;
            propsRT.videoDirection = props.videoDirection;
            propsRT.screenshareDirection = props.screenshareDirection;
            propsRT.datachannelDirection = props.datachannelDirection;
            propsRT.muteFlags = props.muteFlags;
            propsRT.mediaPeerType = props.mediaPeerType;
            propsRT.isVideoEnabled = props.isVideoEnabled;
            propsRT.isGoLive = props.isGoLive;
            propsRT.isHostless = props.isHostless;
            propsRT.participantLegId = props.participantLegId;
            propsRT.enableGroupCallMeetupGeneration = props.enableGroupCallMeetupGeneration;
            propsRT.threadId = props.threadId;
            propsRT.messageId = props.messageId;
            propsRT.subject = props.subject;
            propsRT.conversationType = props.conversationType;
            propsRT.meetingInfo = props.meetingInfo;
            propsRT.endpointMetadata = props.endpointMetadata;
            propsRT.onBehalfOf = props.onBehalfOf;
            propsRT.enableLightWeightMeeting = props.enableLightWeightMeeting;
            propsRT.emergencyContent = props.emergencyContent;
            propsRT.broadcastContext = props.broadcastContext;
            propsRT.callKey = props.callKey;
            propsRT.encryptedKey = props.encryptedKey;
            propsRT.invitationType = props.invitationType;
            propsRT.connectionType = props.connectionType;
            propsRT.maxVideoChannels = props.maxVideoChannels;
            propsRT.negotiationTag = props.negotiationTag;
            propsRT.routingFlags = props.routingFlags;
            propsRT.scenario = props.scenario;
            propsRT.preheatFlags = props.preheatFlags;
            propsRT.locationContent = props.locationContent;
            propsRT.mediaConfigurationJson = props.mediaConfigurationJson;
            this._logger.info('_getSlimCoreCallProperties created RT CallProperties');
            return propsRT;
        }
        catch (error) {
            this._logger.info('_getSlimCoreCallProperties failed, reverting back to property bag ', error);
        }
        return props;
    };
    SlimCoreElectronCall.prototype._isEnterpriseMultiParty = function (mediaPeerType) {
        return mediaPeerType === 5 || mediaPeerType === 10;
    };
    SlimCoreElectronCall.prototype._joinOrStartSlimCoreCall = function (options, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('joinOrStartSlimCoreCall', causeId);
        var slimcoreCallId = 0;
        var isGoLive = !options.ringOthers;
        var allowHostless = true;
        if (options.conversationUrl || options.isExistingCallInObservingState) {
            fnLogger.info("options: " + logUtils_1.getPrintableObject(options));
            var props = this._getSlimCoreCallProperties({
                audioDirection: (options.audioDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.audioDirection) : Enums.MediaDirection.Bidirectional,
                videoDirection: (options.videoDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.videoDirection) : Enums.MediaDirection.ReceiveFromPeer,
                screenshareDirection: (options.screenshareDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.screenshareDirection) :
                    this._isEnterpriseMultiParty(this._mediaPeerType) ?
                        Enums.MediaDirection.ReceiveFromPeer :
                        Enums.MediaDirection.Disabled,
                datachannelDirection: (options.datachannelDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.datachannelDirection) : Enums.MediaDirection.Disabled,
                muteFlags: options.muteFlags,
                mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(this._mediaPeerType),
                isVideoEnabled: options.videoDirection === 4,
                isGoLive: isGoLive,
                isHostless: allowHostless,
                participantLegId: this.participantId,
                enableGroupCallMeetupGeneration: this._enableGroupCallMeetupGeneration,
                threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.threadId),
                messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.messageId),
                subject: SlimCoreCommon.mapToEmptyStrIfFalsy(options.label),
                conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(options.conversationType),
                meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(this._meetingInfo)),
                endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(this._endpointMetadata),
                onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(this.onBehalfOfMri),
                enableLightWeightMeeting: options.enableLightWeightMeeting,
                emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._emergencyContent),
                broadcastContext: this.broadcastMeeting && this.broadcastMeeting.context ? JSON.stringify(this.broadcastMeeting.context) : null,
                callKey: options.callKey,
                encryptedKey: options.encryptedKey,
                invitationType: Enums.InvitationType.None,
                connectionType: SlimCoreElectronCall.convertConnectionType(options.connectionType),
                maxVideoChannels: (options.maxVideoChannels !== undefined) ? options.maxVideoChannels : 0,
                negotiationTag: SlimCoreCommon.mapToEmptyStrIfFalsy(options.negotiationTag),
                routingFlags: options.routingFlags,
                scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(options.scenario),
                preheatFlags: options.preheatFlags,
                locationContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._locationContent),
                mediaConfigurationJson: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(options.mediaConfiguration))
            });
            slimcoreCallId = this._slimcoreCallHandler.joinCall(JSON.stringify({
                conversationUrl: options.conversationUrl,
                conversationId: this.callId,
                conversationType: options.conversationType
            }), props);
            this._assertSlimcoreObjectId(slimcoreCallId, 'JoinCall');
            fnLogger.logSuccess("slimcoreCallHandler.JoinCall()");
        }
        else if (options.callToVoicemail) {
            fnLogger.info("Calling slimcoreCallHandler.PlaceCallToVoicemail");
            if (this.participants.length !== 1) {
                throw new Error('PlaceCallToVoicemail Failed. Participant size should be one');
            }
            this._addParticipantToCall(this.participants[0], causeId);
            slimcoreCallId = this._slimcoreCallHandler.placeCallToVoicemail(this.callId, SlimCoreElectronCall.convertToSlimCoreMediaPeerType(this._mediaPeerType), this.participants[0].id, {
                threadId: this.threadId,
                voicemailResourcePath: options.voicemailResourcePath,
                voicemailItemId: options.voicemailItemId
            });
            this._assertSlimcoreObjectId(slimcoreCallId, 'PlaceCallToVoicemail');
            fnLogger.logSuccess("slimcoreCallHandler.PlaceCallToVoicemail()");
        }
        else if (options.parkContext !== undefined && options.pickupCode !== undefined) {
            var slimcoreParkContext = this.mapParkContext(options.parkContext);
            this._setCallType(1);
            var props = this._getSlimCoreCallProperties({
                audioDirection: (options.audioDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.audioDirection) : Enums.MediaDirection.Bidirectional,
                videoDirection: (options.videoDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.videoDirection) : Enums.MediaDirection.ReceiveFromPeer,
                screenshareDirection: Enums.MediaDirection.Disabled,
                datachannelDirection: (options.datachannelDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.datachannelDirection) : Enums.MediaDirection.Disabled,
                muteFlags: options.muteFlags,
                mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(this._mediaPeerType),
                isVideoEnabled: options.videoDirection === 4,
                isGoLive: isGoLive,
                isHostless: allowHostless,
                participantLegId: this.participantId,
                enableGroupCallMeetupGeneration: this._enableGroupCallMeetupGeneration,
                threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.threadId),
                messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.messageId),
                subject: SlimCoreCommon.mapToEmptyStrIfFalsy(options.label),
                conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(options.conversationType),
                meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(this._meetingInfo)),
                endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(this._endpointMetadata),
                onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(this.onBehalfOfMri),
                enableLightWeightMeeting: options.enableLightWeightMeeting,
                emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._emergencyContent),
                broadcastContext: this.broadcastMeeting && this.broadcastMeeting.context ? JSON.stringify(this.broadcastMeeting.context) : null,
                callKey: options.callKey,
                encryptedKey: options.encryptedKey,
                connectionType: SlimCoreElectronCall.convertConnectionType(options.connectionType),
                invitationType: options.invitationType,
                maxVideoChannels: (options.maxVideoChannels !== undefined) ? options.maxVideoChannels : 0,
                routingFlags: options.routingFlags,
                negotiationTag: SlimCoreCommon.mapToEmptyStrIfFalsy(options.negotiationTag),
                scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(options.scenario),
                locationContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._locationContent),
                mediaConfigurationJson: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(options.mediaConfiguration))
            });
            slimcoreCallId = this._slimcoreCallHandler.startCallUnpark(this.callId, props, slimcoreParkContext, options.pickupCode);
            this._assertSlimcoreObjectId(slimcoreCallId, 'StartCallUnpark');
            fnLogger.logSuccess("slimcoreCallHandler.StartCallUnpark()");
        }
        else {
            fnLogger.info("Calling slimcoreCallHandler.PlaceCall");
            var participantStrings_1 = [];
            if (options.invitationType === Enums.InvitationType.Nudge && options.participantsToNudge) {
                participantStrings_1 = options.participantsToNudge;
            }
            else {
                this.participants.forEach(function (participant) {
                    _this._addParticipantToCall(participant, causeId);
                    participantStrings_1.push(participant.id);
                });
            }
            var isMultiparty = !!this.threadId || participantStrings_1.length !== 1;
            this._setCallType(isMultiparty ? 2 : 1);
            var props = this._getSlimCoreCallProperties({
                audioDirection: (options.audioDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.audioDirection) : Enums.MediaDirection.Bidirectional,
                videoDirection: (options.videoDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.videoDirection) : Enums.MediaDirection.ReceiveFromPeer,
                screenshareDirection: (options.screenshareDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.screenshareDirection) :
                    (this.callType === 2 && this._isEnterpriseMultiParty(this._mediaPeerType)) ?
                        Enums.MediaDirection.ReceiveFromPeer :
                        Enums.MediaDirection.Disabled,
                datachannelDirection: (options.datachannelDirection !== undefined) ?
                    SlimCoreElectronCall.toMediaDirection(options.datachannelDirection) : Enums.MediaDirection.Disabled,
                muteFlags: options.muteFlags,
                mediaPeerType: SlimCoreElectronCall.convertToSlimCoreMediaPeerType(this._mediaPeerType),
                isVideoEnabled: options.videoDirection === 4,
                isGoLive: isGoLive,
                isHostless: allowHostless,
                participantLegId: this.participantId,
                enableGroupCallMeetupGeneration: this._enableGroupCallMeetupGeneration,
                threadId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.threadId),
                messageId: SlimCoreCommon.mapToEmptyStrIfFalsy(this.messageId),
                subject: SlimCoreCommon.mapToEmptyStrIfFalsy(options.label),
                conversationType: SlimCoreCommon.mapToEmptyStrIfFalsy(options.conversationType),
                meetingInfo: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(this._meetingInfo)),
                endpointMetadata: SlimCoreCommon.mapToEmptyStrIfFalsy(this._endpointMetadata),
                onBehalfOf: SlimCoreCommon.mapToEmptyStrIfFalsy(this.onBehalfOfMri),
                enableLightWeightMeeting: options.enableLightWeightMeeting,
                emergencyContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._emergencyContent),
                broadcastContext: this.broadcastMeeting && this.broadcastMeeting.context ? JSON.stringify(this.broadcastMeeting.context) : null,
                callKey: options.callKey,
                encryptedKey: options.encryptedKey,
                connectionType: SlimCoreElectronCall.convertConnectionType(options.connectionType),
                invitationType: options.invitationType,
                maxVideoChannels: (options.maxVideoChannels !== undefined) ? options.maxVideoChannels : 0,
                routingFlags: options.routingFlags,
                negotiationTag: SlimCoreCommon.mapToEmptyStrIfFalsy(options.negotiationTag),
                scenario: SlimCoreCommon.mapToEmptyStrIfFalsy(options.scenario),
                preheatFlags: options.preheatFlags,
                locationContent: SlimCoreCommon.mapToEmptyStrIfFalsy(this._locationContent),
                mediaConfigurationJson: SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(options.mediaConfiguration))
            });
            slimcoreCallId = this._slimcoreCallHandler.placeCall(this.callId, participantStrings_1, props);
            this._assertSlimcoreObjectId(slimcoreCallId, 'PlaceCall');
            fnLogger.logSuccess("slimcoreCallHandler.PlaceCall()");
        }
        this.attachSlimCoreCallObject(slimcoreCallId, causeId, false, '_joinOrStartSlimCoreCall');
        this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_START_OR_JOIN_INITIATED, undefined, undefined, causeId);
    };
    SlimCoreElectronCall.prototype._fillIncomingCallProperties = function (causeId) {
        var props = this._getProperties(this._slimcoreCallHandler, this.slimcoreCallId, {
            callQueueInfo: { propKey: Enums.Property.CallQueueInfo },
            callerMri: { propKey: Enums.Property.CallerMriIdentity },
            transferorMri: { propKey: Enums.Property.CallTransferorMri },
            transferorDisplayName: { propKey: Enums.Property.CallTransferorDisplayName },
            transferorType: { propKey: Enums.Property.CallTransferorType },
            onBehalfOfMri: { propKey: Enums.Property.CallOnBehalfOfMri },
            incomingCallType: { propKey: Enums.Property.CallIncomingType },
            consultativeTransferCallId: { propKey: Enums.Property.CallConsultativeTransferCallId }
        }, {
            isIncomingOneOnOneVideoCall: { propKey: Enums.Property.CallIsIncomingOneOnOneVideoCall }
        });
        this._setCallerMri(mriUtils_1.stripMriAliases(props.callerMri), causeId);
        this.transferorMri = mriUtils_1.stripMriAliases(props.transferorMri);
        this.transferorDisplayName = props.transferorDisplayName;
        this.transferorType = props.transferorType;
        this.onBehalfOfMri = mriUtils_1.stripMriAliases(props.onBehalfOfMri);
        this.callQueueInfo = props.callQueueInfo && JSON.parse(props.callQueueInfo);
        this.incomingCallType = props.incomingCallType;
        this._setConsultativeCallId(this.consultativeCallId);
        this.isIncomingOneOnOneVideoCall = !!props.isIncomingOneOnOneVideoCall;
    };
    SlimCoreElectronCall.prototype._onCallPropertyChanged = function (propKey, listener) {
        this._onObjectPropertyChanged(this.slimcoreCallId, propKey, listener);
    };
    SlimCoreElectronCall.prototype.attachSlimCoreCallObject = function (slimCoreCallObjectId, causeId, isObserving, errorString) {
        var _this = this;
        if (isObserving === void 0) { isObserving = false; }
        if (errorString === void 0) { errorString = 'attachSlimCoreCallObject'; }
        var fnLogger = this._logger.createFnLogger('attachSlimCoreCallObject', causeId);
        var slimcoreAttachedPromise = this._callOperationHandler.getPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY);
        var oldSlimcoreCallId = this.slimcoreCallId;
        if (this.slimcoreCallId === slimCoreCallObjectId) {
            this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_ATTACH_SLIMCORE_CALL_FAILED, { slimCoreCallObjectId: slimCoreCallObjectId, reason: 'Call already attached to a SlimCore object' }, causeId);
            fnLogger.logFailure('Call already attached to a SlimCore object');
            return slimcoreAttachedPromise;
        }
        if (this.slimcoreCallId !== 0) {
            fnLogger.info('Call already attached to a different SlimCore object, attaching to new object');
        }
        fnLogger.info("new slimCoreCallObjectId=" + slimCoreCallObjectId);
        this.slimcoreCallId = slimCoreCallObjectId;
        try {
            this._isOptimizedSpeakerEventingEnabled = this._slimcoreInstance.ecsGetSettingAsBool('SkypeCalling', 'enableOptimizedSpeakerChangeEvents', false);
            this._isSetVideoChannelsRenegotiated = this._slimcoreInstance.ecsGetSettingAsBool('SkypeCalling', 'renegotiateVideoChannels', false);
        }
        catch (error) {
            fnLogger.logFailure('Assuming optimized speaker event feature is disabled via ECS.');
            fnLogger.logFailure(error);
        }
        this._slimCoreElectronRemoteManager = new SlimCoreElectronRemoteStreamManager_1.default(this._logger, this._settings, this._slimcoreInstance, this._slimcoreCallHandler, this.slimcoreCallId, this.mediaStreams, this._streamContextMap, isObserving);
        this._slimCoreElectronRemoteManager.changed(function () { return _this.raiseChanged(); });
        this._onCallPropertyChanged(Enums.Property.CallOrigin, function (data) { return _this._onCallOriginChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallStatus, function (data) { return _this._onCallStatusChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallTransferStatus, function (data) { return _this._onCallTransferStatusChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallParkStatus, function (data) { return _this._onCallParkStatusChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallIsMuted, function (data) { return _this._onCallMutedUnmuted(!!data.value); });
        this._onCallPropertyChanged(Enums.Property.CallIsMutedSpeaker, function (data) { return _this._onCallMutedUnmutedSpeaker(!!data.value); });
        this._onCallPropertyChanged(Enums.Property.CallIsServerMuted, function (data) { return _this._onCallIsServerMuted(!!data.value); });
        this._onCallPropertyChanged(Enums.Property.CallActiveMembers, function (data) { return _this._onParticipantJoinedOrRemovedDeferred(); });
        this._onCallPropertyChanged(Enums.Property.CallThreadId, function (data) { return _this._onThreadIdChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallMessageId, function (data) { return _this._onMessageIdChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallEndpointDetails, function (data) { return _this._updateEndpointDetails(data.value); });
        this._onCallPropertyChanged(Enums.Property.SelfParticipantRole, function (data) { return _this._onSelfParticipantRoleChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.SelfParticipantTenantId, function (data) { return _this._onSelfParticipantTenantIdChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallMeetingDetails, function (data) { return _this._updateMeetingDetails(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallMemberCountChanged, function (data) { return _this._onParticipantJoinedOrRemovedDeferred(); });
        this._onCallPropertyChanged(Enums.Property.CallIsConference, function (data) { return _this._updateCallType(data.value, causeId); });
        this._onCallPropertyChanged(Enums.Property.CallIsHostless, function (data) { return _this._updateIsHostless(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallForwardingDestinationType, function (data) { return _this._updateForwardingDestinationType(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallOptimalRemoteVideoCount, function (data) { return _this._onCallOptimalVideoCountChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallName, function (data) { return _this._onCallIdChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallDataChannelObjectId, function (data) { return _this._updateDataChannel(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallBroadcastMetadata, function (data) { return _this._onBroadcastMetadataChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallProgressStatus, function (data) { return _this._onCallProgressStatusChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallEndDiagnosticsCode, function (data) { return _this._onDiagnosticsCodeChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.TransferDiagnosticsCode, function (data) { return _this._onTransferDiagnosticsCodeChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallInvitationData, function (data) { return _this._updateCallInvitationData(data.value); });
        this._onCallPropertyChanged(Enums.Property.SelfMeetingRole, function (data) { return _this._updateMeetingRole(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallTransferorMri, function (data) { return _this._updateTransferorMri(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallCapabilities, function (data) { return _this._onCallCapabilitiesChanged(data.value); });
        this._onCallPropertyChanged(Enums.Property.CallActiveVideoChannelCount, function (data) { return _this._updateActiveVideoChannelCount(data.value); });
        this._registerDisposable(this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.ContentSharingStatus }, function (data) { return _this._onContentSharingChanged(); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('audio-stream-state-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onAudioStreamStateChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('transfer-requested', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onTransferRequested(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('callmeback-operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onCallMeBackOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('unmuteself-operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onUnmuteOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('media-negotiation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onMediaNegotiationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('nudge-participants-operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onNudgeParticipantOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('update-meeting-roles-operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onUpdateMeetingRoleOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('mute-participants-operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onMuteParticipantOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('active-speaker-list-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onActiveSpeakerListChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('dominant-speaker-list-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onDominantSpeakerListChanged(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('remote-user-events-received', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onRemoteUserEventsReceived(data); }));
        this._registerDisposable(this._slimcoreCallHandler.handle('operation-status-changed', { callObjectId: this.slimcoreCallId }, function (data) { return _this._onOperationStatusChanged(data); }));
        this._registerDisposable(this._slimcoreInstance.handle('quality-changed', undefined, function (data) { return _this._onQualityChanged(data); }));
        var props = this._getProperties(this._slimcoreCallHandler, this.slimcoreCallId, {
            callId: { propKey: Enums.Property.CallName },
            threadId: { propKey: Enums.Property.CallThreadId },
            messageId: { propKey: Enums.Property.CallMessageId },
            meetingDetails: { propKey: Enums.Property.CallMeetingDetails },
            tenantId: { propKey: Enums.Property.SelfParticipantTenantId },
            role: { propKey: Enums.Property.SelfParticipantRole },
            broadcastMetadata: { propKey: Enums.Property.CallBroadcastMetadata },
            invitationData: { propKey: Enums.Property.CallInvitationData },
            meetingRole: { propKey: Enums.Property.SelfMeetingRole }
        }, {
            status: { propKey: Enums.Property.CallStatus },
            isConference: { propKey: Enums.Property.CallIsConference },
            isServerMuted: { propKey: Enums.Property.CallIsServerMuted },
            capabilityFlags: { propKey: Enums.Property.CallCapabilities },
            activeVideoChannelCount: { propKey: Enums.Property.CallActiveVideoChannelCount }
        });
        this._updateCallType(props.isConference, causeId);
        this._onCallIdChanged(props.callId);
        this._onThreadIdChanged(props.threadId);
        this._onMessageIdChanged(props.messageId);
        this._onCallStatusChanged(props.status, causeId);
        this._updateMeetingDetails(props.meetingDetails);
        this._onSelfParticipantTenantIdChanged(props.tenantId);
        this._onSelfParticipantRoleChanged(props.role);
        this._onCallIsServerMuted(!!props.isServerMuted);
        this._onBroadcastMetadataChanged(props.broadcastMetadata);
        this._updateCallInvitationData(props.invitationData);
        this._updateMeetingRole(props.meetingRole);
        this._onCallCapabilitiesChanged(props.capabilityFlags);
        this._updateActiveVideoChannelCount(props.activeVideoChannelCount);
        this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_ATTACH_SLIMCORE_CALL, {
            slimCoreCallObjectId: slimCoreCallObjectId,
            oldSlimcoreCallId: oldSlimcoreCallId,
            callId: props.callId,
            threadId: props.threadId,
            messageId: props.messageId,
            role: props.role
        }, causeId);
        this._onParticipantJoinedOrRemoved(causeId);
        this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY, undefined, undefined, undefined, true);
        this._assertSlimcoreObjectId(this.slimcoreCallId, errorString);
        return slimcoreAttachedPromise;
    };
    SlimCoreElectronCall.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._slimcoreCallHandler, this.slimcoreCallId, property, SlimCoreCommon.mapToEmptyStrIfFalsy(fallback));
    };
    SlimCoreElectronCall.prototype.getIntProperty = function (property, fallback, slimcoreCallId) {
        return this._getIntProperty(this._slimcoreCallHandler, slimcoreCallId || this.slimcoreCallId, property, fallback);
    };
    SlimCoreElectronCall.prototype._updateCallInvitationData = function (invitationData) {
        try {
            if (invitationData) {
                this.invitationData = JSON.parse(invitationData);
                this._logger.info("_updateCallInvitationData updated: " + (this.invitationData.length > 0));
                this.raiseChanged();
            }
        }
        catch (err) {
            this._logger.info("Failed to parse invitation data. Error: " + err + ", diagnosticsCode: " + invitationData);
        }
    };
    SlimCoreElectronCall.prototype._updateCallType = function (callIsConference, causeId) {
        var fnLogger = this._logger.createFnLogger('updateCallType', causeId, "current=" + this.callType);
        var newCallType = callIsConference === 0 ? 1 :
            (callIsConference === 1 ? 2 : -1);
        if (this.callType === 2 && newCallType === 1) {
            fnLogger.logFailure("De-escalating to P2P not allowed!");
            return;
        }
        fnLogger.info("newValue: " + newCallType);
        if (newCallType !== this.callType) {
            if (newCallType === 2) {
                this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_ESCALATED_TO_CONFERENCE, undefined, causeId);
            }
            this._setCallType(newCallType);
            this._updateCapabilities(causeId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateForwardingDestinationType = function (forwardingDestinationType) {
        if (forwardingDestinationType !== this.forwardingDestinationType) {
            this.forwardingDestinationType = forwardingDestinationType;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._setupCallTelemetry = function () {
        this._callTelemetry = new callTelemetry_1.default(this._logger, this._callStartTime);
        try {
            this._callTelemetry.setStackConfig({
                ConversationServiceUrl: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/ConversationServiceUrl'),
                UdpTransportUrl: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/UdpTransportUrl'),
                KeyDistributionUrl: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/KeyDistributionUrl'),
                PotentialCallRequestUrl: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/PotentialCallRequestUrl'),
                UploadLogUrl: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/UploadLogUrl'),
                UdpEnabled: this._slimcoreInstance.setupGetStr('*Lib/Call/NG/UdpEnabled'),
                SlimCoreVersion: SlimCore.getVersion()
            });
        }
        catch (e) {
            this._logger.info('Failed to log stack config');
        }
    };
    SlimCoreElectronCall.prototype._updateDataChannel = function (dataChannelObjectId) {
        this._logger.info('_updateDataChannel()');
        if (dataChannelObjectId) {
            if (this._dataChannel) {
                this._dataChannel.dispose();
            }
            var dataChannel = void 0;
            try {
                dataChannel = this._slimcoreInstance.getDataChannel(dataChannelObjectId);
            }
            catch (err) {
                this._logger.error("failed to get data channel: " + err);
                this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_DATA_CHANNEL_CREATED);
                return;
            }
            this._dataChannel = new SlimCoreElectronDataChannel_1.default(this._logger, this._settings, this._slimcoreInstance, this, this._slimcoreCallHandler, dataChannel, this._dataChannelUsers, dataChannelObjectId);
            this._dataChannel.setAdapterSourceSinkCallback(this.dataChannelAdapter.setInternalSourceSink);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_DATA_CHANNEL_CREATED);
            this._logger.info('Data channel set');
        }
    };
    SlimCoreElectronCall.prototype.mapDataChannelSourceIdToParticipant = function (sourceID) {
        var participant = null;
        if (this.callType === 1) {
            participant = this.participants[0];
        }
        else {
            participant = _.find(this.participants, function (participant) { return participant.hasSourceId(4, sourceID); });
        }
        if (participant && participant.id) {
            this._logger.info("ParticipantId: " + piiUtils.scrubMriOrOmit(participant.id) + " to SourceId: " + sourceID);
        }
        else {
            this._logger.warn("No Participant found for SourceId: " + sourceID);
        }
        return participant;
    };
    SlimCoreElectronCall.prototype._onAudioStreamStateChanged = function (eventData) {
        this.event('mediaStreamStateChanged').raise();
        if (eventData.direction === SlimCore.Enums.MediaDirection.ReceiveFromPeer) {
            this.isAudioStreamConnected = eventData.streamState === SlimCore.Enums.MediaStreamState.StreamInactive
                || eventData.streamState === SlimCore.Enums.MediaStreamState.StreamActive;
        }
        if (eventData.streamState === SlimCore.Enums.MediaStreamState.StreamFail) {
            this.event('mediaConnectionFailed').raise();
        }
    };
    SlimCoreElectronCall.prototype._onTransferRequested = function (eventData) {
        var _this = this;
        this._logger.info('Transfer: _onTransferRequested', eventData);
        var newCallOrigin = this.getIntProperty(Enums.Property.CallOrigin, Enums.OriginType.Unspecified, eventData.targetCallObjectId);
        var transferType;
        if (newCallOrigin === Enums.OriginType.Park) {
            transferType = 1;
        }
        else if (newCallOrigin === Enums.OriginType.Transfer) {
            transferType = 0;
        }
        else if (newCallOrigin === Enums.OriginType.TransferToVoicemail) {
            transferType = 2;
        }
        else {
            this._logger.info('Unkown transfer type based on new call origin');
        }
        this._logger.info("onTransferRequested newCallOrigin=" + newCallOrigin + " transferType=" + transferType);
        var slimCoreTransferContext = {
            transferorMri: eventData.transferorMri,
            targetMri: eventData.transferTargetMri,
            transferType: transferType,
            context: {
                newCallObjectId: eventData.targetCallObjectId
            }
        };
        this.event('transferRequested').raise({
            transferContext: slimCoreTransferContext,
            onCompleted: function (code) {
                _this._logger.debug("Transfer: transferCompleted called: " + code);
                if (code !== 1) {
                    _this._slimcoreCallHandler.leaveCall(slimCoreTransferContext.context.newCallObjectId);
                }
            }
        });
    };
    SlimCoreElectronCall.prototype._operationStatusChanged = function (operationHandler, operationName, eventData) {
        this._logger.info("[" + operationHandler + "][OperationStatusChanged]: " + eventData);
        var causeId = eventData.causeId || causeId_1.generateCauseId();
        if (!operationHandler.hasPendingOperation(operationName)) {
            return;
        }
        var reason = EnumConverter.convertFailureReasonToParticipantReason(eventData.failureReason);
        var telemetryData = { reason: reason };
        telemetryData.code = eventData.code;
        telemetryData.subCode = eventData.subCode;
        telemetryData.phrase = eventData.phrase;
        this._callTelemetry.updateOperationData(operationName, telemetryData, causeId);
    };
    SlimCoreElectronCall.prototype._onCallMeBackOperationStatusChanged = function (eventData) {
        this._operationStatusChanged(this._participantOperationHandler, callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, eventData);
        var reason = EnumConverter.convertFailureReasonToParticipantReason(eventData.failureReason);
        var transactionEnd = {
            code: eventData.code,
            subCode: eventData.subCode,
            phrase: eventData.phrase
        };
        transactionEnd.failureReason = reason;
        if (eventData.failureReason === Enums.ParticipantFailureReason.NoFailure) {
        }
        else {
            this._participantOperationHandler.rejectOperation(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, transactionEnd, eventData.participantMri, eventData.causeId);
        }
    };
    SlimCoreElectronCall.prototype._onUnmuteOperationStatusChanged = function (eventData) {
        this._operationStatusChanged(this._callOperationHandler, callConstants_1.CALL_OPERATIONS.UNMUTE, eventData);
        var causeId = causeId_1.generateCauseId();
        var reason = SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(EnumConverter.convertFailureReasonToParticipantReason(eventData.failureReason));
        if (eventData.operationResult === Enums.OperationResultCode.Success) {
            this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS.UNMUTE, reason, undefined, causeId);
        }
        else {
            this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.UNMUTE, reason, undefined, causeId);
        }
    };
    SlimCoreElectronCall.prototype._onNudgeParticipantOperationStatusChanged = function (eventData) {
        this._operationStatusChanged(this._participantOperationHandler, callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, eventData);
        var causeId = causeId_1.generateCauseId();
        var reason = EnumConverter.convertFailureReasonToParticipantReason(eventData.failureReason);
        if (eventData.failureReason === Enums.ParticipantFailureReason.NoFailure) {
            this._participantOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, reason, eventData.context, causeId);
        }
        else {
            this._participantOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS, reason, eventData.context, causeId);
        }
    };
    SlimCoreElectronCall.prototype._onUpdateMeetingRoleOperationStatusChanged = function (eventData) {
        this._operationStatusChanged(this._participantOperationHandler, callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, eventData);
        var transactionEnd = {
            code: eventData.code,
            subCode: eventData.subCode,
            phrase: eventData.phrase
        };
        if (transactionEnd.code === 0 && transactionEnd.subCode === 0) {
            this._participantOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, transactionEnd, eventData.causeId, eventData.causeId);
        }
        else {
            this._participantOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE, transactionEnd, eventData.causeId, eventData.causeId);
        }
    };
    SlimCoreElectronCall.prototype._onMuteParticipantOperationStatusChanged = function (eventData) {
        this._operationStatusChanged(this._callOperationHandler, callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, eventData);
        var transactionEnd = {
            code: eventData.code,
            subCode: eventData.subCode,
            phrase: eventData.phrase
        };
        if (transactionEnd.code === 0 && transactionEnd.subCode === 0) {
            this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, transactionEnd, eventData.causeId, eventData.causeId);
        }
        else {
            this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, transactionEnd, eventData.causeId, eventData.causeId);
        }
    };
    SlimCoreElectronCall.prototype._onActiveSpeakerListChanged = function (eventData) {
        var activeSpeakers = eventData.activeSpeakers ? Array.from(eventData.activeSpeakers) : [];
        var isActiveSpeakerMap = {};
        for (var _i = 0, activeSpeakers_1 = activeSpeakers; _i < activeSpeakers_1.length; _i++) {
            var activeSpeakerId = activeSpeakers_1[_i];
            isActiveSpeakerMap[activeSpeakerId] = 1;
        }
        for (var _a = 0, _b = this.participants; _a < _b.length; _a++) {
            var participant = _b[_a];
            participant.setVoiceLevel(isActiveSpeakerMap[participant.id] || 0);
        }
        this._logger.debug("_onActiveSpeakerListChanged: number of active speakers " + Object.keys(isActiveSpeakerMap).length);
    };
    SlimCoreElectronCall.prototype._onDiagnosticsCodeChanged = function (diagnosticsCode) {
        if (this._rawCallEndDiagnosticsInfo === diagnosticsCode || !diagnosticsCode || _.isEmpty(diagnosticsCode)) {
            return;
        }
        this._logger.info("_onDiagnosticsCodeChanged diagnosticsCode: " + diagnosticsCode);
        try {
            this._rawCallEndDiagnosticsInfo = diagnosticsCode;
            this.callEndDiagnosticsInfo = JSON.parse(diagnosticsCode);
            this.raiseChanged();
        }
        catch (err) {
            this._logger.info("Failed to parse raw diagnostis details. Error: " + err + ", diagnosticsCode: " + diagnosticsCode);
        }
    };
    SlimCoreElectronCall.prototype._onTransferDiagnosticsCodeChanged = function (transferDiagnosticsCode) {
        if (this._rawTransferDiagnosticsInfo === transferDiagnosticsCode || !transferDiagnosticsCode || _.isEmpty(transferDiagnosticsCode)) {
            return;
        }
        this._logger.info("_onTransferDiagnosticsCodeChanged: " + transferDiagnosticsCode);
        try {
            this._rawTransferDiagnosticsInfo = transferDiagnosticsCode;
            this.transferDiagnosticsInfo = JSON.parse(transferDiagnosticsCode);
            this.raiseChanged();
        }
        catch (err) {
            this._logger.info("Failed to parse raw diagnostis details. Error: " + err + ", diagnosticsCode: " + transferDiagnosticsCode);
        }
    };
    SlimCoreElectronCall.prototype._onDominantSpeakerListChanged = function (eventData) {
        this.dominantSpeakerInfo.speakerList = !!eventData.dominantSpeakers ? Array.from(eventData.dominantSpeakers) : [];
        this._logger.info("_onDominantSpeakerListChanged: number of dominant speakers " + this.dominantSpeakerInfo.speakerList.length);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._onRemoteUserEventsReceived = function (eventData) {
        this.event('remoteUserEventsReceived').raise(eventData.participantId, eventData.events);
    };
    SlimCoreElectronCall.prototype._updateCallLegIdChanged = function (newLegId) {
        if (this.participantId !== newLegId) {
            this._logger.info("updateCallLegIdChanged: new value is " + newLegId);
            this._setParticipantId(newLegId);
            this.event('callLegIdChanged').raise(newLegId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onOperationStatusChanged = function (eventData) {
        this._logger.info("_onOperationStatusChanged: eventData " + JSON.stringify(eventData, null, 4));
        var response;
        try {
            response = JSON.parse(eventData.result);
        }
        catch (err) {
            this._logger.info("_onOperationStatusChanged: exception when parsing result " + err);
            return;
        }
        if (!response) {
            this._logger.info("_onOperationStatusChanged: not a valid object " + response);
            return;
        }
        for (var causeId_2 in response) {
            if (!causeId_2 || !response.hasOwnProperty(causeId_2)) {
                continue;
            }
            for (var operationId_1 in response[causeId_2]) {
                if (!operationId_1 || !response[causeId_2].hasOwnProperty(operationId_1)) {
                    continue;
                }
                var transactionEnd = response[causeId_2][operationId_1];
                this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, transactionEnd, causeId_2, operationId_1);
                if (transactionEnd.code === 0 && transactionEnd.subCode === 0) {
                    this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, transactionEnd, operationId_1, causeId_2);
                }
                else {
                    this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, transactionEnd, operationId_1, causeId_2);
                }
            }
        }
    };
    SlimCoreElectronCall.prototype._updateIsHostless = function (newIsHostless) {
        var newValue = (newIsHostless === 1);
        if (this.isHostless !== newValue) {
            this._logger.info("_updateIsHostless: new value is " + newValue);
            this.isHostless = newValue;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallOptimalVideoCountChanged = function (value) {
        this._logger.info("_onCallOptimalVideoCountChanged " + value);
        if (value !== this.optimalVideoCount) {
            this.optimalVideoCount = value;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onCallIdChanged = function (value) {
        this._logger.info("_onCallIdChanged " + value);
        if (value !== this.callId) {
            this._setCallId(value);
            this.event('callIdChanged').raise(this.callId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._setCallId = function (callId) {
        this.callId = callId;
        this._callTelemetry.setCallId(this.callId);
    };
    SlimCoreElectronCall.prototype._setParticipantId = function (participantId) {
        this.participantId = participantId;
        this._callTelemetry.setParticipantId(this.participantId);
    };
    SlimCoreElectronCall.prototype._setConsultativeCallId = function (callId) {
        this.consultativeCallId = callId;
        this._callTelemetry.setConsultativeCallId(this.consultativeCallId);
    };
    SlimCoreElectronCall.prototype._onCallTransferStatusChanged = function (status) {
        var causeId = causeId_1.generateCauseId();
        this._logger.info("[" + causeId + "]onCallTransferStatusChanged status: " + status + " (" + Enums.CallStatus[status] + ")");
        if (this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS)) {
            if (status === Enums.CallStatus.Transferring) {
                this._setTransferState(2, causeId);
            }
            else if (status === Enums.CallStatus.Transferred) {
                this._setTransferState(3, causeId);
            }
            else if (status === Enums.CallStatus.Failed) {
                this._setTransferState(4, causeId);
            }
        }
    };
    SlimCoreElectronCall.prototype._onCallParkStatusChanged = function (status) {
        var causeId = causeId_1.generateCauseId();
        this._logger.info("[" + causeId + "]_onCallParkStatusChanged status: " + status + " (" + Enums.CallStatus[status] + ")");
        if (this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TRANSFER_IN_PROGRESS)) {
            if (status === Enums.CallStatus.Parking) {
                this._setParkState(2, causeId);
            }
            else if (status === Enums.CallStatus.Parked) {
                this._setParkState(3, causeId);
            }
            else if (status === Enums.CallStatus.Failed) {
                this._setParkState(4, causeId);
            }
        }
    };
    SlimCoreElectronCall.prototype._onCallStatusChanged = function (status, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('onCallStatusChanged', causeId);
        fnLogger.info("new status=" + status + ", mapped to=(" + Enums.CallStatus[status] + ")");
        this._updateCallLegIdChanged(this.getStrProperty(Enums.Property.CallLegId));
        this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SIGNALING_STATE_CHANGED, { status: status, statusToEnum: Enums.CallStatus[status] }, causeId);
        if (SlimCoreElectronCall.isCallConnecting(status)) {
            this._setCallState(2, causeId);
        }
        else if (SlimCoreElectronCall.isCallPreheating(status)) {
            fnLogger.info('status=Preheating');
            this._setCallState(11, causeId);
        }
        else if (SlimCoreElectronCall.isCallEarlyMedia(status)) {
            fnLogger.info('status=EarlyMedia');
            this._setCallState(9, causeId);
        }
        else if (SlimCoreElectronCall.isCallRinging(status)) {
            fnLogger.info('status=Ringing');
            this.participants.forEach(function (p) { return p.setState(2, causeId); });
            this._updateCallType(this.getIntProperty(Enums.Property.CallIsConference), causeId);
        }
        else if (SlimCoreElectronCall.isCallInLobby(status)) {
            this._callIsSetupComplete = true;
            fnLogger.info('status=InLobby');
            this._setCallState(10, causeId);
            this.participants.forEach(function (p) { return p.setState(7, causeId); });
            this._updateCallType(this.getIntProperty(Enums.Property.CallIsConference), causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.HOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNHOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL, undefined, undefined, causeId);
            this._reportTsCallingTelemetry(true);
        }
        else if (SlimCoreElectronCall.isCallPreheated(status)) {
            fnLogger.info('status=Preheated');
            this._setCallState(12, causeId);
            this._updateIsHostless(this.getIntProperty(Enums.Property.CallIsHostless));
            this._updateCallType(this.getIntProperty(Enums.Property.CallIsConference), causeId);
            this._updateEndpointDetails(this.getStrProperty(Enums.Property.CallEndpointDetails));
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, undefined, undefined, causeId);
        }
        else if (SlimCoreElectronCall.isCallConnected(status)) {
            this._callIsSetupComplete = true;
            fnLogger.info('status=Connected');
            this._setCallState(3, causeId);
            this._updateIsHostless(this.getIntProperty(Enums.Property.CallIsHostless));
            this._updateCallType(this.getIntProperty(Enums.Property.CallIsConference), causeId);
            this._updateEndpointDetails(this.getStrProperty(Enums.Property.CallEndpointDetails));
            this._onCallMutedUnmuted(!!this.getIntProperty(Enums.Property.CallIsMuted));
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.HOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNHOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL, undefined, undefined, causeId);
            this._reportTsCallingTelemetry(true);
        }
        else if (SlimCoreElectronCall.isObserving(status)) {
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, undefined, undefined, causeId);
        }
        else if (status === Enums.CallStatus.LocalHold) {
            fnLogger.info('status=LocalHold');
            this._setCallState(4, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.HOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNHOLD, undefined, undefined, causeId);
        }
        else if (status === Enums.CallStatus.RemoteHold) {
            fnLogger.info('status=RemoteHold');
            this._setCallState(5, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.HOLD, undefined, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.UNHOLD, undefined, undefined, causeId);
        }
        else if (SlimCoreElectronCall.isCallTerminated(status)) {
            var terminatedReasonFromStatus = SlimCoreElectronCall.convertStatusToTerminatedReason(status);
            var finalReason = terminatedReasonFromStatus;
            fnLogger.info("status=Terminated, reason=" + terminatedReasonFromStatus);
            var slimcoreCallFailureReason = this.getIntProperty(Enums.Property.CallFailureReason);
            var diagnosticsCode = this.getStrProperty(Enums.Property.CallEndDiagnosticsCode);
            var slimcoreCallType = this.getIntProperty(Enums.Property.CallIsConference);
            var firstParticipantFailureReason = this._getFirstParticipantFailureReason(fnLogger);
            if ((status === Enums.CallStatus.Failed) ||
                (status === Enums.CallStatus.Dropped) ||
                (slimcoreCallFailureReason === Enums.ParticipantFailureReason.CallNotFound)) {
                finalReason = this._getTerminatedReason(slimcoreCallFailureReason, terminatedReasonFromStatus);
            }
            if (this.state === 8 &&
                (this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.START_CALL) ||
                    this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.JOIN_CALL))) {
                this.slimcoreCallId = 0;
                this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, finalReason, undefined, causeId);
                fnLogger.info('Subscribe failed, there is pending start/join operation, ignore call end message');
                return;
            }
            this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_TERMINATION_INFO, { terminatedReasonFromStatus: terminatedReasonFromStatus, slimcoreCallFailureReason: slimcoreCallFailureReason, firstParticipantFailureReason: firstParticipantFailureReason, finalReason: finalReason, slimcoreCallType: slimcoreCallType }, causeId);
            fnLogger.info("status=Terminated, statusToReason=" + terminatedReasonFromStatus + ", slimcoreCallFailureReason=" + slimcoreCallFailureReason + ", finalReason=" + finalReason);
            this._callOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, finalReason, undefined, causeId);
            this._callOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_ENDED, finalReason, undefined, causeId);
            this._setCallState(7, causeId, finalReason, diagnosticsCode);
            this.participants.forEach(function (p) { return p.setState(4, causeId); });
            this._updateDominantSpeakerList();
            this.disconnectingPromise = this.cleanUp(causeId).catch(function (error) {
                fnLogger.logFailure("Error when cleaning up the call, callId = " + _this.callId + ", error = " + error);
            });
        }
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._reportTsCallingTelemetry = function (isCallSetupEvent) {
        return __awaiter(this, void 0, void 0, function () {
            var eventName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isCallSetupEvent && this.setupTelemetryReported) {
                            return [2];
                        }
                        else if (!isCallSetupEvent && this.inCallTelemetryReported) {
                            return [2];
                        }
                        return [4, this.connectCallPromise.catch(fn_1.noop)];
                    case 1:
                        _a.sent();
                        eventName = isCallSetupEvent ? 'skypecosi_concore_native_ts_calling_call_setup_session' : 'skypecosi_concore_native_ts_calling_in_call_session';
                        this._callTelemetry.setCallEndDiagnosticInfo(this.callEndDiagnosticsInfo);
                        if (this._telemetryService) {
                            this._telemetryService.sendEvent(eventName, this._callTelemetry.getEvent(isCallSetupEvent));
                        }
                        if (isCallSetupEvent) {
                            this.setupTelemetryReported = true;
                            this._callTelemetry.switchToInCallTelemetry();
                        }
                        else {
                            this.inCallTelemetryReported = true;
                        }
                        return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype._getTerminatedReason = function (callFailureReason, originalReason) {
        if (this._isRelayWhiteListingIssue) {
            return 53;
        }
        else if (!_.isUndefined(callFailureReason) && callFailureReason !== Enums.ParticipantFailureReason.NoFailure) {
            return SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(EnumConverter.convertFailureReasonToParticipantReason(callFailureReason));
        }
        else if (this.participants.length) {
            var firstParticipantFailureReason = _.head(this.participants).getIntProperty(Enums.Property.ParticipantFailureReason);
            return SlimCoreElectronCall.convertParticipantReasonToTerminatedReason(EnumConverter.convertFailureReasonToParticipantReason(firstParticipantFailureReason));
        }
        return originalReason || 0;
    };
    SlimCoreElectronCall.prototype._addParticipantToCall = function (participant, causeId) {
        participant.setState(1, causeId);
        this._logger.info("[" + causeId + "]starting adding participant to call, participantId = " + piiUtils.scrubMriOrOmit(participant.id));
    };
    SlimCoreElectronCall.prototype._joinOrStartCall = function (options, causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, connectCallPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnLogger = this._logger.createFnLogger('joinOrStartCall', causeId);
                        if (this.state !== 0 && this.state !== 8) {
                            throw new Error('Trying to start a call that has already been acted on');
                        }
                        this._setIsCast(options.conversationType === 'cast');
                        this.label = options.label;
                        this.raiseChanged();
                        if ((options.muteFlags & 1) === 1) {
                            fnLogger.info("isMuted set to true in _joinOrStartCall");
                            this.isMuted = true;
                        }
                        if ((options.muteFlags & 2) === 2) {
                            fnLogger.info("isSpeakerMuted set to true in _joinOrStartCall");
                            this.isSpeakerMuted = true;
                        }
                        options.isExistingCallInObservingState = this.state === 8;
                        if ((options.preheatFlags & 1) === 1) {
                            fnLogger.info("Call set to preheating in _joinOrStartCall");
                            this._setCallState(11, causeId);
                        }
                        else {
                            fnLogger.info("Call set to connecting in _joinOrStartCall");
                            this._setCallState(2, causeId);
                        }
                        connectCallPromise = this._callOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CONNECT_CALL, undefined, causeId);
                        try {
                            this._joinOrStartSlimCoreCall(options, causeId);
                        }
                        catch (error) {
                            fnLogger.logFailure("sync failure, cleaning up slimcore ready operation: error=" + logUtils_1.getPrintableObject(error));
                            this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS_INTERNAL.INCOMING_INITIALIZE, { error: logUtils_1.getPIISafeObject(error) }, causeId);
                            this._callOperationHandler.rejectOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY);
                            this.stopInternal(causeId);
                            throw error;
                        }
                        if (!(options.videoDirection === 4)) return [3, 2];
                        fnLogger.info('Call has been started; turning on video');
                        return [4, this.startVideoSafe(causeId)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, connectCallPromise];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype._muteUnmute = function (value, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('muteUnmute', causeId);
        fnLogger.info("muteUnmute, value = " + value + " isMuted = " + this.isMuted + " isServerMuted = " + this.isServerMuted);
        if (stateUtils.callStateIsAnyOf(this.state, [11, 12])) {
            fnLogger.logFailure('Can not mute/unmute during preheat call');
            return Promise.reject(60);
        }
        var muteUnMutePromise;
        if (value) {
            muteUnMutePromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.MUTE);
        }
        else {
            muteUnMutePromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.UNMUTE);
        }
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callMute(_this.slimcoreCallId, value); })
            .then(function () { return muteUnMutePromise; })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._muteUnmuteSpeaker = function (value, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('muteUnmuteSpeaker', causeId);
        fnLogger.info("muteUnmuteSpeaker, value = " + value + " isSpeakerMuted = " + this.isSpeakerMuted);
        var muteUnMutePromise;
        if (value) {
            muteUnMutePromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.MUTE_SPEAKER);
        }
        else {
            muteUnMutePromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.UNMUTE_SPEAKER);
        }
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callMuteSpeaker(_this.slimcoreCallId, value); })
            .then(function () { return muteUnMutePromise; })
            .then(function () { return _this._setMutedSpeaker(value, causeId); })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._muteParticipants = function (muteScope, callParticipants, causeId) {
        var _this = this;
        var scope = SlimCoreElectronCall.convertMuteScope(muteScope);
        var fnLogger = this._logger.createFnLogger('muteParticipants', causeId);
        if (scope === undefined) {
            fnLogger.logFailure("Unrecognized " + muteScope);
            return Promise.reject(new Error('Unrecognized muteScope'));
        }
        if (stateUtils.callStateIsAnyOf(this.state, [11, 12])) {
            fnLogger.logFailure('Can not mute/unmute during preheat call');
            return Promise.reject(60);
        }
        var participantStrings = [];
        callParticipants.forEach(function (participant) {
            participantStrings.push(participant.id);
        });
        var muteParticipantsPromise = this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, '', causeId);
        return Promise.resolve()
            .then(function () {
            _this._slimcoreCallHandler.callMuteParticipants(_this.slimcoreCallId, scope, participantStrings, causeId);
            if (SlimCoreCommon.hasFeature(Enums.Feature.AttendeeBlackList)) {
                return muteParticipantsPromise;
            }
            else {
                return _this._callOperationHandler.resolveOperation(callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, null, causeId, causeId)
                    .then();
            }
        })
            .catch(function (error) {
            fnLogger.logFailure("mute participants failed with " + error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._holdUnhold = function (shouldHold, causeId, negotiationTag) {
        return __awaiter(this, void 0, void 0, function () {
            var currentHoldStatus, fnLogger, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentHoldStatus = (this.state === 4);
                        fnLogger = this._logger.createFnLogger('holdUnhold', causeId);
                        fnLogger.info("_holdUnhold, value: " + shouldHold + " currentState: " + currentHoldStatus);
                        if (currentHoldStatus === shouldHold) {
                            return [2, Promise.resolve()];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        this._slimcoreCallHandler.callHold(this.slimcoreCallId, shouldHold, negotiationTag);
                        if (!shouldHold) return [3, 3];
                        return [4, this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.HOLD)];
                    case 2:
                        _a.sent();
                        return [3, 5];
                    case 3: return [4, this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.UNHOLD)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3, 7];
                    case 6:
                        error_3 = _a.sent();
                        fnLogger.logFailure(error_3);
                        throw error_3;
                    case 7: return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype._updateEndpointMetadata = function (endpointMetadata, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('updateEndpointMetadata', causeId);
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.callUpdateEndpointMetadata(_this.slimcoreCallId, _this._endpointMetadata); })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._sendDtmfTone = function (dtmfTone, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('sendDtmfTone', causeId);
        return Promise.resolve()
            .then(function () {
            var slimCoreDtmfTone = SlimCoreElectronCall.convertToSlimCoreDtmfTone(dtmfTone);
            if (slimCoreDtmfTone === undefined) {
                fnLogger.logFailure("Unrecognized dtmfTone");
                throw new Error('Unrecognized dtmfTone');
            }
            try {
                _this._slimcoreCallHandler.callSendDtmf(_this.slimcoreCallId, slimCoreDtmfTone);
            }
            catch (error) {
                fnLogger.logFailure(error);
                throw error;
            }
        });
    };
    SlimCoreElectronCall.prototype.setMaxVideoChannels = function (maxVideoChannels, negotiationTag, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('setMaxVideoChannels', causeId);
        fnLogger.info("setMaxVideoChannels: " + maxVideoChannels);
        return Promise.resolve()
            .then(function () {
            _this._slimcoreCallHandler.callSetMaxVideoChannels(_this.slimcoreCallId, maxVideoChannels, negotiationTag, causeId);
            if (_this._isSetVideoChannelsRenegotiated) {
                return _this._callOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.SET_MAX_VIDEO_CHANNELS);
            }
            else {
                return Promise.resolve();
            }
        })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._setAudioUsageMode = function (audioUsageMode, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('setAudioUsageMode', causeId);
        return Promise.resolve()
            .then(function () {
            var slimCoreAudioUsageMode = SlimCoreElectronCall.convertToSlimCoreAudioUsageMode(audioUsageMode);
            if (slimCoreAudioUsageMode === undefined) {
                throw new Error('Unrecognized audioUsageMode');
            }
            _this._slimcoreCallHandler.callSetAudioUsageMode(_this.slimcoreCallId, slimCoreAudioUsageMode);
        })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype._getOrCreateParticipant = function (participantMri, causeId, slimcoreObjectId, data) {
        var _this = this;
        var isObserving = this.state === 8;
        var participant;
        if (this.participantMap.hasOwnProperty(participantMri)) {
            var participant_1 = this.participantMap[participantMri];
            if (slimcoreObjectId) {
                participant_1.attachSlimcoreObjectId(slimcoreObjectId, causeId, isObserving, data);
            }
            return participant_1;
        }
        this._logger.info("getOrCreateParticipant: creating new participant " + piiUtils.scrubMriOrOmit(participantMri) + " " + slimcoreObjectId);
        participant = new SlimCoreElectronCallParticipant_1.default(this._logger, this._settings, this._slimcoreInstance, participantMri, this._slimcoreCallHandler, this._streamContextMap, slimcoreObjectId, this._callTelemetry, isObserving, data);
        participant.changed(function () { return _this._participantChangedCallback(participant); });
        this._addParticipantEntry(participant);
        this._monitorCallStart();
        this.event('participantAdded').raise(participant);
        this.raiseChangedDeferred();
        return participant;
    };
    SlimCoreElectronCall.prototype._participantChangedCallback = function (participant) {
        var _this = this;
        if (participant.previousId) {
            this._callOperationHandler.updateOperationId(participant.previousId, participant.id);
            this._participantOperationHandler.updateOperationId(participant.previousId, participant.id);
            participant.previousId = null;
        }
        _.each(participant.streams[1], function (s) {
            if (_this._localScreenShareStream && !_this._callOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.START_SCREEN_SHARING)) {
                if (s.isAvailable) {
                    SlimCoreCommon.forgetAndLog(_this.stopScreenSharing(true), _this._logger, 'ParticipantChanged: Cleaning up local screenshare because remote screenshare is running');
                    _this.event('sharingStolen').raise();
                }
            }
            if (_this.screenSharingControl && _this.screenSharingControl.isScreenSharingControlEnabled()) {
                _this.screenSharingControl.reportSharingSessionChangeForViewer(participant, s.negotiationTag);
                if (s.isActive() && _this.state === 3) {
                    _this.screenSharingControl.initControlForViewer(participant, s.negotiationTag);
                }
                else {
                    _this.screenSharingControl.shutdownControlForViewer(participant);
                }
            }
        });
        this._updateDominantSpeakerListDeferred();
        this.event('participantUpdated').raise(participant);
        this.raiseChangedDeferred();
    };
    SlimCoreElectronCall.prototype._setCallState = function (callState, causeId, terminatedReason, diagnosticCode) {
        if (this.state === callState) {
            return;
        }
        var fnLogger = this._logger.createFnLogger("setCallState", causeId);
        fnLogger.info("currentState=" + this.state + ", newState=" + callState + ", terminatedReason=" + this.terminatedReason);
        var validNextStates = stateUtils.validStateTransitions[this.state];
        var isValidNextState = validNextStates.indexOf(callState) >= 0;
        if (!isValidNextState) {
            this._logger.warn('invalid state transition');
            return;
        }
        this.state = callState;
        this._onDiagnosticsCodeChanged(diagnosticCode);
        this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_CALL_STATE, { state: callState, reason: terminatedReason }, causeId);
        if (callState === 3) {
            this._callGotConnected = true;
            this.callHeldAt = null;
        }
        else if ((callState === 5 || callState === 4) && !this.callHeldAt) {
            this.callHeldAt = new Date();
        }
        else if (callState === 7) {
            this.terminatedReason = terminatedReason;
            this._setFailureType(SlimCoreElectronCall.convertTerminatedReasonToFailureType(terminatedReason, this._callGotConnected, this._wasAudioStreamConnected));
            var transactionEnd = {};
            if (this.callEndDiagnosticsInfo) {
                transactionEnd.code = this.callEndDiagnosticsInfo.callControllerCode;
                transactionEnd.subCode = this.callEndDiagnosticsInfo.callControllerSubCode;
            }
            this._callTelemetry.updateOperationData(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_CALL_STATE, transactionEnd, causeId);
        }
        if (this.screenSharingControl && this.screenSharingControl.isScreenSharingControlEnabled()) {
            this.screenSharingControl.callStateChanged(this.state);
        }
        fnLogger.logSuccess("changed to " + callState + ", terminatedReason: " + this.terminatedReason + ", failureType=" + this.failureType);
        this._startInitialVideoIfReady(causeId);
        this._monitorCallStart();
        this.event('callStateChanged').raise();
        this._updateCapabilities(causeId);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._setVideoOn = function (videoOn, causeId) {
        if (this.isVideoOn !== videoOn) {
            this.isVideoOn = videoOn;
            this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_LOCAL_VIDEO, { value: videoOn }, causeId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._setScreenSharingOn = function (screenSharingOn, causeId) {
        if (this.isScreenSharingOn !== screenSharingOn) {
            this.isScreenSharingOn = screenSharingOn;
            this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_SCREEN_SHARING, { value: screenSharingOn }, causeId);
            this.raiseChanged();
        }
        this.event('userActivityChanged').raise();
    };
    SlimCoreElectronCall.prototype._setMutedSpeaker = function (muted, causeId) {
        if (this.isSpeakerMuted !== muted) {
            this.isSpeakerMuted = muted;
            this._callTelemetry.recordEvent(callConstants_1.CALL_OPERATIONS_INTERNAL.SET_MUTED_SPEAKER, { value: muted }, causeId);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._monitorCallStart = function () {
        if (this.state === 3 && this.participants.length && !this.callStartedAt) {
            this.callStartedAt = new Date();
        }
    };
    SlimCoreElectronCall.prototype._addParticipantEntry = function (participant) {
        this.participantMap[participant.id] = participant;
        this.participants.push(participant);
    };
    SlimCoreElectronCall.prototype._removeParticipantEntry = function (participantId) {
        if (!this.participantMap.hasOwnProperty(participantId)) {
            return null;
        }
        var participant = this.participantMap[participantId];
        delete this.participantMap[participantId];
        _.pull(this.participants, participant);
        if (participant) {
            this.raiseChanged();
        }
        return participant;
    };
    SlimCoreElectronCall.prototype._onThreadIdChanged = function (threadId) {
        if (threadId && (this.threadId !== threadId)) {
            this.threadId = threadId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onMessageIdChanged = function (messageId) {
        if (messageId && (this.messageId !== messageId)) {
            this.messageId = messageId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onSelfParticipantRoleChanged = function (role) {
        if (role !== this.role) {
            this._logger.info("Role for self is set to " + role);
            this.role = role;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateMeetingRole = function (meetingRole) {
        if (meetingRole !== this.meetingRole) {
            this.meetingRole = meetingRole;
            this._logger.info("_updateMeetingRole: " + this.meetingRole);
            this.event('meetingRoleUpdated').raise(this.meetingRole);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateTransferorMri = function (transferorMri) {
        var formattedTransferorMri = mriUtils_1.stripMriAliases(transferorMri);
        if (formattedTransferorMri !== this.transferorMri) {
            this.transferorMri = formattedTransferorMri;
            this._logger.info("_transferorMri: " + this.transferorMri);
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateActiveVideoChannelCount = function (channelCount) {
        if (channelCount !== this.activeVideoChannelCount) {
            this._logger.info("_updateActiveVideoChannelCount to " + channelCount);
            this.activeVideoChannelCount = channelCount;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._onSelfParticipantTenantIdChanged = function (tenantId) {
        if (tenantId !== this.tenantId) {
            this._logger.info("TenantId for self is set to " + tenantId);
            this.tenantId = tenantId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCall.prototype._updateEndpointDetails = function (rawEndpointDetails) {
        var _this = this;
        var causeId = causeId_1.generateCauseId();
        if (this._rawEndpoints === rawEndpointDetails || !rawEndpointDetails) {
            return;
        }
        try {
            this.endpoints = JSON.parse(rawEndpointDetails);
            this._rawEndpoints = rawEndpointDetails;
            this.endpoints.endpointDetails.forEach(function (endpointDetail) {
                if (endpointDetail.originalId) {
                    _this._participantOperationHandler.resolveOperation(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK, null, endpointDetail.originalId, causeId).catch(function (e) {
                        _this._logger.error("[" + causeId + "]Failed to update call me back participant " + e);
                    });
                }
            });
        }
        catch (err) {
            this._logger.info("[" + causeId + "]Failed to parse raw endpoint details. Error: " + err + ", EndpointDetails: " + rawEndpointDetails);
        }
        this._updateCapabilities(causeId);
        this.raiseChanged();
    };
    SlimCoreElectronCall.prototype._updateMeetingDetails = function (rawMeetingDetails) {
        if (this._rawMeetingDetails === rawMeetingDetails) {
            return;
        }
        try {
            if (!rawMeetingDetails || _.isEmpty(rawMeetingDetails)) {
                this.meetingDetails = null;
            }
            else {
                this.meetingDetails = JSON.parse(rawMeetingDetails);
            }
            this._rawMeetingDetails = rawMeetingDetails;
            this.raiseChanged();
        }
        catch (err) {
            this._logger.warn("Failed to parse the raw meeting details. Error: " + err + ", MeetingDetails: " + rawMeetingDetails);
        }
    };
    SlimCoreElectronCall.prototype._onBroadcastMetadataChanged = function (broadcastMetadata) {
        if (broadcastMetadata) {
            try {
                this.broadcastMetadata = JSON.parse(broadcastMetadata);
                this._logger.info('broadcast metadata updated');
                if (this.broadcastMeeting) {
                    this.broadcastMeeting.metadataChanged(broadcastMetadata);
                }
                this.raiseChanged();
            }
            catch (e) {
                this._logger.info('broadcast metadata invalid, failed to parse');
            }
        }
    };
    SlimCoreElectronCall.prototype._onCallProgressStatusChanged = function (callProgessStatus) {
        if (callProgessStatus !== this._callProgressStatus) {
            this._callProgressStatus = callProgessStatus;
            this.callProgressStatus = callProgessStatus;
            this.event('callProgressStatusChanged').raise(callProgessStatus);
        }
    };
    SlimCoreElectronCall.prototype._getParticipantByObjectId = function (slimcoreObjectId) {
        return _.find(this.participants, function (participant) { return participant.slimcoreObjectId === slimcoreObjectId; });
    };
    SlimCoreElectronCall.prototype._onQualityChanged = function (event) {
        this._logger.info("onQualityChanged: oid=" + event.objectId + ", mtype=" + event.mediaType + ", otype=" + event.objectType + ", type=" + event.type + ", value=" + event.value);
        if ((event.mediaType !== Enums.MediaType.Audio && event.mediaType !== Enums.MediaType.Video)) {
            return;
        }
        if (event.objectType === Enums.ObjectType.Call && event.objectId !== this.slimcoreCallId) {
            return;
        }
        var payload = {
            type: SlimCoreElectronCall.convertQualityEventType(event.type),
            value: SlimCoreElectronCall.convertQualityLevel(event.value),
            mediaType: SlimCoreElectronCall.convertMediaType(event.mediaType),
            isLocalSource: event.objectType === Enums.ObjectType.Call
        };
        if (event.objectType === Enums.ObjectType.Participant) {
            var participant = this._getParticipantByObjectId(event.objectId);
            if (!participant) {
                return;
            }
            payload.id = participant.id;
        }
        if (payload.type && payload.value) {
            if (event.mediaType === Enums.MediaType.Audio && event.type === Enums.QualityEventType.RelayWhiteListing) {
                this._isRelayWhiteListingIssue = true;
                this.event('mediaConnectionWhitelistingWarning').raise();
                this.event('mediaConnectionFailed').raise();
            }
            else {
                this.event('callQualityChanged').raise(payload);
            }
        }
    };
    SlimCoreElectronCall.prototype.getContentSharing = function (contentSharingSlimCoreObjectId) {
        var contentSharing = this._slimcoreInstance.getContentSharing(contentSharingSlimCoreObjectId);
        if (!contentSharing) {
            return null;
        }
        return SlimCoreCommon.wrap(contentSharing, this._settings);
    };
    SlimCoreElectronCall.prototype.createContentSharingSession = function (contentSharingGuid, contentSharingIdentity, subject, initialContentSharingSessionState) {
        var _this = this;
        return Promise.resolve().then(function () {
            var contentSharingSlimCoreObjectId = _this._slimcoreCallHandler.createContentSharing(_this.slimcoreCallId, contentSharingGuid, contentSharingIdentity, subject, initialContentSharingSessionState);
            if (!contentSharingSlimCoreObjectId) {
                throw new Error('Failed to create ContentSharing SlimCore object');
            }
            var slimCoreContentSharing = _this.getContentSharing(contentSharingSlimCoreObjectId);
            if (!slimCoreContentSharing) {
                throw new Error('Failed to create ContentSharing SlimCore native object');
            }
            var slimCoreElectronContentSharingSession = new SlimCoreElectronContentSharing_1.default(_this._logger, _this._settings, _this._slimcoreInstance, _this._slimcoreCallHandler, contentSharingSlimCoreObjectId, slimCoreContentSharing, _this._callTelemetry);
            _this.contentSharingSessions.push(slimCoreElectronContentSharingSession);
            _this.event('contentSharingChanged').raise();
            return slimCoreElectronContentSharingSession;
        });
    };
    SlimCoreElectronCall.prototype._onContentSharingChanged = function () {
        var _this = this;
        var contentSharingObjects = this._slimcoreCallHandler.getContentSharingSessions(this.slimcoreCallId);
        var foundNewSessions = false;
        _.remove(contentSharingObjects, function (contentSharingObjectId) {
            var callObjectId = _this._getIntProperty(_this._slimcoreCallHandler, contentSharingObjectId, SlimCore.Enums.Property.ContentSharingCallId);
            return callObjectId !== _this.slimcoreCallId;
        });
        var contentSharingSessionsRemoved = _.remove(this.contentSharingSessions, function (session) {
            return _.indexOf(contentSharingObjects, session.slimCoreContentSharingObjectId) === -1;
        });
        _.forEach(contentSharingObjects, function (objectId) {
            var existingSession = _.find(_this.contentSharingSessions, function (session) {
                return session.slimCoreContentSharingObjectId === objectId;
            });
            if (!existingSession) {
                var slimCoreContentSharing = _this.getContentSharing(objectId);
                if (slimCoreContentSharing) {
                    var session = new SlimCoreElectronContentSharing_1.default(_this._logger, _this._settings, _this._slimcoreInstance, _this._slimcoreCallHandler, objectId, slimCoreContentSharing, _this._callTelemetry);
                    _this.contentSharingSessions.push(session);
                    _this._logger.info("Added new content sharing session with guid " + session.contentSharingGuid);
                    foundNewSessions = true;
                }
            }
        });
        contentSharingSessionsRemoved.forEach(function (session) {
            _this._logger.info("Removed content sharing session with guid " + session.contentSharingGuid);
            session.setContentSharingStatus(7);
            session.dispose();
        });
        if (foundNewSessions || contentSharingSessionsRemoved.length) {
            this.event('contentSharingChanged').raise();
        }
    };
    SlimCoreElectronCall.prototype.raiseChangedDeferred = function () {
        var _this = this;
        if (!this._raiseChangedDefer) {
            this._raiseChangedDefer = _.defer(function () {
                delete _this._raiseChangedDefer;
                _this.raiseChanged();
            });
        }
    };
    SlimCoreElectronCall.prototype._onParticipantJoinedOrRemovedDeferred = function (causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (!this._onParticipantJoinedOrRemovedDefer) {
            this._onParticipantJoinedOrRemovedDefer = _.defer(function () {
                delete _this._onParticipantJoinedOrRemovedDefer;
                _this._onParticipantJoinedOrRemoved(causeId);
            });
        }
    };
    SlimCoreElectronCall.prototype._updateDominantSpeakerListDeferred = function () {
        var _this = this;
        if (!this._updateDominantSpeakerListDefer) {
            this._updateDominantSpeakerListDefer = _.defer(function () {
                delete _this._updateDominantSpeakerListDefer;
                _this._updateDominantSpeakerList();
            });
        }
    };
    SlimCoreElectronCall.prototype.callStateCanToggleVideo = function () {
        return this.state === 3 ||
            this.state === 4 ||
            this.state === 5 ||
            this.state === 10;
    };
    SlimCoreElectronCall.prototype._startInitialVideoIfReady = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.callStateCanToggleVideo() && this._videoRequestedOnWhileConnecting)) return [3, 3];
                        this._logger.info("[" + causeId + "]Call has been started; turning on video");
                        this._videoRequestedOnWhileConnecting = false;
                        return [4, this.startVideoSafe(causeId)];
                    case 1:
                        _a.sent();
                        if (!this._videoRequestedOffWhileConnecting) return [3, 3];
                        this._logger.info("[" + causeId + "]Call has been started and video turned on; turning off video");
                        this._videoRequestedOffWhileConnecting = false;
                        return [4, this.stopVideo(causeId)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.convertConnectionType = function (connectionType) {
        switch (connectionType) {
            case 0:
                return Enums.ConnectionType.AllSupported;
            case 1:
                return Enums.ConnectionType.NoDirectConnection;
            default:
                return Enums.ConnectionType.AllSupported;
        }
    };
    SlimCoreElectronCall.convertStatusToTerminatedReason = function (status) {
        switch (status) {
            case Enums.CallStatus.Failed:
                return 7;
            case Enums.CallStatus.Finished:
                return 1;
            case Enums.CallStatus.Missed:
                return 9;
            case Enums.CallStatus.Refused:
                return 10;
            case Enums.CallStatus.Busy:
                return 11;
            case Enums.CallStatus.Cancelled:
            case Enums.CallStatus.Unplaced:
                return 12;
            case Enums.CallStatus.Dropped:
                return 4;
            case Enums.CallStatus.DeniedInLobby:
                return 55;
            case Enums.CallStatus.TimedOutInLobby:
                return 56;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertParticipantReasonToTerminatedReason = function (reason) {
        switch (reason) {
            case 0:
                return 1;
            case 1:
            case 5:
            case 6:
            case 7:
            case 43:
                return 5;
            case 46:
                return 59;
            case 59:
                return 73;
            case 2:
                return 9;
            case 3:
                return 10;
            case 4:
                return 2;
            case 8:
                return 24;
            case 9:
                return 3;
            case 10:
                return 4;
            case 12:
                return 14;
            case 11:
                return 0;
            case 13:
                return 15;
            case 14:
                return 16;
            case 15:
                return 17;
            case 16:
                return 18;
            case 17:
                return 19;
            case 18:
                return 20;
            case 19:
                return 11;
            case 20:
                return 21;
            case 21:
                return 22;
            case 22:
                return 23;
            case 25:
                return 33;
            case 26:
                return 36;
            case 27:
                return 37;
            case 30:
                return 41;
            case 28:
                return 39;
            case 31:
                return 42;
            case 29:
                return 40;
            case 32:
                return 43;
            case 33:
                return 44;
            case 34:
                return 45;
            case 35:
                return 46;
            case 36:
                return 47;
            case 37:
                return 48;
            case 38:
                return 49;
            case 39:
                return 50;
            case 40:
                return 51;
            case 41:
                return 52;
            case 42:
                return 54;
            case 47:
                return 61;
            case 53:
                return 66;
            case 54:
                return 67;
            case 55:
                return 68;
            case 56:
                return 69;
            case 57:
                return 71;
            case 58:
                return 72;
            default:
                return 0;
        }
    };
    SlimCoreElectronCall.convertTerminatedReasonToFailureType = function (reason, callGotConnected, mediaGotConnected) {
        switch (reason) {
            case 0:
            case 1:
            case 9:
            case 10:
            case 11:
            case 12:
            case 2:
            case 60:
                return 2;
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 14:
            case 36:
            case 37:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 44:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 59:
            case 73:
            case 66:
            case 67:
            case 68:
            case 69:
            case 71:
            case 72:
                return 0;
            case 4:
                return callGotConnected && mediaGotConnected ? 1 : 0;
            default:
                return 2;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreDtmfTone = function (dtmfTone) {
        switch (dtmfTone) {
            case 0:
                return Enums.DtmfTone.Num0;
            case 1:
                return Enums.DtmfTone.Num1;
            case 2:
                return Enums.DtmfTone.Num2;
            case 3:
                return Enums.DtmfTone.Num3;
            case 4:
                return Enums.DtmfTone.Num4;
            case 5:
                return Enums.DtmfTone.Num5;
            case 6:
                return Enums.DtmfTone.Num6;
            case 7:
                return Enums.DtmfTone.Num7;
            case 8:
                return Enums.DtmfTone.Num8;
            case 9:
                return Enums.DtmfTone.Num9;
            case 10:
                return Enums.DtmfTone.Star;
            case 11:
                return Enums.DtmfTone.Pound;
            case 12:
                return Enums.DtmfTone.A;
            case 13:
                return Enums.DtmfTone.B;
            case 14:
                return Enums.DtmfTone.C;
            case 15:
                return Enums.DtmfTone.D;
            case 16:
                return Enums.DtmfTone.Flash;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreAudioUsageMode = function (audioUsageMode) {
        switch (audioUsageMode) {
            case "Default":
                return Enums.AudioUsageMode.Default;
            case "LongrangeSpeaker":
                return Enums.AudioUsageMode.LongrangeSpeaker;
            case "Auditorium":
                return Enums.AudioUsageMode.Auditorium;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertQualityEventType = function (value) {
        switch (value) {
            case Enums.QualityEventType.NetworkSendQuality:
                return 1;
            case Enums.QualityEventType.NetworkRecvQuality:
                return 2;
            case Enums.QualityEventType.NetworkDelay:
                return 3;
            case Enums.QualityEventType.NetworkBandwidthLow:
                return 4;
            case Enums.QualityEventType.NetworkReconnect:
                return 5;
            case Enums.QualityEventType.NetworkPacketLoss:
                return 6;
            case Enums.QualityEventType.NetworkJitter:
                return 7;
            case Enums.QualityEventType.NetworkRateMatching:
                return 8;
            case Enums.QualityEventType.DeviceCaptureNotFunctioning:
                return 9;
            case Enums.QualityEventType.DeviceRenderNotFunctioning:
                return 10;
            case Enums.QualityEventType.DeviceRenderGlitches:
                return 11;
            case Enums.QualityEventType.DeviceLowSNR:
                return 12;
            case Enums.QualityEventType.DeviceLowSpeechLevel:
                return 13;
            case Enums.QualityEventType.DeviceClipping:
                return 14;
            case Enums.QualityEventType.DeviceEcho:
                return 15;
            case Enums.QualityEventType.PresentationAudioQuality:
                return 16;
            case Enums.QualityEventType.DeviceHalfDuplexAec:
                return 17;
            case Enums.QualityEventType.DeviceMultipleEndpoints:
                return 18;
            case Enums.QualityEventType.DeviceHowling:
                return 19;
            case Enums.QualityEventType.DeviceRenderZeroVolume:
                return 20;
            case Enums.QualityEventType.DeviceRenderMute:
                return 21;
            case Enums.QualityEventType.NetworkSendCatastrophic:
                return 22;
            case Enums.QualityEventType.NetworkRecvCatastrophic:
                return 23;
            case Enums.QualityEventType.CpuInsufficient:
                return 24;
            case Enums.QualityEventType.DeviceCaptureMute:
                return 25;
            case Enums.QualityEventType.DeviceCaptureNotMuteButSilent:
                return 26;
            case Enums.QualityEventType.DeviceSpeakWhileMuted:
                return 27;
            case Enums.QualityEventType.VideoVbssRendered:
                return 28;
            case Enums.QualityEventType.NetworkEthernetInterfaceUsed:
                return 29;
            case Enums.QualityEventType.NetworkWlanInterfaceUsed:
                return 30;
            case Enums.QualityEventType.NetworkWwanInterfaceUsed:
                return 31;
            case Enums.QualityEventType.RelayWhiteListing:
                return 32;
            case Enums.QualityEventType.VideoCapturerDeviceStartFailed:
                return 33;
            case Enums.QualityEventType.VideoCapturerDeviceStartTimedOut:
                return 34;
            case Enums.QualityEventType.VideoCapturerDeviceStartFailureLackSystemRes:
                return 35;
            case Enums.QualityEventType.VideoCapturerDeviceStartFailureMFResConflict:
                return 36;
            case Enums.QualityEventType.ZeroCaptureDevicesEnumerated:
                return 43;
            case Enums.QualityEventType.ZeroRenderDevicesEnumerated:
                return 44;
            case Enums.QualityEventType.NoNetwork:
                return 37;
            case Enums.QualityEventType.NetworkNotWorking:
                return 38;
            case Enums.QualityEventType.DeviceCaptureNotFunctioningAudioSrvNotRunning:
                return 41;
            case Enums.QualityEventType.DeviceRenderNotFunctioningAudioSrvNotRunning:
                return 42;
            case Enums.QualityEventType.DeviceCaptureNotFunctioningDeviceInUse:
                return 39;
            case Enums.QualityEventType.DeviceRenderNotFunctioningDeviceInUse:
                return 40;
            case Enums.QualityEventType.VideoCaptureDeviceFreeze:
                return 45;
            case Enums.QualityEventType.AudioCapturePermissionDenied:
                return 46;
            case Enums.QualityEventType.VideoCapturePermissionDenied:
                return 47;
            case Enums.QualityEventType.VideoCaptureFreezeRecovered:
                return 48;
            case Enums.QualityEventType.DeviceRenderHowling:
                return 49;
            case Enums.QualityEventType.LowFarEndInput:
                return 50;
            case Enums.QualityEventType.RemoteNetworkConnectivityIssue:
                return 52;
            case Enums.QualityEventType.PresentationAudioLoopbackDeviceState:
                return 53;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertQualityLevel = function (value) {
        switch (value) {
            case Enums.QualityLevel.Unknown:
                return 0;
            case Enums.QualityLevel.Good:
                return 1;
            case Enums.QualityLevel.Poor:
                return 2;
            case Enums.QualityLevel.Bad:
                return 3;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertMediaType = function (value) {
        switch (value) {
            case Enums.MediaType.Audio:
                return 0;
            case Enums.MediaType.Video:
                return 1;
            case Enums.MediaType.PanoramicCamera:
                return 2;
            case Enums.MediaType.AppSharing:
                return 3;
            case Enums.MediaType.Data:
                return 4;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.toMediaDirection = function (value) {
        switch (value) {
            case 0:
                return Enums.MediaDirection.Disabled;
            case 3:
                return Enums.MediaDirection.Inactive;
            case 2:
                return Enums.MediaDirection.SendToPeer;
            case 1:
                return Enums.MediaDirection.ReceiveFromPeer;
            case 4:
                return Enums.MediaDirection.Bidirectional;
            default:
                return Enums.MediaDirection.Disabled;
        }
    };
    SlimCoreElectronCall.toAnswerMediaType = function (value) {
        switch (value) {
            case 0:
                return Enums.AnswerMediaType.AnswerWithAudioOnly;
            case 1:
                return Enums.AnswerMediaType.AnswerWithAudioVideo;
            case 2:
                return Enums.AnswerMediaType.AnswerWithScreenshareOnly;
            default:
                return Enums.AnswerMediaType.AnswerWithAudioOnly;
        }
    };
    SlimCoreElectronCall.convertMuteScope = function (value) {
        switch (value) {
            case 0:
                return Enums.MuteScope.All;
            case 1:
                return Enums.MuteScope.Specified;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertToSlimCoreMediaPeerType = function (mediaPeerType) {
        switch (mediaPeerType) {
            case 0:
                return Enums.MediaPeerType.ConsumerTwoParty;
            case 1:
                return Enums.MediaPeerType.ConsumerPstn;
            case 2:
                return Enums.MediaPeerType.ConsumerMultiParty;
            case 3:
                return Enums.MediaPeerType.EnterpriseTwoPartyOnlineOnly;
            case 4:
                return Enums.MediaPeerType.EnterpriseTwoPartyHybrid;
            case 6:
                return Enums.MediaPeerType.EnterprisePstnOnlineOnly;
            case 7:
                return Enums.MediaPeerType.EnterprisePstnHybrid;
            case 5:
                return Enums.MediaPeerType.EnterpriseMultiParty;
            case 8:
                return Enums.MediaPeerType.EnterpriseFederated;
            case 9:
                return Enums.MediaPeerType.EnterpriseUnknown;
            case 10:
                return Enums.MediaPeerType.EnterpriseMultiPartyBroadcasting;
            default:
                return undefined;
        }
    };
    SlimCoreElectronCall.convertPushHandlingResult = function (result) {
        switch (result) {
            case Enums.PushHandlingResult.BadNotificationPayload:
                return { code: 0, fatal: true };
            case Enums.PushHandlingResult.CallSetupSucceeded:
                return { code: 1, success: true };
            case Enums.PushHandlingResult.BadNotificationEventType:
                return { code: 3, fatal: true };
            case Enums.PushHandlingResult.CallSetupSucceededCallAlreadyExists:
                return { code: 4 };
            case Enums.PushHandlingResult.CallSetupFailedCannotConnect:
                return { code: 5, fatal: true };
            case Enums.PushHandlingResult.CallSetupFailedNoSignaling:
                return { code: 6, fatal: true };
            case Enums.PushHandlingResult.CallSetupFailedConflict:
                return { code: 7 };
            case Enums.PushHandlingResult.CallSetupFailedPushIgnored:
                return { code: 8 };
            case Enums.PushHandlingResult.CallSetupFailedAnsweredElsewhere:
                return { code: 9 };
            case Enums.PushHandlingResult.CallSetupFailedAlreadyEnded:
                return { code: 10 };
            case Enums.PushHandlingResult.CallSetupProgress:
                return { code: 11, success: true };
            case Enums.PushHandlingResult.CallSetupFailed:
            case Enums.PushHandlingResult.CallSetupFailedNoPermission:
            case Enums.PushHandlingResult.CallSetupFailedNoCommonCodec:
            default:
                return { code: 2, fatal: true };
        }
    };
    Object.defineProperty(SlimCoreElectronCall.prototype, "origin", {
        get: function () {
            return this._origin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCall.prototype, "isAudioStreamConnected", {
        get: function () {
            return this._isAudioStreamConnected;
        },
        set: function (value) {
            if (this._isAudioStreamConnected === value) {
                return;
            }
            this._isAudioStreamConnected = value;
            this._wasAudioStreamConnected = this._wasAudioStreamConnected || value;
            this.raiseChanged();
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCall.isCallConnected = function (status) {
        return status === Enums.CallStatus.InProgress;
    };
    SlimCoreElectronCall.isObserving = function (status) {
        return status === Enums.CallStatus.Observing;
    };
    SlimCoreElectronCall.isCallRinging = function (status) {
        switch (status) {
            case Enums.CallStatus.RingingOut:
            case Enums.CallStatus.RingingIn:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCall.isCallConnecting = function (status) {
        return status === Enums.CallStatus.Routing;
    };
    SlimCoreElectronCall.isCallEarlyMedia = function (status) {
        return status === Enums.CallStatus.EarlyMedia;
    };
    SlimCoreElectronCall.isCallInLobby = function (status) {
        return status === Enums.CallStatus.InLobby;
    };
    SlimCoreElectronCall.isCallPreheating = function (status) {
        return status === Enums.CallStatus.Preheating;
    };
    SlimCoreElectronCall.isCallPreheated = function (status) {
        return status === Enums.CallStatus.Preheated;
    };
    SlimCoreElectronCall.isCallTerminated = function (status) {
        switch (status) {
            case Enums.CallStatus.Missed:
            case Enums.CallStatus.Refused:
            case Enums.CallStatus.Busy:
            case Enums.CallStatus.Cancelled:
            case Enums.CallStatus.Finished:
            case Enums.CallStatus.Failed:
            case Enums.CallStatus.Dropped:
            case Enums.CallStatus.DeniedInLobby:
            case Enums.CallStatus.TimedOutInLobby:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCall.prototype._cleanCallResources = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, participantsCleanUpPromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnLogger = this._logger.createFnLogger('cleanCallResources', causeId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 7, 8]);
                        participantsCleanUpPromises = _.map(this.participants, function (p) {
                            return SlimCoreCommon.forgetAndLog(p.stopVideos(), fnLogger, 'cleanCallResources: stopping participant videos failed');
                        });
                        return [4, Promise.all(participantsCleanUpPromises)];
                    case 2:
                        _a.sent();
                        if (!this._localScreenShareStream) return [3, 4];
                        return [4, SlimCoreCommon.forgetAndLog(this.stopScreenSharing(false, causeId), fnLogger, 'cleanCallResources: LocalScreenShare stop failed')];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!this._localVideo) return [3, 6];
                        return [4, SlimCoreCommon.forgetAndLog(this._localVideo.stop(causeId), fnLogger, 'cleanCallResources: LocalVideo stop failed')];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        this.contentSharingSessions.forEach(function (session) {
                            session.setContentSharingStatus(7);
                            session.dispose(causeId);
                        });
                        this.contentSharingSessions = [];
                        return [3, 8];
                    case 7:
                        this.dispose(causeId);
                        return [7];
                    case 8: return [2];
                }
            });
        });
    };
    SlimCoreElectronCall.prototype.dispose = function (causeId) {
        var fnLogger = this._logger.createFnLogger('dispose', causeId);
        fnLogger.info('start');
        if (this.subscriptions.length) {
            fnLogger.info(this.subscriptions.length + " subscriptions will be lost");
        }
        if (this._slimCoreElectronRemoteManager) {
            this._slimCoreElectronRemoteManager.dispose();
        }
        this.mediaStreams[0] = [];
        this.mediaStreams[1] = [];
        if (this._localScreenShareStream) {
            this._localScreenShareStream.dispose(causeId);
            this._localScreenShareStream = null;
        }
        if (this._localVideo) {
            this._localVideo.dispose(causeId);
            this._localVideo = null;
        }
        if (this.screenSharingControl) {
            this.screenSharingControl.dispose();
            this.screenSharingControl = null;
        }
        if (this.dataChannelAdapter) {
            this.dataChannelAdapter.dispose();
            this.dataChannelAdapter = null;
        }
        if (this._dataChannel) {
            this._dataChannel.dispose();
            this._dataChannel = null;
        }
        if (this._dataChannelUsers) {
            this._dataChannelUsers = null;
        }
        this.participants.forEach(function (p) { return p.dispose(); });
        _super.prototype.dispose.call(this, causeId);
    };
    SlimCoreElectronCall.prototype.testTriggerMediaRelayWhiteListingIssue = function () {
        throw new Error('testTriggerMediaRelayWhiteListingIssue not implemented in electron call');
    };
    SlimCoreElectronCall.prototype.testSetCallState = function (state) {
        this._logger.info("Overwriting call state for test purposes: " + this.state + " -> " + state);
        this.state = state;
    };
    SlimCoreElectronCall.prototype.addGroupModality = function (payload, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS.ADD_GROUP_MODALITY, causeId);
        if (this.slimcoreCallId === 0) {
            return Promise.reject(new Error('call is not initialized yet'));
        }
        var additionalData;
        if (payload.additionalData) {
            try {
                additionalData = JSON.stringify(payload.additionalData);
            }
            catch (error) {
                fnLogger.logFailure(error);
                throw error;
            }
        }
        fnLogger.info("threadId = " + payload.threadId + " messageId = " + payload.messageId + " additionalData = " + piiUtils.scrubMriOrOmit(additionalData));
        return Promise.resolve()
            .then(function () { return _this._slimcoreCallHandler.addGroupModality(_this.slimcoreCallId, payload.threadId, payload.messageId, additionalData, causeId); })
            .catch(function (error) {
            fnLogger.logFailure(error);
            throw error;
        });
    };
    SlimCoreElectronCall.prototype.getMediaTelemetry = function () {
        return Promise.reject('Not supported');
    };
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.INITIALIZE, { type: operationDecorators_1.OPERATION_TYPE.SYNC }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SlimCoreElectronCall.prototype, "init", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.JOIN_CALL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(1, operationDecorators_1.callStartOptions), __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "join", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_CALL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(0, operationDecorators_1.callStartOptions), __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "start", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_CALL_TO_VOICE_MAIL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startCallToVoicemail", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_CALL_WITH_NUDGE, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(1, operationDecorators_1.callStartOptions), __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startCallWithNudge", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_CALL_AND_UNPARK, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(2, operationDecorators_1.callStartOptions), __param(3, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startAndUnpark", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SUBSCRIBE, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "joinCallWithoutCallModality", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.JOIN_PREHEATED_CALL, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_START_OR_JOIN_INITIATED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "joinPreheatedCall", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_VIDEO, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startVideo", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.STOP_VIDEO, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "stopVideo", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.START_LOCAL_VIDEO, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "_startLocalVideo", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.DUMP_VIDEO_SOURCE_IMAGES, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "dumpVideoSourceImages", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_SCREEN_SHARING, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(3, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startScreenSharing", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.STOP_SCREEN_SHARING, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "stopScreenSharing", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startDataChannel", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "stopDataChannel", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SHARE_SYSTEM_SOUNDS, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "shareSystemSound", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.BLIND_TRANSFER, { singular: true, type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "callBlindTransfer", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SAFE_TRANSFER, { singular: true, type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "callSafeTransfer", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.TRANSFER_TO_VOICEMAIL, { singular: true, type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "transferCallToVoicemail", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.CONSULTATIVE_TRANSFER, { singular: true, type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "callConsultativeTransfer", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.PARK_CALL, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "park", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.MUTE, { waitFor: callConstants_1.CALL_OPERATIONS.UNMUTE }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "mute", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.UNMUTE, { waitFor: callConstants_1.CALL_OPERATIONS.MUTE }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "unmute", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.MUTE_SPEAKER, { waitFor: callConstants_1.CALL_OPERATIONS.UNMUTE_SPEAKER }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "muteSpeaker", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.UNMUTE_SPEAKER, { waitFor: callConstants_1.CALL_OPERATIONS.MUTE_SPEAKER }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "unmuteSpeaker", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.MUTE_PARTICIPANTS, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Array, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "muteParticipants", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.HOLD, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "hold", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.UNHOLD, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "unhold", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.UPDATE_ENDPOINT_METADATA, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "updateEndpointMetadata", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SEND_DTMF_TONE),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "sendDtmfTone", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SET_AUDIO_USAGE, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "setAudioUsageMode", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.START_AUDIO, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "startAudio", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.STOP_AUDIO, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "stopAudio", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.ASSIMILATE, { waitFor: callConstants_1.CALL_OPERATIONS.ASSIMILATE }),
        __param(3, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, String, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "assimilate", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.STOP_CALL, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "stop", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.REJECT, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "reject", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_LEAVE_CALL, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "_leaveSlimCoreCall", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.INCOMING_INITIALIZE, { triggerAttach: true }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Object]),
        __metadata("design:returntype", void 0)
    ], SlimCoreElectronCall.prototype, "incomingCallInit", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.ACKNOWLEDGE, { type: operationDecorators_1.OPERATION_TYPE.CHAINED, triggerAttach: true }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "acknowledge", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.ACCEPT, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "accept", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.MERGE_WITH_PICKUP_CODE, { operationIdKey: 'pickupCode' }),
        __param(0, operationDecorators_1.operationId), __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "mergeWithPickupCode", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.MERGE_CALL, { singular: true, waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "merge", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.RECONNECT),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "reconnect", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.ELECTRON_PROVIDE_CQF, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Number, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "provideCallQualityFeedback", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADMIT_PARTICIPANT),
        __param(0, operationDecorators_1.operationId), __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "admitParticipant", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.PARTICIPANT_OPERATIONS.CALL_ME_BACK),
        __param(0, operationDecorators_1.operationId), __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "callMeBack", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.CALL_OPERATIONS.NUDGE_PARTICIPANTS),
        __param(0, operationDecorators_1.operationId), __param(3, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Array, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "nudgeParticipants", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.CALL_OPERATIONS.UPDATE_MEETING_ROLE),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "updateMeetingRoles", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANT),
        __param(0, operationDecorators_1.operationId), __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "addParticipant", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.PARTICIPANT_OPERATIONS.ADD_PARTICIPANTS),
        __param(0, operationDecorators_1.operationId), __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "addParticipants", null);
    __decorate([
        operationDecorators_1.participantOperation(callConstants_1.PARTICIPANT_OPERATIONS.REMOVE_PARTICIPANT),
        __param(0, operationDecorators_1.operationId), __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object, String, Number]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "removeParticipant", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.SET_MAX_VIDEO_CHANNELS, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "setMaxVideoChannels", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.CREATE_CONTENT_SHARING_SESSION, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, String, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "createContentSharingSession", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS.ADD_GROUP_MODALITY, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY }),
        __param(1, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronCall.prototype, "addGroupModality", null);
    return SlimCoreElectronCall;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronCall;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var async = __webpack_require__(4);
var asyncOperationHandler_1 = __webpack_require__(24);
var callConstants_1 = __webpack_require__(8);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var Enums = SlimCore.Enums;
exports.DATA_SOURCE_ID_ANY = 0xFFFFFFFE;
var SlimCoreElectronDataChannel = (function (_super) {
    __extends(SlimCoreElectronDataChannel, _super);
    function SlimCoreElectronDataChannel(logger, settings, engine, _call, _slimcoreCallHandler, _dataChannel, _dataChannelUsers, id) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronDataChannel"; }), settings, engine) || this;
        _this._call = _call;
        _this._slimcoreCallHandler = _slimcoreCallHandler;
        _this._dataChannel = _dataChannel;
        _this._dataChannelUsers = _dataChannelUsers;
        _this.id = id;
        _this._dataChannelActive = false;
        _this._protocolDataSource = null;
        _this._protocolDataSink = null;
        _this._dataChannelAdapterSetInternalSourceSink = null;
        _this._lastDataChannelState = Enums.DataChannelStatus.Unknown;
        _this._asyncOperationHandler = new asyncOperationHandler_1.default(_this._logger);
        _this._logger.info('Setting DataChannel on all users');
        for (var i = 0; i < _this._dataChannelUsers.length; i++) {
            if (_this._dataChannelUsers[i]) {
                try {
                    _this._dataChannelUsers[i].setDataChannel(_this);
                }
                catch (error) {
                    _this._logger.error("Exception calling setDataChannel for i=" + i + " error=" + error);
                }
            }
        }
        _this._hookSlimCorePropertyChangedEvents();
        return _this;
    }
    SlimCoreElectronDataChannel.prototype.setAdapterSourceSinkCallback = function (setSourceSink) {
        this._dataChannelAdapterSetInternalSourceSink = setSourceSink;
    };
    SlimCoreElectronDataChannel.prototype._hookSlimCorePropertyChangedEvents = function () {
        var _this = this;
        this._registerDisposable(this._slimcoreInstance.handle('object-property-changed', { objectId: this.id, propKey: Enums.Property.DataChannelStatus }, function (data) { return _this._onDataChannelStatusChanged(data.value); }));
        var dataChannelStatus = this._getIntProperty(this._slimcoreCallHandler, this.id, Enums.Property.DataChannelStatus);
        this._onDataChannelStatusChanged(dataChannelStatus);
    };
    SlimCoreElectronDataChannel.prototype.start = function (negotiationTag) {
        var _this = this;
        if (this._dataChannelActive) {
            this._logger.info('start() called when channel already active');
            return Promise.resolve();
        }
        if (this._asyncOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL)) {
            this._logger.info('start promise already exists, returning previous promise');
        }
        else {
            this._asyncOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL);
            async.asap(function () { return _this._startDataChannel(negotiationTag); });
        }
        return this._asyncOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL);
    };
    SlimCoreElectronDataChannel.prototype.stop = function (negotiationTag) {
        var _this = this;
        if (!this._dataChannelActive) {
            this._logger.info('stop() called when channel not active');
            return Promise.resolve();
        }
        if (this._asyncOperationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL)) {
            this._logger.info('stop promise already exists, returning previous promise');
        }
        else {
            this._asyncOperationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL);
            async.asap(function () { return _this._stopDataChannel(negotiationTag); });
        }
        return this._asyncOperationHandler.waitForOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL);
    };
    SlimCoreElectronDataChannel.prototype.registerDataSource = function (dataSource) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.registerDataSource(dataSource); });
    };
    SlimCoreElectronDataChannel.prototype.unregisterDataSource = function (dataSource) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.unregisterDataSource(dataSource); });
    };
    SlimCoreElectronDataChannel.prototype.registerDataSink = function (dataSink) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.registerDataSink(dataSink); });
    };
    SlimCoreElectronDataChannel.prototype.unregisterDataSink = function (dataSink) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.unregisterDataSink(dataSink); });
    };
    SlimCoreElectronDataChannel.prototype.sendUserEvents = function (events, participantIds) {
        var _this = this;
        return async.asap(function () { return _this._dataChannel.sendUserEvents(events, participantIds); });
    };
    SlimCoreElectronDataChannel.prototype._onDataChannelStatusChanged = function (dataChannelStatus) {
        this._logger.info("Data channel status = " + dataChannelStatus);
        if (dataChannelStatus === Enums.DataChannelStatus.Active) {
            this._asyncOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL);
            try {
                this._dataChannel.setDataDevices();
            }
            catch (error) {
                this._logger.error("setDataDevices threw exception: " + error);
            }
            if (this._dataChannel && !this._dataChannelActive) {
                this._dataChannelActive = true;
                this._createAndAttachProtocolDevices();
                if (this._dataChannelAdapterSetInternalSourceSink) {
                    this._dataChannelAdapterSetInternalSourceSink(Enums.DataDeviceId.Protocol, this._protocolDataSource, this._protocolDataSink);
                }
                this._logger.info('Data channel ready');
            }
        }
        else if (dataChannelStatus === Enums.DataChannelStatus.Available) {
            this._asyncOperationHandler.maybeResolveOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL);
            if (this._dataChannel && this._dataChannelActive) {
                this._dataChannelActive = false;
                this._detachAndDeleteProtocolDevices();
                this._logger.info('Data channel disposed');
            }
        }
        if (this._lastDataChannelState === Enums.DataChannelStatus.Starting && dataChannelStatus !== Enums.DataChannelStatus.Active) {
            this._asyncOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS.START_DATA_CHANNEL);
        }
        else if (this._lastDataChannelState === Enums.DataChannelStatus.Stopping && dataChannelStatus !== Enums.DataChannelStatus.Available) {
            this._asyncOperationHandler.maybeRejectOperation(callConstants_1.CALL_OPERATIONS.STOP_DATA_CHANNEL);
        }
        for (var i = 0; i < this._dataChannelUsers.length; i++) {
            try {
                this._dataChannelUsers[i].onDataChannelStatusChanged(dataChannelStatus);
            }
            catch (error) {
                this._logger.error("Exception calling onDataChannelStatusChanged for i=" + i + " error=" + error);
            }
        }
        if (this._lastDataChannelState !== dataChannelStatus) {
            this.event('stateChange').raise(SlimCoreElectronDataChannel._mapDataChannelStatus(dataChannelStatus));
            this._lastDataChannelState = dataChannelStatus;
        }
    };
    SlimCoreElectronDataChannel.prototype._updateProtocolDataSource = function (dataSource) {
        this._logger.info('Setting Protocol DataSource on all users');
        for (var i = 0; i < this._dataChannelUsers.length; i++) {
            if (this._dataChannelUsers[i]) {
                try {
                    this._dataChannelUsers[i].setProtocolDataSource(dataSource);
                }
                catch (error) {
                    this._logger.error("Exception calling setProtocolDataSource for i=" + i + " error=" + error);
                }
            }
        }
    };
    SlimCoreElectronDataChannel.prototype._createAndAttachProtocolDevices = function () {
        var _this = this;
        this._logger.info('_createAndAttachProtocolDevices()');
        if (!SlimCoreCommon.hasCreateDataSource(this._slimcoreInstance) || !SlimCoreCommon.hasCreateDataSink(this._slimcoreInstance)) {
            this._logger.warn('createDataSource or createDataSink not implemented');
            return;
        }
        if (this._dataChannel) {
            if (!this._protocolDataSource) {
                this._protocolDataSource = SlimCoreCommon.createDataSource(this._slimcoreInstance, Enums.DataDeviceId.Protocol);
                try {
                    this._dataChannel.registerDataSource(this._protocolDataSource);
                    this._logger.info('created Protocol data source');
                }
                catch (error) {
                    this._logger.error("registerDataSource threw exception: " + error);
                }
            }
            if (!this._protocolDataSink) {
                this._protocolDataSink = SlimCoreCommon.createDataSink(this._slimcoreInstance, Enums.DataDeviceId.Protocol);
                try {
                    this._dataChannel.registerDataSink(this._protocolDataSink);
                    this._logger.info('created Protocol data sink');
                }
                catch (error) {
                    this._logger.error("registerDataSink threw exception: " + error);
                }
            }
            this._protocolDataSink.on('data', (function (args) {
                try {
                    var protocolMessage = JSON.parse(SlimCoreCommon.bufferToString(args.data));
                    if (protocolMessage.type !== 1) {
                        if (protocolMessage.type >= _this._dataChannelUsers.length) {
                            _this._logger.error("Error calling processProtocolMessage i=" + protocolMessage.type + " error=Index out of bounds");
                        }
                        try {
                            var senderParticipant = _this._call.mapDataChannelSourceIdToParticipant(args.sourceID);
                            var senderParticipantId = void 0;
                            if (senderParticipant) {
                                var p = senderParticipant;
                                senderParticipantId = p.getParticipantIdForSourceId(4, args.sourceID);
                            }
                            _this._dataChannelUsers[protocolMessage.type].processProtocolMessage(protocolMessage.message, senderParticipant, senderParticipantId, args.sourceID);
                        }
                        catch (error) {
                            _this._logger.error("Error calling processProtocolMessage i=" + protocolMessage.type + " error=" + error);
                        }
                    }
                }
                catch (error) {
                    _this._logger.error("Error handling protocol message error=" + error);
                }
            }));
            this._updateProtocolDataSource(this._protocolDataSource);
        }
        else {
            this._logger.warn('_createAndAttachProtocolDevices() null dataChannel');
        }
    };
    SlimCoreElectronDataChannel.prototype._detachAndDeleteProtocolDevices = function () {
        this._logger.info('_detachAndDeleteProtocolDevices()');
        if (this._protocolDataSink) {
            this._protocolDataSink.removeAllListeners('data');
        }
        if (this._dataChannel) {
            if (this._protocolDataSource) {
                try {
                    this._dataChannel.unregisterDataSource(this._protocolDataSource);
                }
                catch (error) {
                    this._logger.warn("unregisterDataSource threw exception for protocol, call probably ended: " + error);
                }
                this._protocolDataSource = null;
                this._updateProtocolDataSource(null);
                this._logger.info('deleted Protocol data source');
            }
            if (this._protocolDataSink) {
                try {
                    this._dataChannel.unregisterDataSink(this._protocolDataSink);
                }
                catch (error) {
                    this._logger.warn("unregisterDataSink threw exception for protocol, call probably ended: " + error);
                }
                this._protocolDataSink = null;
                this._logger.info('deleted Protocol data sink');
            }
        }
        else {
            this._logger.warn('_detachAndDeleteProtocolDevices() null dataChannel');
        }
    };
    SlimCoreElectronDataChannel.prototype._startDataChannel = function (negotiationTag) {
        this._logger.info('_startDataChannel()');
        if (this._dataChannel) {
            try {
                this._dataChannel.start(negotiationTag);
            }
            catch (error) {
                this._logger.error("_dataChannel.start threw exception: " + error);
            }
            this._logger.info('Data channel started');
        }
    };
    SlimCoreElectronDataChannel.prototype._stopDataChannel = function (negotiationTag) {
        this._logger.info('_stopDataChannel()');
        if (this._dataChannel) {
            try {
                this._dataChannel.stop(negotiationTag);
            }
            catch (error) {
                this._logger.error("_dataChannel.stop threw exception: " + error);
            }
            this._logger.info('Data channel stopping');
        }
    };
    SlimCoreElectronDataChannel._mapDataChannelStatus = function (dataChannelStatus) {
        switch (dataChannelStatus) {
            case Enums.DataChannelStatus.Available:
                return 1;
            case Enums.DataChannelStatus.Starting:
                return 2;
            case Enums.DataChannelStatus.Active:
                return 3;
            case Enums.DataChannelStatus.Stopping:
                return 4;
            case Enums.DataChannelStatus.NotStarted:
                return 5;
            case Enums.DataChannelStatus.Unknown:
            default:
                return 0;
        }
    };
    SlimCoreElectronDataChannel.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronDataChannel.dispose()');
        this._detachAndDeleteProtocolDevices();
        this._call = null;
        if (this._dataChannel) {
            if (this._dataChannel.dispose) {
                this._dataChannel.dispose();
            }
            this._dataChannel = null;
        }
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronDataChannel;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronDataChannel;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rt_js_bindings_1 = __webpack_require__(7);
var causeId_1 = __webpack_require__(2);
var logUtils_1 = __webpack_require__(9);
var piiUtils_1 = __webpack_require__(5);
var tsCallingVersionProvider_1 = __webpack_require__(10);
var MAX_IN_CALL_EVENTS = 150;
var OperationStatus;
(function (OperationStatus) {
    OperationStatus["Pending"] = "Pending";
    OperationStatus["Success"] = "Success";
    OperationStatus["Failure"] = "Failure";
})(OperationStatus || (OperationStatus = {}));
var EventType;
(function (EventType) {
    EventType[EventType["Event"] = 0] = "Event";
    EventType[EventType["Operation"] = 1] = "Operation";
})(EventType || (EventType = {}));
var Event = (function () {
    function Event(eventName, eventStartTime, type, causeId, data) {
        this.eventName = eventName;
        this.eventStartTime = eventStartTime;
        this.type = type;
        this.causeId = causeId;
        this.status = OperationStatus.Pending;
        this.eventStartTimestamp = new Date().getTime();
        this.data = [];
        if (this.type === EventType.Event) {
            delete this.status;
        }
        if (data) {
            this.data.push(data);
        }
    }
    Object.defineProperty(Event.prototype, "variant", {
        set: function (value) {
            this.eventVariant = value;
        },
        enumerable: true,
        configurable: true
    });
    Event.prototype.recordSuccess = function (result, resultCauseId) {
        this.recordResult(true, result, resultCauseId);
    };
    Event.prototype.recordFailure = function (error, resultCauseId) {
        this.recordResult(false, error, resultCauseId);
    };
    Event.prototype.addData = function (data) {
        this.data.push(data);
    };
    Event.prototype.isPending = function () {
        return this.status === OperationStatus.Pending;
    };
    Event.prototype.getEvent = function () {
        var _this = this;
        var _a;
        var rawEvent = {
            start: this.eventStartTime,
            duration: this.duration,
            status: this.status,
            result: this.result,
            causeId: this.causeId,
            resultCauseId: this.resultCauseId,
            variant: this.eventVariant,
            data: this.data
                .map(function (d) { return _this.prepareData(d, true); })
                .filter(function (d) { return !!d; })
        };
        if (this.type === EventType.Event) {
            delete rawEvent.status;
        }
        if (!rawEvent.data.length) {
            delete rawEvent.data;
        }
        if (!rawEvent.causeId) {
            delete rawEvent.causeId;
        }
        if (!rawEvent.resultCauseId) {
            delete rawEvent.resultCauseId;
        }
        if (!rawEvent.result) {
            delete rawEvent.result;
        }
        if (!rawEvent.variant) {
            delete rawEvent.variant;
        }
        return _a = {},
            _a[this.eventName] = rawEvent,
            _a;
    };
    Event.prototype.recordResult = function (success, result, resultCauseId) {
        this.status = success ? OperationStatus.Success : OperationStatus.Failure;
        this.result = this.prepareData(result);
        if (this.causeId !== resultCauseId) {
            this.resultCauseId = resultCauseId;
        }
        this.duration = new Date().getTime() - this.eventStartTimestamp;
    };
    Event.prototype.prepareData = function (data, returnFullObject) {
        if (returnFullObject === void 0) { returnFullObject = false; }
        var type = typeof data;
        if (data === undefined || data === null) {
            return '';
        }
        else if (type === 'string') {
            return piiUtils_1.scrubMriOrOmit(data);
        }
        else if (type === 'number' || type === 'boolean') {
            return String(data);
        }
        else if (type === 'function') {
            return '';
        }
        else if (data instanceof Error) {
            return data.toString();
        }
        else {
            try {
                if (Object.keys(data).length) {
                    return returnFullObject ? data : logUtils_1.getPIISafeObject(data);
                }
                return '';
            }
            catch (e) {
                return 'invalid';
            }
        }
    };
    return Event;
}());
var CALL_TERMINATING_END;
(function (CALL_TERMINATING_END) {
    CALL_TERMINATING_END["LOCAL"] = "Local";
    CALL_TERMINATING_END["REMOTE"] = "Remote";
})(CALL_TERMINATING_END = exports.CALL_TERMINATING_END || (exports.CALL_TERMINATING_END = {}));
var RESULT_VALUE;
(function (RESULT_VALUE) {
    RESULT_VALUE["SUCCESS"] = "Success";
    RESULT_VALUE["FAILURE"] = "Failure";
})(RESULT_VALUE = exports.RESULT_VALUE || (exports.RESULT_VALUE = {}));
var DIRECTION;
(function (DIRECTION) {
    DIRECTION["INCOMING"] = "Incoming";
    DIRECTION["OUTGOING"] = "Outgoing";
})(DIRECTION = exports.DIRECTION || (exports.DIRECTION = {}));
var SELF_PARTICIPANT_ROLE;
(function (SELF_PARTICIPANT_ROLE) {
    SELF_PARTICIPANT_ROLE["CALLER"] = "caller";
    SELF_PARTICIPANT_ROLE["CALLEE"] = "callee";
    SELF_PARTICIPANT_ROLE["JOIN"] = "join";
    SELF_PARTICIPANT_ROLE["SUBSCRIBE"] = "SUBSCRIBE";
})(SELF_PARTICIPANT_ROLE = exports.SELF_PARTICIPANT_ROLE || (exports.SELF_PARTICIPANT_ROLE = {}));
var TelemetryUtilities = (function () {
    function TelemetryUtilities(logger, startTime, maxEventsExceeded) {
        this.logger = logger;
        this.startTime = startTime;
        this.maxEventsExceeded = maxEventsExceeded;
        this.recordedEvents = [];
        this.ongoingOperations = {};
    }
    TelemetryUtilities.prototype.recordEvent = function (eventName, piiSafeData, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        this.logger.debug('Event:', eventName, rt_js_bindings_1.pii.Omit(piiSafeData));
        var event = new Event(eventName, this.getEventStartTime(), EventType.Event, causeId, piiSafeData);
        this.pushToRecordedEvents(event);
        return event;
    };
    TelemetryUtilities.prototype.recordOperationSuccess = function (eventName, piiSafeData, eventId, causeId) {
        if (piiSafeData === void 0) { piiSafeData = null; }
        this.logger.info('Event success:', causeId, eventName, rt_js_bindings_1.pii.Omit(eventId), rt_js_bindings_1.pii.Omit(piiSafeData));
        this.recordOperationResult(eventName, piiSafeData, true, eventId, causeId);
    };
    TelemetryUtilities.prototype.recordOperationFailure = function (eventName, piiSafeData, eventId, causeId) {
        this.logger.info('Event failure:', eventName, rt_js_bindings_1.pii.Omit(eventId), piiSafeData);
        this.recordOperationResult(eventName, piiSafeData, false, eventId, causeId);
    };
    TelemetryUtilities.prototype.maybeRecordOperationSuccess = function (eventName, piiSafeData, eventId, causeId) {
        if (piiSafeData === void 0) { piiSafeData = null; }
        if (this.hasOngoingEvent(eventName, eventId)) {
            this.recordOperationSuccess(eventName, piiSafeData, eventId, causeId);
        }
    };
    TelemetryUtilities.prototype.maybeRecordOperationFailure = function (eventName, piiSafeData, eventId, causeId) {
        if (this.hasOngoingEvent(eventName, eventId)) {
            this.recordOperationFailure(eventName, piiSafeData, eventId, causeId);
        }
    };
    TelemetryUtilities.prototype.recordOperationResult = function (eventName, piiSafeData, success, eventId, causeId) {
        if (!this.hasOngoingEvent(eventName, eventId)) {
            this.recordOperation(eventName, causeId, eventId);
        }
        var event = this.ongoingOperations[eventName];
        if (eventId) {
            event = event[eventId];
        }
        if (success) {
            event.recordSuccess(piiSafeData, causeId);
        }
        else {
            event.recordFailure(piiSafeData, causeId);
        }
        if (eventId) {
            delete this.ongoingOperations[eventName][eventId];
        }
        else {
            delete this.ongoingOperations[eventName];
        }
    };
    TelemetryUtilities.prototype.recordOperation = function (eventName, causeId, eventId) {
        this.logger.debug("Event create: " + eventId, eventName, rt_js_bindings_1.pii.Omit(eventId));
        var event = new Event(eventName, this.getEventStartTime(), EventType.Operation, causeId);
        this.logger.debug("Event create: " + logUtils_1.getPIISafeObject(this.ongoingOperations));
        if (!this.ongoingOperations[eventName]) {
            this.ongoingOperations[eventName] = {};
        }
        if (eventId) {
            this.ongoingOperations[eventName][eventId] = event;
        }
        else {
            this.ongoingOperations[eventName] = event;
        }
        this.pushToRecordedEvents(event);
        return event;
    };
    TelemetryUtilities.prototype.setOperationVariant = function (eventName, variant, eventId) {
        var event;
        if (eventId) {
            event = this.ongoingOperations[eventName][eventId];
        }
        else {
            event = this.ongoingOperations[eventName];
        }
        if (event) {
            event.variant = variant;
        }
        else {
            this.logger.error("Could not find operation " + eventName + " to set variant " + variant);
        }
    };
    TelemetryUtilities.prototype.updateOperationData = function (eventName, piiSafeData, causeId, eventId) {
        try {
            if (!this.ongoingOperations[eventName]) {
                this.recordEvent(eventName, piiSafeData, causeId);
                return;
            }
            if (eventId) {
                if (this.ongoingOperations[eventName][eventId]) {
                    this.ongoingOperations[eventName][eventId].addData(piiSafeData);
                }
            }
            else {
                this.ongoingOperations[eventName].addData(piiSafeData);
            }
        }
        catch (e) {
            this.logger.info("Unable to update operation: " + eventName + " data");
            return;
        }
    };
    TelemetryUtilities.prototype.pushToRecordedEvents = function (event) {
        if (this.maxEventsExceeded && this.maxEventsExceeded()) {
            this.recordedEvents.shift();
        }
        this.recordedEvents.push(event);
    };
    TelemetryUtilities.prototype.hasOngoingEvent = function (eventName, eventId) {
        if (!this.ongoingOperations[eventName]) {
            this.logger.warn("Unable to find event for name " + eventName);
            return false;
        }
        if (eventId && !this.ongoingOperations[eventName][eventId]) {
            this.logger.warn("Unable to find event for name\\id " + eventName + "\\" + rt_js_bindings_1.pii.Omit(eventId));
            return false;
        }
        return true;
    };
    TelemetryUtilities.prototype.getEventStartTime = function () {
        return new Date().getTime() - this.startTime;
    };
    TelemetryUtilities.prototype.getEventTimestampBag = function (skipPendingOperations) {
        var eventTimestampBag = JSON.stringify({
            eventStart: this.startTime,
            events: this.recordedEvents
                .filter(function (e) { return skipPendingOperations ? !e.isPending() : true; })
                .map(function (event) { return event.getEvent(); })
        });
        this.logger.info("Call eventTimestampBag " + rt_js_bindings_1.pii.Omit(eventTimestampBag));
        return eventTimestampBag;
    };
    return TelemetryUtilities;
}());
exports.TelemetryUtilities = TelemetryUtilities;
var CallTelemetry = (function (_super) {
    __extends(CallTelemetry, _super);
    function CallTelemetry(logger, callStartTime) {
        var _this = _super.call(this, logger, callStartTime, function () { return _this.inCallMode && _this.recordedEvents.length > MAX_IN_CALL_EVENTS; }) || this;
        _this.inCallMode = false;
        _this.getHostName = function () {
            try {
                return location.host;
            }
            catch (e) {
                return 'unknown';
            }
        };
        _this.tsCallingVersion = tsCallingVersionProvider_1.getTsCallingVersion();
        _this.logger = logger.createChild('CallTelemetry');
        return _this;
    }
    CallTelemetry.prototype.setCallId = function (callId) {
        if (this.currentCallId) {
            this.previousCallId = this.currentCallId;
        }
        this.currentCallId = callId;
    };
    CallTelemetry.prototype.setConsultativeCallId = function (consultativeCallId) {
        this.consultativeCallId = consultativeCallId;
    };
    CallTelemetry.prototype.setEndpointId = function (endpointId) {
        this.endpointId = endpointId;
    };
    CallTelemetry.prototype.setParticipantId = function (participantId) {
        this.participantId = participantId;
    };
    CallTelemetry.prototype.setPreheatFlags = function (preheatFlags) {
        this.preheatFlags = preheatFlags;
    };
    CallTelemetry.prototype.setCallOrigin = function (origin) {
        this.origin = origin;
    };
    CallTelemetry.prototype.setThreadId = function (threadId) {
        this.threadId = threadId;
    };
    CallTelemetry.prototype.setMesageId = function (messageId) {
        this.messageId = messageId;
    };
    CallTelemetry.prototype.setTenantId = function (tenantId) {
        this.tenantId = tenantId;
    };
    CallTelemetry.prototype.setFailureType = function (failureType) {
        this.failureType = failureType;
    };
    CallTelemetry.prototype.setIsCast = function (isCast) {
        this.isCast = isCast ? 'True' : 'False';
    };
    CallTelemetry.prototype.setIsEmergency = function (isEmergency) {
        this.isEmergency = isEmergency ? 'True' : 'False';
    };
    CallTelemetry.prototype.setRole = function (role) {
        this.isAnonymous = role === 'admin' ? 'False' : 'True';
    };
    CallTelemetry.prototype.setCallType = function (callType) {
        this.callType = callType;
    };
    CallTelemetry.prototype.setDirection = function (direction) {
        this.direction = direction;
    };
    CallTelemetry.prototype.setSelfParticipantRole = function (selfParticipantRole) {
        this.selfParticipantRole = selfParticipantRole;
    };
    CallTelemetry.prototype.setTerminationState = function (terminationState) {
        this.terminationState = terminationState;
    };
    CallTelemetry.prototype.setTerminationReason = function (terminationReason) {
        this.terminationReason = terminationReason;
    };
    CallTelemetry.prototype.setCallEndDiagnosticInfo = function (info) {
        this.callEndDiagnosticInfo = info;
    };
    CallTelemetry.prototype.setStackConfig = function (config) {
        this.stackConfig = config;
    };
    CallTelemetry.prototype.getEvent = function (skipPendingOperations) {
        var getValue = function (v) { return v === undefined ? '' : v; };
        return {
            CorrelationId: getValue(this.currentCallId),
            PreviousCorrelationId: getValue(this.previousCallId),
            ConsultativeCallId: getValue(this.consultativeCallId),
            EndpointId: getValue(this.endpointId),
            ParticipantId: getValue(this.participantId),
            PreheatFlags: getValue(this.preheatFlags),
            CallType: getValue(this.callType),
            Direction: getValue(this.direction),
            Origin: getValue(this.origin),
            SelfParticipantRole: getValue(this.selfParticipantRole),
            IsAnonymous: getValue(this.isAnonymous),
            ThreadId: getValue(this.threadId),
            MessageId: getValue(this.messageId),
            TenantId: getValue(this.tenantId),
            FailureType: getValue(this.failureType),
            IsCast: getValue(this.isCast),
            IsEmergency: getValue(this.isEmergency),
            TsCallingVersion: getValue(this.tsCallingVersion),
            TerminationState: getValue(this.terminationState),
            TerminationReason: getValue(this.terminationReason),
            StackConfig: getValue(this.stackConfig),
            EventTimestampBag: this.getEventTimestampBag(skipPendingOperations),
            HostName: this.getHostName(),
            DiagnosticInfo: this.callEndDiagnosticInfo
        };
    };
    CallTelemetry.prototype.switchToInCallTelemetry = function () {
        this.recordedEvents = this.recordedEvents.filter(function (e) { return e.isPending(); });
        this.inCallMode = true;
    };
    return CallTelemetry;
}(TelemetryUtilities));
exports.default = CallTelemetry;
exports.getEndpointInformationForTelemetry = function (endpointDetails) {
    if (!Array.isArray(endpointDetails)) {
        return null;
    }
    return endpointDetails.map(function (endpoint) {
        return { endpointId: endpoint.endpointId, participantId: endpoint.participantId };
    });
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var callConstants_1 = __webpack_require__(8);
var causeId_1 = __webpack_require__(2);
var fn_1 = __webpack_require__(6);
var OPERATION_TYPE;
(function (OPERATION_TYPE) {
    OPERATION_TYPE["CHAINED"] = "Chained";
    OPERATION_TYPE["SYNC"] = "Sync";
    OPERATION_TYPE["ASYNC"] = "Async";
})(OPERATION_TYPE = exports.OPERATION_TYPE || (exports.OPERATION_TYPE = {}));
var OPERATION_ID_INDEX = '_operationIdValue_';
var CAUSE_ID_INDEX = '_causeIdValue_';
var CALL_START_OPTIONS_INDEX = '_callStartOptionsValue_';
var OPERATION_HANDLER_TYPE;
(function (OPERATION_HANDLER_TYPE) {
    OPERATION_HANDLER_TYPE[OPERATION_HANDLER_TYPE["CALL"] = 0] = "CALL";
    OPERATION_HANDLER_TYPE[OPERATION_HANDLER_TYPE["PARTICIPANT"] = 1] = "PARTICIPANT";
})(OPERATION_HANDLER_TYPE || (OPERATION_HANDLER_TYPE = {}));
function callOperation(operationName, options) {
    return operationDecorator(OPERATION_HANDLER_TYPE.CALL, operationName, options);
}
exports.callOperation = callOperation;
function participantOperation(operationName, options) {
    return operationDecorator(OPERATION_HANDLER_TYPE.PARTICIPANT, operationName, options);
}
exports.participantOperation = participantOperation;
exports.operationId = function (target, key, index) {
    if (!target[key][OPERATION_ID_INDEX]) {
        target[key][OPERATION_ID_INDEX] = index;
    }
    else {
        throw new Error('can not specify more than one operation id');
    }
};
exports.causeId = function (target, key, index) {
    if (!target[key][CAUSE_ID_INDEX]) {
        target[key][CAUSE_ID_INDEX] = index;
    }
    else {
        throw new Error('can not specify more than one cause id');
    }
};
exports.callStartOptions = function (target, key, index) {
    if (!target[key][CALL_START_OPTIONS_INDEX]) {
        target[key][CALL_START_OPTIONS_INDEX] = index;
    }
    else {
        throw new Error('can not specify options more than once');
    }
};
var operationDecorator = function (operationHandlerType, operationName, options) {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        var operationIdIndex = target[propertyKey] && target[propertyKey][OPERATION_ID_INDEX];
        var causeIdIndex = target[propertyKey] && target[propertyKey][CAUSE_ID_INDEX];
        var callStartOptionsIndex = target[propertyKey] && target[propertyKey][CALL_START_OPTIONS_INDEX];
        var operationType = (options && options.type) || OPERATION_TYPE.ASYNC;
        descriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var callInternal = this;
            var operationId = operationIdIndex !== undefined ? args[operationIdIndex] : undefined;
            if (operationId !== undefined) {
                if (Array.isArray(operationId)) {
                    try {
                        var s = operationId.map(function (o) { return o.toString(); }).sort().concat().toString();
                        operationId = getStringHash(s).toString();
                    }
                    catch (_a) {
                        return Promise.reject(32);
                    }
                }
                else if (operationId && typeof operationId === 'object') {
                    try {
                        var temp = JSON.stringify(operationId);
                        if (options && options.operationIdKey && operationId.hasOwnProperty(options.operationIdKey)) {
                            temp = operationId[options.operationIdKey];
                        }
                        operationId = temp;
                    }
                    catch (_b) {
                        return Promise.reject(32);
                    }
                }
            }
            var causeId = causeId_1.generateCauseId();
            if (causeIdIndex !== undefined) {
                if (args[causeIdIndex] && causeId_1.validateCauseId(args[causeIdIndex])) {
                    causeId = args[causeIdIndex];
                }
                else {
                    args[causeIdIndex] = causeId;
                }
            }
            var operationHandler = getOperationHandler(callInternal, operationHandlerType);
            operationHandler.logOperation(causeId, operationName);
            if (options && !!options.singular) {
                if (operationHandler.hasPendingOperation(operationName)) {
                    operationHandler.logOperation(causeId, operationName, 'Not allowed, pending operation exists');
                    return Promise.reject(60);
                }
            }
            try {
                if (callStartOptionsIndex !== undefined && args[callStartOptionsIndex]) {
                    callInternal.processCallStartOptions(args[callStartOptionsIndex], causeId);
                }
            }
            catch (_c) {
                return Promise.reject(32);
            }
            var execute = function () {
                if (operationType === OPERATION_TYPE.CHAINED) {
                    return operationHandler.executeChained(originalMethod.bind.apply(originalMethod, [_this].concat(args)), operationName, operationId, causeId);
                }
                else if (operationType === OPERATION_TYPE.SYNC) {
                    return operationHandler.executeSync(originalMethod.bind.apply(originalMethod, [_this].concat(args)), operationName, operationId, causeId);
                }
                else {
                    return operationHandler.execute(originalMethod.bind.apply(originalMethod, [_this].concat(args)), operationName, operationId, causeId);
                }
            };
            if (operationName === callConstants_1.CALL_OPERATIONS.START_CALL || operationName === callConstants_1.CALL_OPERATIONS.JOIN_CALL) {
                if (!operationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_START_OR_JOIN_INITIATED)) {
                    operationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.CALL_START_OR_JOIN_INITIATED).catch(fn_1.noop);
                }
            }
            if (options && options.triggerAttach) {
                if (!operationHandler.hasPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY)) {
                    operationHandler.createPendingOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_SLIMCORE_READY).catch(fn_1.noop);
                }
            }
            if (options && options.type !== OPERATION_TYPE.SYNC) {
                var waitFor = options && options.waitFor;
                if (waitFor && operationHandler.hasPendingOperation(waitFor)) {
                    return operationHandler.waitForOperation(waitFor, undefined, causeId).then(execute, execute);
                }
            }
            return execute();
        };
        return descriptor;
    };
};
var getOperationHandler = function (iCall, operationHandlerType) {
    if (operationHandlerType === OPERATION_HANDLER_TYPE.CALL) {
        return iCall._callOperationHandler;
    }
    else if (operationHandlerType === OPERATION_HANDLER_TYPE.PARTICIPANT) {
        return iCall._participantOperationHandler;
    }
    else {
        throw new Error('Unsupported operation handler type!');
    }
};
function getStringHash(s) {
    var hash = 0;
    for (var i = 0; i < s.length; i++) {
        var chr = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0;
    }
    return hash;
}


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var piiUtils = __webpack_require__(5);
var asyncOperationHandler_1 = __webpack_require__(24);
var causeId_1 = __webpack_require__(2);
var chainedPromise_1 = __webpack_require__(16);
var stopwatch = __webpack_require__(41);
var OperationHandler = (function (_super) {
    __extends(OperationHandler, _super);
    function OperationHandler(logger, callTelemetry) {
        var _this = _super.call(this, logger) || this;
        _this.callTelemetry = callTelemetry;
        _this.logSuccess = function (operationInfo, result, operationStopwatch) {
            _this._logger.info(operationInfo + " execution succeeded, result=" + (result ? _this.stringifyForLogging(result) : 'void') + ", time=" + operationStopwatch.duration());
        };
        _this.logFailure = function (operationInfo, e, operationStopwatch) {
            _this._logger.info(operationInfo + " execution failed, reason=" + _this.stringifyForLogging(e) + ", time=" + operationStopwatch.duration());
        };
        _this.stringifyForLogging = function (data) {
            var output;
            if (data instanceof Error) {
                output = data.toString() || 'Unknown Error';
            }
            else {
                try {
                    output = JSON.stringify(data);
                }
                catch (e) {
                    output = 'Unable to stringify data';
                }
            }
            return output;
        };
        _this._logger = logger.createChild("[Operation]");
        _this._chainedPromise = new chainedPromise_1.default(_this._logger.createChild('[Chained]'));
        return _this;
    }
    OperationHandler.prototype.resetOperationChain = function (causeId) {
        this._chainedPromise.reset(causeId);
    };
    OperationHandler.prototype.executeSync = function (operation, operationName, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
        var operationStopwatch = stopwatch.build();
        this._logger.info(operationInfo + "API calledSync");
        var telemetryEvent = this.callTelemetry.recordOperation(operationName, causeId, operationId);
        var operationResult;
        try {
            operationResult = operation();
            telemetryEvent.recordSuccess(operationResult, causeId);
            this.logSuccess(operationInfo, operationResult, operationStopwatch);
        }
        catch (e) {
            telemetryEvent.recordFailure(e, causeId);
            this.logFailure(operationInfo, e, operationStopwatch);
        }
        return operationResult;
    };
    OperationHandler.prototype.executeChained = function (operation, operationName, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.checkPendingOperationAndExecute(operation, true, operationName, operationId, causeId)];
            });
        });
    };
    OperationHandler.prototype.execute = function (operation, operationName, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.checkPendingOperationAndExecute(operation, false, operationName, operationId, causeId)];
            });
        });
    };
    OperationHandler.prototype.logOperation = function (causeId, operationName) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var argumentsToLog = args.length && args.map(function (a) { return _this.stringifyForLogging(piiUtils.scrubMriOrOmit(a)); });
        this._logger.info("[" + causeId + "][" + operationName + "]API called, " + (argumentsToLog ? "with args=" + argumentsToLog : ""));
    };
    OperationHandler.prototype.checkPendingOperationAndExecute = function (operation, chained, operationName, operationId, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
        var pendingOperation = null;
        var asyncOperation = null;
        if (this.hasPendingOperation(operationName, operationId)) {
            this._logger.info(operationInfo + "already pending, returning existing operation");
            pendingOperation = this.waitForOperation(operationName, operationId, causeId);
        }
        else {
            asyncOperation = this.createPendingOperation(operationName, operationId, causeId);
        }
        if (chained) {
            this._logger.info(operationInfo + "chained");
            return this._chainedPromise.chainPromise(function () {
                return pendingOperation || _this.executeInternal(asyncOperation, causeId, operation, operationName, operationId);
            }, operationName, causeId);
        }
        else {
            return pendingOperation || this.executeInternal(asyncOperation, causeId, operation, operationName, operationId);
        }
    };
    OperationHandler.prototype.executeInternal = function (asyncOperation, causeId, operation, operationName, operationId) {
        return __awaiter(this, void 0, void 0, function () {
            var operationInfo, operationStopwatch, operationResult, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
                        this._logger.info(operationInfo + " executing operation...");
                        operationStopwatch = stopwatch.build();
                        this.callTelemetry.recordOperation(operationName, causeId, operationId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, operation()];
                    case 2:
                        operationResult = _a.sent();
                        this.callTelemetry.maybeRecordOperationSuccess(operationName, operationResult, operationId);
                        this.logSuccess(operationInfo, operationResult, operationStopwatch);
                        this.maybeResolveOperation(operationName, operationResult, operationId, causeId);
                        return [3, 4];
                    case 3:
                        reason_1 = _a.sent();
                        this.callTelemetry.maybeRecordOperationFailure(operationName, reason_1, operationId);
                        this.logFailure(operationInfo, reason_1, operationStopwatch);
                        this.maybeRejectOperation(operationName, reason_1, operationId, causeId);
                        return [3, 4];
                    case 4: return [2, asyncOperation];
                }
            });
        });
    };
    return OperationHandler;
}(asyncOperationHandler_1.default));
exports.default = OperationHandler;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var causeId_1 = __webpack_require__(2);
var ChainedPromise = (function () {
    function ChainedPromise(_logger) {
        this._logger = _logger;
        this._promise = Promise.resolve(undefined);
        this._actionQueue = [];
    }
    ChainedPromise.prototype.chainPromise = function (promise, action, causeId, reset) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (reset === void 0) { reset = false; }
        var startTime = Date.now();
        var actionMsg = ((typeof action === 'function' ? action() : action) || '').toString();
        this._actionQueue.push(actionMsg);
        this._logger.info("[" + causeId + "][" + actionMsg + "]enqueueing, queue=[" + this._actionQueue + "], reset=" + reset);
        var removeFromQueue = function () {
            _this._actionQueue = _this._actionQueue.filter(function (a) { return a !== actionMsg; });
        };
        if (reset) {
            this.reset(causeId);
        }
        this._promise = this._promise
            .catch(function () {
            return undefined;
        })
            .then(function () {
            var delayMs = Date.now() - startTime;
            _this._logger.info("[" + causeId + "][" + actionMsg + "]begin, delayMs=" + delayMs);
            return promise();
        });
        this._promise.then(function () {
            removeFromQueue();
            var durationMs = Date.now() - startTime;
            _this._logger.info("[" + causeId + "][" + actionMsg + "]success, durationMs=" + durationMs);
        }, function (error) {
            removeFromQueue();
            var durationMs = Date.now() - startTime;
            _this._logger.warn("[" + causeId + "][" + actionMsg + "]failed=" + error + ", drationMs=" + durationMs);
        });
        return this._promise;
    };
    ChainedPromise.prototype.reset = function (causeId) {
        this._logger.info("[" + causeId + "] resetting");
        this._promise = Promise.resolve(undefined);
    };
    return ChainedPromise;
}());
exports.default = ChainedPromise;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronRemoteStream_1 = __webpack_require__(18);
var Enums = SlimCore.Enums;
var fn_1 = __webpack_require__(6);
var SlimCoreElectronRemoteStreamManager = (function (_super) {
    __extends(SlimCoreElectronRemoteStreamManager, _super);
    function SlimCoreElectronRemoteStreamManager(logger, settings, engine, _callHandler, _slimcoreParticipantObjectId, _streams, _streamContextMap, isObserving) {
        if (isObserving === void 0) { isObserving = false; }
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronRemoteStreamManager[" + _this._slimcoreParticipantObjectId + "]"; }), settings, engine) || this;
        _this._callHandler = _callHandler;
        _this._slimcoreParticipantObjectId = _slimcoreParticipantObjectId;
        _this._streams = _streams;
        _this._streamContextMap = _streamContextMap;
        _this._logger.info('constructor');
        if (!SlimCoreCommon.hasFeature(Enums.Feature.RemoteVideosCountChanged)) {
            _this._registerDisposable(_this._slimcoreInstance.handle('object-property-changed', { objectId: _this._slimcoreParticipantObjectId, propKey: Enums.Property.ParticipantVideoCountChanged }, function (data) { return _this._onVideoCountChangedDeferred(); }));
        }
        _this._registerDisposable(_this._callHandler.handle('remote-videos-count-changed', { participantObjectId: _this._slimcoreParticipantObjectId }, function (data) { return _this._onVideoCountChangedDeferred(); }));
        if (!isObserving) {
            _this._onVideoCountChangedDeferred();
        }
        return _this;
    }
    SlimCoreElectronRemoteStreamManager.prototype._onVideoCountChangedDeferred = function () {
        var _this = this;
        if (!this._onVideoCountChangedDefer) {
            this._onVideoCountChangedDefer = _.defer(function () {
                delete _this._onVideoCountChangedDefer;
                _this._onVideoCountChanged();
            });
        }
    };
    SlimCoreElectronRemoteStreamManager.prototype._onVideoCountChanged = function () {
        var _this = this;
        var videoObjectIds = this._callHandler.callGetParticipantVideos(this._slimcoreParticipantObjectId);
        if (!videoObjectIds) {
            return;
        }
        var videoObjectsByType = {};
        videoObjectsByType[Enums.VideoType.Video] = [];
        videoObjectsByType[Enums.VideoType.ScreenShare] = [];
        videoObjectIds.forEach(function (videoObjectId) {
            var mediaType = _this._getIntProperty(_this._callHandler, videoObjectId, Enums.Property.VideoType);
            var mediaStatus = _this._getIntProperty(_this._callHandler, videoObjectId, Enums.Property.VideoStatus);
            if (mediaType === Enums.VideoType.Augmented) {
                return;
            }
            videoObjectsByType[mediaType].push({
                videoObjectId: videoObjectId,
                videoType: mediaType,
                videoStatus: mediaStatus
            });
        });
        this._handleVideoCountChanged(Enums.VideoType.Video, videoObjectsByType[Enums.VideoType.Video]);
        this._handleVideoCountChanged(Enums.VideoType.ScreenShare, videoObjectsByType[Enums.VideoType.ScreenShare]);
        this.raiseChanged();
    };
    SlimCoreElectronRemoteStreamManager.prototype._handleVideoCountChanged = function (videoType, videoObjects) {
        var _this = this;
        var streamType = SlimCoreElectronRemoteStreamManager.SlimcoreVideoTypeToStreamType(videoType);
        var streamsOfType = this._streams[streamType];
        var removals = _.filter(streamsOfType, function (s) { return !_.some(videoObjects, function (v) { return v.videoObjectId === s.id; }); });
        _.each(removals, function (stream) {
            _this._logger.info("_handleVideoCountChanged: removing stream " + stream.id + " (stream type: " + streamType + ")");
            _.remove(streamsOfType, stream);
            stream.dispose();
        });
        _.each(videoObjects, function (video) {
            if (!_.some(streamsOfType, function (s) { return s.id === video.videoObjectId; })) {
                _this._logger.info("_handleVideoCountChanged: adding stream " + video.videoObjectId + " (stream type: " + streamType + ")");
                var newStream = new SlimCoreElectronRemoteStream_1.default(_this._logger, _this._settings, _this._slimcoreInstance, _this._slimcoreParticipantObjectId, video.videoObjectId, streamType, _this._callHandler, _this._streamContextMap[streamType]);
                _this._streams[streamType].push(newStream);
                newStream.changed(function () { return _this.raiseChanged(); });
            }
        });
    };
    SlimCoreElectronRemoteStreamManager.prototype.stopVideos = function () {
        this._logger.info('stopVideos');
        var disposeStream = function (stream) {
            return stream.disposeInternal();
        };
        return Promise.all(_.flatMap(_.values(this._streams), function (streams) { return _.map(streams, disposeStream); })).then(fn_1.noop);
    };
    SlimCoreElectronRemoteStreamManager.prototype.dispose = function () {
        this._logger.info('dispose');
        _.each(_.values(this._streams), function (_streams) { return _.each(_streams, function (s) { return s.dispose(); }); });
        this._streams[0] = [];
        this._streams[1] = [];
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronRemoteStreamManager.SlimcoreVideoTypeToStreamType = function (videoType) {
        switch (videoType) {
            case Enums.VideoType.ScreenShare:
                return 1;
            case Enums.VideoType.Video:
                return 0;
            default:
                return undefined;
        }
    };
    return SlimCoreElectronRemoteStreamManager;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronRemoteStreamManager;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var async = __webpack_require__(4);
var causeId_1 = __webpack_require__(2);
var chainedPromise_1 = __webpack_require__(16);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronRemoteVideoRenderer_1 = __webpack_require__(27);
var Enums = SlimCore.Enums;
var SlimCoreElectronRemoteStreamContext = (function () {
    function SlimCoreElectronRemoteStreamContext(logger) {
        this.nrRunningStreams = 0;
        this.videoStoppedEvent = new SlimCoreCommon.VideoStateCancelEvent();
    }
    return SlimCoreElectronRemoteStreamContext;
}());
exports.SlimCoreElectronRemoteStreamContext = SlimCoreElectronRemoteStreamContext;
var NEXT_RANK = 0;
var SlimCoreElectronRemoteStream = (function (_super) {
    __extends(SlimCoreElectronRemoteStream, _super);
    function SlimCoreElectronRemoteStream(logger, settings, engine, _participantId, id, type, _callHandler, _context) {
        var _this = _super.call(this, logger.createChild(function () { return "RemoteStream(" + _this._context.nrRunningStreams + ")[" + _this._remoteVideoId + ":" + _this.rank + ":" + _this._mediaType + ":" + _this._videoStatus + "]"; }), settings, engine) || this;
        _this._participantId = _participantId;
        _this.id = id;
        _this.type = type;
        _this._callHandler = _callHandler;
        _this._context = _context;
        _this._remoteVideoId = 0;
        _this._videoStatus = Enums.VideoStatus.None;
        _this._stateCancelEvent = new SlimCoreCommon.VideoStateCancelEvent();
        _this._shouldRun = false;
        _this._isDisposed = false;
        _this._nrRenderers = 0;
        _this._nrOngoingStreamStarts = 0;
        _this._msi = 0;
        _this._chainedApiPromise = new chainedPromise_1.default(logger.createChild(function () { return "RemoteStreamChain(" + _this._context.nrRunningStreams + ")"; }));
        _this._remoteVideoId = id;
        _this.rank = NEXT_RANK++;
        var props = _this._getProperties(_this._callHandler, _this._remoteVideoId, {
            endpointId: { propKey: Enums.Property.VideoEndpointId },
            participantId: { propKey: Enums.Property.VideoParticipantLegId },
            negotiationTag: { propKey: Enums.Property.VideoNegotiationTag }
        }, {
            mediaType: { propKey: Enums.Property.VideoType },
            videoStatus: { propKey: Enums.Property.VideoStatus },
            msi: { propKey: Enums.Property.VideoRank }
        });
        _this._mediaType = props.mediaType;
        _this._videoStatus = props.videoStatus;
        var causeId = causeId_1.generateCauseId();
        _this._logger.info("constructor causeId: " + causeId);
        _this._onVideoObjectPropertyChanged(Enums.Property.VideoStatus, function (data) { return _this._onVideoObjectStateChanged(causeId); });
        _this._onVideoObjectPropertyChanged(Enums.Property.VideoNegotiationTag, function (data) { return _this._onVideoNegotiationTagChanged(data.value); });
        _this.endpointId = props.endpointId;
        _this.participantId = props.participantId;
        _this._msi = props.msi;
        _this.negotiationTag = props.negotiationTag;
        return _this;
    }
    SlimCoreElectronRemoteStream.prototype.getDiagnosticData = function () {
        return JSON.stringify({
            id: this.id,
            rank: this.rank,
            type: this.type,
            isAvailable: this.isAvailable,
            isStreaming: this.isStreaming,
            negotiationTag: this.negotiationTag,
            video_status: this._videoStatus,
            msi: this._msi,
            shouldRun: this._shouldRun,
            nrRenderers: this._nrRenderers,
            isDisposed: this._isDisposed
        });
    };
    Object.defineProperty(SlimCoreElectronRemoteStream.prototype, "isAvailable", {
        get: function () {
            return SlimCoreCommon.isVideoAvailable(this._videoStatus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronRemoteStream.prototype, "isStreaming", {
        get: function () {
            return this._videoStatus === Enums.VideoStatus.Running;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronRemoteStream.prototype.isActive = function () {
        return this.isAvailable && this.isStreaming;
    };
    SlimCoreElectronRemoteStream.prototype.start = function (target, options) {
        return __awaiter(this, void 0, void 0, function () {
            var startTime, waitForAvailableDoneTime, startVideoDoneTime, causeId, renderer, endTime, error_1, error_2, endTime;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startTime = Date.now();
                        waitForAvailableDoneTime = startTime;
                        startVideoDoneTime = startTime;
                        causeId = causeId_1.generateCauseId();
                        this._shouldRun = true;
                        this._nrOngoingStreamStarts++;
                        this._logger.info("start causeId: " + causeId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, 9, 10]);
                        return [4, SlimCoreCommon.waitForVideoObjectToBeAvailable(this._slimcoreInstance, this._callHandler, this._remoteVideoId, this._logger, 0, this._stateCancelEvent)];
                    case 2:
                        _a.sent();
                        waitForAvailableDoneTime = Date.now();
                        return [4, this._chainedApiPromise.chainPromise(function () { return _this._startVideo(causeId, target, options); }, this._chainActionFn('start'), causeId)];
                    case 3:
                        renderer = _a.sent();
                        startVideoDoneTime = Date.now();
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        this._throwIfDisposed(causeId, 'disposed while in start');
                        return [4, SlimCoreCommon.waitForVideoObjectToBeRunning(this._slimcoreInstance, this._callHandler, this._remoteVideoId, this._logger, 0, this._stateCancelEvent)];
                    case 5:
                        _a.sent();
                        this._updateVideoStatus(causeId);
                        endTime = Date.now();
                        this._logger.info("start causeId: " + causeId + " successful. duration: " + (endTime - startTime) + " (" + (waitForAvailableDoneTime - startTime) + "+" + (startVideoDoneTime - waitForAvailableDoneTime) + "+" + (endTime - startVideoDoneTime) + ")");
                        return [2, renderer];
                    case 6:
                        error_1 = _a.sent();
                        renderer.dispose();
                        throw error_1;
                    case 7: return [3, 10];
                    case 8:
                        error_2 = _a.sent();
                        endTime = Date.now();
                        this._logger.warn("start causeId: " + causeId + " failed. duration: " + (endTime - startTime) + " (" + (waitForAvailableDoneTime - startTime) + "+" + (startVideoDoneTime - waitForAvailableDoneTime) + "+" + (endTime - startVideoDoneTime) + ") error: " + error_2);
                        throw error_2;
                    case 9:
                        this._nrOngoingStreamStarts--;
                        return [7];
                    case 10: return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var causeId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        causeId = causeId_1.generateCauseId();
                        return [4, this._stopWithCauseId(this._chainActionFn('stop'), causeId)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype.dispose = function () {
        var causeId = causeId_1.generateCauseId();
        this._disposeWithCauseId(this._chainActionFn('dispose'), causeId);
    };
    SlimCoreElectronRemoteStream.prototype.disposeInternal = function () {
        return __awaiter(this, void 0, void 0, function () {
            var causeId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        causeId = causeId_1.generateCauseId();
                        return [4, this._disposeWithCauseId(this._chainActionFn('disposeInternal'), causeId)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._stopWithCauseId = function (action, causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._shouldRun = false;
                        this._stateCancelEvent.fire();
                        return [4, this._chainedApiPromise.chainPromise(function () { return _this._stopVideo(causeId, false); }, action, causeId)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype.registerRenderer = function (object) {
        this._nrRenderers++;
    };
    SlimCoreElectronRemoteStream.prototype.unregisterRenderer = function (object) {
        if (--this._nrRenderers === 0 && this._nrOngoingStreamStarts === 0) {
            var causeId = causeId_1.generateCauseId();
            this._stopWithCauseId(this._chainActionFn('renderers disposed'), causeId);
        }
    };
    SlimCoreElectronRemoteStream.prototype._chainActionFn = function (action) {
        var _this = this;
        return function () { return action + " [" + _this._participantId + ":" + _this._remoteVideoId + ":" + _this.rank + ":" + _this._mediaType + ":" + _this._videoStatus + "]"; };
    };
    SlimCoreElectronRemoteStream.prototype._isVideoStatusInStopping = function () {
        return this._videoStatus === Enums.VideoStatus.Stopping;
    };
    SlimCoreElectronRemoteStream.prototype._updateVideoStatus = function (causeId) {
        var videoStatus = this._getIntProperty(this._callHandler, this._remoteVideoId, Enums.Property.VideoStatus);
        if (this._videoStatus !== videoStatus) {
            this._logger.info("VideoStateChanged: causeId: " + causeId + " status: " + this._videoStatus + " -> " + videoStatus);
            this._videoStatus = videoStatus;
            if (this._isVideoStatusInStopping()) {
                this._videoWasStopped(causeId);
            }
            this.raiseChanged();
        }
    };
    SlimCoreElectronRemoteStream.prototype._disposeWithCauseId = function (action, causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._isDisposed = true;
                        this._shouldRun = false;
                        this._stateCancelEvent.fire();
                        return [4, this._chainedApiPromise.chainPromise(function () { return _this._dispose(causeId); }, action, causeId)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._onVideoObjectPropertyChanged = function (propKey, listener) {
        this._onObjectPropertyChanged(this.id, propKey, listener);
    };
    SlimCoreElectronRemoteStream.prototype._onVideoObjectStateChanged = function (causeId) {
        this._updateVideoStatus(causeId);
    };
    SlimCoreElectronRemoteStream.prototype._onVideoNegotiationTagChanged = function (value) {
        if (this.negotiationTag !== value) {
            this.negotiationTag = value;
            this.raiseChanged();
        }
    };
    SlimCoreElectronRemoteStream.prototype._videoWasStopped = function (causeId) {
        this._stopWithCauseId(this._chainActionFn('discovered video stopped'), causeId);
    };
    SlimCoreElectronRemoteStream.prototype._isRunning = function () {
        return !!this._videoBinding;
    };
    SlimCoreElectronRemoteStream.prototype._stopVideo = function (causeId, force) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((!this._shouldRun || force || this._isVideoStatusInStopping()) && this._isRunning())) return [3, 3];
                        this._logger.info("_stopVideo causeId: " + causeId + " force: " + force + " will stop remote video now");
                        this._slimcoreInstance.videoStop(this._remoteVideoId);
                        return [4, SlimCoreCommon.forgetAndLog(this._slimcoreInstance.videoReleaseBinding(this._remoteVideoId, this._videoBinding), this._logger, "_stopVideo causeId: " + causeId + " videoReleaseBinding on remote video failed")];
                    case 1:
                        _a.sent();
                        this._videoBinding = null;
                        return [4, SlimCoreCommon.waitForVideoObjectToBeStopped(this._slimcoreInstance, this._callHandler, this._remoteVideoId, this._logger)];
                    case 2:
                        _a.sent();
                        this._context.nrRunningStreams--;
                        this._logger.info("_stopVideo causeId: " + causeId + " force: " + force + " remote video is stopped");
                        this._updateVideoStatus(causeId);
                        this._context.videoStoppedEvent.fire();
                        return [3, 4];
                    case 3:
                        this._logger.info("_stopVideo causeId: " + causeId + " noop, force: " + force + " should run: " + this._shouldRun + " is running: " + this._isRunning() + " already disposed: " + this._isDisposed);
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._startVideo = function (causeId, target, options) {
        return __awaiter(this, void 0, void 0, function () {
            var videoWasJustStarted, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._getStartedVideo(causeId)];
                    case 1:
                        videoWasJustStarted = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 3, , 6]);
                        this._updateVideoStatus(causeId);
                        this._logger.info("_startVideo causeId: " + causeId + " create renderer");
                        return [2, new SlimCoreElectronRemoteVideoRenderer_1.default(this._logger, this._settings, null, target, this._mediaType, this._videoBinding, options, this)];
                    case 3:
                        error_3 = _a.sent();
                        if (!videoWasJustStarted) return [3, 5];
                        return [4, SlimCoreCommon.forgetAndLog(this._stopVideo(causeId, true), this._logger, "_startVideo causeId: " + causeId + " stopping remote video failed while got error while starting video")];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: throw error_3;
                    case 6: return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._dispose = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        return [4, SlimCoreCommon.forgetAndLog(this._stopVideo(causeId, true), this._logger, "_dispose causeId: " + causeId + " stopping remote video failed")];
                    case 1:
                        _a.sent();
                        return [3, 3];
                    case 2:
                        _super.prototype.dispose.call(this);
                        return [7];
                    case 3: return [2];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._getStartedVideo = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var videoBinding;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._throwIfDisposed(causeId, 'disposed while in _getStartedVideo');
                        if (!this._shouldRun) {
                            throw new Error("_getStartedVideo causeId: " + causeId + " failing, should not run any more");
                        }
                        if (!!this._isRunning()) return [3, 5];
                        this._logger.info("_getStartedVideo causeId: " + causeId + " will start remote video now");
                        videoBinding = this._createVideoBindingRenderer(causeId);
                        this._slimcoreInstance.videoStart(this._remoteVideoId);
                        if (!this._settings.enableRemoteStreamVideoBindingRetry) return [3, 2];
                        return [4, this._videoCreateBinding(causeId, this._remoteVideoId, videoBinding)];
                    case 1:
                        _a.sent();
                        return [3, 4];
                    case 2: return [4, this._slimcoreInstance.videoCreateBinding(this._remoteVideoId, videoBinding)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        this._context.nrRunningStreams++;
                        this._videoBinding = videoBinding;
                        this._logger.info("_getStartedVideo causeId: " + causeId + " remote video is started");
                        return [2, true];
                    case 5: return [2, false];
                }
            });
        });
    };
    SlimCoreElectronRemoteStream.prototype._throwIfDisposed = function (causeId, reason) {
        if (this._isDisposed) {
            throw new Error("_throwIfDisposed causeId: " + causeId + " reason: " + reason);
        }
    };
    SlimCoreElectronRemoteStream.prototype._createVideoBindingRenderer = function (causeId) {
        if (this._slimcoreInstance.createVideoBindingRenderer) {
            this._logger.info("_createVideoBindingRenderer causeId: " + causeId + " createVideoBindingRenderer");
            return this._slimcoreInstance.createVideoBindingRenderer({
                enableDXVA: this._settings.enableDXVA,
                isLocalPreview: false
            });
        }
        else {
            this._logger.info("_createVideoBindingRenderer causeId: " + causeId + " old createVideoBindingRenderer");
            return SlimCore.createVideoBindingRenderer();
        }
    };
    SlimCoreElectronRemoteStream.prototype._videoCreateBinding = function (causeId, videoObjectId, videoBinding) {
        return __awaiter(this, void 0, void 0, function () {
            var CREATE_BINDING_RETRY_COUNTER, CREATE_BINDING_RETRY_DELAY_MS, stateCancelRejectionDeferred, stateCancelSub, videoStoppedDeferred, videoStoppedSub, tryCreateBinding_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        CREATE_BINDING_RETRY_COUNTER = 10;
                        CREATE_BINDING_RETRY_DELAY_MS = 200;
                        stateCancelRejectionDeferred = async.defer();
                        stateCancelSub = this._stateCancelEvent.subscribe(function () {
                            stateCancelRejectionDeferred.reject(new Error("_videoCreateBinding causeId: " + causeId + " stateCancelEvent got signalled"));
                        });
                        videoStoppedDeferred = async.defer();
                        videoStoppedSub = this._context.videoStoppedEvent.subscribe(function () {
                            _this._logger.info("_videoCreateBinding causeId: " + causeId + " one of the videos was stopped will wake up for binding retry");
                            videoStoppedDeferred.resolve();
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        tryCreateBinding_1 = function (retryCount) { return __awaiter(_this, void 0, void 0, function () {
                            var videoStoppedAlready, error_4;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this._throwIfDisposed(causeId, "disposed while in _videoCreateBinding on retry attempt: " + retryCount);
                                        if (!SlimCoreCommon.isVideoAvailable(this._videoStatus)) {
                                            throw new Error("_videoCreateBinding causeId: " + causeId + " video not available any more on retry attempt: " + retryCount);
                                        }
                                        videoStoppedAlready = videoStoppedDeferred.promise;
                                        videoStoppedDeferred = async.defer();
                                        this._logger.info("_videoCreateBinding causeId: " + causeId + " try to create video binding from slimcore on retry attempt: " + retryCount);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 6]);
                                        return [4, this._slimcoreInstance.videoCreateBinding(videoObjectId, videoBinding)];
                                    case 2:
                                        _a.sent();
                                        return [3, 6];
                                    case 3:
                                        error_4 = _a.sent();
                                        if (!(retryCount < CREATE_BINDING_RETRY_COUNTER)) {
                                            throw new Error("_videoCreateBinding causeId: " + causeId + " retry attempt: " + retryCount + " exceed");
                                        }
                                        return [4, Promise.race([videoStoppedAlready, videoStoppedDeferred.promise, stateCancelRejectionDeferred.promise, async.delay(CREATE_BINDING_RETRY_DELAY_MS)])];
                                    case 4:
                                        _a.sent();
                                        return [4, tryCreateBinding_1(retryCount + 1)];
                                    case 5:
                                        _a.sent();
                                        return [3, 6];
                                    case 6: return [2];
                                }
                            });
                        }); };
                        return [4, tryCreateBinding_1(1)];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        stateCancelSub.dispose();
                        videoStoppedSub.dispose();
                        return [7];
                    case 4: return [2];
                }
            });
        });
    };
    return SlimCoreElectronRemoteStream;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronRemoteStream;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Enums = SlimCore.Enums;
function convertVideoEffectType(value) {
    switch (value) {
        case 0:
            return Enums.VideoEffectType.Off;
        case 1:
            return Enums.VideoEffectType.BackgroundBlurDefault;
        case 2:
            return Enums.VideoEffectType.BackgroundBlurLight;
        case 4:
            return Enums.VideoEffectType.BackgroundBlurExperimental_1;
        case 8:
            return Enums.VideoEffectType.BackgroundBlurExperimental_2;
        case 16:
            return Enums.VideoEffectType.BackgroundReplacement;
        case 32:
            return Enums.VideoEffectType.WhiteboardZoom;
        case 64:
            return Enums.VideoEffectType.WhiteboardCleanup;
        case 96:
            return Enums.VideoEffectType.WhiteboardZoomAndCleanup;
        default:
            return Enums.VideoEffectType.Off;
    }
}
exports.convertVideoEffectType = convertVideoEffectType;
function convertStatusAndFailureReasonToParticipantReason(status, reason) {
    switch (status) {
        case Enums.CallStatus.Busy:
            return 19;
        case Enums.CallStatus.CallTimedOut:
            return 9;
        case Enums.CallStatus.Cancelled:
            return 23;
        case Enums.CallStatus.Dropped:
            return 10;
        case Enums.CallStatus.Refused:
            return 3;
        case Enums.CallStatus.Missed:
            return 2;
        case Enums.CallStatus.Failed:
            return convertFailureReasonToParticipantReason(reason);
        default:
            return 0;
    }
}
exports.convertStatusAndFailureReasonToParticipantReason = convertStatusAndFailureReasonToParticipantReason;
function convertFailureReasonToParticipantReason(reason) {
    switch (reason) {
        case Enums.ParticipantFailureReason.NoFailure:
        case Enums.ParticipantFailureReason.HostEndedConf:
        case Enums.ParticipantFailureReason.AnsweredElsewhere:
            return 0;
        case Enums.ParticipantFailureReason.RecipientUserNotFound:
        case Enums.ParticipantFailureReason.RecipientNotOnline:
        case Enums.ParticipantFailureReason.PstnCouldNotConnectToSkypeProxy:
        case Enums.ParticipantFailureReason.CallNotificationDeliveryFailure:
            return 4;
        case Enums.ParticipantFailureReason.RecipientBlocked:
            return 5;
        case Enums.ParticipantFailureReason.CallerNotFriend:
        case Enums.ParticipantFailureReason.CallerNotAuthorized:
            return 6;
        case Enums.ParticipantFailureReason.ConfParticipantCountLimitReached:
            return 46;
        case Enums.ParticipantFailureReason.ConfLobbyParticipantCountLimitReached:
            return 59;
        case Enums.ParticipantFailureReason.PstnNoSkypeoutSubscription:
            return 7;
        case Enums.ParticipantFailureReason.CallNotFound:
            return 8;
        case Enums.ParticipantFailureReason.PstnNetworkError:
        case Enums.ParticipantFailureReason.PstnInternetConnectionLost:
        case Enums.ParticipantFailureReason.TrouterError:
        case Enums.ParticipantFailureReason.GeneralNetworkError:
            return 9;
        case Enums.ParticipantFailureReason.MediaDroppedError:
        case Enums.ParticipantFailureReason.SoundRecordingError:
        case Enums.ParticipantFailureReason.SoundPlaybackError:
            return 10;
        case Enums.ParticipantFailureReason.PstnInsufficientFunds:
            return 12;
        case Enums.ParticipantFailureReason.PstnCreditExpired:
            return 26;
        case Enums.ParticipantFailureReason.PstnCreditExpiredButEnough:
            return 27;
        case Enums.ParticipantFailureReason.MiscError:
        case Enums.ParticipantFailureReason.PstnMiscError:
            return 11;
        case Enums.ParticipantFailureReason.PstnSkypeoutAccountBlocked:
            return 13;
        case Enums.ParticipantFailureReason.PstnBlockedByUs:
            return 15;
        case Enums.ParticipantFailureReason.PstnBlockedRegulatoryIndia:
            return 16;
        case Enums.ParticipantFailureReason.PstnInvalidNumber:
            return 17;
        case Enums.ParticipantFailureReason.PstnNumberForbidden:
            return 18;
        case Enums.ParticipantFailureReason.PstnCallTimedOut:
            return 2;
        case Enums.ParticipantFailureReason.PstnBusy:
            return 19;
        case Enums.ParticipantFailureReason.PstnCallTerminated:
            return 20;
        case Enums.ParticipantFailureReason.PstnNumberUnavailable:
            return 21;
        case Enums.ParticipantFailureReason.PstnCallRejected:
            return 3;
        case Enums.ParticipantFailureReason.PstnEmergencyCallDenied:
            return 22;
        case Enums.ParticipantFailureReason.PstnNoSubscriptionCover:
            return 25;
        case Enums.ParticipantFailureReason.EnterprisePstnForbidden:
            return 30;
        case Enums.ParticipantFailureReason.EnterprisePstnInternalError:
            return 28;
        case Enums.ParticipantFailureReason.EnterprisePstnUnavailable:
            return 29;
        case Enums.ParticipantFailureReason.EnterprisePstnInvalidNumber:
            return 31;
        case Enums.ParticipantFailureReason.EnterprisePstnMiscError:
            return 32;
        case Enums.ParticipantFailureReason.Kicked:
            return 33;
        case Enums.ParticipantFailureReason.NetworkRequestTimeoutError:
            return 34;
        case Enums.ParticipantFailureReason.CallDoesNotExist:
            return 35;
        case Enums.ParticipantFailureReason.MediaSetupFailure:
            return 36;
        case Enums.ParticipantFailureReason.ServiceUnavailable:
            return 37;
        case Enums.ParticipantFailureReason.SignalingError:
            return 38;
        case Enums.ParticipantFailureReason.ConversationEstablishmentFailed:
            return 39;
        case Enums.ParticipantFailureReason.TemporarilyUnavailable:
            return 40;
        case Enums.ParticipantFailureReason.NetworkCannotConnectError:
            return 41;
        case Enums.ParticipantFailureReason.NoSignalingFromPeer:
            return 42;
        case Enums.ParticipantFailureReason.AnonymousJoinDisabledByPolicy:
            return 53;
        case Enums.ParticipantFailureReason.NoLobbyForBroadcastJoin:
            return 54;
        case Enums.ParticipantFailureReason.NotAllowedDueToInformationBarrier:
            return 55;
        case Enums.ParticipantFailureReason.BroadcastLimitReached:
            return 56;
        case Enums.ParticipantFailureReason.B2bJoinDisabledByPolicy:
            return 57;
        case Enums.ParticipantFailureReason.LocationBasedRoutingError:
            return 58;
        case Enums.ParticipantFailureReason.Forbidden:
            return 52;
        default:
            return 11;
    }
}
exports.convertFailureReasonToParticipantReason = convertFailureReasonToParticipantReason;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var logUtils_1 = __webpack_require__(9);
var InternalLogger = (function () {
    function InternalLogger(_callingLogger) {
        var _this = this;
        this._callingLogger = _callingLogger;
        this._maybeLog = function (type) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a;
            try {
                (_a = _this._callingLogger)[type].apply(_a, args);
            }
            catch (e) {
                _this._callingLogger.info('[failed to log]', logUtils_1.getPrintableObject(e));
            }
        };
    }
    InternalLogger.prototype.getPrefix = function (fnName, causeId) {
        var prefix = '';
        if (causeId) {
            prefix += "[" + causeId + "]";
        }
        if (fnName) {
            prefix += "[" + fnName + "]";
        }
        return prefix;
    };
    InternalLogger.prototype.createChild = function (namespace, debug) {
        return new InternalLogger(this._callingLogger.createChild(namespace, debug));
    };
    InternalLogger.prototype.createFnLogger = function (fnName, causeId) {
        var additionalPrefix = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additionalPrefix[_i - 2] = arguments[_i];
        }
        return new InternalLogger(this._callingLogger.createChild(this.getPrefix(fnName, causeId) + additionalPrefix.join(''), false));
    };
    InternalLogger.prototype.logSuccess = function (piiSafeResult) {
        this._maybeLog('info', "success=" + piiSafeResult + "}");
    };
    InternalLogger.prototype.logFailure = function (reason) {
        var message = logUtils_1.getPrintableObject(reason);
        this._maybeLog('info', "failed=" + message + "}");
    };
    InternalLogger.prototype.log = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._maybeLog.apply(this, ['log'].concat(values));
    };
    InternalLogger.prototype.debug = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._maybeLog.apply(this, ['debug'].concat(values));
    };
    InternalLogger.prototype.info = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._maybeLog.apply(this, ['info'].concat(values));
    };
    InternalLogger.prototype.warn = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._maybeLog.apply(this, ['warn'].concat(values));
    };
    InternalLogger.prototype.error = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this._maybeLog.apply(this, ['error'].concat(values));
    };
    return InternalLogger;
}());
exports.default = InternalLogger;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var async = __webpack_require__(4);
var Enums = SlimCore.Enums;
var SlimCoreElectronEcsProvider = (function () {
    function SlimCoreElectronEcsProvider(_slimcoreInstance) {
        this._slimcoreInstance = _slimcoreInstance;
    }
    SlimCoreElectronEcsProvider.prototype.setEcsConfig = function (config) {
        try {
            this._slimcoreInstance.setEcsConfig(config.ecsBlob, config.userIdentity, config.etag, true);
            return Promise.resolve();
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    SlimCoreElectronEcsProvider.prototype.shouldTriggerCQF = function (username, callId, callType) {
        var _this = this;
        var block = function (callType) {
            var slimCoreCallType = Enums.CallType.CallTypeS2s;
            if (callType === 0) {
                slimCoreCallType = Enums.CallType.CallTypeGroup;
            }
            else if (callType === 2) {
                slimCoreCallType = Enums.CallType.CallTypePstn;
            }
            else if (callType === 1) {
                slimCoreCallType = Enums.CallType.CallTypeS2s;
            }
            return _this._slimcoreInstance.shouldTriggerCQF(username, callId, slimCoreCallType);
        };
        return async.asap(function () { return block(callType); });
    };
    SlimCoreElectronEcsProvider.prototype.getEcsQueryParameters = function () {
        try {
            return Promise.resolve(this._slimcoreInstance.getEcsQueryParameters());
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    return SlimCoreElectronEcsProvider;
}());
exports.default = SlimCoreElectronEcsProvider;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronSetup = (function () {
    function SlimCoreElectronSetup(_slimcoreInstance, _accountIdentity) {
        this._slimcoreInstance = _slimcoreInstance;
        this._accountIdentity = _accountIdentity;
    }
    SlimCoreElectronSetup.prototype.getSetup = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!SlimCoreCommon.hasFeature(SlimCore.Enums.Feature.MultiUserSupport)) {
                reject(('No Multiuser support'));
            }
            else {
                if (!_this._setup) {
                    _this._setup = _this._slimcoreInstance.getSetup(_this._accountIdentity);
                }
                resolve(_this._setup);
            }
        });
    };
    SlimCoreElectronSetup.prototype.setString = function (key, value) {
        var _this = this;
        return this.getSetup()
            .then(function () { return _this._setup.setStr(key, value); })
            .catch(function () { return _this._slimcoreInstance.setupSetStr(key, value); });
    };
    SlimCoreElectronSetup.prototype.setNumber = function (key, value) {
        var _this = this;
        return this.getSetup()
            .then(function () { return _this._setup.setInt(key, value); })
            .catch(function () { return _this._slimcoreInstance.setupSetInt(key, value); });
    };
    SlimCoreElectronSetup.prototype.getString = function (key) {
        var _this = this;
        return this.getSetup()
            .then(function () { return _this._setup.getStr(key); })
            .catch(function () { return _this._slimcoreInstance.setupGetStr(key); });
    };
    SlimCoreElectronSetup.prototype.getNumber = function (key) {
        var _this = this;
        return this.getSetup()
            .then(function () { return _this._setup.getInt(key); })
            .catch(function () { return _this._slimcoreInstance.setupGetInt(key); });
    };
    SlimCoreElectronSetup.prototype.delete = function (key) {
        var _this = this;
        return this.getSetup()
            .then(function () { return _this._setup.delete(key); })
            .catch(function () { return _this._slimcoreInstance.setupDelete(key); });
    };
    return SlimCoreElectronSetup;
}());
exports.default = SlimCoreElectronSetup;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var EventSourceImpl = (function () {
    function EventSourceImpl(logger) {
        this.subscriptions = [];
        this.eventLogger = logger;
    }
    EventSourceImpl.prototype.subscribe = function (eventHandler) {
        return new EventSubscriptionImpl(this.subscriptions, eventHandler);
    };
    EventSourceImpl.prototype.dispose = function (causeId) {
        this.subscriptions = [];
    };
    EventSourceImpl.prototype.raiseEvents = function (exec) {
        var _this = this;
        var subscriptions = this.subscriptions.slice();
        subscriptions.forEach(function (subscription) {
            try {
                subscription.eventHandler !== undefined && exec(subscription.eventHandler);
            }
            catch (e) {
                if (_this.eventLogger && _this.eventLogger.warn) {
                    _this.eventLogger.warn('Event handler exception caught!', e);
                }
            }
        });
    };
    return EventSourceImpl;
}());
exports.EventSourceImpl = EventSourceImpl;
var EventSubscriptionImpl = (function () {
    function EventSubscriptionImpl(subscriptions, eventHandler) {
        this.subscriptions = subscriptions;
        this.eventHandler = eventHandler;
        this.subscriptions.push(this);
    }
    EventSubscriptionImpl.prototype.dispose = function () {
        var _this = this;
        _.remove(this.subscriptions, function (subscription) { return subscription === _this; });
        this.eventHandler = undefined;
    };
    return EventSubscriptionImpl;
}());


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var fn_1 = __webpack_require__(6);
var piiUtils = __webpack_require__(5);
var async = __webpack_require__(4);
var causeId_1 = __webpack_require__(2);
var logUtils_1 = __webpack_require__(9);
var AsyncOperationHandler = (function () {
    function AsyncOperationHandler(logger) {
        var _this = this;
        this._disposed = false;
        this._logger = logger.createChild('[ASYNC]');
        this._endOperationDeferred = async.defer();
        this._endOperationDeferred.promise.catch(function (error) {
            _this._logger.info('Rejected all operations');
        });
        this._deferredOperations = {};
        this._deferredOperationsWithOperationId = {};
        this._deferredOperationsWithCauseId = {};
        this._logger = logger;
    }
    AsyncOperationHandler.prototype.registerPromise = function (asyncOperationName, asyncOperation) {
        var asyncOperationDone = false;
        var always = function () { asyncOperationDone = true; };
        asyncOperation.then(always, always);
        var endOperationPromise = this._endOperationDeferred.promise.catch(function (error) {
            if (!asyncOperationDone) {
                throw new Error("Operation " + asyncOperationName + " did not complete, reason:" + error);
            }
        });
        return Promise.race([endOperationPromise, asyncOperation]);
    };
    AsyncOperationHandler.prototype.updateOperationId = function (previousId, newId) {
        var _this = this;
        this._logger.info("updateOperationId " + previousId + " " + newId);
        Object.keys(this._deferredOperationsWithOperationId).forEach(function (operationName) {
            if (operationName && _this._deferredOperationsWithOperationId[operationName]) {
                _this._logger.info("_deferredOperationsWithOperationId " + operationName);
                Object.keys(_this._deferredOperationsWithOperationId[operationName]).forEach(function (id) {
                    if (id && _this._deferredOperationsWithOperationId[operationName][id]) {
                        _this._logger.info("_deferredOperationsWithOperationId " + id + " " + newId);
                        if (id === previousId) {
                            _this._deferredOperationsWithOperationId[operationName][newId]
                                = _this._deferredOperationsWithOperationId[operationName][id];
                            delete _this._deferredOperationsWithOperationId[operationName][id];
                        }
                    }
                });
            }
        });
        Object.keys(this._deferredOperationsWithCauseId).forEach(function (causeId) {
            if (causeId && _this._deferredOperationsWithCauseId[causeId]) {
                _this._logger.info("_deferredOperationsWithCauseId " + causeId);
                Object.keys(_this._deferredOperationsWithCauseId[causeId]).forEach(function (id) {
                    if (id && _this._deferredOperationsWithCauseId[causeId][id]) {
                        _this._logger.info("_deferredOperationsWithCauseId " + id + " " + newId);
                        if (id === previousId) {
                            _this._deferredOperationsWithOperationId[causeId][newId]
                                = _this._deferredOperationsWithOperationId[causeId][id];
                            delete _this._deferredOperationsWithOperationId[causeId][id];
                        }
                    }
                });
            }
        });
    };
    AsyncOperationHandler.prototype.createPendingOperation = function (operationName, operationId, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var deferredOperation = async.defer();
        deferredOperation.promise.catch(fn_1.noop);
        var operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
        this._logger.info(operationInfo + "[creating...]");
        if (this._disposed) {
            this._logger.info(operationInfo + "[create failed, call is disposed]");
            return Promise.reject(60);
        }
        if (operationId) {
            if (!this._deferredOperationsWithOperationId[operationName]) {
                this._deferredOperationsWithOperationId[operationName] = {};
            }
            if (this._deferredOperationsWithOperationId[operationName][operationId]) {
                this._logger.warn(operationInfo + " Deferred operation with given name and operation id is already defined");
                return Promise.reject(new Error("Deferred operation with given name is already defined:" + operationName + "/" + piiUtils.scrubMriOrOmit(operationId)));
            }
            else {
                this._deferredOperationsWithOperationId[operationName][operationId] = { deferred: deferredOperation, causeId: causeId };
                if (!this._deferredOperationsWithCauseId[causeId]) {
                    this._deferredOperationsWithCauseId[causeId] = {};
                }
                this._deferredOperationsWithCauseId[causeId][operationId] = deferredOperation;
            }
        }
        else {
            if (!this._deferredOperations[operationName]) {
                if (!this._deferredOperationsWithCauseId[causeId]) {
                    this._deferredOperationsWithCauseId[causeId] = {};
                }
                this._deferredOperationsWithCauseId[causeId][''] = deferredOperation;
                this._deferredOperations[operationName] = { deferred: deferredOperation, causeId: causeId };
            }
            else {
                this._logger.warn(operationInfo + " Deferred operation with given name is already defined");
                return Promise.reject(new Error("Deferred operation with given name is already defined:" + operationName));
            }
        }
        var endOperationPromise = this._endOperationDeferred.promise.catch(function (error) {
            if (_this.hasPendingOperation(operationName, operationId)) {
                return Promise.reject(new Error("Operation " + operationName + " did not complete, reason:" + error));
            }
            return Promise.resolve(undefined);
        });
        return Promise.race([endOperationPromise, deferredOperation.promise]);
    };
    AsyncOperationHandler.prototype.hasPendingOperation = function (operationName, operationId) {
        if (!operationId) {
            return !!this._deferredOperations[operationName];
        }
        else if (this._deferredOperationsWithOperationId[operationName]) {
            return !!this._deferredOperationsWithOperationId[operationName][operationId];
        }
        return false;
    };
    AsyncOperationHandler.prototype.hasPendingOperationWithCauseId = function (causeId, operationId) {
        if (!operationId) {
            operationId = '';
        }
        return !!this._deferredOperationsWithCauseId[causeId][operationId];
    };
    AsyncOperationHandler.prototype.getPendingOperationWithCauseId = function (causeId, operationId) {
        if (this.hasPendingOperationWithCauseId(causeId, operationId)) {
            return this._deferredOperationsWithCauseId[causeId][operationId].promise;
        }
        return Promise.reject("[" + causeId + "][" + operationId + "]: getPendingOperationWithCauseId for given causeId, operationId");
    };
    AsyncOperationHandler.prototype.resolveOperationWithCauseId = function (causeId, operationId, resolveResult) {
        if (this.hasPendingOperationWithCauseId(causeId)) {
            if (!operationId) {
                operationId = '';
            }
            var deferredPromise = this._deferredOperationsWithCauseId[causeId][operationId];
            var promise = deferredPromise.promise;
            deferredPromise.resolve(resolveResult);
            this._logger.info("[" + causeId + "][" + operationId + "] resolved, result=" + (logUtils_1.getPrintableObject(resolveResult) || "void"));
            delete this._deferredOperationsWithCauseId[causeId][operationId];
            return promise;
        }
        return Promise.reject("[" + causeId + "][" + operationId + "] resolveOperationWithCauseId failed, operation not found");
    };
    AsyncOperationHandler.prototype.rejectOperationWithCauseId = function (causeId, operationId, resolveResult) {
        if (this.hasPendingOperationWithCauseId(causeId)) {
            if (!operationId) {
                operationId = '';
            }
            var deferredPromise = this._deferredOperationsWithCauseId[causeId][operationId];
            var promise = deferredPromise.promise;
            promise.catch(fn_1.noop);
            deferredPromise.reject(resolveResult);
            this._logger.info("[" + causeId + "][" + operationId + "] rejected, result=" + (logUtils_1.getPrintableObject(resolveResult) || "void"));
            delete this._deferredOperationsWithCauseId[causeId][operationId];
            return promise;
        }
        return Promise.reject("[" + causeId + "][" + operationId + "] rejectOperationWithCauseId failed, operation not found");
    };
    AsyncOperationHandler.prototype.maybeResolveOperationWithCauseId = function (causeId, operationId, resolveResult) {
        var _this = this;
        if (this.hasPendingOperationWithCauseId(causeId, operationId)) {
            this.resolveOperationWithCauseId(causeId, operationId, resolveResult).catch(function (e) {
                _this._logger.info(causeId + "maybeResolveOperationWithCauseId failed, reason=" + logUtils_1.getPrintableObject(e));
            });
        }
        else {
            this._logger.info(causeId + "maybeResolveOperationWithCauseId ignored, operation does not exist");
        }
    };
    AsyncOperationHandler.prototype.maybeRejectOperationWithCauseId = function (causeId, operationId, resolveResult) {
        if (this.hasPendingOperationWithCauseId(causeId, operationId)) {
            this.rejectOperationWithCauseId(causeId, operationId, resolveResult).catch(fn_1.noop);
        }
        else {
            this._logger.info(causeId + "maybeRejectOperationWithCauseId ignored, operation does not exist");
        }
    };
    AsyncOperationHandler.prototype.getPendingOperation = function (operationName, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (!operationId && this._deferredOperations[operationName]) {
            return this._deferredOperations[operationName].deferred.promise;
        }
        else if (this._deferredOperationsWithOperationId[operationName] &&
            this._deferredOperationsWithOperationId[operationName][operationId]) {
            return this._deferredOperationsWithOperationId[operationName][operationId].deferred.promise;
        }
        return Promise.reject(this.getOperationInfoForLogging(causeId, operationName, operationId) + ": Deferred operation with given name and operation does not exist");
    };
    AsyncOperationHandler.prototype.waitForOperation = function (operationName, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (this.hasPendingOperation(operationName)) {
            return this._deferredOperations[operationName].deferred.promise;
        }
        else if (this.hasPendingOperation(operationName, operationId)) {
            return this._deferredOperationsWithOperationId[operationName][operationId].deferred.promise;
        }
        return Promise.reject(this.getOperationInfoForLogging(causeId, operationName, operationId) + "failed=wait failed, operation not found");
    };
    AsyncOperationHandler.prototype.resolveOperation = function (operationName, resolveResult, operationId, causeId, persistOperationData) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (persistOperationData === void 0) { persistOperationData = false; }
        if (!operationName) {
            return Promise.reject('Unable to resolve deferred operation with empty name');
        }
        if (this.hasPendingOperation(operationName)) {
            var operation = this._deferredOperations[operationName];
            var promise = this._deferredOperations[operationName].deferred.promise;
            this._deferredOperations[operationName].deferred.resolve(resolveResult);
            this._logger.info(this.getOperationInfoForLogging(operation.causeId, operationName, operationId) + "resolved, result=" + (logUtils_1.getPrintableObject(resolveResult) || "void"));
            if (!persistOperationData) {
                delete this._deferredOperations[operationName];
            }
            return promise;
        }
        if (this.hasPendingOperation(operationName, operationId)) {
            var operation = this._deferredOperationsWithOperationId[operationName][operationId];
            var promise = operation.deferred.promise;
            operation.deferred.resolve(resolveResult);
            this._logger.info(this.getOperationInfoForLogging(operation.causeId, operationName, operationId) + "resolved, result=" + (logUtils_1.getPrintableObject(resolveResult) || "void"));
            if (!persistOperationData) {
                delete this._deferredOperationsWithOperationId[operationName][operationId];
            }
            return promise;
        }
        return Promise.reject(this.getOperationInfoForLogging(causeId, operationName, operationId) + "failed=resolve failed, operation not found");
    };
    AsyncOperationHandler.prototype.rejectOperation = function (operationName, reason, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        if (!operationName) {
            return Promise.reject('Unable to reject deferred operation with empty name');
        }
        if (this.hasPendingOperation(operationName)) {
            var operation = this._deferredOperations[operationName];
            var promise = operation.deferred.promise;
            promise.catch(fn_1.noop);
            operation.deferred.reject(reason);
            this._logger.info(this.getOperationInfoForLogging(operation.causeId, operationName, operationId) + "rejected, reason=" + (logUtils_1.getPrintableObject(reason) || "void"));
            delete this._deferredOperations[operationName];
            return promise;
        }
        if (this.hasPendingOperation(operationName, operationId)) {
            var operation = this._deferredOperationsWithOperationId[operationName][operationId];
            var promise = operation.deferred.promise;
            promise.catch(fn_1.noop);
            operation.deferred.reject(reason);
            this._logger.info(this.getOperationInfoForLogging(operation.causeId, operationName, operationId) + "rejected, reason=" + (logUtils_1.getPrintableObject(reason) || "void"));
            delete this._deferredOperationsWithOperationId[operationName][operationId];
            return promise;
        }
        return Promise.reject(this.getOperationInfoForLogging(causeId, operationName, operationId) + "failed=reject failed, operation not found");
    };
    AsyncOperationHandler.prototype.maybeResolveOperation = function (operationName, resolveResult, operationId, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
        if (this.hasPendingOperation(operationName, operationId)) {
            this.resolveOperation(operationName, resolveResult, operationId, causeId).catch(function (e) {
                _this._logger.info(operationInfo + "maybeResolveOperation failed, reason=" + logUtils_1.getPrintableObject(e));
            });
        }
        else {
            this._logger.info(operationInfo + "maybeResolveOperation ignored, operation does not exist");
        }
    };
    AsyncOperationHandler.prototype.maybeRejectOperation = function (operationName, reason, operationId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var operationInfo = this.getOperationInfoForLogging(causeId, operationName, operationId);
        if (this.hasPendingOperation(operationName, operationId)) {
            this.rejectOperation(operationName, reason, operationId, causeId).catch(fn_1.noop);
        }
        else {
            this._logger.info(operationInfo + "maybeRejectOperation ignored, operation does not exist");
        }
    };
    AsyncOperationHandler.prototype.rejectPendingOperations = function (reason, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        this._disposed = true;
        this._logger.info("[" + causeId + "]rejectPendingOperations=" + reason);
        Object.keys(this._deferredOperations).forEach(function (operationName) {
            _this.maybeRejectOperation(operationName, reason, undefined, causeId);
            if (_this._deferredOperationsWithOperationId[causeId]) {
                delete _this._deferredOperationsWithOperationId[causeId][''];
            }
        });
        Object.keys(this._deferredOperationsWithOperationId).forEach(function (operationName) {
            Object.keys(_this._deferredOperationsWithOperationId[operationName]).forEach(function (operationId) {
                _this.maybeRejectOperation(operationName, reason, operationId, causeId);
                if (_this._deferredOperationsWithOperationId[causeId]) {
                    delete _this._deferredOperationsWithOperationId[causeId][operationId];
                }
            });
        });
        this._deferredOperations = {};
        this._deferredOperationsWithOperationId = {};
        this._endOperationDeferred.reject(reason);
    };
    AsyncOperationHandler.prototype.getOperationInfoForLogging = function (causeId, operationName, operationId) {
        if (operationId === void 0) { operationId = ''; }
        var operationInfo = operationId ? "[" + piiUtils.scrubMriOrOmit(operationId) + "]" : "";
        return "[" + causeId + "][" + operationName + "]" + operationInfo;
    };
    return AsyncOperationHandler;
}());
exports.default = AsyncOperationHandler;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MRI_ALIASES_REGEX = /;aliases=.*$/i;
exports.MRI_SKYPE_PREFIX = '8:';
exports.MRI_ALIAS_PREFIX = ';aliases=';
exports.MRI_SIP_PREFIX = '2:';
function stripMriAliases(mri) {
    if (mri) {
        return mri.replace(MRI_ALIASES_REGEX, '');
    }
    return mri;
}
exports.stripMriAliases = stripMriAliases;
function generateAliasedMri(mri, sipUri) {
    var aliasedMri = mri;
    if (sipUri) {
        aliasedMri += exports.MRI_ALIAS_PREFIX + exports.MRI_SIP_PREFIX + sipUri;
    }
    return aliasedMri;
}
exports.generateAliasedMri = generateAliasedMri;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var _ = __webpack_require__(1);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronCall_1 = __webpack_require__(11);
var SlimCoreElectronDataChannel_1 = __webpack_require__(12);
var SlimCoreElectronRemoteStreamManager_1 = __webpack_require__(17);
var piiUtils = __webpack_require__(5);
var SlimCoreCommon = __webpack_require__(0);
var EnumConverter = __webpack_require__(19);
var Enums = SlimCore.Enums;
var callConstants_1 = __webpack_require__(8);
var callTelemetry_1 = __webpack_require__(13);
var causeId_1 = __webpack_require__(2);
var mriUtils_1 = __webpack_require__(25);
var helper_1 = __webpack_require__(44);
var validStateTransitions = (_a = {},
    _a[0] = [1, 2, 3, 4, 6, 7, 5],
    _a[1] = [2, 3, 4, 6, 7, 0],
    _a[2] = [0, 1, 3, 4, 6, 7],
    _a[3] = [2, 1, 4, 5, 0, 7],
    _a[4] = [0],
    _a[5] = [3, 4, 0],
    _a[6] = [3, 4, 0],
    _a[7] = [3, 4, 0],
    _a);
exports.participantStrProps = {
    displayName: { propKey: Enums.Property.ParticipantDisplayName },
    role: { propKey: Enums.Property.ParticipantRole },
    tenantId: { propKey: Enums.Property.ParticipantTenantId },
    acceptedBy: { propKey: Enums.Property.ParticipantAcceptedBy },
    endpointDetails: { propKey: Enums.Property.ParticipantEndpointDetails },
    meetingRole: { propKey: Enums.Property.ParticipantMeetingRole }
};
exports.participantIntProps = {
    isServerMuted: { propKey: Enums.Property.ParticipantIsServerMuted },
    capabilities: { propKey: Enums.Property.ParticipantCapabilities, fallback: SlimCore.Enums.Capability.All },
    contentRole: { propKey: Enums.Property.ParticipantContentRole, fallback: Enums.ContentSharingRole.None },
    status: { propKey: Enums.Property.ParticipantStatus },
    failure: { propKey: Enums.Property.ParticipantFailureReason }
};
var SlimCoreElectronCallParticipant = (function (_super) {
    __extends(SlimCoreElectronCallParticipant, _super);
    function SlimCoreElectronCallParticipant(logger, settings, engine, mri, _callHandler, _streamContextMap, attachParticipantId, _callTelemetry, isObserving, data) {
        var _a;
        if (attachParticipantId === void 0) { attachParticipantId = 0; }
        if (isObserving === void 0) { isObserving = false; }
        var _this = _super.call(this, logger.createChild(function () { return "ICallParticipant[" + piiUtils.scrubMriOrOmit(_this.id) + "][" + _this.state + "][" + _this.slimcoreObjectId + "]"; }), settings, engine) || this;
        _this._callHandler = _callHandler;
        _this._streamContextMap = _streamContextMap;
        _this._callTelemetry = _callTelemetry;
        _this.streams = (_a = {},
            _a[0] = [],
            _a[1] = [],
            _a);
        _this.voiceLevel = 0;
        _this.isServerMuted = false;
        _this.dominantSpeakerRank = 0;
        _this.state = 0;
        _this.id = null;
        _this.role = null;
        _this.tenantId = null;
        _this.balanceUpdates = {};
        _this.enableParticipantLegToSourceIdMapping = true;
        _this._logger.info('created');
        _this.id = mriUtils_1.stripMriAliases(mri);
        _this.participantCapabilities = SlimCoreElectronCallParticipant.convertCapabilities(SlimCore.Enums.Capability.All);
        if (attachParticipantId && attachParticipantId !== 0) {
            _this.attachSlimcoreObjectId(attachParticipantId, 'ctor', isObserving, data);
        }
        if (_this._slimcoreInstance.ecsGetSettingAsBool) {
            _this.enableParticipantLegToSourceIdMapping = _this._slimcoreInstance.ecsGetSettingAsBool('SkypeCalling', 'enableParticipantLegToSourceIdMapping', true);
        }
        _this._logger.info("enableParticipantLegToSourceIdMapping = " + _this.enableParticipantLegToSourceIdMapping);
        return _this;
    }
    SlimCoreElectronCallParticipant.prototype.getDiagnosticData = function () {
        return JSON.stringify({
            id: this.id,
            slimcoreObjectId: this.slimcoreObjectId,
            state: this.state,
            isServerMuted: this.isServerMuted
        });
    };
    SlimCoreElectronCallParticipant.prototype.attachSlimcoreObjectId = function (attachParticipantId, causeId, isObserving, data) {
        var _this = this;
        if (isObserving === void 0) { isObserving = false; }
        if (this.slimcoreObjectId && this.slimcoreObjectId !== 0) {
            this._callTelemetry.recordEvent(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.ELECTRON_ATTACH_SLIMCORE_PARTICIPANT_FAILED, { attachParticipantId: attachParticipantId, reason: 'Participant already attached to a SlimCore object' }, causeId);
            this._logger.debug('Attach called on existing participant');
            return;
        }
        this.slimcoreObjectId = attachParticipantId;
        var props = (data && data.props) || this._getProperties(this._callHandler, this.slimcoreObjectId, exports.participantStrProps, exports.participantIntProps);
        this.displayName = props.displayName;
        this.role = props.role;
        this.tenantId = props.tenantId;
        this.participantCapabilities = SlimCoreElectronCallParticipant.convertCapabilities(props.capabilities);
        this.acceptedBy = props.acceptedBy;
        this.isServerMuted = !!props.isServerMuted;
        this.meetingRole = props.meetingRole;
        this._slimCoreElectronRemoteStreamManager = new SlimCoreElectronRemoteStreamManager_1.default(this._logger, this._settings, this._slimcoreInstance, this._callHandler, this.slimcoreObjectId, this.streams, this._streamContextMap, isObserving);
        this._slimCoreElectronRemoteStreamManager.changed(function () { return _this.raiseChanged(); });
        this._updateEndpointDetails(props.endpointDetails);
        this._onParticipantPropertyChanged(Enums.Property.ParticipantStatus, function (data) { return _this._onStatusChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantIsServerMuted, function (data) { return _this._onIsServerMuted(!!data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantFailureReason, function (data) { return _this._onFailureReasonChange(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantAdmitFailureReason, function (data) { return _this._onAdmitFailureReasonChange(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantRemoveFailureReason, function (data) { return _this._onRemoveFailureReasonChange(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantIsActiveSpeaker, function (data) { return _this.setVoiceLevel(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantDominantSpeakerRank, function (data) { return _this._onDominantSpeakerRankChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantEndpointDetails, function (data) { return _this._updateEndpointDetails(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantCapabilities, function (data) { return _this._onCapabilitiesChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantAcceptedBy, function (data) { return _this._onAcceptedByChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantRole, function (data) { return _this._onRoleChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantTenantId, function (data) { return _this._onTenantIdChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantContentRole, function (data) { return _this._onParticipantContentSharingRoleChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantBalanceUpdate, function (data) { return _this._onBalanceUpdateChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantDiagnosticsCode, function (data) { return _this._onParticipantDiagnosticsCodeChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantMeetingRole, function (data) { return _this._onMeetingRoleChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantMriIdentity, function (data) { return _this._onMriChanged(data.value); });
        this._onParticipantPropertyChanged(Enums.Property.ParticipantDisplayName, function (data) { return _this._onDisplayNameChanged(data.value); });
        this._onStatusChanged(props.status, false, props.failure);
        this._onParticipantContentSharingRoleChanged(props.contentRole);
    };
    SlimCoreElectronCallParticipant.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._callHandler, this.slimcoreObjectId, property, fallback);
    };
    SlimCoreElectronCallParticipant.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._callHandler, this.slimcoreObjectId, property, fallback);
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantPropertyChanged = function (propKey, listener) {
        this._onObjectPropertyChanged(this.slimcoreObjectId, propKey, listener);
    };
    SlimCoreElectronCallParticipant.prototype._onCapabilitiesChanged = function (value) {
        var caps = SlimCoreElectronCallParticipant.convertCapabilities(value);
        if (caps !== this.participantCapabilities) {
            this._logger.info("Computed capabilities: " + JSON.stringify(caps));
            this.participantCapabilities = caps;
            this.raiseChangedDeferred();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onAcceptedByChanged = function (acceptedEndpoint) {
        if (acceptedEndpoint !== this.acceptedBy) {
            this._logger.info("Accepted by is set to " + piiUtils.scrubMriOrOmit(acceptedEndpoint));
            this.acceptedBy = acceptedEndpoint;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onRoleChanged = function (role) {
        if (role !== this.role) {
            this._logger.info("Role is set to " + role);
            this.role = role;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onTenantIdChanged = function (tenantId) {
        if (tenantId !== this.tenantId) {
            this._logger.info("TenantId is set to " + tenantId);
            this.tenantId = tenantId;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onMeetingRoleChanged = function (meetingRole) {
        if (meetingRole !== this.meetingRole) {
            this._logger.info("_onMeetingRoleChanged meetingRole: " + meetingRole);
            this.meetingRole = meetingRole;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onMriChanged = function (newMri) {
        if (newMri !== this.id) {
            this._logger.info("_onMriChanged from old mri " + piiUtils.scrubMriOrOmit(this.id) + " to new Mri: " + piiUtils.scrubMriOrOmit(newMri));
            this.previousId = this.id;
            this.id = newMri;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onDisplayNameChanged = function (displayName) {
        if (displayName !== this.displayName) {
            this._logger.info("_onDisplayNameChanged new displayName: " + piiUtils.scrubMriOrOmit(displayName));
            this.displayName = displayName;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype.raiseChangedDeferred = function () {
        var _this = this;
        if (!this._raiseChangedDefer) {
            this._raiseChangedDefer = _.defer(function () {
                delete _this._raiseChangedDefer;
                _this.raiseChanged();
            });
        }
    };
    SlimCoreElectronCallParticipant.prototype._getParticipantIdForSourceId = function (mediaType, sourceId) {
        try {
            if (this.endpoints != null) {
                for (var _i = 0, _a = this.endpoints.endpointDetails; _i < _a.length; _i++) {
                    var endpointDetail = _a[_i];
                    if (endpointDetail != null && endpointDetail.mediaStreams != null) {
                        for (var _b = 0, _c = endpointDetail.mediaStreams; _b < _c.length; _b++) {
                            var stream = _c[_b];
                            if (sourceId === stream.sourceId && SlimCoreCommon.mapMediaTypeStringToMediaType(stream.type) === mediaType) {
                                return endpointDetail.participantId != null ? endpointDetail.participantId : null;
                            }
                        }
                    }
                }
            }
        }
        catch (error) {
            this._logger.error("getSourceIdForMediaType caught exception error=" + error);
        }
        return undefined;
    };
    SlimCoreElectronCallParticipant.prototype.getParticipantIdForSourceId = function (mediaType, sourceId) {
        var participantId = this._getParticipantIdForSourceId(mediaType, sourceId);
        if (!participantId) {
            this._logger.warn("participantId is " + participantId + " for mediaType: " + mediaType + ", sourceId: " + sourceId);
        }
        return participantId;
    };
    SlimCoreElectronCallParticipant.prototype.hasSourceId = function (mediaType, sourceId) {
        if (!this.enableParticipantLegToSourceIdMapping) {
            return this.getSourceIdForMediaType(mediaType) === sourceId;
        }
        return this._getParticipantIdForSourceId(mediaType, sourceId) !== undefined;
    };
    SlimCoreElectronCallParticipant.prototype.getSourceIdForMediaType = function (mediaType) {
        var sourceId = -1;
        try {
            if (this.endpoints) {
                outerloop: for (var _i = 0, _a = this.endpoints.endpointDetails; _i < _a.length; _i++) {
                    var endpointDetail = _a[_i];
                    if (endpointDetail !== null && endpointDetail.mediaStreams !== undefined) {
                        for (var _b = 0, _c = endpointDetail.mediaStreams; _b < _c.length; _b++) {
                            var stream = _c[_b];
                            if (SlimCoreCommon.mapMediaTypeStringToMediaType(stream.type) === mediaType) {
                                sourceId = stream.sourceId;
                                break outerloop;
                            }
                        }
                    }
                    else {
                        sourceId = SlimCoreElectronDataChannel_1.DATA_SOURCE_ID_ANY;
                    }
                }
            }
        }
        catch (error) {
            this._logger.error("getSourceIdForMediaType caught exception error=" + error);
        }
        return sourceId;
    };
    SlimCoreElectronCallParticipant.prototype.getSourceId = function (participantId, mediaType) {
        if (!this.enableParticipantLegToSourceIdMapping) {
            return this.getSourceIdForMediaType(mediaType);
        }
        if (!this.endpoints) {
            this._logger.warn('endpoints is invalid');
            return -1;
        }
        try {
            var participantLeg = _.find(this.endpoints.endpointDetails, function (endpointDetail) { return endpointDetail != null && endpointDetail.participantId === participantId; });
            if (!participantLeg) {
                this._logger.warn("participantId not found: " + participantId);
                return this.getSourceIdForMediaType(mediaType);
            }
            if (!participantLeg.mediaStreams) {
                this._logger.warn("participantLeg " + participantId + " does not have valid mediaStreams");
                return this.getSourceIdForMediaType(mediaType);
            }
            var stream = _.find(participantLeg.mediaStreams, function (stream) { return SlimCoreCommon.mapMediaTypeStringToMediaType(stream.type) === mediaType; });
            if (!stream) {
                this._logger.warn("participantLeg " + participantId + " has no channel of type " + mediaType);
                return -1;
            }
            return stream.sourceId;
        }
        catch (error) {
            this._logger.error("getSourceId caught exception error=" + error);
        }
        return -1;
    };
    SlimCoreElectronCallParticipant.prototype._isScreenSharerStream = function (stream) {
        return stream.direction === 'sendonly' && stream.label === 'applicationsharing-video';
    };
    SlimCoreElectronCallParticipant.prototype.getSharingParticipantLeg = function () {
        var _this = this;
        if (!this.endpoints || !this.endpoints.endpointDetails) {
            this._logger.warn('endpoints are not defined');
            return undefined;
        }
        if (this.endpoints.endpointDetails.length === 1) {
            return this.endpoints.endpointDetails[0].participantId;
        }
        var endpoint = _.find(this.endpoints.endpointDetails, function (e) { return e != null && e.mediaStreams != null && _.some(e.mediaStreams, function (s) { return _this._isScreenSharerStream(s); }); });
        if (!endpoint) {
            this._logger.warn('could not find sharer');
            return undefined;
        }
        if (!endpoint.participantId) {
            this._logger.warn('invalid participantId');
            return undefined;
        }
        return endpoint.participantId;
    };
    SlimCoreElectronCallParticipant.getEndpointDetailsLogString = function (endpoints) {
        if (!endpoints || !endpoints.endpointDetails) {
            return '';
        }
        var result = [];
        endpoints.endpointDetails.forEach(function (e) {
            result.push({
                participantId: e.participantId,
                endpointId: e.endpointId,
                clientVersion: e.clientVersion,
                mediaStreams: e.mediaStreams
            });
        });
        return JSON.stringify(result);
    };
    SlimCoreElectronCallParticipant.prototype._updateEndpointDetails = function (rawEndpointDetails) {
        var causeId = causeId_1.generateCauseId();
        if (this._rawEndpoints === rawEndpointDetails || !rawEndpointDetails) {
            return;
        }
        try {
            this.endpoints = JSON.parse(rawEndpointDetails);
            this._rawEndpoints = rawEndpointDetails;
            this._logger.info("Updating endpointDetails: " + SlimCoreElectronCallParticipant.getEndpointDetailsLogString(this.endpoints));
            this._callTelemetry.recordEvent(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.UPDATE_PARTICIPANT_STREAM, helper_1.getStreamInformationFromEndpoints(this.endpoints), causeId);
        }
        catch (e) {
            this._logger.warn("Failed to parse call member endpointDetails - " + e + " -" + rawEndpointDetails);
            return;
        }
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onStatusChanged = function (value, updateEndpointDetails, failure) {
        if (updateEndpointDetails === void 0) { updateEndpointDetails = true; }
        var causeId = causeId_1.generateCauseId();
        this._logger.info("[" + causeId + "]Status changed " + value + " (" + Enums.CallStatus[value] + ")");
        var failureReason = failure !== undefined ? failure : this.getIntProperty(Enums.Property.ParticipantFailureReason);
        var participantState = SlimCoreElectronCallParticipant.convertParticipantStatus(value);
        if (participantState === undefined) {
            this._logger.warn("Unrecognized " + participantState);
            return;
        }
        this.setState(participantState, causeId, EnumConverter.convertStatusAndFailureReasonToParticipantReason(value, failureReason), updateEndpointDetails);
        if (this._admitParticipantDeffered && SlimCoreElectronCallParticipant.isParticipantActive(this.state)) {
            this._admitParticipantDeffered.resolve();
            this._admitParticipantDeffered = null;
        }
        if (this._removeParticipantDeffered && !SlimCoreElectronCallParticipant.isParticipantActive(this.state)) {
            this._removeParticipantDeffered.resolve();
            this._removeParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantContentSharingRoleChanged = function (value) {
        this._logger.info("Content sharing role changed " + value + " (" + Enums.ContentSharingRole[value] + ")");
        this.setContentSharingRole(SlimCoreElectronCallParticipant.convertContentSharingRole(value));
    };
    SlimCoreElectronCallParticipant.prototype._onFailureReasonChange = function (value) {
        var causeId = causeId_1.generateCauseId();
        this._logger.info("[" + causeId + "]Failure reason changed " + value + " (" + Enums.ParticipantFailureReason[value] + ")");
        var state = this.getIntProperty(Enums.Property.ParticipantStatus);
        this.setState(SlimCoreElectronCallParticipant.convertParticipantStatus(state), causeId, EnumConverter.convertFailureReasonToParticipantReason(value));
    };
    SlimCoreElectronCallParticipant.prototype._onAdmitFailureReasonChange = function (value) {
        this._logger.info("Admit failure reason changed " + value + " (" + Enums.ParticipantFailureReason[value] + ")");
        var reason = EnumConverter.convertFailureReasonToParticipantReason(value);
        this.rejectAdmitParticipantDeferred(reason);
    };
    SlimCoreElectronCallParticipant.prototype._onRemoveFailureReasonChange = function (value) {
        this._logger.info("Remove failure reason changed " + value + " (" + Enums.ParticipantFailureReason[value] + ")");
        var reason = EnumConverter.convertFailureReasonToParticipantReason(value);
        this.rejectRemoveParticipantDeferred(reason);
    };
    SlimCoreElectronCallParticipant.prototype.setVoiceLevel = function (value) {
        if (this.voiceLevel === value) {
            return;
        }
        this.voiceLevel = value;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onIsServerMuted = function (isServerMuted) {
        if (isServerMuted !== this.isServerMuted) {
            this.isServerMuted = isServerMuted;
            this.raiseChanged();
        }
    };
    SlimCoreElectronCallParticipant.prototype._onDominantSpeakerRankChanged = function (value) {
        if (this.dominantSpeakerRank === value) {
            return;
        }
        this._logger.info("DominantSpeakerRank changing from " + this.dominantSpeakerRank + " to " + value);
        this.dominantSpeakerRank = value;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onBalanceUpdateChanged = function (rawBalanceUpdate) {
        if (_.isEmpty(rawBalanceUpdate)) {
            if (!_.isEmpty(this.balanceUpdates)) {
                this.balanceUpdates = {};
                this.raiseChanged();
            }
            return;
        }
        try {
            var balanceUpdate = JSON.parse(rawBalanceUpdate);
            if (_.isEqual(this.balanceUpdates[balanceUpdate.sender.endpointId], balanceUpdate)) {
                return;
            }
            this.balanceUpdates[balanceUpdate.sender.endpointId] = balanceUpdate;
        }
        catch (e) {
            this._logger.warn("Failed to parse call member balanceUpdate - " + e + " -" + rawBalanceUpdate);
            return;
        }
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype._onParticipantDiagnosticsCodeChanged = function (value) {
        this._logger.info("_onParticipantDiagnosticsCodeChanged diagnosticsCode: " + value);
        this._updateDiagnosticsCode(value);
    };
    SlimCoreElectronCallParticipant.prototype._updateDiagnosticsCode = function (diagnosticsCode) {
        if (this._rawCallEndDiagnosticsInfo === diagnosticsCode || !diagnosticsCode) {
            return;
        }
        try {
            this.callEndDiagnosticsInfo = JSON.parse(diagnosticsCode);
            this._rawCallEndDiagnosticsInfo = diagnosticsCode;
            this.raiseChanged();
        }
        catch (err) {
            this._logger.info("Failed to parse raw diagnostis details. Error: " + err + ", diagnosticsCode: " + diagnosticsCode);
        }
    };
    SlimCoreElectronCallParticipant.prototype.setContentSharingRole = function (role) {
        if (this.contentSharingRole === role) {
            return;
        }
        this.contentSharingRole = role;
        this.raiseChanged();
    };
    SlimCoreElectronCallParticipant.prototype.setState = function (state, causeId, reason, updateEndpointDetails) {
        if (updateEndpointDetails === void 0) { updateEndpointDetails = true; }
        if (this.state === state) {
            return;
        }
        var fnLogger = this._logger.createFnLogger('setState', causeId);
        var validNextStates = validStateTransitions[this.state];
        var isValidNextState = validNextStates.indexOf(state) >= 0;
        var telemetryData = { state: this.state, reason: this.stateReason, endpoints: [] };
        if (this.endpoints && this.endpoints.endpointDetails && this.endpoints.endpointDetails.length) {
            telemetryData.endpoints = callTelemetry_1.getEndpointInformationForTelemetry(this.endpoints.endpointDetails);
        }
        if (!isValidNextState) {
            fnLogger.logFailure("Invalid state transition " + this.state + "->" + state + " attempted");
            this._callTelemetry.recordEvent(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.SET_PARTICIPANT_STATE_INVALID, telemetryData, causeId);
            return;
        }
        fnLogger.info("state=" + this.state + "->" + state + " reason=" + this.stateReason + "->" + reason);
        this._callTelemetry.recordEvent(callConstants_1.PARTICIPANT_OPERATIONS_INTERNAL.SET_PARTICIPANT_STATE, telemetryData, causeId);
        this.state = state;
        this.stateReason = reason;
        if (this.state === 3 && updateEndpointDetails) {
            var endpointDetails = this.getStrProperty(Enums.Property.ParticipantEndpointDetails);
            this._updateEndpointDetails(endpointDetails);
        }
        else if (this.state === 4) {
            var diagnostics = this.getStrProperty(Enums.Property.ParticipantDiagnosticsCode);
            this._updateDiagnosticsCode(diagnostics);
        }
        this.raiseChangedDeferred();
    };
    SlimCoreElectronCallParticipant.convertParticipantStatus = function (status) {
        if (SlimCoreElectronCall_1.default.isCallRinging(status)) {
            return 2;
        }
        else if (SlimCoreElectronCall_1.default.isCallTerminated(status)) {
            return 4;
        }
        else if (SlimCoreElectronCall_1.default.isCallConnected(status)) {
            return 3;
        }
        else if (SlimCoreElectronCall_1.default.isCallConnecting(status)) {
            return 1;
        }
        else if (SlimCoreElectronCall_1.default.isCallEarlyMedia(status)) {
            return 6;
        }
        else if (SlimCoreElectronCall_1.default.isCallInLobby(status)) {
            return 7;
        }
        else if (status === Enums.CallStatus.LocalHold || status === Enums.CallStatus.RemoteHold) {
            return 5;
        }
        return undefined;
    };
    SlimCoreElectronCallParticipant.isParticipantActive = function (state) {
        switch (state) {
            case 3:
            case 6:
            case 5:
                return true;
            default:
                return false;
        }
    };
    SlimCoreElectronCallParticipant.convertContentSharingRole = function (role) {
        switch (role) {
            case Enums.ContentSharingRole.Attendee:
                return 1;
            case Enums.ContentSharingRole.Presenter:
                return 2;
            default:
                return 0;
        }
    };
    SlimCoreElectronCallParticipant.convertCapabilities = function (caps) {
        return {
            canConference: !!(caps & Enums.Capability.Conference),
            canShareScreen: !!(caps & Enums.Capability.ShareScreen),
            canMerge: !!(caps & Enums.Capability.Merge)
        };
    };
    SlimCoreElectronCallParticipant.prototype.addAdmitParticipantDeferred = function (admitParticipantDeffered) {
        this._admitParticipantDeffered = admitParticipantDeffered;
    };
    SlimCoreElectronCallParticipant.prototype.rejectAdmitParticipantDeferred = function (terminatedReason) {
        if (this._admitParticipantDeffered) {
            this._admitParticipantDeffered.reject(terminatedReason);
            this._admitParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype.addRemoveParticipantDeferred = function (removeParticipantDeffered) {
        this._removeParticipantDeffered = removeParticipantDeffered;
    };
    SlimCoreElectronCallParticipant.prototype.rejectRemoveParticipantDeferred = function (terminatedReason) {
        if (this._removeParticipantDeffered) {
            this._removeParticipantDeffered.reject(terminatedReason);
            this._removeParticipantDeffered = null;
        }
    };
    SlimCoreElectronCallParticipant.prototype.stopVideos = function () {
        return this._slimCoreElectronRemoteStreamManager.stopVideos();
    };
    SlimCoreElectronCallParticipant.prototype.dispose = function () {
        if (this._slimCoreElectronRemoteStreamManager) {
            this._slimCoreElectronRemoteStreamManager.dispose();
        }
        this.streams[0] = [];
        this.streams[1] = [];
        if (this._admitParticipantDeffered) {
            this._admitParticipantDeffered.resolve();
            this._admitParticipantDeffered = null;
        }
        if (this._removeParticipantDeffered) {
            this._removeParticipantDeffered.resolve();
            this._removeParticipantDeffered = null;
        }
        this.slimcoreObjectId = 0;
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronCallParticipant;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronCallParticipant;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreElectronVideoRenderer_1 = __webpack_require__(28);
var Enums = SlimCore.Enums;
var _instanceCount = 0;
var SlimCoreElectronRemoteVideoRenderer = (function (_super) {
    __extends(SlimCoreElectronRemoteVideoRenderer, _super);
    function SlimCoreElectronRemoteVideoRenderer(logger, settings, engine, _renderTarget, _videoType, videoBinding, _options, _rendererTracker) {
        var _this = _super.call(this, logger.createChild(function () { return "RemoteVideoRenderer[" + _this._id + "]"; }), settings, engine) || this;
        _this._renderTarget = _renderTarget;
        _this._videoType = _videoType;
        _this._options = _options;
        _this._rendererTracker = _rendererTracker;
        _this._id = _instanceCount++;
        _this._logger.info('constructor');
        var isScreenShare = (_videoType === Enums.VideoType.ScreenShare);
        _this._videoBinding = videoBinding;
        _this._options = _options || {
            scalingMode: isScreenShare ? 2 : 1,
            transparent: isScreenShare,
            ignoreMirroring: false
        };
        _this._createVideoRenderer(_this._renderTarget, _this._options, false);
        _this._rendererTracker.registerRenderer(_this);
        return _this;
    }
    Object.defineProperty(SlimCoreElectronRemoteVideoRenderer.prototype, "renderTarget", {
        get: function () {
            return this._renderTarget;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronRemoteVideoRenderer.prototype.clone = function (renderTarget) {
        this._logger.info('clone');
        return new SlimCoreElectronRemoteVideoRenderer(this._logger, this._settings, this._slimcoreInstance, renderTarget, this._videoType, this._videoBinding, this._options, this._rendererTracker);
    };
    SlimCoreElectronRemoteVideoRenderer.prototype.dispose = function () {
        this._logger.info('dispose');
        try {
            _super.prototype.dispose.call(this);
        }
        finally {
            this._renderTarget = null;
            if (this._rendererTracker) {
                this._rendererTracker.unregisterRenderer(this);
                this._rendererTracker = null;
            }
        }
    };
    return SlimCoreElectronRemoteVideoRenderer;
}(SlimCoreElectronVideoRenderer_1.default));
exports.default = SlimCoreElectronRemoteVideoRenderer;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var causeId_1 = __webpack_require__(2);
var SlimCoreCommon = __webpack_require__(0);
var VIDEO_ELEMENT_SIZE_POLL_INTERVAL = 2000;
var SlimCoreElectronVideoRenderer = (function (_super) {
    __extends(SlimCoreElectronVideoRenderer, _super);
    function SlimCoreElectronVideoRenderer(logger, settings, engine) {
        var _this = _super.call(this, logger, settings, engine) || this;
        _this.isRendering = false;
        _this._paused = false;
        _this._isFrameSinkSet = false;
        _this._videoElementSizeChangeIntervalHandle = 0;
        _this._isStartedLogged = false;
        _this._frameTypeChanged = function (args) {
            _this._logger.info("frame-type-changed: " + args.type);
            _this.event('frameTypeChanged').raise(convertFrameType(args.type));
        };
        _this._frameSizeChanged = function (args) {
            _this._logger.info("frame-size-changed: " + args.width + " x " + args.height);
        };
        _this._firstFrameRendered = function (args) {
            _this._logger.info('first-frame-rendered');
            _this.event('firstFrameRendered').raise();
        };
        _this._fullFrameRenderRequired = function (args) {
            _this._logger.info("full-frame-render-required: " + args.fullFrameRenderRequired);
            _this.event('fullFrameRenderRequired').raise(args.fullFrameRenderRequired);
        };
        _this._videoUriChangedUwp = function (args) {
            if (_this._videoElement) {
                _this._videoElement.src = args.uri || '';
            }
        };
        _this._videoResizedUwp = function () {
            _this._videoSizeChanged(_this._videoElement.videoWidth, _this._videoElement.videoHeight);
        };
        _this._videoPausedUwp = function () {
            if (_this._videoElement) {
                _this._videoElement.src = _this._videoBindingRT.uri || '';
                _this._videoElement.play();
            }
        };
        return _this;
    }
    SlimCoreElectronVideoRenderer.prototype.dispose = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        this._disposeVideoRenderer(causeId);
        _super.prototype.dispose.call(this, causeId);
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "rendererType", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "frameType", {
        get: function () {
            if (this._frameSink && this._frameSink.getFrameType) {
                return convertFrameType(this._frameSink.getFrameType());
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "paused", {
        get: function () {
            return this._paused;
        },
        set: function (value) {
            if (this._settings.platform !== SlimCoreCommon.PlatformType.Electron) {
                throw new Error('Only implemented for Electron renderer');
            }
            if (value === this._paused) {
                return;
            }
            if (this._frameSink) {
                this._controlFrameSink(!value);
            }
            this._paused = value;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype.captureFrame = function (timeoutMs) {
        if (!this._videoBinding) {
            return Promise.resolve();
        }
        return this._videoBinding.captureFrame({ timeout: timeoutMs })
            .then(function (frame) { return new VideoFrame(SlimCoreCommon.convertImageData(frame.image), frame.mirror); });
    };
    SlimCoreElectronVideoRenderer.prototype.getStats = function () {
        var _this = this;
        return async.asap(function () { return _this._getStats(); });
    };
    SlimCoreElectronVideoRenderer.prototype.setScalingMode = function (scalingMode) {
        var _this = this;
        if (this._renderer) {
            return this._renderer.setScalingMode(convertScalingMode(scalingMode));
        }
        if (this._videoElement) {
            return new Promise(function () {
                _this._videoElement.msZoom = (scalingMode === 1);
            });
        }
        return Promise.reject('No video renderer');
    };
    SlimCoreElectronVideoRenderer.prototype.dumpVideoSourceImages = function () {
        return Promise.reject(new Error('Supposed to be overriden by preview video renderer. Not implemented for remote video renderer'));
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRenderer = function (target, options, isLocalPreview) {
        switch (this._settings.platform) {
            case SlimCoreCommon.PlatformType.Electron:
                return this._createVideoRendererElectron(target, options);
            case SlimCoreCommon.PlatformType.Uwp:
                return this._createVideoRendererUwp(target, options, isLocalPreview);
            default:
                throw new Error("Unsupported platform: " + this._settings.platform);
        }
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererElectron = function (target, options) {
        var _this = this;
        if (isElectronElement(target)) {
            this._renderer = target.renderer;
        }
        else {
            this._renderer = this._createVideoRendererImpl(target, options);
        }
        this._renderer.on('video-size-changed', function (args) { return _this._videoSizeChanged(args.width, args.height); });
        if (this._frameSink) {
            this._frameSink.on('frame-type-changed', this._frameTypeChanged);
            this._frameSink.on('frame-size-changed', this._frameSizeChanged);
            this._frameSink.on('first-frame-rendered', this._firstFrameRendered);
            this._frameSink.on('full-frame-render-required', this._fullFrameRenderRequired);
            if (!_.isUndefined(options.ignoreMirroring) && this._frameSink.setIgnoreMirroring) {
                this._frameSink.setIgnoreMirroring(options.ignoreMirroring);
            }
            this._controlFrameSink(true);
        }
    };
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererUwp = function (target, options, isLocalPreview) {
        var _this = this;
        this._logger.info("Creating uwp video renderer with uri " + this._videoBindingRT.uri);
        this._videoBindingRT.on('video-uri-changed', this._videoUriChangedUwp);
        var container = target;
        this._videoElement = container.ownerDocument.createElement('video');
        container.appendChild(this._videoElement);
        this._videoElement.autoplay = true;
        this._videoElement.msHorizontalMirror = !options.ignoreMirroring ? isLocalPreview : false;
        this._videoElement.msZoom = (options.scalingMode === 1);
        this._videoElement.style.backgroundColor = options.transparent ? '' : 'black';
        this._videoElement.addEventListener('resize', this._videoResizedUwp);
        this._videoElement.src = this._videoBindingRT.uri || '';
        this._videoElement.addEventListener('pause', this._videoPausedUwp);
        if (!isLocalPreview && this._videoBindingRT.setVideoPreference) {
            var videoElementSize_1 = { width: 0, height: 0 };
            this._videoElementSizeChangeIntervalHandle = setInterval(function () {
                var size = { width: _this._videoElement.offsetWidth, height: _this._videoElement.offsetHeight };
                if (!_.isEqual(videoElementSize_1, size)) {
                    videoElementSize_1 = size;
                    _this._videoBindingRT.setVideoPreference(size.width, size.height);
                }
            }, VIDEO_ELEMENT_SIZE_POLL_INTERVAL);
        }
    };
    SlimCoreElectronVideoRenderer.prototype._disposeVideoRenderer = function (causeId) {
        if (this._frameSink) {
            this._frameSink.removeListener('frame-type-changed', this._frameTypeChanged);
            this._frameSink.removeListener('frame-size-changed', this._frameSizeChanged);
            this._frameSink.removeListener('first-frame-rendered', this._firstFrameRendered);
            this._frameSink.removeListener('full-frame-render-required', this._fullFrameRenderRequired);
            this._controlFrameSink(false);
        }
        if (this._renderer) {
            this._renderer.removeAllListeners();
            this._renderer.dispose();
            this._renderer = null;
        }
        if (this._videoBindingRT) {
            this._videoBindingRT.removeListener('video-uri-changed', this._videoUriChangedUwp);
        }
        if (this._videoElementSizeChangeIntervalHandle) {
            clearInterval(this._videoElementSizeChangeIntervalHandle);
            this._videoElementSizeChangeIntervalHandle = 0;
        }
        if (this._videoElement) {
            this._videoElement.removeEventListener('resize', this._videoResizedUwp);
            this._videoElement.removeEventListener('pause', this._videoPausedUwp);
            this._videoElement.remove();
            this._videoElement = null;
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "_frameSink", {
        get: function () {
            return this._renderer ? this._renderer.getFrameSink() : null;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._videoSizeChanged = function (width, height) {
        this._logger.info("video-size-changed: " + width + " x " + height);
        this.streamSize = { width: width, height: height };
        this.isRendering = width > 0 && height > 0;
        if (!this._isStartedLogged && this.isRendering) {
            this._logger.info('renderStarted');
            this.event('renderStarted').raise();
            this._isStartedLogged = true;
        }
        this.event('videoSizeChanged').raise(width, height);
        this.raiseChanged();
    };
    SlimCoreElectronVideoRenderer.prototype._getStats = function () {
        if (!this._frameSink) {
            throw new Error('Renderer is not initialized');
        }
        if (this._frameSink.getStats) {
            return this._frameSink.getStats();
        }
        else {
            throw new Error('Renderer does not support stats');
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "frameSinkMetadata", {
        get: function () {
            if (!this._frameSink || !this._frameSink.getMetadata) {
                return null;
            }
            return this._frameSink.getMetadata();
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._createVideoRendererImpl = function (container, options) {
        var args = {
            container: container,
            transparent: options.transparent,
            scalingMode: convertScalingMode(options.scalingMode),
            useBufferSharing: !!this._settings.enableBufferSharing,
            useFirstFrameRender: !!this._settings.enableFirstFrameRender,
            logger: this._logger
        };
        try {
            var frameSink = SlimCore.createChromiumFrameSink
                ? SlimCore.createChromiumFrameSink()
                : SlimCore.createPepperFrameSink();
            return VideoRenderer.createChromiumVideoRenderer(frameSink, args);
        }
        catch (error) {
            this._logger.error("createChromiumVideoRenderer failed: " + error);
            throw new SlimCoreElectronRendererError(error, convertRendererError(error));
        }
    };
    Object.defineProperty(SlimCoreElectronVideoRenderer.prototype, "_videoBindingRT", {
        get: function () {
            return this._videoBinding;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronVideoRenderer.prototype._controlFrameSink = function (shouldBeSet) {
        if (this._videoBinding && this._isFrameSinkSet !== shouldBeSet) {
            this._isFrameSinkSet = shouldBeSet;
            if (shouldBeSet) {
                this._videoBinding.addFrameSink(this._frameSink);
            }
            else {
                this._videoBinding.removeFrameSink(this._frameSink);
            }
        }
    };
    return SlimCoreElectronVideoRenderer;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronVideoRenderer;
var VideoFrame = (function () {
    function VideoFrame(_imageData, _mirrored) {
        this._imageData = _imageData;
        this._mirrored = _mirrored;
    }
    VideoFrame.prototype.getSize = function () {
        return { width: this._imageData.width, height: this._imageData.height };
    };
    VideoFrame.prototype.isMirrored = function () {
        return this._mirrored;
    };
    VideoFrame.prototype.getImageData = function () {
        return this._imageData;
    };
    return VideoFrame;
}());
var SlimCoreElectronRendererError = (function () {
    function SlimCoreElectronRendererError(reason, errorType) {
        if (errorType === void 0) { errorType = -1; }
        this.reason = reason;
        this.errorType = errorType;
    }
    SlimCoreElectronRendererError.prototype.toString = function () {
        return "Reason=" + this.reason + ", errorType=" + this.errorType;
    };
    return SlimCoreElectronRendererError;
}());
function isElectronElement(target) {
    return target.renderer !== undefined;
}
function convertFrameType(type) {
    switch (type) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
            return 2;
        default:
            return -1;
    }
}
function convertRendererError(error) {
    var videoRendererError = error;
    switch (videoRendererError.reason) {
        case 1:
            return 2;
        case 2:
            return 3;
        default:
            return 1;
    }
}
function convertScalingMode(scalingMode) {
    switch (scalingMode) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
            return 2;
        default:
            return undefined;
    }
}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronScreenScraper_1 = __webpack_require__(30);
var Enums = SlimCore.Enums;
var callConstants_1 = __webpack_require__(8);
var causeId_1 = __webpack_require__(2);
var operationDecorators_1 = __webpack_require__(14);
var operationHandler_1 = __webpack_require__(15);
var VIDEO_OBJECT_WAIT_TIMEOUT_MS = 500;
var SlimCoreElectronLocalScreenShare = (function (_super) {
    __extends(SlimCoreElectronLocalScreenShare, _super);
    function SlimCoreElectronLocalScreenShare(logger, settings, engine, _callObjectId, _callHandler, _deviceManager, _appHooks, _screenSharingControl, _callTelemetry) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalScreenShare[" + _this._localVideoObjectId + "]"; }), settings, engine) || this;
        _this._callObjectId = _callObjectId;
        _this._callHandler = _callHandler;
        _this._deviceManager = _deviceManager;
        _this._appHooks = _appHooks;
        _this._screenSharingControl = _screenSharingControl;
        _this._callTelemetry = _callTelemetry;
        _this.isStreaming = false;
        _this.isAvailable = true;
        _this._localVideoObjectId = 0;
        _this._previewVideoObjectId = 0;
        _this._editViewPPTWindowId = 0;
        _this._logger.info('constructor');
        _this._callOperationHandler = new operationHandler_1.default(_this._logger, _this._callTelemetry);
        try {
            _this._screenScraper = new SlimCoreElectronScreenScraper_1.default(_this._slimcoreInstance);
        }
        catch (error) {
            _this._logger.warn("" + error);
        }
        if (_this._screenScraper) {
            _this._registerDisposable(_this._appHooks.onDisplaysChanged(function () { return _this.handleDisplaysChanged(); }));
        }
        return _this;
    }
    SlimCoreElectronLocalScreenShare.prototype.isActive = function () {
        return this.isAvailable && this.isStreaming;
    };
    SlimCoreElectronLocalScreenShare.prototype._showSharingIndicator = function (region) {
        var _this = this;
        this._appHooks.showSharingIndicator(region);
        var controlInjector = this._appHooks.getControlInjector();
        if (controlInjector && controlInjector.setInjectionRect) {
            controlInjector.setInjectionRect(region).catch(function (error) {
                var errorDetails = JSON.stringify({ errorMsg: error, region: region });
                _this._screenSharingControl.enableScreenSharingControl(false, 0, errorDetails);
                _this._logger.error("Set control Injector failure, disable screen sharing control. Error: " + error);
            });
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._videoObjectChanged = function (value) {
        var causeId = causeId_1.generateCauseId();
        this.isAvailable = SlimCoreCommon.isVideoAvailable(value);
        this.isStreaming = false;
        if (SlimCoreCommon.isVideoInState(value, [Enums.VideoStatus.Starting, Enums.VideoStatus.Running])) {
            if (!this._selectedMonitor && !this._selectedWindow && !this._selectedCamera) {
                SlimCoreCommon.forgetAndLog(this.stop(causeId), this._logger, 'stopping screen sharing due to no monitor/camera being selected');
            }
            else {
                this.isStreaming = true;
                if (!this._selectedCamera) {
                    this._appHooks.showSharingIndicator(this._selectedRegion || (this._selectedMonitor && this._selectedMonitor.region) || (this._selectedWindow && this._selectedWindow.windowId));
                }
            }
        }
        if (SlimCoreCommon.isVideoInState(value, [Enums.VideoStatus.Paused])) {
            this._appHooks.hideSharingIndicator();
        }
        this.raiseChanged();
    };
    SlimCoreElectronLocalScreenShare.prototype._setCaptureRegionAndWindow = function (region, windowId) {
        if (this._slimcoreInstance.setScreenCaptureRectangle) {
            this._slimcoreInstance.setScreenCaptureRectangle(this._localVideoObjectId, region, undefined, windowId);
            return;
        }
        if (this._videoBindingScreenShare) {
            this._videoBindingScreenShare.setCaptureRegionAndWindow(region, windowId);
            return;
        }
        throw new Error('Failed to set capture region / window');
    };
    SlimCoreElectronLocalScreenShare.prototype._handleScraperEvent = function (args) {
        this._logger.info("Handle Scraper event, event = " + args.event + " data = " + args.data);
        var eventData = args.data;
        switch (args.event) {
            case Enums.ScraperEvent.PPTPresenterView_Enter:
                this._editViewPPTWindowId = this._selectedWindow.windowId;
                this._selectedWindow.windowId = eventData;
                this._appHooks.showSharingIndicator(eventData);
                this._setCaptureRegionAndWindow(undefined, eventData);
                this._logger.info("shared PPT entered presenter mode");
                break;
            case Enums.ScraperEvent.PPTPresenterView_Exit:
                this._selectedWindow.windowId = this._editViewPPTWindowId;
                this._appHooks.showSharingIndicator(this._selectedWindow.windowId);
                this._setCaptureRegionAndWindow(undefined, this._selectedWindow.windowId);
                this._logger.info("shared PPT exited presenter mode");
                break;
            case Enums.ScraperEvent.WindowClosed:
                if (this._selectedWindow.windowId !== eventData) {
                    return;
                }
                this._logger.info("Application window closed. Stopping the screenshare");
                this.event('windowClosed').raise();
                break;
            default:
                this.event('scraperEvent').raise(args);
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._startPreviewVideoObject = function () {
        var _this = this;
        if (!this._shouldUseVideoBindingScreenShare()) {
            return Promise.resolve();
        }
        return this._deviceManager.getPreviewVideo(Enums.VideoType.ScreenShare)
            .then(function (videoObjectId) {
            return _this._deviceManager.getScreenShareBindingManager().acquire(_this, videoObjectId)
                .then(function (binding) {
                _this._previewVideoObjectId = videoObjectId;
                _this._videoBindingScreenShare = binding;
                _this._videoBindingScreenShare.on('scraper-event', function (args) { return _this._handleScraperEvent(args); });
            });
        });
    };
    SlimCoreElectronLocalScreenShare.prototype._stopPreviewVideoObject = function () {
        var _this = this;
        if (!this._shouldUseVideoBindingScreenShare()) {
            return Promise.resolve();
        }
        else if (this._previewVideoObjectId && this._videoBindingScreenShare) {
            this._logger.info("calling slimcore video release binding");
            this._videoBindingScreenShare.removeAllListeners('scraper-event');
            var releasePromise = this._deviceManager.getScreenShareBindingManager().release(this, this._previewVideoObjectId)
                .catch(function (error) { return _this._logger.error("Failed on releasing screen sharing binding. Error: " + error); });
            this._previewVideoObjectId = 0;
            this._videoBindingScreenShare = null;
            return releasePromise;
        }
        else {
            return Promise.resolve();
        }
    };
    SlimCoreElectronLocalScreenShare.prototype._shouldUseVideoBindingScreenShare = function () {
        return !this._slimcoreInstance.setScreenCaptureRectangle && this._deviceManager.hasVideoBindingScreenShare();
    };
    SlimCoreElectronLocalScreenShare.prototype.start = function (causeId, source, cropRegion, negotiationTag) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_START_SCREEN_SHARING, causeId);
        fnLogger.info("local screen share start");
        var startPromise = Promise.resolve()
            .then(function () { return __awaiter(_this, void 0, void 0, function () {
            var sourceInfo, isCameraSource, deviceInfo, videoStatus;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sourceInfo = this.sourceToInfo(source);
                        if (!sourceInfo) {
                            throw new Error('Unable to start sharing, source could not be found');
                        }
                        fnLogger.info("calling slimcore create local video");
                        isCameraSource = !!source && source.getType() === 3;
                        if (isCameraSource) {
                            deviceInfo = sourceInfo;
                            this._localVideoObjectId = this._slimcoreInstance.createLocalVideo(Enums.VideoType.ScreenShare, deviceInfo.label, deviceInfo.id);
                        }
                        else {
                            this._localVideoObjectId = this._slimcoreInstance.createLocalVideo(Enums.VideoType.ScreenShare, '', '');
                        }
                        this._videoStatusChangedHandler = this._slimcoreInstance.handle('object-property-changed', { objectId: this._localVideoObjectId, propKey: Enums.Property.VideoStatus }, function (eventData) { return _this._videoObjectChanged(eventData.value); });
                        videoStatus = this._getIntProperty(this._callHandler, this._localVideoObjectId, Enums.Property.VideoStatus);
                        this._videoObjectChanged(videoStatus);
                        this._callHandler.callAttachSendVideo(this._callObjectId, this._localVideoObjectId);
                        fnLogger.info("waiting for video object to be available");
                        return [4, SlimCoreCommon.waitForVideoObjectToBeAvailable(this._slimcoreInstance, this._callHandler, this._localVideoObjectId, this._logger, VIDEO_OBJECT_WAIT_TIMEOUT_MS)];
                    case 1:
                        _a.sent();
                        if (!!isCameraSource) return [3, 3];
                        this._logger.info("start preview video object");
                        return [4, this._startPreviewVideoObject()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        fnLogger.info("calling slimcore video start");
                        this.selectSource(source, sourceInfo, cropRegion);
                        this.negotiationTag = negotiationTag;
                        this._slimcoreInstance.videoStart(this._localVideoObjectId, negotiationTag);
                        this.isStreaming = true;
                        this.raiseChanged();
                        return [2];
                }
            });
        }); });
        return this._callOperationHandler.registerPromise(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_START_SCREEN_SHARING, startPromise)
            .catch(function (error) {
            fnLogger.logFailure("Failed to start LocalScreenShare. Error: " + error);
            _this.stop(undefined, causeId);
            Promise.reject(error);
        });
    };
    SlimCoreElectronLocalScreenShare.prototype.changeCropRegion = function (cropRegion) {
        var sourceInfo = this.sourceToInfo(null);
        this.selectMonitorWithOptionalCrop(sourceInfo, cropRegion);
    };
    SlimCoreElectronLocalScreenShare.prototype.stop = function (causeId, negotiationTag) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_STOP_SCREEN_SHARING, causeId);
        var always = function () {
            _this._localVideoObjectId = 0;
            _this.isStreaming = false;
            _this._selectedMonitor = null;
            _this._selectedRegion = null;
            _this._selectedWindow = null;
            _this._selectedCamera = null;
            _this._editViewPPTWindowId = 0;
            _this._appHooks.hideSharingIndicator();
            if (_this._videoStatusChangedHandler) {
                _this._videoStatusChangedHandler.dispose();
                _this._videoStatusChangedHandler = null;
            }
            _this.raiseChanged();
        };
        var stopPromise = Promise.resolve()
            .then(function () { return _this._stopPreviewVideoObject(); })
            .then(function () {
            if (_this._localVideoObjectId !== 0) {
                fnLogger.info("calling slimcore video stop");
                _this.negotiationTag = negotiationTag;
                _this._slimcoreInstance.videoStop(_this._localVideoObjectId, _this.negotiationTag);
            }
        })
            .then(always, function (error) {
            fnLogger.logFailure("Failed to stop LocalScreenShare. Error: " + error);
            always();
            throw error;
        });
        return this._callOperationHandler.registerPromise(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_STOP_SCREEN_SHARING, stopPromise);
    };
    SlimCoreElectronLocalScreenShare.prototype.dispose = function (causeId) {
        this._logger.info('Disposing of LocalScreenShare');
        if (this._localVideoObjectId !== 0 || this._previewVideoObjectId !== 0) {
            this.stop(causeId);
        }
        if (this._videoStatusChangedHandler) {
            this._videoStatusChangedHandler.dispose();
            this._videoStatusChangedHandler = null;
        }
        _super.prototype.dispose.call(this);
    };
    SlimCoreElectronLocalScreenShare.prototype.selectSource = function (source, sourceInfo, cropRegion) {
        if (source && source.getType() === 2) {
            this.selectWindow(sourceInfo);
        }
        else if (source && source.getType() === 3) {
            this._selectedCamera = sourceInfo;
        }
        else {
            this.selectMonitorWithOptionalCrop(sourceInfo, cropRegion);
        }
    };
    SlimCoreElectronLocalScreenShare.prototype.selectMonitorWithOptionalCrop = function (monitor, cropRegion) {
        var region = cropRegion || monitor.region;
        this._logger.info("Selected region with optional crop, x = " + region.x + ", y = " + region.y + ", width = " + region.width + " height = " + region.height);
        this._showSharingIndicator(region);
        this._setCaptureRegionAndWindow(region);
        this._selectedMonitor = monitor;
        this._selectedRegion = cropRegion;
    };
    SlimCoreElectronLocalScreenShare.prototype.selectWindow = function (window) {
        this._appHooks.showSharingIndicator(window.windowId);
        this._setCaptureRegionAndWindow(undefined, window.windowId);
        this._selectedWindow = window;
    };
    SlimCoreElectronLocalScreenShare.prototype.handleDisplaysChanged = function () {
        var causeId = causeId_1.generateCauseId();
        var fnLogger = this._logger.createFnLogger('HandleDisplaysChanged', causeId);
        if (!this._selectedMonitor) {
            fnLogger.logFailure("On display change, monitor not seleted yet");
            return;
        }
        var safeStringify = function (inputSource) {
            try {
                return JSON.stringify(inputSource);
            }
            catch (e) {
                return 'unable to stringify';
            }
        };
        fnLogger.info("On display change, currenlty selected monitor: " + safeStringify(this._selectedMonitor) + " selected region:  " + safeStringify(this._selectedRegion));
        if (!this._selectedRegion) {
            var monitors = this._screenScraper.getMonitorList() || [];
            for (var _i = 0, monitors_1 = monitors; _i < monitors_1.length; _i++) {
                var monitorInfo = monitors_1[_i];
                fnLogger.info("On display change, new listed monitor: " + safeStringify(monitorInfo));
            }
            var monitor = SlimCoreCommon.selectMonitorForScreenSharing(this._selectedMonitor, monitors);
            if (monitor) {
                fnLogger.info("On display change, re-selected monitor: " + safeStringify(monitor));
                this.selectMonitorWithOptionalCrop(monitor);
                return;
            }
        }
        fnLogger.info("stopping screen share because displays changed and could not resolve monitor info");
        SlimCoreCommon.forgetAndLog(this.stop(causeId), fnLogger, 'stopping screen share because sharing source lost');
        this.event('sharingSourceLost').raise();
    };
    SlimCoreElectronLocalScreenShare.prototype.sourceToInfo = function (source) {
        if (!source) {
            if (!this._screenScraper) {
                this._logger.error('ScreenShare has no way to recover primary monitor');
                return null;
            }
            else {
                var sourceList = this._screenScraper.getMonitorList() || [];
                return _.find(sourceList, function (screen) { return screen.isPrimary; });
            }
        }
        switch (source.getType()) {
            case 2: {
                var sourceList = this._screenScraper.getWindowList() || [];
                return _.find(sourceList, function (application) {
                    return application.windowId === source.getId();
                });
            }
            case 1: {
                if (!this._screenScraper) {
                    return {
                        monitorId: 0,
                        name: source.getDescription(),
                        region: source.getBounds(),
                        isPrimary: true,
                        isInternal: true,
                        isDuplicated: false
                    };
                }
                var sourceList = this._screenScraper.getMonitorList() || [];
                return _.find(sourceList, function (screen) {
                    return screen.monitorId === source.getId() || _.isEqual(screen.region, source.getBounds());
                });
            }
            case 3: {
                return this._deviceManager.getCamera(source.getDeviceId());
            }
            default:
                throw new Error("Invalid source type: " + source.getType());
        }
    };
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_START_SCREEN_SHARING, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_STOP_SCREEN_SHARING }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object, Object, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronLocalScreenShare.prototype, "start", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_STOP_SCREEN_SHARING, { waitFor: callConstants_1.CALL_OPERATIONS_INTERNAL.ELECTRON_START_SCREEN_SHARING }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronLocalScreenShare.prototype, "stop", null);
    return SlimCoreElectronLocalScreenShare;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronLocalScreenShare;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronScreenScraper = (function () {
    function SlimCoreElectronScreenScraper(_slimcoreInstance) {
        this._slimcoreInstance = _slimcoreInstance;
        if (this._slimcoreInstance.getMonitorList && this._slimcoreInstance.getWindowList) {
            return;
        }
        var slimcore = SlimCoreCommon.isSlimCoreRTModuleAvailable() ? SlimCoreRT.SlimCore : SlimCore;
        if (!slimcore.ScreenScraper) {
            throw new Error('ScreenScraper not supported');
        }
        this._screenScraper = new slimcore.ScreenScraper();
    }
    SlimCoreElectronScreenScraper.prototype.getMonitorList = function () {
        if (this._slimcoreInstance.getMonitorList) {
            return this._slimcoreInstance.getMonitorList();
        }
        else if (this._screenScraper) {
            return this._screenScraper.getMonitorList();
        }
        else {
            throw new Error('not supported');
        }
    };
    SlimCoreElectronScreenScraper.prototype.getMonitorPreview = function (monitorId, width, height, asImage, region) {
        if (this._slimcoreInstance.getMonitorSnapshot) {
            return this._slimcoreInstance.getMonitorSnapshot(monitorId, { width: width, height: height, asImage: asImage }, region).then(SlimCoreCommon.convertImageData);
        }
        else if (this._screenScraper) {
            return this._screenScraper.getMonitorPreview(monitorId, width, height, asImage);
        }
        else {
            return Promise.reject(new Error('not supported'));
        }
    };
    SlimCoreElectronScreenScraper.prototype.getWindowList = function () {
        if (this._slimcoreInstance.getWindowList) {
            return this._slimcoreInstance.getWindowList();
        }
        else if (this._screenScraper) {
            return this._screenScraper.getWindowList();
        }
        else {
            throw new Error('not supported');
        }
    };
    SlimCoreElectronScreenScraper.prototype.getWindowPreview = function (windowId, width, height, asImage) {
        if (this._slimcoreInstance.getWindowSnapshot) {
            return this._slimcoreInstance.getWindowSnapshot(windowId, { width: width, height: height, asImage: asImage }).then(SlimCoreCommon.convertImageData);
        }
        else if (this._screenScraper) {
            return this._screenScraper.getWindowPreview(windowId, width, height, asImage);
        }
        else {
            return Promise.reject(new Error('not supported'));
        }
    };
    SlimCoreElectronScreenScraper.prototype.getWindowIcon = function (windowId, width, height, asImage) {
        if (this._slimcoreInstance.getWindowIcon) {
            return this._slimcoreInstance.getWindowIcon(windowId, { width: width, height: height, asImage: asImage }).then(SlimCoreCommon.convertImageData);
        }
        else if (this._screenScraper) {
            return this._screenScraper.getWindowIcon(windowId, width, height, asImage);
        }
        else {
            return Promise.reject(new Error('not supported'));
        }
    };
    return SlimCoreElectronScreenScraper;
}());
exports.default = SlimCoreElectronScreenScraper;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var VIDEO_OBJECT_WAIT_TIMEOUT = 500;
var SlimCoreElectronLocalVideo = (function (_super) {
    __extends(SlimCoreElectronLocalVideo, _super);
    function SlimCoreElectronLocalVideo(logger, settings, engine, _call, _callObjectId, _callHandler, _deviceManager) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalVideo[" + _this._videoObjectId + "]"; }), settings, engine) || this;
        _this._call = _call;
        _this._callObjectId = _callObjectId;
        _this._callHandler = _callHandler;
        _this._deviceManager = _deviceManager;
        _this._videoObjectId = 0;
        _this._logger.info('constructor');
        _this._registerDisposable(_this._deviceManager.on('devicesChanged', function () { return _this._devicesChanged(); }));
        return _this;
    }
    SlimCoreElectronLocalVideo.prototype._devicesChanged = function () {
        var _this = this;
        var causeId = causeId_1.generateCauseId();
        var fnLogger = this._logger.createFnLogger('devicesChanged', causeId);
        fnLogger.info('Devices changed - checking if video needs to be restarted');
        var selectedDevices = this._deviceManager.getSelectedDevices();
        if (this._currentCamera && selectedDevices.camera && selectedDevices.camera !== this._currentCamera.id) {
            fnLogger.info("Changing video device to " + selectedDevices.camera);
            this.stop(undefined, causeId)
                .then(function () { return _this.start(causeId, _this.negotiationTag); })
                .catch(function (e) {
                fnLogger.logFailure("Caught error while trying to stopstart local video after device change. Error: " + e);
            });
        }
    };
    SlimCoreElectronLocalVideo.prototype._executeOperationAndExpectVideoStateTransition = function (transitionTriggerFunc, videoObjectId, expectedFinalVideoStates, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('LocalVideoOperation', causeId);
        return new Promise(function (resolve, reject) {
            var done = false;
            var videoStatusChangedCallback = null;
            var onVideoObjectStateChanged = function (value) {
                fnLogger.info("Video state changed for monitored video ID[" + videoObjectId + "] -> " + value + " (" + Enums.VideoStatus[value] + ")");
                if (!done && _.indexOf(expectedFinalVideoStates, value) !== -1) {
                    done = true;
                    if (videoStatusChangedCallback) {
                        videoStatusChangedCallback.dispose();
                        videoStatusChangedCallback = null;
                    }
                    resolve();
                }
            };
            setTimeout(function () {
                if (!done) {
                    if (videoStatusChangedCallback) {
                        videoStatusChangedCallback.dispose();
                        videoStatusChangedCallback = null;
                    }
                    var currentState = _this._getIntProperty(_this._callHandler, videoObjectId, Enums.Property.VideoStatus);
                    fnLogger.info("_executeOperationAndExpectVideoStateTransition[" + videoObjectId + "] time out. Current State = " + currentState + ".");
                    if (_.indexOf(expectedFinalVideoStates, currentState) !== -1) {
                        resolve();
                    }
                    else {
                        var errorMessage = "_executeOperationAndExpectVideoStateTransition[" + videoObjectId + "] time out. Video not in expected final state";
                        fnLogger.info(errorMessage);
                        reject(errorMessage);
                    }
                }
            }, VIDEO_OBJECT_WAIT_TIMEOUT);
            videoStatusChangedCallback = _this._slimcoreInstance.handle('object-property-changed', { objectId: videoObjectId, propKey: Enums.Property.VideoStatus }, function (data) { return onVideoObjectStateChanged(data.value); });
            transitionTriggerFunc();
        });
    };
    SlimCoreElectronLocalVideo.prototype._startInternalVideo = function (negotiationTag, causeId) {
        var _this = this;
        if (this._internalVideoStartPromise) {
            return this._internalVideoStartPromise;
        }
        var fnLogger = this._logger.createFnLogger('startInternalVideo', causeId);
        this._internalVideoStartPromise = Promise.resolve(undefined)
            .then(function () {
            var selectedCamera = _this._deviceManager.getSelectedCamera();
            if (!selectedCamera) {
                throw new Error('No camera selected to start video on');
            }
            fnLogger.info("Starting local video using camera: " + JSON.stringify(selectedCamera));
            _this._currentCamera = selectedCamera;
            _this._videoObjectId = _this._slimcoreInstance.createLocalVideo(Enums.VideoType.Video, selectedCamera.label, selectedCamera.id);
            if (_this._videoObjectId === 0) {
                fnLogger.logFailure('SlimCore returned invalid video object ID 0');
                throw new Error('SlimCore returned invalid video object ID 0');
            }
            _this._callHandler.callAttachSendVideo(_this._callObjectId, _this._videoObjectId);
        })
            .then(function () { return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._videoObjectId, _this._logger); })
            .then(function () {
            fnLogger.info("Local Video is AVAILABLE. Starting Video");
            return _this._executeOperationAndExpectVideoStateTransition(function () {
                if (negotiationTag) {
                    _this.negotiationTag = negotiationTag;
                }
                _this._slimcoreInstance.videoStart(_this._videoObjectId, _this.negotiationTag);
            }, _this._videoObjectId, [Enums.VideoStatus.Running, Enums.VideoStatus.Starting], causeId);
        });
        return this._internalVideoStartPromise;
    };
    SlimCoreElectronLocalVideo.prototype.start = function (causeId, negotiationIag) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('start', causeId);
        fnLogger.info('Local video START requested');
        if (!this._call.callStateCanToggleVideo()) {
            fnLogger.logFailure('Local video start requested but call is not connected, skipping operation');
            return Promise.resolve(null);
        }
        if (this._currentStartPromise) {
            fnLogger.logSuccess("Start requested but pending start exists. Returning previous promise");
            return this._currentStartPromise;
        }
        var initialPromise;
        if (this._currentStopPromise) {
            fnLogger.info("Start requested but pending stop exists. Waiting for previous stop promise");
            initialPromise = this._currentStopPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStartPromise = initialPromise
            .then(function () { return _this._startInternalVideo(negotiationIag, causeId); })
            .then(function () {
            _this._currentStartPromise = null;
        })
            .catch(function (error) {
            fnLogger.logFailure(error);
            _this._currentStartPromise = null;
            _this.stop(undefined, causeId);
            throw error;
        });
        return this._currentStartPromise;
    };
    SlimCoreElectronLocalVideo.prototype.stop = function (causeId, negotiationIag) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('stop', causeId);
        fnLogger.info('Local video STOP requested');
        var always = function () {
            _this._videoObjectId = 0;
            _this._currentCamera = null;
            _this._currentStopPromise = null;
            _this._currentStartPromise = null;
            _this._internalVideoStartPromise = null;
        };
        if (this._currentStopPromise) {
            fnLogger.info("Stop requested but pending stop exists. Returning previous promise");
            return this._currentStopPromise;
        }
        var initialPromise;
        if (this._currentStartPromise) {
            fnLogger.info("Waiting for start promise to finish.");
            initialPromise = this._currentStartPromise;
        }
        else {
            initialPromise = Promise.resolve();
        }
        this._currentStopPromise = initialPromise
            .then(function () {
            _this._logger.info('Stopping SlimCore video objects');
            if (_this._videoObjectId !== 0) {
                _this.negotiationTag = negotiationIag;
                _this._slimcoreInstance.videoStop(_this._videoObjectId, _this.negotiationTag);
            }
        })
            .then(function () {
            if (_this._call.callStateCanToggleVideo()) {
                return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, _this._callHandler, _this._videoObjectId, _this._logger);
            }
            else {
                return Promise.resolve();
            }
        })
            .then(function () {
            fnLogger.info('VideoBinding was released');
        })
            .then(always, function (error) {
            fnLogger.logFailure(error);
            always();
            throw error;
        });
        return this._currentStopPromise;
    };
    SlimCoreElectronLocalVideo.prototype.dumpVideoSourceImages = function () {
        if (this._videoObjectId === 0) {
            return Promise.reject(new Error('Cannot dump video effects debug images when video is not created'));
        }
        return this._slimcoreInstance.dumpVideoSourceImages(this._videoObjectId);
    };
    SlimCoreElectronLocalVideo.prototype.dispose = function (causeId) {
        var _this = this;
        var always = function () { return _super.prototype.dispose.call(_this); };
        Promise.resolve(function () { return _this._videoObjectId !== 0 ? _this.stop(undefined, causeId) : true; })
            .then(always).catch(always);
    };
    return SlimCoreElectronLocalVideo;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronLocalVideo;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function generateGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 3 | 8;
        return v.toString(16);
    });
}
exports.default = generateGuid;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var fn_1 = __webpack_require__(6);
var guid_1 = __webpack_require__(32);
var piiUtils = __webpack_require__(5);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronCall_1 = __webpack_require__(11);
var SlimCoreElectronEcsProvider_1 = __webpack_require__(21);
var SlimCoreElectronSetup_1 = __webpack_require__(22);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var internalLogger_1 = __webpack_require__(20);
var SlimCoreElectronCallRegistry = (function (_super) {
    __extends(SlimCoreElectronCallRegistry, _super);
    function SlimCoreElectronCallRegistry(callingLogger, settings, engine, _deviceManager, _appHooks, _telemetryService) {
        var _this = _super.call(this, new internalLogger_1.default(callingLogger).createChild('CallRegistry'), settings, engine) || this;
        _this._deviceManager = _deviceManager;
        _this._appHooks = _appHooks;
        _this._telemetryService = _telemetryService;
        _this.calls = [];
        _this._loginPromiseDefered = async.defer();
        _this._logoutPromiseDefered = async.defer();
        _this._startSlimcorePromiseDefered = async.defer();
        _this.isDisposing = false;
        _this._disposedPromise = async.defer();
        _this.slimcoreInstanceStartCalled = false;
        _this._logger.info('constructor');
        _this._slimcoreInstance.setMaxListeners(0);
        _this._ecsProvider = new SlimCoreElectronEcsProvider_1.default(_this._slimcoreInstance);
        return _this;
    }
    SlimCoreElectronCallRegistry.prototype.dispose = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger, always, callStopPromises, logout;
            var _this = this;
            return __generator(this, function (_a) {
                fnLogger = this._logger.createFnLogger('dispose', causeId);
                fnLogger.info('disposing call registry');
                if (this.isDisposing) {
                    fnLogger.warn('call registry is already in disposing stage!');
                    return [2, this._disposedPromise.promise];
                }
                this.isDisposing = true;
                always = function () {
                    _this.calls = [];
                    if (_this._slimcoreCallHandler) {
                        _this._slimcoreCallHandler.dispose();
                        _this._slimcoreCallHandler = undefined;
                    }
                    fnLogger.info('callhandler is disposed');
                    if (_this._account) {
                        _this._account.dispose();
                        _this._account = undefined;
                    }
                    fnLogger.info('account is disposed');
                    _this.event('disposed').raise();
                    _super.prototype.dispose.call(_this);
                    _this._disposedPromise.resolve();
                };
                callStopPromises = this.calls.map(function (call) { return call.stop(); });
                logout = function () { return _this.logout(causeId); };
                Promise.all(callStopPromises).then(logout, logout).then(always, always);
                return [2, this._disposedPromise.promise];
            });
        });
    };
    Object.defineProperty(SlimCoreElectronCallRegistry.prototype, "loginPromise", {
        get: function () {
            return this._loginPromiseDefered.promise;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronCallRegistry.prototype, "disposePromise", {
        get: function () {
            return this._disposedPromise.promise;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronCallRegistry.prototype._initCall = function (call, callObjectId, causeId) {
        var fnLogger = this._logger.createFnLogger("initCall[callId=" + call.callId + "][participantId=" + call.participantId + "]", causeId);
        fnLogger.info("callObjectId=" + callObjectId);
        call.incomingCallInit(callObjectId, causeId);
    };
    SlimCoreElectronCallRegistry.prototype._incomingCallMonitor = function (data, causeId) {
        var fnLogger = this._logger.createFnLogger('incomingCallMonitor', causeId);
        fnLogger.info("_incomingCallMonitor for objectPropertyChange objectId=" + data.objectId);
        var callId = this._getStrProperty(this._slimcoreCallHandler, data.objectId, Enums.Property.CallName);
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
            var userId = this._getStrProperty(this._slimcoreCallHandler, data.objectId, Enums.Property.CallAccountIdentity);
            if (userId !== this.identity) {
                fnLogger.info("incoming call(" + callId + ") for user(" + piiUtils.mriOrId(userId) + ") but current user is " + piiUtils.mriOrId(this.identity));
                return;
            }
        }
        var localParticipantId = this._getStrProperty(this._slimcoreCallHandler, data.objectId, Enums.Property.CallLegId);
        if (!this._getCall(callId, localParticipantId, causeId)) {
            fnLogger.logFailure("getCall failed to find the call(callId: " + callId + ", localParticipantId: " + localParticipantId + ")");
        }
    };
    SlimCoreElectronCallRegistry.prototype.init = function (skypeIdentity, initOptions, causeId) {
        var _this = this;
        if (initOptions === void 0) { initOptions = { block: true }; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('init', causeId);
        fnLogger.info('init');
        if (!initOptions.block && !SlimCoreCommon.hasFeature(Enums.Feature.AsyncStart)) {
            initOptions.block = true;
        }
        var accountStatusCallback = null;
        if (!this.slimcoreInstanceStartCalled) {
            if (!initOptions.block) {
                this._registerDisposable(this._slimcoreInstance.handle('lib-status-changed', { libStatus: SlimCore.Enums.LibStatus.Running }, function (data) { return _this._onLibStatusChanged(data); }));
            }
            this._slimcoreInstance.setupSetStr('*Lib/SCT/Telemetry/DiagnosticLevel', initOptions.telemetryDiagnosticLevel || '');
            this._slimcoreInstance.start(initOptions.block);
            fnLogger.info("starting slimcoreInstance block=" + initOptions.block);
            this.slimcoreInstanceStartCalled = true;
            if (initOptions.block) {
                this.libStatus = Enums.LibStatus.Running;
                this._startSlimcorePromiseDefered.resolve();
            }
        }
        else {
            fnLogger.info('skipping slimcoreInstance start, because it was already started');
        }
        this._skypeIdentity = skypeIdentity;
        this.identity = skypeIdentity.id;
        this._skypeIdentity.tokenProvider()
            .then(function (token) {
            fnLogger.info('setting up stack callbacks');
            accountStatusCallback = _this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.AccountStatus, value: Enums.AccountStatus.LoggedIn }, function () {
                var callHandler = _this._slimcoreInstance.createCallInterface();
                _this._slimcoreCallHandler = SlimCoreCommon.wrap(callHandler, _this._settings);
                fnLogger.info('createCallInterface returned');
                _this._loginPromiseDefered.resolve(_this._slimcoreCallHandler);
                if (accountStatusCallback) {
                    accountStatusCallback.dispose();
                    accountStatusCallback = null;
                }
                _this._hookCallRegistryEvents();
            });
            _this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.CallStatus, value: Enums.CallStatus.RingingIn }, function (eventData) { return _this._incomingCallMonitor(eventData, causeId); });
            _this._initializeSlimCore(token);
            _this._logger.info('initialize returned');
        })
            .catch(function (err) {
            fnLogger.logFailure(err);
            _this._loginPromiseDefered.reject(err);
        });
        return this.loginPromise.then(fn_1.noop);
    };
    SlimCoreElectronCallRegistry.prototype.uninit = function () {
        var _this = this;
        if (!this.slimcoreInstanceStartCalled) {
            this._logoutPromiseDefered.reject(new Error('CallRegistry uninit called without slimcore::start()'));
        }
        else if (this.libStatus !== Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.reject(new Error('Callregistry uninit called before slimcore reached Running state'));
            this._logoutPromiseDefered.reject(new Error('Callregistry uninit called before slimcore reached Running state'));
        }
        var accountStatusCallback = null;
        try {
            this._logger.info('uninit: setting up stack callbacks');
            accountStatusCallback = this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.AccountStatus, value: Enums.AccountStatus.LoggedOut }, function () {
                _this._logoutPromiseDefered.resolve();
                if (accountStatusCallback) {
                    accountStatusCallback.dispose();
                    accountStatusCallback = null;
                }
            });
            this._logger.info('uninit(): calling slimcore.logout()');
            this._slimcoreInstance.logout();
        }
        catch (e) {
            this._logger.error('slimcore.logout() failed.', e);
            this._logoutPromiseDefered.reject(e);
        }
        this.slimcoreInstanceStartCalled = false;
        return this._logoutPromiseDefered.promise.then(fn_1.noop);
    };
    SlimCoreElectronCallRegistry.prototype.login = function (skypeIdentity, causeId, configuration) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('login', causeId);
        fnLogger.info('login');
        var accountStatusCallback = null;
        this._skypeIdentity = skypeIdentity;
        this.identity = skypeIdentity.id;
        this._setup = new SlimCoreElectronSetup_1.default(this._slimcoreInstance, this.identity);
        this._skypeIdentity.tokenProvider()
            .then(function (token) {
            fnLogger.info('setting up stack callbacks');
            accountStatusCallback = _this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.AccountStatus, value: Enums.AccountStatus.LoggedIn }, function (eventData) {
                if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
                    if (_this._account.getObjectId() !== eventData.objectId) {
                        fnLogger.error("accountObjectId: " + _this._account.getObjectId + " does not match with " + eventData.objectId);
                        return;
                    }
                }
                var callHandler = _this._createCallHandler();
                _this._slimcoreCallHandler = SlimCoreCommon.wrap(callHandler, _this._settings);
                fnLogger.info('createCallInterface returned');
                _this._loginPromiseDefered.resolve(_this._slimcoreCallHandler);
                if (accountStatusCallback) {
                    accountStatusCallback.dispose();
                    accountStatusCallback = null;
                }
                _this._hookCallRegistryEvents();
            });
            _this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.CallStatus, value: Enums.CallStatus.RingingIn }, function (eventData) { return _this._incomingCallMonitor(eventData, causeId); });
            _this._login(token, skypeIdentity.displayName, fnLogger, configuration);
        })
            .catch(function (err) {
            fnLogger.logFailure(err);
            _this._loginPromiseDefered.reject(err);
        });
        return this.loginPromise.then(function () { return _this.setAdditionalIdentities(); });
    };
    SlimCoreElectronCallRegistry.prototype._login = function (skypeToken, displayName, logger, configuration) {
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
            if (this._account) {
                logger.info('already logged in. updating displayname and skypetoken!');
                this._account.updateDisplayName(displayName);
                this._account.updateSkypeToken(skypeToken);
                return;
            }
            var account = this._slimcoreInstance.getAccount(this.identity);
            this._account = SlimCoreCommon.wrap(account, this._settings);
            this._account.login(skypeToken, displayName, SlimCoreCommon.mapToEmptyStrIfFalsy(configuration));
        }
        else {
            this._slimcoreInstance.login(this.identity, skypeToken, displayName);
        }
    };
    SlimCoreElectronCallRegistry.prototype._createCallHandler = function () {
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
            return this._slimcoreInstance.getCallHandler(this._account.getObjectId());
        }
        return this._slimcoreInstance.createCallInterface();
    };
    SlimCoreElectronCallRegistry.prototype.logout = function (causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('logout', causeId);
        fnLogger.info('logout');
        var accountStatusCallback = null;
        try {
            fnLogger.info('setting up stack callbacks');
            accountStatusCallback = this._slimcoreInstance.handle('object-property-changed', { propKey: Enums.Property.AccountStatus, value: Enums.AccountStatus.LoggedOut }, function (eventData) {
                if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
                    if (_this._account.getObjectId() !== eventData.objectId) {
                        return;
                    }
                }
                _this._logoutPromiseDefered.resolve();
                if (accountStatusCallback) {
                    accountStatusCallback.dispose();
                    accountStatusCallback = null;
                }
            });
            fnLogger.info('calling slimcore.logout()');
            this._logout();
        }
        catch (e) {
            fnLogger.error('slimcore.logout() failed.', e);
            this._logoutPromiseDefered.reject(e);
        }
        return this._logoutPromiseDefered.promise.then(fn_1.noop);
    };
    SlimCoreElectronCallRegistry.prototype._logout = function () {
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
            this._account.logout();
        }
        else {
            this._slimcoreInstance.logout();
        }
    };
    SlimCoreElectronCallRegistry.prototype.setRing = function (ring) {
        var _this = this;
        return Promise.resolve().then(function () {
            if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && _this._account) {
                return _this._account.setRing(ring);
            }
            else {
                return _this._setup.setString('*Lib/Call/NG/Ring', ring);
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype.setTenantId = function (tenantId) {
        var _this = this;
        return Promise.resolve().then(function () {
            if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && _this._account) {
                return _this._account.setTenantId(tenantId);
            }
            else {
                return _this._setup.setString('*Lib/Call/NG/TenantId', tenantId);
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype.setConfiguration = function (configuration) {
        var _this = this;
        return Promise.resolve().then(function () {
            if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && _this._account &&
                _this._account.setConfiguration) {
                _this._account.setConfiguration(JSON.stringify(configuration));
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype.updateDisplayName = function (displayName) {
        var _this = this;
        return Promise.resolve().then(function () {
            if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && _this._account) {
                return _this._account.updateDisplayName(displayName);
            }
            else {
                return _this._skypeIdentity.tokenProvider()
                    .then(function (skypeToken) { return _this._login(skypeToken, displayName, _this._logger); });
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype.updateSkypeToken = function (skypeToken) {
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && this._account) {
            this._account.updateSkypeToken(skypeToken);
        }
        else {
            this._slimcoreInstance.updateSkypeToken(skypeToken);
        }
    };
    SlimCoreElectronCallRegistry.prototype.fireIntent = function (intent, identity) {
        var _this = this;
        return Promise.resolve().then(function () {
            if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport)) {
                _this._slimcoreInstance.fireIntent(Enums.Intent.CallPush, identity, undefined, _this.identity);
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype.getSetup = function () {
        return this._setup;
    };
    SlimCoreElectronCallRegistry.prototype.getEcsProvider = function () {
        return this._ecsProvider;
    };
    SlimCoreElectronCallRegistry.prototype.createCall = function (threadId, callId, localParticipantId, messageId, causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('createCall', causeId);
        fnLogger.info("threadId:" + threadId + ", callId:" + callId + ", localParticipantId: " + localParticipantId + ", messageId:" + messageId);
        if (this._slimcoreCallHandler === null || this._slimcoreCallHandler === undefined) {
            fnLogger.logFailure('Stack not initialized yet');
            throw new Error('Stack not initialized yet');
        }
        this._skypeIdentity.tokenProvider().then(function (token) {
            if (token) {
                fnLogger.info('Updating Skype Token...');
                _this.updateSkypeToken(token);
                fnLogger.info('Token update complete');
            }
        });
        var call = null;
        if (threadId) {
            call = _.find(this.calls, function (call) { return call.threadId === threadId; });
            if (call) {
                if (callId && call.callId === callId) {
                    fnLogger.logFailure("Call Registry already has an entry for callId: " + call.callId + ", threadId: " + call.threadId);
                    return call;
                }
                else if (messageId && call.messageId === messageId) {
                    fnLogger.logFailure("Call Registry already has an entry for threadId: " + call.threadId + ", messageId: " + call.messageId);
                    return call;
                }
            }
        }
        call = this._getCall(callId, localParticipantId, causeId);
        if (call) {
            return call;
        }
        call = new SlimCoreElectronCall_1.default(this._logger, this._settings, this._slimcoreInstance, this._slimcoreCallHandler, this._deviceManager, this._appHooks, threadId, callId || guid_1.default(), this._skypeIdentity, localParticipantId, this._telemetryService, messageId);
        this.calls.push(call);
        this.event('callAdded').raise(call);
        this.raiseChanged();
        return call;
    };
    SlimCoreElectronCallRegistry.prototype.getCall = function (callId, localParticipantId, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._getCall(callId, localParticipantId, causeId);
    };
    SlimCoreElectronCallRegistry.prototype._getCall = function (callId, participantId, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger("getCall[callId=" + callId + "][participantId=" + participantId + "]", causeId);
        if (!callId && !participantId) {
            fnLogger.logFailure('callId & participantId is undefined');
            return null;
        }
        if (this._slimcoreCallHandler === null || this._slimcoreCallHandler === undefined) {
            fnLogger.logFailure('Stack not initialized yet');
            throw new Error('Stack not initialized yet');
        }
        var call = _.find(this.calls, function (call) { return call.callId === callId; });
        if (call) {
            if (call.state === 8) {
                this._initCall(call, call.slimcoreCallId, causeId);
                return call;
            }
            else {
                fnLogger.info("Call Registry already has an entry for this call");
                return call;
            }
        }
        var slimCoreCallObjectId = _.find(this._slimcoreCallHandler.getActiveCalls(), function (callObjectId) { return (_this._slimcoreCallHandler.getStrProperty(callObjectId, Enums.Property.CallName) === callId) &&
            (_this._slimcoreCallHandler.getStrProperty(callObjectId, Enums.Property.CallLegId) === participantId); });
        if (!slimCoreCallObjectId) {
            fnLogger.logFailure('slimCoreCallObjectId not found');
            return null;
        }
        var threadId = this._slimcoreCallHandler.getStrProperty(slimCoreCallObjectId, Enums.Property.CallThreadId);
        var messageId = this._slimcoreCallHandler.getStrProperty(slimCoreCallObjectId, Enums.Property.CallMessageId);
        call = new SlimCoreElectronCall_1.default(this._logger, this._settings, this._slimcoreInstance, this._slimcoreCallHandler, this._deviceManager, this._appHooks, threadId, callId, this._skypeIdentity, participantId, this._telemetryService, messageId);
        this._initCall(call, slimCoreCallObjectId, causeId);
        this.calls.push(call);
        this.event('callAdded').raise(call);
        this.raiseChanged();
        return call;
    };
    SlimCoreElectronCallRegistry.prototype.deleteCall = function (call, final, causeId) {
        var _this = this;
        if (final === void 0) { final = true; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        this._logger.info("deleteCall " + call.callId);
        var deletedCalls = false;
        _.each(_.remove(this.calls, function (c) { return c === call; }), function (c) {
            deletedCalls = true;
            if (final) {
                _this.event('callRemoved').raise(call);
                if (c.state !== 7) {
                    c.dispose(causeId);
                }
            }
        });
        if (deletedCalls) {
            this.raiseChanged();
            return true;
        }
        return false;
    };
    SlimCoreElectronCallRegistry.prototype.debugInformation = function (call) {
        var content = this._slimcoreCallHandler.getDebugInformation('/callinfo');
        if (call && (!content || _.isEmpty(content))) {
            content = "CallInformation\n * CallId=" + call.callId;
        }
        return Promise.resolve(content);
    };
    SlimCoreElectronCallRegistry.prototype.setAdditionalIdentities = function () {
        var _this = this;
        return Promise.resolve().then(function () {
            if (_this._skypeIdentity.sipUri) {
                var additionalIdentity = "2:" + _this._skypeIdentity.sipUri;
                if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && _this._account) {
                    _this._account.setAdditionalIdentities(additionalIdentity);
                }
                else {
                    _this._slimcoreInstance.setAdditionalIdentities(additionalIdentity);
                }
            }
        });
    };
    SlimCoreElectronCallRegistry.prototype._initializeSlimCore = function (token) {
        var _this = this;
        try {
            this._startSlimcorePromiseDefered.promise.then(function () {
                _this._logger.info("logging in to slimcore libStatus=" + _this.libStatus);
                _this._slimcoreInstance.login(_this._skypeIdentity.id, token, _this._skypeIdentity.displayName);
            });
        }
        catch (e) {
            this._logger.error('initialization failed.', e);
        }
    };
    SlimCoreElectronCallRegistry.prototype._onSkypeTokenRequired = function (eventData) {
        this.event('skypeTokenRequired').raise(eventData.invalidToken);
    };
    SlimCoreElectronCallRegistry.prototype._onLibStatusChanged = function (eventData) {
        this._logger.info("_onLibStatusChanged from " + this.libStatus + " => " + eventData.libStatus);
        if (eventData.libStatus === Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.resolve();
        }
        else if (eventData.libStatus === Enums.LibStatus.FatalError &&
            this.libStatus === Enums.LibStatus.Constructed) {
            this._startSlimcorePromiseDefered.reject(new Error('Slimcore FatalError during start'));
        }
        this.libStatus = eventData.libStatus;
    };
    SlimCoreElectronCallRegistry.prototype._onProxiedPushNotification = function (eventData) {
        var pushEvent = {
            eventId: eventData.eventId,
            payload: eventData.payload
        };
        this.event('proxiedPushNotification').raise(pushEvent);
    };
    SlimCoreElectronCallRegistry.prototype._hookCallRegistryEvents = function () {
        var _this = this;
        if (SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) && this._account) {
            this._registerDisposable(this._account.handle('skype-token-required', undefined, function (data) { return _this._onSkypeTokenRequired(data); }));
            this._registerDisposable(this._slimcoreCallHandler.handle('proxied-push-notification', undefined, function (data) { return _this._onProxiedPushNotification(data); }));
        }
        else {
            this._registerDisposable(this._slimcoreInstance.handle('skype-token-required', undefined, function (data) { return _this._onSkypeTokenRequired(data); }));
            this._registerDisposable(this._slimcoreInstance.handle('proxied-push-notification', undefined, function (data) { return _this._onProxiedPushNotification(data); }));
        }
    };
    return SlimCoreElectronCallRegistry;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronCallRegistry;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronBindingManager_1 = __webpack_require__(50);
var EnumConverter = __webpack_require__(19);
var SlimCoreElectronLocalVideoPreview_1 = __webpack_require__(35);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var DeviceList = (function () {
    function DeviceList(_kind, _logger) {
        this._kind = _kind;
        this._logger = _logger;
        this._list = [];
        this._logger.info('constructor');
    }
    DeviceList.prototype.update = function (list) {
        this._list = list;
        this._logger.info("update: " + JSON.stringify(this._list));
    };
    DeviceList.prototype.isAvailable = function (deviceId) {
        return !!(deviceId && _.find(this._list, function (device) { return device.id === deviceId; }));
    };
    DeviceList.prototype.getBestDevice = function () {
        return this._getDeviceId(_.first(this._list));
    };
    DeviceList.prototype.getSelectedDevice = function () {
        if (this.isAvailable(this._selectedDevice)) {
            this._logger.debug("getSelectedDevice: " + this._selectedDevice);
            return this._selectedDevice;
        }
        else {
            var deviceId = this.getBestDevice();
            this._logger.debug("getSelectedDevice - unknown device selected, returning preferred device: " + deviceId);
            return deviceId;
        }
    };
    DeviceList.prototype.selectDevice = function (deviceId) {
        if (this.isAvailable(deviceId)) {
            this._logger.info("selectDevice: " + deviceId);
            this._selectedDevice = deviceId;
        }
        else {
            this._logger.info("selectDevice - unknown device selected, selecting preferred device");
            this._selectedDevice = null;
        }
    };
    DeviceList.prototype._getDeviceId = function (device) {
        return device ? device.id : null;
    };
    return DeviceList;
}());
var VideoDeviceList = (function (_super) {
    __extends(VideoDeviceList, _super);
    function VideoDeviceList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoDeviceList.prototype.getBestDevice = function () {
        var externalCamera = this._findCamera(Enums.CameraFacing.External);
        var frontCamera = this._findCamera(Enums.CameraFacing.Front);
        var leftFrontCamera = this._findCamera(Enums.CameraFacing.LeftFront);
        var rightFrontCamera = this._findCamera(Enums.CameraFacing.RightFront);
        var nonVirtualCamera = this._findCamera();
        var anyCamera = _super.prototype.getBestDevice.call(this);
        return externalCamera || frontCamera || leftFrontCamera || rightFrontCamera || nonVirtualCamera || anyCamera;
    };
    VideoDeviceList.prototype.enumerate = function () {
        var _this = this;
        return _.map(this._list, function (device) { return ({
            id: device.id,
            browserId: device.browserId,
            label: device.label,
            kind: _this._kind,
            position: _this._getCameraPosition(device.cameraFacing)
        }); });
    };
    VideoDeviceList.prototype._findCamera = function (facing) {
        var device = _.find(this._list, function (device) {
            return device.deviceType !== Enums.DeviceType.Virtual && (!facing || device.cameraFacing === facing);
        });
        return this._getDeviceId(device);
    };
    VideoDeviceList.prototype._getCameraPosition = function (cameraFacing) {
        switch (cameraFacing) {
            case Enums.CameraFacing.Front:
                return 1;
            case Enums.CameraFacing.LeftFront:
                return 4;
            case Enums.CameraFacing.RightFront:
                return 5;
            case Enums.CameraFacing.Back:
                return 2;
            case Enums.CameraFacing.External:
                return 3;
            default:
                return 0;
        }
    };
    return VideoDeviceList;
}(DeviceList));
var AudioDeviceList = (function (_super) {
    __extends(AudioDeviceList, _super);
    function AudioDeviceList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioDeviceList.prototype.enumerate = function () {
        var _this = this;
        var defaultDevice = _.find(this._list, function (device) { return device.isSystemDefault; }) || _.first(this._list);
        return _.map(this._list, function (device) { return ({
            id: device.id,
            browserId: device.browserId,
            label: device.label,
            kind: _this._kind,
            productId: "" + (device.productId || ''),
            vendorId: "" + (device.vendorId || ''),
            isSystemDefault: device === defaultDevice
        }); });
    };
    return AudioDeviceList;
}(DeviceList));
var CompositeAudioDeviceList = (function () {
    function CompositeAudioDeviceList(_logger) {
        this._logger = _logger;
        this._list = [];
        this._logger.info('constructor');
    }
    CompositeAudioDeviceList.prototype.update = function (list) {
        this._list = list;
        this._logger.info("update: " + JSON.stringify(this._list));
    };
    CompositeAudioDeviceList.prototype.enumerate = function () {
        var _this = this;
        return _.map(this._list, function (device) { return ({
            id: null,
            browserId: null,
            label: device.label,
            kind: 4,
            microphoneId: device.microphoneId,
            speakerId: device.speakerId,
            formFactor: _this._getCompositeDeviceFormFactor(device.deviceType),
            isPcInternalDevice: device.isPcInternalDevice
        }); });
    };
    CompositeAudioDeviceList.prototype._getCompositeDeviceFormFactor = function (type) {
        switch (type) {
            case Enums.CompositeAudioDeviceType.Speakers:
                return 1;
            case Enums.CompositeAudioDeviceType.Headphones:
                return 2;
            case Enums.CompositeAudioDeviceType.Headset:
                return 3;
            case Enums.CompositeAudioDeviceType.Handset:
                return 4;
            case Enums.CompositeAudioDeviceType.Speakerphone:
                return 5;
            default:
                return 0;
        }
    };
    return CompositeAudioDeviceList;
}());
function getMediaDeviceIdSubstring(mediaDeviceLabel, slimcoreDeviceLabel) {
    var devicePostfix = mediaDeviceLabel.split(slimcoreDeviceLabel)[1].trim();
    var found = devicePostfix.match(/\((.+):(.+)\)/);
    if (found) {
        var _a = found.slice(1), vid = _a[0], pid = _a[1];
        return "vid_" + vid + "&pid_" + pid;
    }
    return undefined;
}
var SlimCoreElectronDeviceManager = (function (_super) {
    __extends(SlimCoreElectronDeviceManager, _super);
    function SlimCoreElectronDeviceManager(logger, settings, engine, _mediaReadyPromise, _appHooks) {
        var _this = _super.call(this, logger.createChild('DeviceManager'), settings, engine) || this;
        _this._mediaReadyPromise = _mediaReadyPromise;
        _this._appHooks = _appHooks;
        _this._browserDevices = [];
        _this._haveStartedMedia = false;
        _this._startPreviewVideo = function (videoObjectId) {
            return _this._mediaReadyPromise.then(function (slimcoreObject) {
                _this._logger.info("Wait AVAILABLE for preview video " + videoObjectId);
                return SlimCoreCommon.waitForVideoObjectState({
                    slimcoreInstance: _this._slimcoreInstance,
                    slimcoreObject: slimcoreObject,
                    videoObjectId: videoObjectId,
                    logger: _this._logger,
                    resolveStates: [Enums.VideoStatus.Available],
                    rejectStates: [Enums.VideoStatus.NotAvailable],
                    timeout: SlimCoreCommon.videoObjectTimeout(_this._settings)
                })
                    .then(function () {
                    _this._logger.info("Starting preview video " + videoObjectId);
                    _this._slimcoreInstance.videoStart(videoObjectId);
                })
                    .then(function () { return SlimCoreCommon.waitForVideoObjectState({
                    slimcoreInstance: _this._slimcoreInstance,
                    slimcoreObject: slimcoreObject,
                    videoObjectId: videoObjectId,
                    logger: _this._logger,
                    resolveStates: [Enums.VideoStatus.Starting, Enums.VideoStatus.Running],
                    rejectStates: [Enums.VideoStatus.NotAvailable],
                    timeout: SlimCoreCommon.videoObjectTimeout(_this._settings)
                }); })
                    .then(function () { return _this._logger.info("Now can use preview video " + videoObjectId); });
            });
        };
        _this._stopPreviewVideo = function (videoObjectId) {
            return Promise.resolve().then(function () {
                _this._logger.info("Stopping preview video " + videoObjectId);
                _this._slimcoreInstance.videoStop(videoObjectId);
            });
        };
        _this._createRendererBinding = function (videoObjectId) {
            var binding;
            return _this._previewVideoManager.acquire(_this._rendererBindingManager, videoObjectId)
                .then(function () {
                if (_this._slimcoreInstance.createVideoBindingRenderer) {
                    binding = _this._slimcoreInstance.createVideoBindingRenderer({
                        enableDXVA: _this._settings.enableDXVA,
                        isLocalPreview: true
                    });
                }
                else {
                    binding = SlimCore.createVideoBindingRenderer();
                }
                _this._logger.info("Create rendering binding for preview video " + videoObjectId);
                return _this._slimcoreInstance.videoCreateBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info("Created rendering binding for preview video " + videoObjectId);
                return binding;
            });
        };
        _this._releaseRendererBinding = function (videoObjectId, binding) {
            return Promise.resolve().then(function () {
                _this._logger.info("Release rendering binding for preview video " + videoObjectId);
                return _this._slimcoreInstance.videoReleaseBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info("Released rendering binding for preview video " + videoObjectId);
                return _this._previewVideoManager.release(_this._rendererBindingManager, videoObjectId);
            });
        };
        _this._createScreenShareBinding = function (videoObjectId) {
            var binding;
            return _this._previewVideoManager.acquire(_this._screenShareBindingManager, videoObjectId)
                .then(function () {
                binding = _this._createVideoBindingScreenShare();
                _this._logger.info("Create screenshare binding for preview video " + videoObjectId);
                return _this._slimcoreInstance.videoCreateBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info("Created screenshare binding for preview video " + videoObjectId);
                return binding;
            });
        };
        _this._releaseScreenShareBinding = function (videoObjectId, binding) {
            return Promise.resolve().then(function () {
                _this._logger.info("Release screenshare binding for preview video " + videoObjectId);
                return _this._slimcoreInstance.videoReleaseBinding(videoObjectId, binding);
            }).then(function () {
                _this._logger.info("Released screenshare binding for preview video " + videoObjectId);
                return _this._previewVideoManager.release(_this._screenShareBindingManager, videoObjectId);
            });
        };
        _this._logger.info('constructor');
        _this._cameras = new VideoDeviceList(1, _this._logger.createChild('cameras'));
        _this._microphones = new AudioDeviceList(2, _this._logger.createChild('microphones'));
        _this._speakers = new AudioDeviceList(3, _this._logger.createChild('speakers'));
        _this._compositeDevices = new CompositeAudioDeviceList(_this._logger.createChild('compositeaudiodevices'));
        _this._devicesEnumeratedPromise = _this._mediaReadyPromise
            .then(function () { return _this._updateBrowserDevices(); })
            .then(function () {
            _this._updateAudioDevices();
            _this._updateVideoDevices();
            _this._handleDisplaysChanged();
        });
        _this._previewVideoManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._startPreviewVideo, _this._stopPreviewVideo, _this._logger);
        _this._rendererBindingManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._createRendererBinding, _this._releaseRendererBinding, _this._logger);
        _this._screenShareBindingManager = new SlimCoreElectronBindingManager_1.SlimCoreElectronBindingManager(_this._createScreenShareBinding, _this._releaseScreenShareBinding, _this._logger);
        _this._registerDisposable(_this._slimcoreInstance.handle('device-list-changed', undefined, function (eventData) { return _this._slimCoreDevicesChangedHander(eventData); }));
        _this._registerDisposable(_this._appHooks.onDisplaysChanged(function () { return _this._handleDisplaysChanged(); }));
        return _this;
    }
    SlimCoreElectronDeviceManager.prototype.getRendererBindingManager = function () {
        return this._rendererBindingManager;
    };
    SlimCoreElectronDeviceManager.prototype.getScreenShareBindingManager = function () {
        return this._screenShareBindingManager;
    };
    SlimCoreElectronDeviceManager.prototype.getPreviewVideo = function (type, name, path) {
        var _this = this;
        var videoObjectId = 0;
        return this._mediaReadyPromise.then(function (slimcoreObject) {
            videoObjectId = _this._slimcoreInstance.createPreviewVideo(type, name, path);
            if (videoObjectId === 0) {
                throw new Error('SlimCore returned invalid video object ID 0');
            }
            _this._logger.info("Got preview video. Waiting for video to become AVAILABLE|STARTING|RUNNING");
            return SlimCoreCommon.waitForVideoObjectToBeAvailable(_this._slimcoreInstance, slimcoreObject, videoObjectId, _this._logger, SlimCoreCommon.videoObjectTimeout(_this._settings));
        }).then(function () { return videoObjectId; });
    };
    Object.defineProperty(SlimCoreElectronDeviceManager.prototype, "isAudioOutputSelectionSupported", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronDeviceManager.prototype._handleDisplaysChanged = function () {
        try {
            this._slimcoreInstance.setDeviceRotation(SlimCore.queryDeviceRotation());
        }
        catch (err) {
            this._logger.warn("Displays Changed handling error: " + err);
        }
    };
    SlimCoreElectronDeviceManager.prototype._updateVideoDevices = function () {
        this._cameras.update(this._fillBrowserDeviceIds(this._slimcoreInstance.getCameraList(), 'videoinput'));
    };
    SlimCoreElectronDeviceManager.prototype._updateAudioDevices = function () {
        this._microphones.update(this._fillBrowserDeviceIds(this._slimcoreInstance.getMicrophoneList(), 'audioinput'));
        this._speakers.update(this._fillBrowserDeviceIds(this._slimcoreInstance.getSpeakerList(), 'audiooutput'));
        if (this._slimcoreInstance.getCompositeAudioDevices) {
            this._compositeDevices.update(this._slimcoreInstance.getCompositeAudioDevices());
        }
        this._selectAudioDevices();
    };
    SlimCoreElectronDeviceManager.prototype._updateBrowserDevices = function () {
        var _this = this;
        if (typeof navigator !== 'object') {
            this._logger.warn('Browser-backed device list won\'t be fetched as navigator is not available');
            return Promise.resolve();
        }
        if (this._browserDevicesPromise) {
            return this._browserDevicesPromise;
        }
        return this._browserDevicesPromise = navigator.mediaDevices.enumerateDevices().then(function (deviceList) {
            _this._browserDevices = deviceList;
            _this._browserDevicesPromise = undefined;
        });
    };
    SlimCoreElectronDeviceManager.prototype._fillBrowserDeviceIds = function (deviceList, kind) {
        if (!deviceList) {
            return deviceList;
        }
        var _loop_1 = function (device) {
            var browserDevice = this_1._browserDevices.find(function (mediaDeviceInfo) {
                if (mediaDeviceInfo.kind !== kind) {
                    return false;
                }
                if (mediaDeviceInfo.label === device.label) {
                    return true;
                }
                else if (mediaDeviceInfo.label.indexOf(device.label) === 0) {
                    var deviceIdSubstring = getMediaDeviceIdSubstring(mediaDeviceInfo.label, device.label);
                    return device.id.indexOf(deviceIdSubstring) > -1;
                }
                else {
                    return false;
                }
            });
            if (browserDevice) {
                device.browserId = browserDevice.deviceId;
            }
            else if (this_1._browserDevices.length > 0) {
                this_1._logger.warn("No browser device found for device " + device.label);
            }
        };
        var this_1 = this;
        for (var _i = 0, deviceList_1 = deviceList; _i < deviceList_1.length; _i++) {
            var device = deviceList_1[_i];
            _loop_1(device);
        }
        return deviceList;
    };
    SlimCoreElectronDeviceManager.prototype._selectAudioDevices = function () {
        var microphone = this._microphones.getSelectedDevice();
        var speaker = this._speakers.getSelectedDevice();
        this._logger.info("SlimCore - selectAudioDevices: " + microphone + ", " + speaker);
        this._slimcoreInstance.selectAudioDevices(microphone, speaker);
    };
    SlimCoreElectronDeviceManager.prototype._slimCoreDevicesChangedHander = function (args) {
        var _this = this;
        this._logger.info("SlimCore Devices changed: " + JSON.stringify(args));
        this._updateBrowserDevices().then(function () {
            if (args.video) {
                _this._updateVideoDevices();
            }
            else {
                _this._updateAudioDevices();
            }
            _this._raiseDevicesChanged();
            _this._logger.info("Raised device changed notification: " + JSON.stringify(args));
        })
            .catch(function (error) {
            _this._logger.error("Failed to raise device changed notification, error = " + error);
        });
    };
    SlimCoreElectronDeviceManager.prototype._raiseDevicesChanged = function () {
        this.raiseChanged();
        this.event('devicesChanged').raise(this._enumerateDevices());
    };
    SlimCoreElectronDeviceManager.prototype._enumerateDevices = function () {
        var cameras = this._cameras.enumerate();
        var microphones = this._microphones.enumerate();
        var speakers = this._speakers.enumerate();
        var compositeAudioDevices = this._compositeDevices.enumerate();
        return [].concat(cameras, microphones, speakers, compositeAudioDevices);
    };
    SlimCoreElectronDeviceManager.prototype.askDevicePermission = function (constraints) {
        return Promise.resolve().then(function () {
            return { audio: true, video: true };
        });
    };
    SlimCoreElectronDeviceManager.prototype._triggerMediaInitOnce = function () {
        if (SlimCoreCommon.hasFeature(Enums.Feature.LazyMediaInit) && !this._haveStartedMedia) {
            this._slimcoreInstance.fireIntent(Enums.Intent.MediaInit);
            this._haveStartedMedia = true;
        }
    };
    SlimCoreElectronDeviceManager.prototype.enumerateDevicesAsync = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._triggerMediaInitOnce();
            _this._devicesEnumeratedPromise.then(function () { return _this._enumerateDevices(); }).then(resolve, reject);
        });
    };
    SlimCoreElectronDeviceManager.prototype.selectDevices = function (devices) {
        var _this = this;
        this._devicesEnumeratedPromise.then(function () {
            _this._selectDevices(devices);
        });
    };
    SlimCoreElectronDeviceManager.prototype.selectDevicesAsync = function (devices) {
        return Promise.reject(new Error('Not implemented'));
    };
    SlimCoreElectronDeviceManager.prototype._selectDevices = function (devices) {
        this._logger.debug("selectDevices - " + JSON.stringify(devices));
        if (devices.camera !== undefined) {
            this._cameras.selectDevice(devices.camera);
        }
        if (devices.microphone !== undefined) {
            this._microphones.selectDevice(devices.microphone);
        }
        if (devices.speaker !== undefined) {
            this._speakers.selectDevice(devices.speaker);
        }
        this._selectAudioDevices();
        this._raiseDevicesChanged();
    };
    SlimCoreElectronDeviceManager.prototype.setVideoCaptureConfigAsync = function (deviceId, config) {
        var _this = this;
        return this._mediaReadyPromise
            .then(function () {
            if (_this._slimcoreInstance.setVideoCaptureConfig) {
                _this._slimcoreInstance.setVideoCaptureConfig(deviceId, config);
            }
            else {
                _this._logger.warn('setVideoCaptureConfig is not available');
            }
        })
            .catch(function (error) {
            _this._logger.error("Failed to set video capture config, Error = " + error);
            throw error;
        });
    };
    SlimCoreElectronDeviceManager.prototype.setDeviceEffectsAsync = function (deviceId, type) {
        var _this = this;
        return this._mediaReadyPromise
            .then(function () {
            if (_this._slimcoreInstance.setDeviceEffects) {
                _this._slimcoreInstance.setDeviceEffects(deviceId, EnumConverter.convertVideoEffectType(type));
            }
            else {
                _this._logger.warn('setDeviceEffects is not available');
            }
        })
            .catch(function (error) {
            _this._logger.error("Failed to set Video Effects, Error = " + error);
            throw error;
        });
    };
    SlimCoreElectronDeviceManager.prototype.getDeviceEffectsCapabilityAsync = function (deviceId, mask) {
        var _this = this;
        return this._mediaReadyPromise
            .then(function () {
            if (_this._slimcoreInstance.getDeviceEffectsCapability) {
                return _this._slimcoreInstance.getDeviceEffectsCapability(deviceId, mask);
            }
            else {
                _this._logger.warn('getDeviceEffectsCapability is not available');
                return 0;
            }
        })
            .catch(function (error) {
            _this._logger.error("Error in getDeviceEffectsCapabilityAsync, error = " + error);
            throw error;
        });
    };
    SlimCoreElectronDeviceManager.prototype.setBackgroundImageAsync = function (deviceId, imagePath) {
        var _this = this;
        return this._mediaReadyPromise
            .then(function () {
            if (_this._slimcoreInstance.setBackgroundImage) {
                _this._slimcoreInstance.setBackgroundImage(deviceId, imagePath);
            }
            else {
                _this._logger.warn('setBackgroundImage is not available');
            }
        })
            .catch(function (error) {
            _this._logger.error("Failed to set background image, Error = " + error);
            throw error;
        });
    };
    SlimCoreElectronDeviceManager.prototype.getSelectedDevices = function () {
        var result = {
            camera: this._cameras.getSelectedDevice(),
            microphone: this._microphones.getSelectedDevice(),
            speaker: this._speakers.getSelectedDevice()
        };
        this._logger.debug("getSelectedDevices - " + JSON.stringify(result));
        return result;
    };
    SlimCoreElectronDeviceManager.prototype.getCamera = function (deviceId) {
        return _.find(this._cameras.enumerate(), function (device) { return device.id === deviceId; });
    };
    SlimCoreElectronDeviceManager.prototype.getSelectedCamera = function () {
        var deviceId = this._cameras.getSelectedDevice();
        var device = this.getCamera(deviceId);
        this._logger.debug("getSelectedCamera - " + JSON.stringify(device));
        return device;
    };
    SlimCoreElectronDeviceManager.prototype.createPreview = function (target, selection, options, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var renderer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        renderer = new SlimCoreElectronLocalVideoPreview_1.default(this._logger, this._settings, this._slimcoreInstance, target, this, selection, options, causeId);
                        return [4, renderer.startVideoAsync(causeId)];
                    case 1:
                        _a.sent();
                        return [2, renderer];
                }
            });
        });
    };
    SlimCoreElectronDeviceManager.prototype.createPreviewRenderer = function (target, options, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this.createPreview(target, { kind: 'camera' }, options, causeId);
    };
    SlimCoreElectronDeviceManager.prototype.createScreenSharingPreviewRenderer = function (target, options, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this.createPreview(target, { kind: 'sharing' }, options, causeId);
    };
    SlimCoreElectronDeviceManager.prototype.getDeviceNameAsync = function (deviceId) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            var device = _.find(_this._enumerateDevices(), function (device) { return device.id === deviceId; });
            if (!device) {
                throw new Error("Device with id: " + deviceId + " not found");
            }
            return device.label;
        });
    };
    SlimCoreElectronDeviceManager.prototype.getSpeakerVolume = function () {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.getSpeakerVolume(); });
    };
    SlimCoreElectronDeviceManager.prototype.getSpeakerSystemVolume = function () {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.getSpeakerSystemVolume(); });
    };
    SlimCoreElectronDeviceManager.prototype.setSpeakerVolume = function (volume) {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.setSpeakerVolume(volume); });
    };
    SlimCoreElectronDeviceManager.prototype.setSpeakerSystemVolume = function (volume) {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.setSpeakerSystemVolume(volume); });
    };
    SlimCoreElectronDeviceManager.prototype.unmuteMicrophone = function () {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.unmuteMicrophone(); });
    };
    SlimCoreElectronDeviceManager.prototype.unmuteSpeaker = function () {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.unmuteSpeaker(); });
    };
    SlimCoreElectronDeviceManager.prototype.getNrgLevelsForDeviceTuner = function (microphone) {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.getNrgLevelsForDeviceTuner(microphone); });
    };
    SlimCoreElectronDeviceManager.prototype.getMicrophoneVolume = function () {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.getMicrophoneVolume(); });
    };
    SlimCoreElectronDeviceManager.prototype.setMicrophoneVolume = function (volume) {
        var _this = this;
        return this._mediaReadyPromise.then(function () { return _this._slimcoreInstance.setMicrophoneVolume(volume); });
    };
    SlimCoreElectronDeviceManager.prototype.addProbeDevices = function () {
        var _this = this;
        return this._mediaReadyPromise
            .then(function () {
            if (_this._slimcoreInstance.addProbeDevices) {
                return _this._slimcoreInstance.addProbeDevices();
            }
            else {
                _this._logger.warn('addProbeDevices is not available');
                return Promise.reject(false);
            }
        })
            .catch(function (error) {
            _this._logger.error("Error in addProbeDevices, Error = " + error);
            return Promise.reject(false);
        });
    };
    SlimCoreElectronDeviceManager.prototype.hasVideoBindingScreenShare = function () {
        return !!(this._slimcoreInstance.createVideoBindingScreenShare || SlimCore.createVideoBindingScreenShare);
    };
    SlimCoreElectronDeviceManager.prototype._createVideoBindingScreenShare = function () {
        if (this._slimcoreInstance.createVideoBindingScreenShare) {
            return this._slimcoreInstance.createVideoBindingScreenShare();
        }
        else {
            return SlimCore.createVideoBindingScreenShare();
        }
    };
    return SlimCoreElectronDeviceManager;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronDeviceManager;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var chainedPromise_1 = __webpack_require__(16);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronVideoRenderer_1 = __webpack_require__(28);
var Enums = SlimCore.Enums;
var _instanceCount = 0;
var SlimCoreElectronLocalVideoPreview = (function (_super) {
    __extends(SlimCoreElectronLocalVideoPreview, _super);
    function SlimCoreElectronLocalVideoPreview(logger, settings, engine, _currentTarget, _deviceManager, _selection, _options, causeId) {
        var _this = _super.call(this, logger.createChild(function () { return "LocalVideoPreview[" + _this._id + "][" + _this._selection.kind + "][" + _this._previewVideoObjectId + "]"; }), settings, engine) || this;
        _this._currentTarget = _currentTarget;
        _this._deviceManager = _deviceManager;
        _this._selection = _selection;
        _this._options = _options;
        _this._id = _instanceCount++;
        _this._previewVideoObjectId = 0;
        _this._shouldRun = false;
        _this._logger.info("constructor device? " + _this._selection.device + " causeId: " + causeId);
        if (_this._selection.kind !== 'camera' && (_this._selection.kind !== 'sharing' || !_.isUndefined(_this._selection.device))) {
            throw new Error("invalid selection parameters causeId: " + causeId);
        }
        _this._chainedApiPromise = new chainedPromise_1.default(logger.createChild(function () { return "LocalVideoPreview[" + _this._id + "][" + _this._selection.kind + "][" + _this._previewVideoObjectId + "]"; }));
        if (_this._selection.kind === 'camera' && _.isUndefined(_this._selection.device)) {
            _this._registerDisposable(_this._deviceManager.on('devicesChanged', function () { return _this._devicesChanged(causeId); }));
        }
        return _this;
    }
    SlimCoreElectronLocalVideoPreview.prototype._devicesChanged = function (causeId) {
        var _this = this;
        this._logger.info("_devicesChanged causeId: " + causeId);
        this._chainedApiPromise.chainPromise(function () { return _this._swapVideoDevice(causeId); }, 'swapVideoDevice', causeId);
    };
    SlimCoreElectronLocalVideoPreview.prototype.startVideoAsync = function (causeId) {
        var _this = this;
        this._logger.info("startVideoAsync causeId: " + causeId);
        this._shouldRun = true;
        return this._chainedApiPromise.chainPromise(function () { return _this._startVideo(causeId); }, 'startVideoAsync', causeId);
    };
    SlimCoreElectronLocalVideoPreview.prototype.stop = function (causeId) {
        var _this = this;
        this._logger.info("stop causeId: " + causeId);
        this._shouldRun = false;
        return this._chainedApiPromise.chainPromise(function () { return _this._stopVideo(causeId, false); }, 'stopVideoAsync', causeId);
    };
    SlimCoreElectronLocalVideoPreview.prototype.dumpVideoSourceImages = function () {
        if (!this._previewVideoObjectId) {
            return Promise.reject(new Error('Cannot dump video fx debug images when there is no preview video'));
        }
        return this._slimcoreInstance.dumpVideoSourceImages(this._previewVideoObjectId);
    };
    SlimCoreElectronLocalVideoPreview.prototype.dispose = function (causeId) {
        var _this = this;
        this._logger.info("dispose causeId: " + causeId);
        this._shouldRun = false;
        this._chainedApiPromise.chainPromise(function () { return _this._dispose(causeId); }, 'dispose', causeId);
    };
    SlimCoreElectronLocalVideoPreview.prototype._isRunning = function () {
        return (this._previewVideoObjectId !== 0 && !!this._videoBinding);
    };
    SlimCoreElectronLocalVideoPreview.prototype._dispose = function (causeId) {
        var _this = this;
        return SlimCoreCommon.forgetAndLog(this._stopVideo(causeId, true), this._logger, "dispose causeId: " + causeId + " stopping video preview failed").then(function () {
            _this._currentTarget = null;
            _super.prototype.dispose.call(_this, causeId);
        });
    };
    SlimCoreElectronLocalVideoPreview.prototype._swapVideoDevice = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var selectedCamera;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._shouldRun && this._isRunning() && !!this._currentTarget)) return [3, 4];
                        selectedCamera = this._deviceManager.getSelectedCamera();
                        if (!(selectedCamera && this._currentCamera && selectedCamera.id !== this._currentCamera.id)) return [3, 3];
                        this._logger.info("_swapVideoDevice causeId: " + causeId + " will change video preview device: " + this._currentCamera.id + " -> " + selectedCamera.id);
                        return [4, this._stopVideo(causeId, true)];
                    case 1:
                        _a.sent();
                        return [4, this._startVideo(causeId)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3, 5];
                    case 4:
                        this._logger.info("_swapVideoDevice causeId: " + causeId + " noop, should run: " + this._shouldRun + " is running: " + this._isRunning() + " has target: " + !!this._currentTarget);
                        _a.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    SlimCoreElectronLocalVideoPreview.prototype._startVideo = function (causeId) {
        return __awaiter(this, void 0, void 0, function () {
            var name_1, path, videoType, _a, _b, options;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(this._shouldRun && !this._isRunning() && !!this._currentTarget)) return [3, 4];
                        name_1 = '';
                        path = '';
                        videoType = Enums.VideoType.ScreenShare;
                        if (this._selection.kind === 'camera') {
                            if (_.isUndefined(this._selection.device)) {
                                this._currentCamera = this._deviceManager.getSelectedCamera();
                            }
                            else {
                                this._currentCamera = this._deviceManager.getCamera(this._selection.device);
                            }
                            if (!this._currentCamera) {
                                throw new Error("_startVideo causeId: " + causeId + " no camera to start video preview");
                            }
                            videoType = Enums.VideoType.Video;
                            name_1 = this._currentCamera.label;
                            path = this._currentCamera.id;
                        }
                        this._logger.info("_startVideo causeId: " + causeId + " will start video preview now for device name: " + name_1 + " path: " + path);
                        _a = this;
                        return [4, this._deviceManager.getPreviewVideo(videoType, name_1, path)];
                    case 1:
                        _a._previewVideoObjectId = _c.sent();
                        _b = this;
                        return [4, this._deviceManager.getRendererBindingManager().acquire(this, this._previewVideoObjectId)];
                    case 2:
                        _b._videoBinding = _c.sent();
                        options = this._options || {
                            scalingMode: 1,
                            transparent: false
                        };
                        return [4, this._createVideoRenderer(this._currentTarget, options, true)];
                    case 3:
                        _c.sent();
                        return [3, 5];
                    case 4:
                        this._logger.info("_startVideo causeId: " + causeId + " noop, should run: " + this._shouldRun + " is running: " + this._isRunning() + " has target: " + !!this._currentTarget);
                        _c.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    SlimCoreElectronLocalVideoPreview.prototype._stopVideo = function (causeId, force) {
        return __awaiter(this, void 0, void 0, function () {
            var releasePromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((!this._shouldRun || force) && this._isRunning())) return [3, 2];
                        this._logger.info("_stopVideo causeId: " + causeId + " force: " + force + " will stop video preview now");
                        try {
                            this._disposeVideoRenderer(causeId);
                        }
                        catch (error) {
                            this._logger.warn("_stopVideo causeId: " + causeId + " _disposeVideoRenderer error: " + error + " falied @ " + new Error().stack);
                        }
                        releasePromise = this._deviceManager.getRendererBindingManager().release(this, this._previewVideoObjectId);
                        this._previewVideoObjectId = 0;
                        this._videoBinding = null;
                        return [4, releasePromise];
                    case 1:
                        _a.sent();
                        return [3, 3];
                    case 2:
                        this._logger.info("_stopVideo causeId: " + causeId + " noop, force: " + force + " should run: " + this._shouldRun + " is running: " + this._isRunning() + " has target: " + !!this._currentTarget);
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    return SlimCoreElectronLocalVideoPreview;
}(SlimCoreElectronVideoRenderer_1.default));
exports.default = SlimCoreElectronLocalVideoPreview;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronScreenScraper_1 = __webpack_require__(30);
var SlimCoreElectronScreenSharingManager = (function (_super) {
    __extends(SlimCoreElectronScreenSharingManager, _super);
    function SlimCoreElectronScreenSharingManager(logger, settings, engine, _appHooks, _deviceManager) {
        var _this = _super.call(this, logger.createChild('ScreenSharingManager'), settings, engine) || this;
        _this._appHooks = _appHooks;
        _this._deviceManager = _deviceManager;
        _this._logger.info('constructor');
        try {
            _this._screenScraper = new SlimCoreElectronScreenScraper_1.default(_this._slimcoreInstance);
        }
        catch (error) {
            _this._logger.warn("" + error);
        }
        _this._registerDisposable(_this._appHooks.onDisplaysChanged(function () { return _this._raiseScreensChanged(); }));
        return _this;
    }
    SlimCoreElectronScreenSharingManager.prototype.enumerateScreensAsync = function () {
        var _this = this;
        return async.asap(function () { return _this._enumerateScreens(); });
    };
    SlimCoreElectronScreenSharingManager.prototype.enumerateWindowsAsync = function () {
        var _this = this;
        return async.asap(function () { return _this._enumerateWindows(); });
    };
    SlimCoreElectronScreenSharingManager.prototype.enumerateCamerasAsync = function () {
        var _this = this;
        try {
            if (this._deviceManager) {
                return this._deviceManager.enumerateDevicesAsync()
                    .then(function (devices) {
                    var cameras = devices.filter(function (device) { return device.kind === 1; });
                    _this._logger.debug("enumerateCameras() result: " + JSON.stringify(cameras));
                    return _.map(cameras, function (camera) { return new SlimcoreElectronCameraSharingSource(camera); });
                });
            }
            else {
                return Promise.resolve([]);
            }
        }
        catch (error) {
            this._logger.error("enumerateCameras() failed: " + error);
            return Promise.reject("enumerateCameras() failed: " + error);
        }
    };
    SlimCoreElectronScreenSharingManager.prototype._enumerateScreens = function () {
        var _this = this;
        try {
            var monitors = this._screenScraper && this._screenScraper.getMonitorList() || [];
            this._logger.debug("ScreenScraper.getMonitorList() result: " + JSON.stringify(monitors));
            return _.map(monitors, function (monitorInfo) { return new SlimCoreElectronScreenSharingSource(monitorInfo, _this._logger, _this._screenScraper); });
        }
        catch (error) {
            this._logger.error("ScreenScraper.getMonitorList() failed: " + error);
            throw error;
        }
    };
    SlimCoreElectronScreenSharingManager.prototype._enumerateWindows = function () {
        var _this = this;
        try {
            var windows = this._screenScraper && this._screenScraper.getWindowList() || [];
            this._logger.debug("ScreenScraper.getWindowList() result: " + JSON.stringify(windows));
            return _.map(windows, function (windowInfo) { return new SlimcoreElectronWindowSharingSource(windowInfo, _this._logger, _this._screenScraper); });
        }
        catch (error) {
            this._logger.error("ScreenScraper.getWindowList() failed: " + error);
            throw error;
        }
    };
    SlimCoreElectronScreenSharingManager.prototype._raiseScreensChanged = function () {
        this._logger.debug('raising onScreensChanged');
        this.event('screensChanged').raise();
    };
    return SlimCoreElectronScreenSharingManager;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronScreenSharingManager;
var SlimCoreElectronScreenSharingSource = (function () {
    function SlimCoreElectronScreenSharingSource(_monitorInfo, _logger, _screenScraper) {
        this._monitorInfo = _monitorInfo;
        this._logger = _logger;
        this._screenScraper = _screenScraper;
    }
    SlimCoreElectronScreenSharingSource.prototype.getId = function () {
        return this._monitorInfo.monitorId;
    };
    SlimCoreElectronScreenSharingSource.prototype.getDeviceId = function () {
        return String(this._monitorInfo.monitorId);
    };
    SlimCoreElectronScreenSharingSource.prototype.getType = function () {
        return 1;
    };
    SlimCoreElectronScreenSharingSource.prototype.getPreview = function (width, height, asImage) {
        return Promise.reject('not implemented');
    };
    SlimCoreElectronScreenSharingSource.prototype.getPreviewAsync = function (width, height, asImage) {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getMonitorPreview(_this.getId(), width, height, asImage, _this._monitorInfo.region));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getMonitorPreview(" + _this.getId() + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getMonitorPreview(" + _this.getId() + ") failed: " + error);
            throw error;
        });
    };
    SlimCoreElectronScreenSharingSource.prototype.getDescription = function () {
        return this._monitorInfo.name;
    };
    SlimCoreElectronScreenSharingSource.prototype.getIcon = function (width, height) {
        return Promise.resolve(null);
    };
    SlimCoreElectronScreenSharingSource.prototype.getBounds = function () {
        return {
            x: this._monitorInfo.region.x,
            y: this._monitorInfo.region.y,
            width: this._monitorInfo.region.width,
            height: this._monitorInfo.region.height
        };
    };
    return SlimCoreElectronScreenSharingSource;
}());
var SlimcoreElectronWindowSharingSource = (function () {
    function SlimcoreElectronWindowSharingSource(_windowInfo, _logger, _screenScraper) {
        this._windowInfo = _windowInfo;
        this._logger = _logger;
        this._screenScraper = _screenScraper;
    }
    SlimcoreElectronWindowSharingSource.prototype.getId = function () {
        return this._windowInfo.windowId;
    };
    SlimcoreElectronWindowSharingSource.prototype.getDeviceId = function () {
        return String(this._windowInfo.windowId);
    };
    SlimcoreElectronWindowSharingSource.prototype.getType = function () {
        return 2;
    };
    SlimcoreElectronWindowSharingSource.prototype.getPreview = function (width, height, asImage) {
        return Promise.reject('not implemented');
    };
    SlimcoreElectronWindowSharingSource.prototype.getPreviewAsync = function (width, height, asImage) {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getWindowPreview(_this.getId(), width, height, asImage));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getWindowPreview(" + _this.getId() + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getWindowPreview(" + _this.getId() + ") failed: " + error);
            throw error;
        });
    };
    SlimcoreElectronWindowSharingSource.prototype.getDescription = function () {
        return this._windowInfo.title;
    };
    SlimcoreElectronWindowSharingSource.prototype.getAppName = function () {
        return this._windowInfo.applicationName;
    };
    SlimcoreElectronWindowSharingSource.prototype.getIcon = function (width, height, asImage) {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this._screenScraper.getWindowIcon(_this.getId(), width, height, asImage));
        })
            .then(function (result) {
            _this._logger.debug("ScreenScraper.getWindowIcon(" + _this.getId() + ") result: " + result.width + "x" + result.height);
            return result;
        }, function (error) {
            _this._logger.error("ScreenScraper.getWindowIcon(" + _this.getId() + ") failed: " + error);
            throw error;
        });
    };
    SlimcoreElectronWindowSharingSource.prototype.getBounds = function () {
        return undefined;
    };
    return SlimcoreElectronWindowSharingSource;
}());
var SlimcoreElectronCameraSharingSource = (function () {
    function SlimcoreElectronCameraSharingSource(_cameraDescription) {
        this._cameraDescription = _cameraDescription;
    }
    SlimcoreElectronCameraSharingSource.prototype.getId = function () {
        return null;
    };
    SlimcoreElectronCameraSharingSource.prototype.getDeviceId = function () {
        return this._cameraDescription.id;
    };
    SlimcoreElectronCameraSharingSource.prototype.getType = function () {
        return 3;
    };
    SlimcoreElectronCameraSharingSource.prototype.getPreview = function (width, height, asImage) {
        return Promise.reject('not implemented');
    };
    SlimcoreElectronCameraSharingSource.prototype.getPreviewAsync = function (width, height, asImage) {
        return Promise.reject('not implemented');
    };
    SlimcoreElectronCameraSharingSource.prototype.getDescription = function () {
        return this._cameraDescription.label;
    };
    SlimcoreElectronCameraSharingSource.prototype.getIcon = function (width, height, asImage) {
        return Promise.reject('not implemented');
    };
    SlimcoreElectronCameraSharingSource.prototype.getBounds = function () {
        return undefined;
    };
    return SlimcoreElectronCameraSharingSource;
}());


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var piiUtils = __webpack_require__(5);
var tsCallingVersionProvider_1 = __webpack_require__(10);
var electronInitLogging_1 = __webpack_require__(51);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var SlimCoreElectronCallRegistry_1 = __webpack_require__(33);
var SlimCoreElectronDeviceManager_1 = __webpack_require__(34);
var SlimCoreElectronEcsProvider_1 = __webpack_require__(21);
var SlimCoreElectronScreenSharingManager_1 = __webpack_require__(36);
var SlimCoreElectronSetup_1 = __webpack_require__(22);
var SlimCoreUwpEventWrapper_1 = __webpack_require__(59);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var fn_1 = __webpack_require__(6);
var internalLogger_1 = __webpack_require__(20);
var REQUIRED_API_VERSION = 7;
var SlimCoreElectronStackError = (function (_super) {
    __extends(SlimCoreElectronStackError, _super);
    function SlimCoreElectronStackError(message, callSupport) {
        if (callSupport === void 0) { callSupport = 1; }
        var _this = _super.call(this, message) || this;
        _this.callSupport = callSupport;
        return _this;
    }
    return SlimCoreElectronStackError;
}(Error));
var SlimCoreElectronStack = (function (_super) {
    __extends(SlimCoreElectronStack, _super);
    function SlimCoreElectronStack(config) {
        var _this = _super.call(this, new internalLogger_1.default(config.logger).createChild('CallingStack'), _.assign(config.settings, { platform: SlimCoreCommon.PlatformType.Electron }), SlimCoreCommon.wrap(config.slimCoreInstance, config.settings)) || this;
        _this.callRegistries = [];
        _this._startSlimcorePromiseDefered = async.defer();
        _this._stackLoginPromise = async.defer();
        _this._mediaStartDeferredPromise = async.defer();
        if (!isModuleAvailable()) {
            throw new SlimCoreElectronStackError('slimcore module is not available', 1);
        }
        if (getApiVersion() < REQUIRED_API_VERSION) {
            throw new SlimCoreElectronStackError("slimcore module API version " + getApiVersion() + " incompatible with required " + REQUIRED_API_VERSION, 2);
        }
        if (config.settings.enableTsCallingULLogging) {
            electronInitLogging_1.initDelegate(_this._slimcoreInstance, config);
        }
        _this._appHooks = config.appHooks;
        _this._telemetryService = config.telemetryService;
        _this._setup = new SlimCoreElectronSetup_1.default(_this._slimcoreInstance);
        _this._ecsProvider = new SlimCoreElectronEcsProvider_1.default(_this._slimcoreInstance);
        _this._stackLoginPromise.promise.then(function () { return _this._startSlimcorePromiseDefered.resolve(_this._slimcoreInstance); });
        var internalLogger = new internalLogger_1.default(config.logger);
        var initPromise = SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) ? _this._startSlimcorePromiseDefered.promise : _this._stackLoginPromise.promise;
        var mediaReadyPromise = SlimCoreCommon.hasFeature(Enums.Feature.LazyMediaInit) ? initPromise.then(function () { return _this._mediaStartDeferredPromise.promise; }) : initPromise;
        _this._deviceManager = new SlimCoreElectronDeviceManager_1.default(internalLogger, _this._settings, _this._slimcoreInstance, mediaReadyPromise, config.appHooks);
        _this._screenSharingManager = new SlimCoreElectronScreenSharingManager_1.default(internalLogger, _this._settings, _this._slimcoreInstance, config.appHooks, _this._deviceManager);
        _this._registerDisposable(_this._slimcoreInstance.handle('e911-info-changed', undefined, function (data) { return _this._onE911Info(data); }));
        _this._registerDisposable(_this._slimcoreInstance.handle('media-status-changed', undefined, function (data) { return _this._onMediaStatus(data); }));
        _this._registerDisposable(_this._slimcoreInstance.handle('probe-devices-status-changed', undefined, function (data) { return _this._onProbeDevicesStatusChanged(data); }));
        return _this;
    }
    SlimCoreElectronStack.prototype.dispose = function (causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('dispose', causeId);
        fnLogger.info("dispose");
        if (this._libStatus !== Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.reject(new Error('CallingStack dispose called before slimcore reached Running state'));
        }
        this._mediaStartDeferredPromise.reject(new Error('CallingStack dispose called before media was initialized'));
        var always = function () {
            _this.callRegistries = [];
            fnLogger.info('call registries are disposed');
            _this._screenSharingManager.dispose(causeId);
            _this._screenSharingManager = undefined;
            fnLogger.info('screensharing manager is disposed');
            _this._deviceManager.dispose(causeId);
            _this._deviceManager = undefined;
            fnLogger.info('device manager is disposed');
            electronInitLogging_1.deinitLogging();
            _this._slimcoreInstance.dispose();
            _this._slimcoreInstance = undefined;
            fnLogger.info('slimcore instance is disposed');
            _super.prototype.dispose.call(_this);
        };
        var callRegistryDisposePromises = this.callRegistries.map(function (callRegistry) { return callRegistry.dispose(causeId); });
        Promise.all(callRegistryDisposePromises).then(always, always);
    };
    SlimCoreElectronStack.prototype.init = function (initOptions, causeId) {
        if (initOptions === void 0) { initOptions = { block: true }; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnLogger = this._logger.createFnLogger('init', causeId);
                        fnLogger.info("init");
                        if (!this._slimcoreInstance) {
                            return [2, Promise.reject(new Error('slimcore instance is already disposed'))];
                        }
                        if (!SlimCoreCommon.hasFeature(Enums.Feature.AsyncStart)) {
                            initOptions.block = true;
                        }
                        if (!initOptions.block) {
                            this._registerDisposable(this._slimcoreInstance.handle('lib-status-changed', { libStatus: SlimCore.Enums.LibStatus.Running }, function (data) { return _this._onLibStatusChanged(data); }));
                        }
                        return [4, Promise.all([
                                this.getSetup().setNumber('*Lib/LazyMediaInit', SlimCoreCommon.hasFeature(Enums.Feature.LazyMediaInit) && !!initOptions.lazyMediaInit ? 1 : 0),
                                this.getSetup().setString('*Lib/SCT/Telemetry/DiagnosticLevel', initOptions.telemetryDiagnosticLevel || '')
                            ])];
                    case 1:
                        _a.sent();
                        this._slimcoreInstance.start(initOptions.block);
                        fnLogger.info("starting slimcoreInstance block=" + initOptions.block);
                        if (initOptions.block) {
                            this._libStatus = Enums.LibStatus.Running;
                            this._startSlimcorePromiseDefered.resolve(this._slimcoreInstance);
                        }
                        return [2, this._startSlimcorePromiseDefered.promise.then(fn_1.noop)];
                }
            });
        });
    };
    SlimCoreElectronStack.prototype._onLibStatusChanged = function (eventData) {
        this._logger.info("_onLibStatusChanged from " + this._libStatus + " => " + eventData.libStatus);
        if (eventData.libStatus === Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.resolve(this._slimcoreInstance);
        }
        else if (eventData.libStatus === Enums.LibStatus.FatalError &&
            this._libStatus === Enums.LibStatus.Constructed) {
            this._startSlimcorePromiseDefered.reject(new Error('Slimcore FatalError during start'));
        }
        this._libStatus = eventData.libStatus;
    };
    SlimCoreElectronStack.prototype.getCallRegistry = function (identity, causeId, configuration) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var id = identity ? piiUtils.mriOrId(identity.id) : undefined;
        var fnLogger = this._logger.createFnLogger("getCallRegistry[identity=" + id + "]", causeId);
        if (!identity) {
            fnLogger.info('returning default callRegistry');
            if (this.callRegistries[0]) {
                return this.callRegistries[0];
            }
            return this.createCallRegistry();
        }
        var callRegistry = this.callRegistries.find(function (callRegistry) { return callRegistry.identity === identity.id; });
        if (callRegistry && !callRegistry.isDisposing) {
            fnLogger.info("callRegistry already exists for " + piiUtils.mriOrId(identity.id));
            return Promise.resolve(callRegistry);
        }
        var disposePromise = callRegistry && callRegistry.isDisposing ? callRegistry.disposePromise : Promise.resolve().then(fn_1.noop);
        return this._startSlimcorePromiseDefered.promise
            .then(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, disposePromise];
                    case 1:
                        _a.sent();
                        callRegistry = this.createCallRegistry();
                        return [4, callRegistry.login(identity, causeId, SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(configuration))).catch(function () { return callRegistry.dispose(causeId); })];
                    case 2:
                        _a.sent();
                        return [2, callRegistry];
                }
            });
        }); });
    };
    SlimCoreElectronStack.prototype.createCallRegistry = function () {
        var _this = this;
        var callRegistry = new SlimCoreElectronCallRegistry_1.default(this._logger, this._settings, this._slimcoreInstance, this._deviceManager, this._appHooks, this._telemetryService);
        callRegistry.on('disposed', function () { _this.callRegistries.splice(_this.callRegistries.indexOf(callRegistry), 1); });
        callRegistry.loginPromise.then(this._stackLoginPromise.resolve, this._stackLoginPromise.reject);
        this.callRegistries.push(callRegistry);
        return callRegistry;
    };
    SlimCoreElectronStack.prototype.getDeviceManager = function () {
        return this._deviceManager;
    };
    SlimCoreElectronStack.prototype.getScreenSharingManager = function () {
        return this._screenSharingManager;
    };
    SlimCoreElectronStack.prototype.getSetup = function () {
        return this._setup;
    };
    SlimCoreElectronStack.prototype.getEcsProvider = function () {
        return this._ecsProvider;
    };
    SlimCoreElectronStack.prototype.fireIntent = function (callingIntent, identity) {
        if (!this._slimcoreInstance) {
            return;
        }
        var slimcoreIntent = SlimCoreElectronStack._callingIntentToSlimcoreIntent(callingIntent);
        if (!slimcoreIntent) {
            return;
        }
        this._slimcoreInstance.fireIntent(slimcoreIntent, identity);
    };
    SlimCoreElectronStack.prototype.getVersion = function () {
        return {
            build: tsCallingVersionProvider_1.getTsCallingVersion(),
            ovb: tsCallingVersionProvider_1.getOvb()
        };
    };
    SlimCoreElectronStack._callingIntentToSlimcoreIntent = function (callingIntent) {
        switch (callingIntent) {
            case 0:
                return Enums.Intent.CallPush;
            case 1:
                return Enums.Intent.CallUser;
            case 2:
                return Enums.Intent.CallPreheat;
            case 3:
                return Enums.Intent.MediaInit;
            default:
                return undefined;
        }
    };
    SlimCoreElectronStack.prototype._slimcoreMediaStatusToCallingMediaStatus = function (slMediaStatus) {
        switch (slMediaStatus) {
            case Enums.MediaStatus.Initialized:
                return 1;
            case Enums.MediaStatus.NotAvailable:
                return 0;
            case Enums.MediaStatus.Failed:
                return 2;
            case Enums.MediaStatus.Uninitialized:
                return 3;
            default:
                return undefined;
        }
    };
    SlimCoreElectronStack.prototype.getMediaStatus = function () {
        return this._slimcoreMediaStatusToCallingMediaStatus(this._slimcoreInstance.getMediaStatus());
    };
    SlimCoreElectronStack.prototype.setMediaConfig = function (configuration) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._setMediaConfig(configuration, _this._startSlimcorePromiseDefered.promise);
            resolve();
        });
    };
    SlimCoreElectronStack.prototype._setMediaConfig = function (configuration, mediaReady) {
        var _this = this;
        var mediaConfigApi = !!this._slimcoreInstance.setMediaConfig;
        if (mediaConfigApi) {
            this._logger.info('Set Media Configuration, using setMediaConfig');
            this._slimcoreInstance.setMediaConfig(configuration);
        }
        else {
            var mediaPortRangesApi = !!this._slimcoreInstance.setMediaPortRanges;
            var enableMediaQosApi = !!this._slimcoreInstance.enableMediaQoS;
            var createMediaConfigApi_1 = !!this._slimcoreInstance.createMediaConfig;
            var openCameraApi = !!this._slimcoreInstance.setOpenCameraInMaxResolution;
            var enableTtySupportApi_1 = !!this._slimcoreInstance.enableTtySupport;
            var enableAGCApi_1 = !!this._slimcoreInstance.enableAGC;
            var hasPortRanges = configuration.hasOwnProperty('mediaPortRanges');
            var hasQos = configuration.hasOwnProperty('enableMediaQoS');
            var hasSetOpenCamera = configuration.hasOwnProperty('openCameraInMaxResolution');
            var hasEnableTtySupport_1 = configuration.hasOwnProperty('enableTtySupport');
            var hasEnableAGC_1 = configuration.hasOwnProperty('enableAGC');
            if (openCameraApi && hasSetOpenCamera) {
                this._logger.info('Set Media Configuration, using OpenCameraInMaxResolution');
                this._slimcoreInstance.setOpenCameraInMaxResolution(configuration.openCameraInMaxResolution);
            }
            if (hasQos || hasPortRanges) {
                if (enableMediaQosApi && mediaPortRangesApi) {
                    if (hasQos) {
                        this._logger.info('Set Media Configuration, using set enableMediaQos');
                        this._slimcoreInstance.enableMediaQoS(configuration.enableMediaQoS);
                    }
                    if (hasPortRanges) {
                        this._logger.info('Set Media Configuration, using set Media port ranges');
                        this._slimcoreInstance.setMediaPortRanges(configuration.mediaPortRanges);
                    }
                }
                else if (createMediaConfigApi_1) {
                    this._logger.info('Set Media Configuration, using CreateMediaConfig');
                    var mediaConfig = this._slimcoreInstance.createMediaConfig();
                    if (hasQos) {
                        mediaConfig.enableMediaQoS(configuration.enableMediaQoS);
                    }
                    if (hasPortRanges) {
                        mediaConfig.setMediaPortRanges(configuration.mediaPortRanges);
                    }
                }
                else {
                    this._logger.error('Set Media Configuration, failed no suitable methods found for qos or port ranges');
                }
            }
            if (hasEnableTtySupport_1 || hasEnableAGC_1) {
                this._logger.info('Set Media Configuration, queuing operation to run when media is ready');
                mediaReady.then(function () {
                    if (hasEnableTtySupport_1) {
                        if (enableTtySupportApi_1) {
                            _this._logger.info('Set Media Configuration, using enableTtySupport');
                            _this._slimcoreInstance.enableTtySupport(configuration.enableTtySupport);
                        }
                        else if (createMediaConfigApi_1) {
                            var mediaConfig = _this._slimcoreInstance.createMediaConfig();
                            if (mediaConfig.enableTtySupport) {
                                _this._logger.info('Set Media Configuration, using CreateMediaConfig.enableTtySupport');
                                mediaConfig.enableTtySupport(configuration.enableTtySupport);
                            }
                            else {
                                _this._logger.error('Set Media Configuration, failed no suitable methods found for enableTtySupport on CreateMediaConfig');
                            }
                        }
                        else {
                            _this._logger.error('Set Media Configuration, failed no suitable methods found for enableTtySupport');
                        }
                    }
                    if (hasEnableAGC_1 && enableAGCApi_1) {
                        _this._logger.info('Set Media Configuration, using enableAGC');
                        _this._slimcoreInstance.enableAGC(configuration.enableAGC);
                    }
                });
            }
        }
    };
    SlimCoreElectronStack.prototype.getE911Info = function () {
        var _this = this;
        if (!this._slimcoreInstance) {
            return Promise.reject(new Error('slimcore instance is already disposed'));
        }
        if (!this._slimcoreInstance.getE911Info) {
            return Promise.reject(new Error('getE911Info is not available'));
        }
        return this._startSlimcorePromiseDefered.promise.then(function () {
            var infoJson = _this._slimcoreInstance.getE911Info();
            try {
                return JSON.parse(infoJson);
            }
            catch (e) {
                return Promise.reject(new Error('failed to parse e911Info'));
            }
        });
    };
    SlimCoreElectronStack.prototype._onE911Info = function (eventData) {
        var info;
        try {
            info = JSON.parse(eventData.info);
        }
        catch (e) {
            this._logger.error('failed to parse e911Info');
            return;
        }
        this.event('e911InfoChanged').raise(info);
    };
    SlimCoreElectronStack.prototype._onMediaStatus = function (eventData) {
        var status = this._slimcoreMediaStatusToCallingMediaStatus(eventData.mediaStatus);
        this.event('mediaStatusChanged').raise(status);
        if (status === 1) {
            this._mediaStartDeferredPromise.resolve(this._slimcoreInstance);
        }
        else if (status === 2) {
            this._mediaStartDeferredPromise.reject(new Error('Media initialization FatalError'));
        }
    };
    SlimCoreElectronStack.prototype._onProbeDevicesStatusChanged = function (eventData) {
        this.event('probeDevicesStatusChanged').raise(eventData.ready);
    };
    return SlimCoreElectronStack;
}(SlimCoreElectronBase_1.default));
exports.SlimCoreElectronStack = SlimCoreElectronStack;
var SlimCoreUwpStack = (function (_super) {
    __extends(SlimCoreUwpStack, _super);
    function SlimCoreUwpStack(config) {
        var _this = _super.call(this, new internalLogger_1.default(config.logger).createChild('CallingStack', true), _.assign(config.settings, { platform: SlimCoreCommon.PlatformType.Uwp }), SlimCoreCommon.wrap(new SlimCoreUwpEventWrapper_1.UwpEngineWrapped(config.slimCoreInstance).objectAsWrapped, config.settings)) || this;
        _this.callRegistries = [];
        _this._startSlimcorePromiseDefered = async.defer();
        _this._stackLoginPromise = async.defer();
        _this._mediaStartDeferredPromise = async.defer();
        if (!SlimCoreCommon.isSlimCoreRTModuleAvailable()) {
            throw new SlimCoreElectronStackError('slimcore module is not available', 1);
        }
        _this._appHooks = config.appHooks;
        _this._telemetryService = config.telemetryService;
        _this._setup = new SlimCoreElectronSetup_1.default(_this._slimcoreInstance);
        _this._stackLoginPromise.promise.then(function () { return _this._startSlimcorePromiseDefered.resolve(_this._slimcoreInstance); });
        var initPromise = SlimCoreCommon.hasFeature(Enums.Feature.MultiUserSupport) ? _this._startSlimcorePromiseDefered.promise : _this._stackLoginPromise.promise;
        var mediaReadyPromise = SlimCoreCommon.hasFeature(Enums.Feature.LazyMediaInit) ? initPromise.then(function () { return _this._mediaStartDeferredPromise.promise; }) : initPromise;
        _this._deviceManager = new SlimCoreElectronDeviceManager_1.default(_this._logger, _this._settings, _this._slimcoreInstance, mediaReadyPromise, config.appHooks);
        _this._screenSharingManager = new SlimCoreElectronScreenSharingManager_1.default(_this._logger, _this._settings, _this._slimcoreInstance, config.appHooks, _this._deviceManager);
        _this._registerDisposable(_this._slimcoreInstance.handle('media-status-changed', undefined, function (data) { return _this._onMediaStatus(data); }));
        return _this;
    }
    SlimCoreUwpStack.prototype.dispose = function (causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var fnLogger = this._logger.createFnLogger('dispose', causeId);
        fnLogger.info("dispose");
        if (this._libStatus !== Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.reject(new Error('CallingStack dispose called before slimcore reached Running state'));
        }
        this._mediaStartDeferredPromise.reject(new Error('CallingStack dispose called before media was initialized'));
        var always = function () {
            _this.callRegistries = [];
            fnLogger.info('call registries are disposed');
            _this._screenSharingManager.dispose(causeId);
            _this._screenSharingManager = undefined;
            fnLogger.info('screensharing manager is disposed');
            _this._deviceManager.dispose(causeId);
            _this._deviceManager = undefined;
            fnLogger.info('device manager is disposed');
            _this._slimcoreInstance.dispose();
            _this._slimcoreInstance = undefined;
            fnLogger.info('slimcore instance is disposed');
            _super.prototype.dispose.call(_this);
        };
        var callRegistryDisposePromises = this.callRegistries.map(function (callRegistry) { return callRegistry.dispose(causeId); });
        Promise.all(callRegistryDisposePromises).then(always, always);
    };
    SlimCoreUwpStack.prototype.init = function (initOptions, causeId) {
        if (initOptions === void 0) { initOptions = { block: true }; }
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return __awaiter(this, void 0, void 0, function () {
            var fnLogger;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnLogger = this._logger.createFnLogger('init', causeId);
                        fnLogger.info("init");
                        if (!this._slimcoreInstance) {
                            return [2, Promise.reject(new Error('slimcore instance is already disposed'))];
                        }
                        if (!SlimCoreCommon.hasFeature(Enums.Feature.AsyncStart)) {
                            initOptions.block = true;
                        }
                        if (!initOptions.block) {
                            this._registerDisposable(this._slimcoreInstance.handle('lib-status-changed', { libStatus: SlimCore.Enums.LibStatus.Running }, function (data) { return _this._onLibStatusChanged(data); }));
                        }
                        return [4, Promise.all([
                                this.getSetup().setNumber('*Lib/LazyMediaInit', SlimCoreCommon.hasFeature(Enums.Feature.LazyMediaInit) && !!initOptions.lazyMediaInit ? 1 : 0),
                                this.getSetup().setString('*Lib/SCT/Telemetry/DiagnosticLevel', initOptions.telemetryDiagnosticLevel || '')
                            ])];
                    case 1:
                        _a.sent();
                        this._slimcoreInstance.start(initOptions.block);
                        fnLogger.info("starting slimcoreInstance block=" + initOptions.block);
                        if (initOptions.block) {
                            this._libStatus = Enums.LibStatus.Running;
                            this._startSlimcorePromiseDefered.resolve(this._slimcoreInstance);
                        }
                        return [2, this._startSlimcorePromiseDefered.promise.then(fn_1.noop)];
                }
            });
        });
    };
    SlimCoreUwpStack.prototype._onLibStatusChanged = function (eventData) {
        this._logger.info("_onLibStatusChanged from " + this._libStatus + " => " + eventData.libStatus);
        if (eventData.libStatus === Enums.LibStatus.Running) {
            this._startSlimcorePromiseDefered.resolve(this._slimcoreInstance);
        }
        else if (eventData.libStatus === Enums.LibStatus.FatalError &&
            this._libStatus === Enums.LibStatus.Constructed) {
            this._startSlimcorePromiseDefered.reject(new Error('Slimcore FatalError during start'));
        }
        this._libStatus = eventData.libStatus;
    };
    SlimCoreUwpStack.prototype.getCallRegistry = function (identity, causeId, configuration) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var id = identity ? piiUtils.mriOrId(identity.id) : undefined;
        var fnLogger = this._logger.createFnLogger("getCallRegistry[identity=" + id + "]", causeId);
        if (!identity) {
            fnLogger.info('returning default callRegistry');
            if (this.callRegistries[0]) {
                return this.callRegistries[0];
            }
            return this.createCallRegistry();
        }
        var callRegistry = this.callRegistries.find(function (callRegistry) { return callRegistry.identity === identity.id; });
        if (callRegistry && !callRegistry.isDisposing) {
            fnLogger.info("callRegistry already exists for " + piiUtils.mriOrId(identity.id));
            return Promise.resolve(callRegistry);
        }
        var disposePromise = callRegistry && callRegistry.isDisposing ? callRegistry.disposePromise : Promise.resolve().then(fn_1.noop);
        return this._startSlimcorePromiseDefered.promise
            .then(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, disposePromise];
                    case 1:
                        _a.sent();
                        callRegistry = this.createCallRegistry();
                        return [4, callRegistry.login(identity, causeId, SlimCoreCommon.mapToEmptyStrIfFalsy(JSON.stringify(configuration))).catch(function () { return callRegistry.dispose(causeId); })];
                    case 2:
                        _a.sent();
                        return [2, callRegistry];
                }
            });
        }); });
    };
    SlimCoreUwpStack.prototype.createCallRegistry = function () {
        var _this = this;
        var callRegistry = new SlimCoreElectronCallRegistry_1.default(this._logger, this._settings, this._slimcoreInstance, this._deviceManager, this._appHooks, this._telemetryService);
        callRegistry.on('disposed', function () { _this.callRegistries.splice(_this.callRegistries.indexOf(callRegistry), 1); });
        callRegistry.loginPromise.then(this._stackLoginPromise.resolve, this._stackLoginPromise.reject);
        this.callRegistries.push(callRegistry);
        return callRegistry;
    };
    SlimCoreUwpStack.prototype.getDeviceManager = function () {
        this._logger.info('retrieving device manager');
        return this._deviceManager;
    };
    SlimCoreUwpStack.prototype.getScreenSharingManager = function () {
        return this._screenSharingManager;
    };
    SlimCoreUwpStack.prototype.getSetup = function () {
        return this._setup;
    };
    SlimCoreUwpStack.prototype.getEcsProvider = function () {
        return null;
    };
    SlimCoreUwpStack.prototype.fireIntent = function (callingIntent, identity) {
    };
    SlimCoreUwpStack.prototype.getVersion = function () {
        return {
            build: tsCallingVersionProvider_1.getTsCallingVersion(),
            ovb: tsCallingVersionProvider_1.getOvb()
        };
    };
    SlimCoreUwpStack.prototype.getMediaStatus = function () {
        return null;
    };
    SlimCoreUwpStack.prototype.setMediaConfig = function (configuration) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._logger.info('Set Media Configuration, using new default method');
            _this._slimcoreInstance.setMediaConfig(configuration);
            resolve();
        });
    };
    SlimCoreUwpStack.prototype._slimcoreMediaStatusToCallingMediaStatus = function (slMediaStatus) {
        switch (slMediaStatus) {
            case Enums.MediaStatus.Initialized:
                return 1;
            case Enums.MediaStatus.NotAvailable:
                return 0;
            case Enums.MediaStatus.Failed:
                return 2;
            case Enums.MediaStatus.Uninitialized:
                return 3;
            default:
                return undefined;
        }
    };
    SlimCoreUwpStack.prototype._onMediaStatus = function (eventData) {
        var status = this._slimcoreMediaStatusToCallingMediaStatus(eventData.mediaStatus);
        this.event('mediaStatusChanged').raise(status);
        if (status === 1) {
            this._mediaStartDeferredPromise.resolve(this._slimcoreInstance);
        }
        else if (status === 2) {
            this._mediaStartDeferredPromise.reject(new Error('Media initialization FatalError'));
        }
    };
    return SlimCoreUwpStack;
}(SlimCoreElectronBase_1.default));
exports.SlimCoreUwpStack = SlimCoreUwpStack;
exports.slimCoreElectronStackFactory = {
    build: function (config) {
        return Promise.resolve()
            .then(function () {
            if (config.settings.enableTsCallingULLogging) {
                electronInitLogging_1.patchLogger(config);
            }
            return new SlimCoreElectronStack(config);
        }).catch(function (error) {
            if (error instanceof SlimCoreElectronStackError) {
                throw error;
            }
            else {
                throw new SlimCoreElectronStackError("" + error);
            }
        });
    },
    getVersion: function () {
        return {
            build: tsCallingVersionProvider_1.getTsCallingVersion(),
            ovb: tsCallingVersionProvider_1.getOvb()
        };
    }
};
exports.slimCoreUwpStackFactory = {
    build: function (config) {
        return Promise.resolve()
            .then(function () { return new SlimCoreUwpStack(config); })
            .catch(function (error) {
            if (error instanceof SlimCoreElectronStackError) {
                throw error;
            }
            else {
                throw new SlimCoreElectronStackError("" + error);
            }
        });
    },
    getVersion: function () {
        return {
            build: tsCallingVersionProvider_1.getTsCallingVersion(),
            ovb: tsCallingVersionProvider_1.getOvb()
        };
    }
};
function getApiVersion() {
    return SlimCore.getApiVersion && SlimCore.getApiVersion();
}
function isModuleAvailable() {
    return !!(SlimCore && SlimCore.getVersion);
}


/***/ }),
/* 38 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
__webpack_require__(3);
__webpack_require__(11);
__webpack_require__(26);
__webpack_require__(33);
__webpack_require__(34);
__webpack_require__(21);
__webpack_require__(29);
__webpack_require__(31);
__webpack_require__(35);
__webpack_require__(18);
__webpack_require__(17);
__webpack_require__(27);
__webpack_require__(36);
__webpack_require__(22);
__webpack_require__(37);
module.exports = __webpack_require__(60);


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(23);
var ObservableBase = (function (_super) {
    __extends(ObservableBase, _super);
    function ObservableBase(logger) {
        return _super.call(this, logger) || this;
    }
    ObservableBase.prototype.changed = function (callback) {
        return this.subscribe({
            changed: callback,
            on: undefined
        });
    };
    ObservableBase.prototype.on = function (eventName, callback) {
        return this.subscribe({
            changed: undefined,
            on: {
                name: String(eventName),
                handler: this._toEventCallback(callback)
            }
        });
    };
    ObservableBase.prototype.once = function (eventName, callback, causeId) {
        var _this = this;
        var subscription;
        var onceSubscription = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            subscription.dispose(causeId);
            _this._toEventCallback(callback).apply(void 0, args);
        };
        return subscription = this.on(eventName, this._fromEventCallback(onceSubscription));
    };
    ObservableBase.prototype.raiseChanged = function () {
        this.raiseEvents(function (callback) { return callback.changed && callback.changed(); });
    };
    ObservableBase.prototype.event = function (eventName) {
        var _this = this;
        return {
            raise: this._fromEventCallback(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this._raiseEventImpl.apply(_this, [String(eventName)].concat(args));
            })
        };
    };
    ObservableBase.prototype._raiseEventImpl = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.raiseEvents(function (callback) {
            var _a;
            return callback.on && callback.on.name === eventName && (_a = callback.on).handler.apply(_a, args);
        });
    };
    ObservableBase.prototype._toEventCallback = function (callback) {
        return callback;
    };
    ObservableBase.prototype._fromEventCallback = function (callback) {
        return callback;
    };
    return ObservableBase;
}(events_1.EventSourceImpl));
exports.default = ObservableBase;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Stopwatch = (function () {
    function Stopwatch() {
        var _this = this;
        this.msElapsed = 0;
        this.isPaused = false;
        this._startTime = new Date().getTime();
        this.pause = function () {
            if (!_this.isPaused) {
                _this.msElapsed += new Date().getTime() - _this._startTime;
                _this.isPaused = true;
            }
        };
        this.resume = function () {
            if (_this.isPaused) {
                _this.isPaused = false;
                _this._startTime = new Date().getTime();
            }
        };
        this.duration = function () {
            if (_this.isPaused) {
                return _this.msElapsed;
            }
            return _this.msElapsed + new Date().getTime() - _this._startTime;
        };
        this.durationInMinutes = function () {
            var mins = _this.duration() / 60000;
            return Math.ceil(mins);
        };
        this.durationInSeconds = function () {
            var seconds = _this.duration() / 1000;
            return Math.ceil(seconds);
        };
    }
    Object.defineProperty(Stopwatch.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        enumerable: true,
        configurable: true
    });
    return Stopwatch;
}());
exports.Stopwatch = Stopwatch;
function build() {
    return new Stopwatch();
}
exports.build = build;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CONSTANTS = {
    CODE: {
        CLIENT_ERROR_CODE: 499
    },
    SUB_CODE: {
        ACTION_NOT_ALLOWED: 3548
    }
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _a;
function callStateIsAnyOf(currentState, states) {
    return states.indexOf(currentState) !== -1;
}
exports.callStateIsAnyOf = callStateIsAnyOf;
exports.validStateTransitions = (_a = {},
    _a[0] = [1, 2, 8, 6, 10, 11],
    _a[1] = [2, 6, 7, 10],
    _a[2] = [1, 3, 6, 7, 9, 10],
    _a[3] = [6, 7, 4, 5, 10],
    _a[8] = [1, 11, 10, 2, 6, 7],
    _a[4] = [6, 7, 3, 5, 10],
    _a[5] = [6, 7, 3, 4, 10],
    _a[9] = [3, 6, 7, 10],
    _a[10] = [3, 6, 7, 9, 4, 5],
    _a[11] = [12, 1, 2, 6, 7],
    _a[12] = [2, 6, 7],
    _a[6] = [7],
    _a[7] = [],
    _a);


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStreamInformationFromEndpoints = function (endpoints) {
    var data = [];
    if (!endpoints || !endpoints.endpointDetails.length) {
        return null;
    }
    try {
        endpoints.endpointDetails
            .filter(function (endpoint) { return !!endpoint.mediaStreams && endpoint.mediaStreams.length; })
            .forEach(function (endpoint) {
            var streams = endpoint.mediaStreams.reduce(function (acc, stream) {
                acc[stream.type] = stream.direction;
                return acc;
            }, {});
            data.push(__assign({ endpointId: endpoint.endpointId, participantId: endpoint.participantId }, streams));
        });
    }
    catch (e) {
        return [];
    }
    return data;
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var async = __webpack_require__(4);
var callConstants_1 = __webpack_require__(8);
var contentSharingSession_1 = __webpack_require__(46);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var Enums = SlimCore.Enums;
var causeId_1 = __webpack_require__(2);
var operationDecorators_1 = __webpack_require__(14);
var operationHandler_1 = __webpack_require__(15);
var SlimCoreElectronContentSharing = (function (_super) {
    __extends(SlimCoreElectronContentSharing, _super);
    function SlimCoreElectronContentSharing(logger, settings, engine, _slimcoreCallHandler, slimCoreContentSharingObjectId, _nativeContentSharing, callTelemetry) {
        var _this = _super.call(this, logger.createChild(function () { return "ContentSharing[" + _this.slimCoreContentSharingObjectId + "]"; }), settings, engine) || this;
        _this._slimcoreCallHandler = _slimcoreCallHandler;
        _this.slimCoreContentSharingObjectId = slimCoreContentSharingObjectId;
        _this._nativeContentSharing = _nativeContentSharing;
        _this.callTelemetry = callTelemetry;
        _this.noFailureReason = SlimCore.Enums.ContentSharingFailureReason.NoFailure;
        _this._getCallEndOperation = function () {
            if (_this._callOperationHandler.hasPendingOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.STOP_CONTENT_SHARING)) {
                return _this._callOperationHandler.waitForOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.STOP_CONTENT_SHARING);
            }
            else {
                return Promise.resolve();
            }
        };
        _this._logger.info('constructor');
        _this._session = new contentSharingSession_1.ContentSharingSession(_this, _this._logger);
        _this._callOperationHandler = new operationHandler_1.default(_this._logger, _this.callTelemetry);
        _this._onContentSharingPropertyChanged(SlimCore.Enums.Property.ContentSharingStatus, function (data) { return _this._onContentSharingStatusChanged(data.value); });
        _this._onContentSharingPropertyChanged(SlimCore.Enums.Property.ContentSharingState, function (data) { return _this._onContentSharingStateChanged(data.value); });
        _this._onContentSharingPropertyChanged(SlimCore.Enums.Property.ContentSharingFailureReason, function (data) { return _this._onContentSharingResultCodeChanged(data.value); });
        _this.contentSharingStatus = _this.convertContentSharingStatus(_this.getIntProperty(SlimCore.Enums.Property.ContentSharingStatus));
        _this.contentSharingGuid = _this.getStrProperty(SlimCore.Enums.Property.ContentSharingId);
        _this.contentSharingState = _this.getStrProperty(SlimCore.Enums.Property.ContentSharingState);
        _this.contentSharingIdentity = _this.getStrProperty(SlimCore.Enums.Property.ContentSharingIdentity);
        _this._logger.info("Session created with status " + _this.contentSharingStatus + ", guid " + _this.contentSharingGuid);
        _this._registerDisposable(_this._nativeContentSharing.handle('update-session-state-result', undefined, function (data) { return _this._onSessionStateResult(data); }));
        _this._registerDisposable(_this._nativeContentSharing.handle('take-control-result', undefined, function (data) { return _this._onTakeControlResult(data); }));
        _this._registerDisposable(_this._nativeContentSharing.handle('update-participant-state-result', undefined, function (data) { return _this._onUpdateParticipantStateResult(data); }));
        _this._registerDisposable(_this._nativeContentSharing.handle('join-result', undefined, function (data) { return _this._onJoinResult(data); }));
        return _this;
    }
    SlimCoreElectronContentSharing.prototype._onContentSharingPropertyChanged = function (propKey, listener) {
        this._onObjectPropertyChanged(this.slimCoreContentSharingObjectId, propKey, listener);
    };
    SlimCoreElectronContentSharing.prototype.setContentSharingStatus = function (status) {
        this._logger.info("setContentSharingStatus. currentStatus: " + this.contentSharingStatus + " newStatus: " + status);
        if (this.contentSharingStatus === status) {
            return;
        }
        if (this.contentSharingStatus === 7 || this.contentSharingStatus === 8) {
            return;
        }
        this._logger.info("Changing content sharing status to: " + status);
        this.contentSharingStatus = status;
        if (status === 7 ||
            status === 8) {
            if (this.contentSharingTerminationReason && this.contentSharingTerminationReason.terminatedReason !== 0) {
                return;
            }
            var failure = this.getIntProperty(Enums.Property.ContentSharingFailureReason);
            var code = this.getIntProperty(Enums.Property.ContentSharingFailureCode);
            var subCode = this.getIntProperty(Enums.Property.ContentSharingFailureSubCode);
            var reason = this.convertFailureReason(failure);
            this._logger.info("setting failure reason for content sharing session. reason: " + reason);
            this.contentSharingTerminationReason = {
                terminatedReason: reason,
                terminatedReasonCode: code,
                terminatedReasonSubCode: subCode,
                errorMessage: 'Session is terminated'
            };
        }
        this._session.statusChanged(status);
        this.raiseChanged();
    };
    SlimCoreElectronContentSharing.prototype.getStrProperty = function (property, fallback) {
        return this._getStrProperty(this._slimcoreCallHandler, this.slimCoreContentSharingObjectId, property, fallback);
    };
    SlimCoreElectronContentSharing.prototype.getIntProperty = function (property, fallback) {
        return this._getIntProperty(this._slimcoreCallHandler, this.slimCoreContentSharingObjectId, property, fallback);
    };
    SlimCoreElectronContentSharing.prototype._onContentSharingStatusChanged = function (value) {
        this._logger.info("_onContentSharingStateChanged called");
        this.setContentSharingStatus(this.convertContentSharingStatus(value));
    };
    SlimCoreElectronContentSharing.prototype._onContentSharingStateChanged = function (value) {
        this._logger.info("_onContentSharingStateChanged called");
        this.contentSharingState = value;
        this.raiseChanged();
    };
    SlimCoreElectronContentSharing.prototype._onContentSharingResultCodeChanged = function (value) {
        this._logger.info("_onContentSharingResultCodeChanged called");
        if (this.contentSharingTerminationReason && this.contentSharingTerminationReason.terminatedReason !== 0) {
            return;
        }
        var code = this.getIntProperty(Enums.Property.ContentSharingFailureCode);
        var subCode = this.getIntProperty(Enums.Property.ContentSharingFailureSubCode);
        var reason = this.convertFailureReason(value);
        this._logger.info("setting failure reason for content sharing session. reason: " + reason);
        this.contentSharingTerminationReason = {
            terminatedReason: reason,
            terminatedReasonCode: code,
            terminatedReasonSubCode: subCode,
            errorMessage: 'Session is terminated'
        };
    };
    SlimCoreElectronContentSharing.prototype.convertContentSharingStatus = function (slimCoreContentSharingStatus) {
        switch (slimCoreContentSharingStatus) {
            case Enums.ContentSharingStatus.Routing:
                return 1;
            case Enums.ContentSharingStatus.Ringing:
                return 2;
            case Enums.ContentSharingStatus.Connected:
                return 4;
            case Enums.ContentSharingStatus.Presenting:
                return 3;
            case Enums.ContentSharingStatus.Viewing:
                return 5;
            case Enums.ContentSharingStatus.Finishing:
                return 6;
            case Enums.ContentSharingStatus.Done:
            case Enums.ContentSharingStatus.Failed:
            case Enums.ContentSharingStatus.TimedOut:
                return 7;
            default:
                return 0;
        }
    };
    SlimCoreElectronContentSharing.prototype.startContentSharing = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.startContentSharing(causeId);
    };
    SlimCoreElectronContentSharing.prototype.joinContentSharing = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.joinContentSharing(causeId);
    };
    SlimCoreElectronContentSharing.prototype.updateContentSharingParticipantStateToViewer = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.updateContentSharingParticipantStateToViewer(causeId);
    };
    SlimCoreElectronContentSharing.prototype.updateContentSharingSessionState = function (id, sessionState, causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.updateContentSharingSessionState(id, sessionState, causeId);
    };
    SlimCoreElectronContentSharing.prototype.takeContentSharingControl = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.takeContentSharingControl(causeId);
    };
    SlimCoreElectronContentSharing.prototype.stopContentSharing = function (causeId) {
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        return this._session.stopContentSharing(causeId);
    };
    SlimCoreElectronContentSharing.prototype._onJoinResult = function (eventData) {
        this._session.onJoinResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype._onUpdateParticipantStateResult = function (eventData) {
        this._session.onUpdateParticipantStateResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype._onSessionStateResult = function (eventData) {
        this._session.onSessionStateResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype._onTakeControlResult = function (eventData) {
        this._session.onTakeControlResultEvent(eventData);
    };
    SlimCoreElectronContentSharing.prototype.callStartContentSharing = function () {
        var _this = this;
        return async.asap(function () { return _this._nativeContentSharing.startContentSharing(); });
    };
    SlimCoreElectronContentSharing.prototype.callStopContentSharing = function () {
        var _this = this;
        return async.asap(function () { return _this._nativeContentSharing.stopContentSharing(); });
    };
    SlimCoreElectronContentSharing.prototype.callUpdateContentSharingSessionState = function (commandId, sessionState) {
        var _this = this;
        return async.asap(function () { return _this._nativeContentSharing.updateContentSharingSessionState(commandId, sessionState); });
    };
    SlimCoreElectronContentSharing.prototype.callTakeContentSharingControl = function () {
        var _this = this;
        return async.asap(function () { return _this._nativeContentSharing.takeContentSharingControl(); });
    };
    SlimCoreElectronContentSharing.prototype.callUpdateContentSharingParticipantState = function () {
        var _this = this;
        return async.asap(function () { return _this._nativeContentSharing.updateContentSharingParticipantState(); });
    };
    SlimCoreElectronContentSharing.prototype.convertFailureReason = function (reason) {
        switch (reason) {
            case Enums.ContentSharingFailureReason.NoFailure:
                return 1;
            case Enums.ContentSharingFailureReason.SessionNotFound:
                return 34;
            case Enums.ContentSharingFailureReason.SessionTimedOut:
                return 35;
            case Enums.ContentSharingFailureReason.NetworkError:
                return 3;
            case Enums.ContentSharingFailureReason.NetworkCannotConnectError:
                return 52;
            case Enums.ContentSharingFailureReason.ServiceFailure:
                return 48;
            case Enums.ContentSharingFailureReason.RequestTimedOut:
                return 45;
            case Enums.ContentSharingFailureReason.AuthFailure:
                return 29;
            case Enums.ContentSharingFailureReason.ActionNotAllowed:
                return 60;
            case Enums.ContentSharingFailureReason.Forbidden:
                return 8;
            case Enums.ContentSharingFailureReason.Failure:
                return 32;
            default:
                return 32;
        }
    };
    SlimCoreElectronContentSharing.prototype.dispose = function (causeId) {
        var _this = this;
        if (causeId === void 0) { causeId = causeId_1.generateCauseId(); }
        var rejectReason = this.contentSharingTerminationReason ? this.contentSharingTerminationReason :
            {
                terminatedReason: 12,
                terminatedReasonCode: 0,
                terminatedReasonSubCode: 0,
                errorMessage: 'Call ended'
            };
        this.slimCoreContentSharingObjectId = 0;
        this._getCallEndOperation().then(function () {
            _this._callOperationHandler.rejectPendingOperations(rejectReason, causeId);
            _super.prototype.dispose.call(_this, causeId);
        });
    };
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.START_CONTENT_SHARING),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "startContentSharing", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.JOIN_CONTENT_SHARING),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "joinContentSharing", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.UPDATE_PARTICIPANT_STATE),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "updateContentSharingParticipantStateToViewer", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.UPDATE_CONTENT_SHARING_SESSION_STATE, { type: operationDecorators_1.OPERATION_TYPE.CHAINED }),
        __param(2, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "updateContentSharingSessionState", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.TAKE_CONTENT_SHARING_CONTROL),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "takeContentSharingControl", null);
    __decorate([
        operationDecorators_1.callOperation(callConstants_1.CONTENT_SHARING_OPERATIONS.STOP_CONTENT_SHARING, { waitFor: callConstants_1.CONTENT_SHARING_OPERATIONS.START_CONTENT_SHARING }),
        __param(0, operationDecorators_1.causeId),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Promise)
    ], SlimCoreElectronContentSharing.prototype, "stopContentSharing", null);
    return SlimCoreElectronContentSharing;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronContentSharing;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var internalLogger_1 = __webpack_require__(20);
var CONSTANTS = {
    CANCELED_TERMINATION_REASON: {
        terminatedReason: 12,
        terminatedReasonCode: 0,
        terminatedReasonSubCode: 0,
        errorMessage: 'Content sharing is disconnected'
    },
    ACTION_NOT_ALLOWED: function (errorMessage) {
        return {
            terminatedReason: 60,
            terminatedReasonCode: 0,
            terminatedReasonSubCode: 0,
            errorMessage: errorMessage
        };
    }
};
var ContentSharingSession = (function () {
    function ContentSharingSession(_platformImpl, logger) {
        var _this = this;
        this._platformImpl = _platformImpl;
        this._pendingDeferreds = [];
        this._updateContentSharingSessionStateDeferredPromises = {};
        this.onJoinResultEvent = function (event) {
            if (!_this._joinContenSharingDeferredPromise) {
                _this._logger.warn("No pending promise for join. Event data: " + event);
                return;
            }
            _this._logger.info("JoinContentSharing completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._joinContenSharingDeferredPromise);
            }
            else {
                var terminatedReasonCode = event.code;
                var terminatedReasonSubCode = event.subCode;
                var terminatedReason = _this._platformImpl.convertFailureReason(event.failureReason);
                var errorMessage = "Join failed with reason " + terminatedReason;
                _this._logger.error(errorMessage);
                _this._rejectDeferred(_this._joinContenSharingDeferredPromise, { terminatedReason: terminatedReason, terminatedReasonCode: terminatedReasonCode, terminatedReasonSubCode: terminatedReasonSubCode, errorMessage: errorMessage });
            }
        };
        this.onUpdateParticipantStateResultEvent = function (event) {
            if (!_this._updateParticipantStateDeferredPromise) {
                _this._logger.warn("No pending promise for update participant state. Event data: " + event);
                return;
            }
            _this._logger.info("UpdateContentSharingParticipantStateToViewer completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._updateParticipantStateDeferredPromise);
            }
            else {
                var terminatedReasonCode = event.code;
                var terminatedReasonSubCode = event.subCode;
                var terminatedReason = _this._platformImpl.convertFailureReason(event.failureReason);
                var errorMessage = "Update participant state failed with reason " + terminatedReason;
                _this._logger.error(errorMessage);
                _this._rejectDeferred(_this._updateParticipantStateDeferredPromise, { terminatedReason: terminatedReason, terminatedReasonCode: terminatedReasonCode, terminatedReasonSubCode: terminatedReasonSubCode, errorMessage: errorMessage });
            }
        };
        this.onSessionStateResultEvent = function (event) {
            _this._logger.info("UpdateContentSharingSessionState completed for: " + _this._platformImpl.contentSharingGuid + ", status: " + JSON.stringify(event));
            if (_this._updateContentSharingSessionStateDeferredPromises.hasOwnProperty(event.id)) {
                if (event.failureReason === _this._platformImpl.noFailureReason) {
                    _this._updateContentSharingSessionStateDeferredPromises[event.id].resolve();
                }
                else {
                    var terminatedReasonCode = event.code;
                    var terminatedReasonSubCode = event.subCode;
                    var terminatedReason = _this._platformImpl.convertFailureReason(event.failureReason);
                    var errorMessage = "Update SessionState failed with reason " + terminatedReason;
                    _this._logger.error(errorMessage);
                    _this._updateContentSharingSessionStateDeferredPromises[event.id].reject({ terminatedReason: terminatedReason, terminatedReasonCode: terminatedReasonCode, terminatedReasonSubCode: terminatedReasonSubCode, errorMessage: errorMessage });
                }
            }
        };
        this.onTakeControlResultEvent = function (event) {
            if (!_this._takeControlDeferredPromise) {
                _this._logger.warn("No pending promise for take control. Event data: " + event);
                return;
            }
            _this._logger.info("TakeContentSharingControl completed for: " + _this._platformImpl.contentSharingGuid + ", " + JSON.stringify(event));
            if (event.failureReason === _this._platformImpl.noFailureReason) {
                _this._invokeDeferred(_this._takeControlDeferredPromise);
            }
            else {
                var terminatedReasonCode = event.code;
                var terminatedReasonSubCode = event.subCode;
                var terminatedReason = _this._platformImpl.convertFailureReason(event.failureReason);
                var errorMessage = "Take content sharing control failed with reason " + terminatedReason;
                _this._logger.error(errorMessage);
                _this._rejectDeferred(_this._takeControlDeferredPromise, { terminatedReason: terminatedReason, terminatedReasonCode: terminatedReasonCode, terminatedReasonSubCode: terminatedReasonSubCode, errorMessage: errorMessage });
            }
        };
        this._logger = new internalLogger_1.default(logger);
    }
    ContentSharingSession.prototype.statusChanged = function (status) {
        if (status === 7 || status === 8) {
            if (this._stopContentSharingDeferredPromise) {
                this._invokeDeferred(this._stopContentSharingDeferredPromise);
            }
            if (this._startContentSharingDeferredPromise) {
                var terminatedReason = this._platformImpl.contentSharingTerminationReason && this._platformImpl.contentSharingTerminationReason.terminatedReason !== 0 ?
                    this._platformImpl.contentSharingTerminationReason :
                    CONSTANTS.CANCELED_TERMINATION_REASON;
                this._rejectDeferred(this._startContentSharingDeferredPromise, terminatedReason);
            }
            this._logger.info('Content sharing is disconnected');
            this._rejectPendingPromises(CONSTANTS.CANCELED_TERMINATION_REASON);
        }
        else if (status === 2 || status === 5 || status === 4) {
            if (this._stopContentSharingDeferredPromise) {
                var errorMessage = 'Content sharing cannot be ended when not presenting';
                var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
                this._logger.error(errorMessage);
                this._rejectDeferred(this._stopContentSharingDeferredPromise, terminatedReason);
            }
        }
        else if (status === 3) {
            if (this._startContentSharingDeferredPromise) {
                this._invokeDeferred(this._startContentSharingDeferredPromise);
            }
            if (this._takeControlDeferredPromise) {
                this._invokeDeferred(this._takeControlDeferredPromise);
            }
        }
    };
    ContentSharingSession.prototype.startContentSharing = function (causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('startContentSharing', causeId);
        if (this._startContentSharingDeferredPromise) {
            return this._startContentSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 0) {
            var errorMessage = 'Content sharing cannot be started as it is not in the initial state';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        fnLogger.info("Start content sharing for : " + this._platformImpl.contentSharingGuid);
        this._startContentSharingDeferredPromise = async.defer();
        var always = function () {
            _this._startContentSharingDeferredPromise = null;
        };
        this._startContentSharingDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStartContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._startContentSharingDeferredPromise); })
            .then(function () { return _this._startContentSharingDeferredPromise.promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'startContentSharing', fnLogger);
        });
    };
    ContentSharingSession.prototype.joinContentSharing = function (causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('joinContentSharing', causeId);
        if (this._joinContenSharingDeferredPromise) {
            return this._joinContenSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 2) {
            var errorMessage = 'Content sharing cannot be joined as it is not in ringing state';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        fnLogger.info("Join content sharing for : " + this._platformImpl.contentSharingGuid);
        this._joinContenSharingDeferredPromise = async.defer();
        var always = function () {
            _this._joinContenSharingDeferredPromise = null;
        };
        this._joinContenSharingDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStartContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._joinContenSharingDeferredPromise); })
            .then(function () { return _this._joinContenSharingDeferredPromise.promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'joinContentSharing', fnLogger);
        });
    };
    ContentSharingSession.prototype.updateContentSharingParticipantStateToViewer = function (causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('updateContentSharingParticipantStateToViewer', causeId);
        if (this._updateParticipantStateDeferredPromise) {
            return this._updateParticipantStateDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 4) {
            var errorMessage = 'Cannot update participant state as content sharing is not in connected state';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        fnLogger.info("Update content sharing participant state for : " + this._platformImpl.contentSharingGuid);
        this._updateParticipantStateDeferredPromise = async.defer();
        var always = function () {
            _this._updateParticipantStateDeferredPromise = null;
        };
        this._updateParticipantStateDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callUpdateContentSharingParticipantState(); })
            .then(function () { return _this._pendingDeferreds.push(_this._updateParticipantStateDeferredPromise); })
            .then(function () { return _this._updateParticipantStateDeferredPromise.promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'joinContentSharing', fnLogger);
        });
    };
    ContentSharingSession.prototype.updateContentSharingSessionState = function (id, sessionState, causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('updateContentSharingSessionState', causeId);
        if (this._updateContentSharingSessionStateDeferredPromises[id]) {
            return this._updateContentSharingSessionStateDeferredPromises[id].promise;
        }
        if (this._platformImpl.contentSharingStatus !== 3) {
            var errorMessage = 'Cannot update session state as content sharing is not in presenting state';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        var deferred = async.defer();
        this._updateContentSharingSessionStateDeferredPromises[id] = deferred;
        var always = function () {
            delete _this._updateContentSharingSessionStateDeferredPromises[id];
        };
        this._updateContentSharingSessionStateDeferredPromises[id].promise.then(always, always);
        fnLogger.info("Update content sharing session state for : " + this._platformImpl.contentSharingGuid);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callUpdateContentSharingSessionState(id, sessionState); })
            .then(function () { return _this._updateContentSharingSessionStateDeferredPromises[id].promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'updateContentSharingSessionState', fnLogger);
        });
    };
    ContentSharingSession.prototype.takeContentSharingControl = function (causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('takeContentSharingControl', causeId);
        if (this._takeControlDeferredPromise) {
            return this._takeControlDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus !== 5) {
            var errorMessage = 'Cannot take control of content sharing as it is not in viewing state';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        fnLogger.info("Taking control of content sharing for : " + this._platformImpl.contentSharingGuid);
        this._takeControlDeferredPromise = async.defer();
        var always = function () {
            _this._takeControlDeferredPromise = null;
        };
        this._takeControlDeferredPromise.promise.then(always, always);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callTakeContentSharingControl(); })
            .then(function () { return _this._pendingDeferreds.push(_this._takeControlDeferredPromise); })
            .then(function () { return _this._takeControlDeferredPromise.promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'takeContentSharingControl', fnLogger);
        });
    };
    ContentSharingSession.prototype.stopContentSharing = function (causeId) {
        var _this = this;
        var fnLogger = this._logger.createFnLogger('stopContentSharing', causeId);
        if (this._stopContentSharingDeferredPromise) {
            return this._stopContentSharingDeferredPromise.promise;
        }
        if (this._platformImpl.contentSharingStatus === 2 ||
            this._platformImpl.contentSharingStatus === 4 ||
            this._platformImpl.contentSharingStatus === 5) {
            var errorMessage = 'Incoming content sharing cannot be stopped';
            var terminatedReason = CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
            fnLogger.logFailure(errorMessage);
            return Promise.reject(terminatedReason);
        }
        this._stopContentSharingDeferredPromise = async.defer();
        var always = function () {
            _this._stopContentSharingDeferredPromise = null;
        };
        this._stopContentSharingDeferredPromise.promise.then(always, always);
        fnLogger.info("Stop content sharing for : " + this._platformImpl.contentSharingGuid);
        return Promise.resolve(undefined)
            .then(function () { return _this._platformImpl.callStopContentSharing(); })
            .then(function () { return _this._pendingDeferreds.push(_this._stopContentSharingDeferredPromise); })
            .then(function () { return _this._stopContentSharingDeferredPromise.promise; })
            .catch(function (error) {
            _this.handleContentSharingOperationError(error, 'stopContentSharing', fnLogger);
        });
    };
    ContentSharingSession.prototype.handleContentSharingOperationError = function (error, functionName, fnLogger) {
        var errorMessage = (error instanceof Error) ? error.toString() : JSON.stringify(error);
        fnLogger.logFailure("Error in " + functionName + "(), contentSharingGuid = " + this._platformImpl.contentSharingGuid + ", error = " + errorMessage);
        if (error && error.hasOwnProperty('terminatedReason')) {
            throw error;
        }
        else {
            throw CONSTANTS.ACTION_NOT_ALLOWED(errorMessage);
        }
    };
    ContentSharingSession.prototype._rejectPendingPromises = function (reason) {
        this._logger.info('rejectPendingPromises');
        this._pendingDeferreds.forEach(function (deferred) {
            deferred.reject(reason);
        });
        this._pendingDeferreds = [];
        _.forEach(this._updateContentSharingSessionStateDeferredPromises, function (deferred) {
            deferred.reject(reason);
        });
        this._updateContentSharingSessionStateDeferredPromises = {};
    };
    ContentSharingSession.prototype._invokeDeferred = function (deferred) {
        this._logger.info('_invokeDeferred');
        if (deferred) {
            _.pull(this._pendingDeferreds, deferred);
            deferred.resolve();
        }
    };
    ContentSharingSession.prototype._rejectDeferred = function (deferred, terminatedReason) {
        this._logger.info('_rejectDeferred');
        if (deferred) {
            _.pull(this._pendingDeferreds, deferred);
            deferred.reject(terminatedReason);
        }
    };
    return ContentSharingSession;
}());
exports.ContentSharingSession = ContentSharingSession;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreCommon = __webpack_require__(0);
var HandlerDetails = (function () {
    function HandlerDetails(dataId, handler, sourceSinkInternallyCreated) {
        this.dataId = dataId;
        this.handler = handler;
        this.sourceSinkInternallyCreated = sourceSinkInternallyCreated;
        this.isAttached = false;
    }
    return HandlerDetails;
}());
var SlimCoreElectronDataChannelAdapter = (function () {
    function SlimCoreElectronDataChannelAdapter(logger, _slimcoreInstance) {
        this.logger = logger;
        this._slimcoreInstance = _slimcoreInstance;
        this._dataChannel = null;
        this._dataChannelStatus = SlimCore.Enums.DataChannelStatus.Unknown;
        this._handlers = {};
        this._availableHandlers = 0;
        this._dataChannelStartCalled = false;
        this.setInternalSourceSink = this.setInternalSourceSink.bind(this);
    }
    SlimCoreElectronDataChannelAdapter.prototype.addHandler = function (dataId, handler, skipDataSourceSinkCreation, negotiationTag) {
        if (skipDataSourceSinkCreation === void 0) { skipDataSourceSinkCreation = false; }
        if (dataId < 0 || dataId >= 64) {
            return Promise.reject(new Error("Data Id " + dataId + " is outside the valid range of 0-63"));
        }
        if (this._handlers.hasOwnProperty(dataId) && this._handlers[dataId].handler) {
            return Promise.reject(new Error("Data Id " + dataId + " is already registered to a non-null handler"));
        }
        this.logger.info("Adding handler to dataId: " + dataId + ", " + (skipDataSourceSinkCreation ? 'skipping source sink creation' : 'making source sink'));
        var details = null;
        var shouldAttach = false;
        if (dataId in this._handlers) {
            details = this._handlers[dataId];
            details.handler = handler;
            shouldAttach = true;
        }
        else {
            details = new HandlerDetails(dataId, handler, skipDataSourceSinkCreation);
            this._handlers[dataId] = details;
            if (!skipDataSourceSinkCreation) {
                shouldAttach = true;
            }
        }
        if (shouldAttach) {
            this._availableHandlers++;
            if (this._isDataChannelAvailable) {
                this._negotiationTag = negotiationTag;
                this.start();
            }
            if (this._isDataChannelActive) {
                return this._attachHandler(details);
            }
        }
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.removeHandler = function (dataId) {
        var details = this._handlers[dataId];
        if (!details) {
            return Promise.reject(new Error("Handler associated with Data Id " + dataId + " wasn't attached in the first place"));
        }
        this._detachHandler(details);
        delete this._handlers[dataId];
        this._availableHandlers--;
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.updateNegotiationTag = function (negotiationTag) {
        this._negotiationTag = negotiationTag;
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.dispose = function () {
        this._detachAllHandlers();
        if (this._dataChannel) {
            this._dataChannel = null;
        }
    };
    SlimCoreElectronDataChannelAdapter.prototype.setDataChannel = function (channel) {
        if (!!this._dataChannel) {
            throw new Error('Unexpected setting of data channel when we already have one');
        }
        this._dataChannel = channel;
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.onDataChannelStatusChanged = function (dataChannelStatus) {
        var _this = this;
        if (dataChannelStatus === SlimCore.Enums.DataChannelStatus.Active && !this._isDataChannelActive) {
            this._attachAllHandlers()
                .catch(function (error) {
                _this.logger.error("Failed to attach all handlers error: " + error);
            });
        }
        else if (dataChannelStatus === SlimCore.Enums.DataChannelStatus.Available) {
            if (this._isDataChannelActive || this._isDataChannelStopping) {
                this._dataChannelStartCalled = false;
                this._detachAllHandlers();
            }
            else {
                if (this._availableHandlers > 0) {
                    this.start();
                }
            }
        }
        this._dataChannelStatus = dataChannelStatus;
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.setProtocolDataSource = function (source) {
        return Promise.resolve();
    };
    SlimCoreElectronDataChannelAdapter.prototype.processProtocolMessage = function (message, senderParticipant, senderParticipantId, senderSourceId) {
        return Promise.resolve();
    };
    Object.defineProperty(SlimCoreElectronDataChannelAdapter.prototype, "_isDataChannelAvailable", {
        get: function () {
            return !!this._dataChannel && this._dataChannelStatus === SlimCore.Enums.DataChannelStatus.Available;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronDataChannelAdapter.prototype, "_isDataChannelActive", {
        get: function () {
            return !!this._dataChannel && this._dataChannelStatus === SlimCore.Enums.DataChannelStatus.Active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronDataChannelAdapter.prototype, "_isDataChannelStopping", {
        get: function () {
            return !!this._dataChannel && this._dataChannelStatus === SlimCore.Enums.DataChannelStatus.Stopping;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronDataChannelAdapter.prototype._attachAllHandlers = function () {
        var _this = this;
        return Promise.all(Object.keys(this._handlers).map(function (dataId) {
            var details = _this._handlers[dataId];
            if (details && ((details.handler && details.dataSource && details.dataSink) || !details.sourceSinkInternallyCreated)) {
                return _this._attachHandler(details);
            }
            else {
                return Promise.resolve(null);
            }
        }));
    };
    SlimCoreElectronDataChannelAdapter.prototype.setInternalSourceSink = function (dataId, dataSource, dataSink) {
        if (dataId < 0 || dataId >= 64) {
            throw new Error("Data Id " + dataId + " is outside the valid range of 0-63");
        }
        if (this._handlers.hasOwnProperty(dataId) && (this._handlers[dataId].dataSource || this._handlers[dataId].dataSink)) {
            this.logger.info("Data Id " + dataId + " for internal source sink is already registered");
            return;
        }
        this.logger.info("Setting internal source sink for dataId: " + dataId);
        if (dataId in this._handlers) {
            this._handlers[dataId].dataSource = dataSource;
            this._handlers[dataId].dataSink = dataSink;
            this.logger.info("Completed adapter details for dataId: " + dataId);
            this._availableHandlers++;
        }
        else {
            var internalDetails = new HandlerDetails(dataId, null, true);
            internalDetails.dataSource = dataSource;
            internalDetails.dataSink = dataSink;
            this._handlers[dataId] = internalDetails;
        }
    };
    SlimCoreElectronDataChannelAdapter.prototype._attachHandler = function (details) {
        var _this = this;
        if (details.isAttached) {
            return Promise.resolve();
        }
        try {
            this.logger.info("Attaching handler for dataId: " + details.dataId + ", " + (details.sourceSinkInternallyCreated ? 'skipping source sink creation' : 'making source sink'));
            if (!details.sourceSinkInternallyCreated) {
                details.dataSource = SlimCoreCommon.createDataSource(this._slimcoreInstance, details.dataId);
                this._dataChannel.registerDataSource(details.dataSource);
                details.dataSink = SlimCoreCommon.createDataSink(this._slimcoreInstance, details.dataId);
                this._dataChannel.registerDataSink(details.dataSink);
            }
            else if (!details.dataSource || !details.dataSink) {
                this.logger.error('Attaching handler with null datasource or datasink');
                return Promise.reject(new Error('Attaching handler with null datasource or datasink'));
            }
            details.listener = function (args) {
                try {
                    details.handler.onDataReceived(details.dataId, args.data, args.sourceID);
                }
                catch (error) {
                    _this.logger.error("Exception thrown from onDataReceived for data id " + details.dataId + ", error: " + error);
                }
            };
            details.dataSink.on('data', details.listener);
            var sendFunction = function (data, recipients) {
                try {
                    details.dataSource.sendData(data, recipients);
                    return Promise.resolve();
                }
                catch (error) {
                    return Promise.reject(error);
                }
            };
            details.isAttached = true;
            details.handler.onStarted(details.dataId, sendFunction);
            return Promise.resolve();
        }
        catch (error) {
            this.logger.error("Attaching handler for data id " + details.dataId + " threw exception: " + error);
            return Promise.reject(error);
        }
    };
    SlimCoreElectronDataChannelAdapter.prototype._detachAllHandlers = function () {
        var _this = this;
        Object.keys(this._handlers).forEach(function (dataId) {
            _this._detachHandler(_this._handlers[dataId]);
        });
    };
    SlimCoreElectronDataChannelAdapter.prototype._detachHandler = function (details) {
        var _this = this;
        if (!details.isAttached) {
            return;
        }
        try {
            this.logger.info("Detaching data handler dataid: " + details.dataId);
            if (details.handler) {
                details.handler.onStopped(details.dataId)
                    .catch(function (error) {
                    _this.logger.warn("Error in handler onStopped :" + error);
                });
            }
            if (details.sourceSinkInternallyCreated) {
                if (!!details.dataSink) {
                    try {
                        details.dataSink.removeListener('data', details.listener);
                    }
                    catch (error) {
                        this.logger.warn("Error removing internal listener, call probably ended: " + error);
                    }
                }
            }
            else {
                if (!!details.dataSource) {
                    this._dataChannel.unregisterDataSource(details.dataSource)
                        .catch(function (error) {
                        _this.logger.warn("Failed to unregister data source, call probably ended: " + error);
                    })
                        .then(function () {
                        details.dataSource.dispose();
                        details.dataSource = null;
                    });
                }
                if (!!details.dataSink) {
                    details.dataSink.removeAllListeners('data');
                    this._dataChannel.unregisterDataSink(details.dataSink)
                        .catch(function (error) {
                        _this.logger.warn("Failed to unregister data sink, call probably ended: " + error);
                    })
                        .then(function () {
                        details.dataSink.dispose();
                        details.dataSink = null;
                    });
                }
            }
            details.isAttached = false;
        }
        catch (error) {
            this.logger.error("Exception thrown while detaching handler for data id " + details.dataId + ", error: " + error);
        }
    };
    SlimCoreElectronDataChannelAdapter.prototype.start = function () {
        this.logger.info('Data channel start called from adapter');
        if (!this._dataChannel) {
            return Promise.reject(new Error('Attempted to call start without a data channel'));
        }
        else if (this._dataChannelStartCalled) {
            this.logger.warn('Data channel start called more than once');
            return Promise.resolve();
        }
        else {
            this._dataChannelStartCalled = true;
            return this._dataChannel.start(this._negotiationTag);
        }
    };
    return SlimCoreElectronDataChannelAdapter;
}());
exports.default = SlimCoreElectronDataChannelAdapter;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var skype_calling_utilities_1 = __webpack_require__(49);
var SlimCoreElectronDataChannel_1 = __webpack_require__(12);
var _ = __webpack_require__(1);
var async = __webpack_require__(4);
var callTelemetry_1 = __webpack_require__(13);
var guid_1 = __webpack_require__(32);
var piiUtils = __webpack_require__(5);
var tsCallingVersionProvider_1 = __webpack_require__(10);
var rt_js_bindings_1 = __webpack_require__(7);
var SlimCoreCommon = __webpack_require__(0);
var SlimCoreElectronBase_1 = __webpack_require__(3);
var CONTROL_REQUEST_WAIT_TIMEOUT = 30000;
var CONTROL_ACK_WAIT_TIMEOUT = 10000;
var AVAILABLE_ACK_WAIT_TIMEOUT = 2000;
var INPUT_RAW_ERROR_REPORTING_WAIT_TIMEOUT = 10000;
var AVAILABLE_RETRY_LIMIT = 6;
var LOCAL_PARTICIPANT_MRI = '';
var VIEWER_CONTROL_SESSION_OPERATIONS;
(function (VIEWER_CONTROL_SESSION_OPERATIONS) {
    VIEWER_CONTROL_SESSION_OPERATIONS["INITIATED"] = "Initiated";
    VIEWER_CONTROL_SESSION_OPERATIONS["CALL_STATE"] = "CallState";
    VIEWER_CONTROL_SESSION_OPERATIONS["SHARING_STARTED"] = "SharingStarted";
    VIEWER_CONTROL_SESSION_OPERATIONS["DATA_CHANNEL_AVAILABLE"] = "DataChannelAvailable";
    VIEWER_CONTROL_SESSION_OPERATIONS["DATA_CHANNEL_UNAVAILABLE"] = "DataChannelUnavailable";
    VIEWER_CONTROL_SESSION_OPERATIONS["AVAILABLE_HANDSHAKE"] = "AvailableHandshake";
    VIEWER_CONTROL_SESSION_OPERATIONS["SESSION_SHUTDOWN"] = "Shutdown";
    VIEWER_CONTROL_SESSION_OPERATIONS["SESSION_SHUTDOWN_BY_ANOTHER_SESSION"] = "ShutdownByOtherSession";
})(VIEWER_CONTROL_SESSION_OPERATIONS || (VIEWER_CONTROL_SESSION_OPERATIONS = {}));
var SHARER_CONTROL_SESSION_OPERATIONS;
(function (SHARER_CONTROL_SESSION_OPERATIONS) {
    SHARER_CONTROL_SESSION_OPERATIONS["INITIATED"] = "Initiated";
    SHARER_CONTROL_SESSION_OPERATIONS["CALL_STATE"] = "CallState";
    SHARER_CONTROL_SESSION_OPERATIONS["DATA_CHANNEL_AVAILABLE"] = "DataChannelAvailable";
    SHARER_CONTROL_SESSION_OPERATIONS["DATA_CHANNEL_UNAVAILABLE"] = "DataChannelUnavailable";
    SHARER_CONTROL_SESSION_OPERATIONS["CONTROL_REQUEST"] = "ControlRequest";
    SHARER_CONTROL_SESSION_OPERATIONS["SESSION_SHUTDOWN"] = "Shutdown";
    SHARER_CONTROL_SESSION_OPERATIONS["SESSION_SHUTDOWN_BY_ANOTHER_SESSION"] = "ShutdownByOtherSession";
})(SHARER_CONTROL_SESSION_OPERATIONS || (SHARER_CONTROL_SESSION_OPERATIONS = {}));
var ControlSessionTelemetryBase = (function (_super) {
    __extends(ControlSessionTelemetryBase, _super);
    function ControlSessionTelemetryBase(logger, callStartTime, negotiationTag, callId, participantId, endpointId) {
        var _this = _super.call(this, logger, callStartTime, function () { return _this.recordedEvents.length > 100; }) || this;
        _this.negotiationTag = negotiationTag;
        _this.callId = callId;
        _this.participantId = participantId;
        _this.endpointId = endpointId;
        _this.messagesFromUnknownSender = {};
        _this.tsCallingVersion = tsCallingVersionProvider_1.getTsCallingVersion();
        return _this;
    }
    ControlSessionTelemetryBase.prototype.recordProtocolMessage = function (sender, sourceId) {
        if (!sender) {
            if (!(sourceId in this.messagesFromUnknownSender)) {
                this.messagesFromUnknownSender[sourceId] = 0;
            }
            this.messagesFromUnknownSender[sourceId]++;
        }
    };
    ControlSessionTelemetryBase.prototype.setCallId = function (callId) {
        this.callId = callId;
    };
    ControlSessionTelemetryBase.prototype.setEndpointId = function (endpointId) {
        this.endpointId = endpointId;
    };
    ControlSessionTelemetryBase.prototype.setParticipantId = function (participantId) {
        this.participantId = participantId;
    };
    ControlSessionTelemetryBase.prototype.setTenantId = function (tenantId) {
        this.tenantId = tenantId;
    };
    return ControlSessionTelemetryBase;
}(callTelemetry_1.TelemetryUtilities));
var ViewerControlSessionTelemetry = (function (_super) {
    __extends(ViewerControlSessionTelemetry, _super);
    function ViewerControlSessionTelemetry(logger, callStartTime, negotiationTag, callId, participantId, endpointId, sharer) {
        var _this = _super.call(this, logger, callStartTime, negotiationTag, callId, participantId, endpointId) || this;
        var sharerParticipantId = sharer.getSharingParticipantLeg();
        if (sharerParticipantId) {
            _this.sharerParticipantId = sharerParticipantId;
            var d = _.find(sharer.endpoints.endpointDetails, function (e) { return e.participantId === sharerParticipantId; });
            if (d) {
                _this.sharerClientVersion = d.clientVersion;
            }
        }
        return _this;
    }
    ViewerControlSessionTelemetry.prototype.getEvent = function () {
        var getValue = function (v) { return v === undefined ? '' : v; };
        return {
            CorrelationId: getValue(this.callId),
            ParticipantId: getValue(this.participantId),
            EndpointId: getValue(this.endpointId),
            NegotiationTag: getValue(this.negotiationTag),
            TsCallingVersion: getValue(this.tsCallingVersion),
            TenantId: getValue(this.tenantId),
            SharerParticipantId: getValue(this.sharerParticipantId),
            SharerClientVersion: getValue(this.sharerClientVersion),
            EventTimestampBag: _super.prototype.getEventTimestampBag.call(this),
            ProtocolMessages: JSON.stringify({ UnknownSender: this.messagesFromUnknownSender })
        };
    };
    return ViewerControlSessionTelemetry;
}(ControlSessionTelemetryBase));
var SharerControlSessionTelemetry = (function (_super) {
    __extends(SharerControlSessionTelemetry, _super);
    function SharerControlSessionTelemetry(logger, callStartTime, negotiationTag, callId, participantId, endpointId) {
        return _super.call(this, logger, callStartTime, negotiationTag, callId, participantId, endpointId) || this;
    }
    SharerControlSessionTelemetry.prototype.getEvent = function () {
        var getValue = function (v) { return v === undefined ? '' : v; };
        return {
            CorrelationId: getValue(this.callId),
            ParticipantId: getValue(this.participantId),
            EndpointId: getValue(this.endpointId),
            NegotiationTag: getValue(this.negotiationTag),
            TsCallingVersion: getValue(this.tsCallingVersion),
            TenantId: getValue(this.tenantId),
            EventTimestampBag: _super.prototype.getEventTimestampBag.call(this),
            ProtocolMessages: JSON.stringify({ UnknownSender: this.messagesFromUnknownSender })
        };
    };
    return SharerControlSessionTelemetry;
}(ControlSessionTelemetryBase));
var SlimCoreElectronScreenSharingControl = (function (_super) {
    __extends(SlimCoreElectronScreenSharingControl, _super);
    function SlimCoreElectronScreenSharingControl(logger, settings, engine, call, _controlInjector, _telemetryService) {
        var _this = _super.call(this, logger.createChild(function () { return "SlimCoreElectronScreenSharingControl"; }), settings, engine) || this;
        _this._controlInjector = _controlInjector;
        _this._telemetryService = _telemetryService;
        _this.controlState = 0;
        _this.role = 0;
        _this.controlDataChannelStatus = { id: null, readyForControl: false, state: 0 };
        _this._enabled = false;
        _this._availableAckEnabled = true;
        _this._dataChannelActive = false;
        _this._dataChannelAvailableSent = false;
        _this._protocolDataSource = null;
        _this._controlDataSource = null;
        _this._controlDataSink = null;
        _this._controlRequest = null;
        _this._controlRequestSubscription = null;
        _this._controllerParticipant = null;
        _this._controllerParticipantSubscription = null;
        _this._screenSharingVideoRenderer = null;
        _this._screenSharingVideoRendererSubscriptions = [];
        _this._sharerParticipant = null;
        _this._controlCapturer = null;
        _this._captureEventSubscription = null;
        _this._mouseControlEventSubscription = null;
        _this._keyboardControlEventSubscription = null;
        _this._requestControlTimer = null;
        _this._grantControlTimer = null;
        _this._acceptControlTimer = null;
        _this._terminateControlTimer = null;
        _this._availableAckTimer = null;
        _this._retryAttempt = 0;
        _this._injectRawInputErrorTimer = null;
        _this._lastInjectRawInputErrorCount = 0;
        _this._raiseRenderedAtViewer = null;
        _this._participantSubscriptions = {};
        _this._completedViewerSessions = [];
        _this._logger.info('constructor');
        _this._callId = call.callId;
        call.on('callIdChanged', function (id) {
            _this._callId = id;
            if (_this._currentViewerSessionTelemetry) {
                _this._currentViewerSessionTelemetry.setCallId(id);
            }
            if (_this._currentSharerSessionTelemetry) {
                _this._currentSharerSessionTelemetry.setCallId(id);
            }
        });
        _this._participantId = call.participantId;
        call.on('callLegIdChanged', function (id) {
            _this._participantId = id;
            if (_this._currentViewerSessionTelemetry) {
                _this._currentViewerSessionTelemetry.setParticipantId(id);
            }
            if (_this._currentSharerSessionTelemetry) {
                _this._currentSharerSessionTelemetry.setParticipantId(id);
            }
        });
        _this._endpointId = call.endpointId;
        if (_this._slimcoreInstance.ecsGetSettingAsBool) {
            _this._enableControlSessionTelemetry = _this._slimcoreInstance.ecsGetSettingAsBool('MediaAgent', 'EnableGtcTelemetry', false);
        }
        else {
            _this._enableControlSessionTelemetry = false;
        }
        return _this;
    }
    SlimCoreElectronScreenSharingControl.prototype.enableScreenSharingControl = function (enabled, reason, detail, _allowControlForUser) {
        if (this._availableAckEnabled === enabled && this._allowControlForUser === _allowControlForUser) {
            return;
        }
        this._allowControlForUser = _allowControlForUser;
        if (!enabled) {
            if (reason === 0) {
                var controlError = {
                    reason: 2,
                    detail: detail
                };
                this.event('sharingControlError').raise(controlError);
            }
            this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
        }
        else {
            this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
        }
        this._availableAckEnabled = enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.setRaiseRenderedAtViewer = function (_raiseRenderedAtViewer) {
        this._raiseRenderedAtViewer = _raiseRenderedAtViewer;
    };
    SlimCoreElectronScreenSharingControl.prototype.setScreenSharingControlFeatureFlag = function (enabled) {
        this._enabled = enabled;
        this._availableAckEnabled = enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype.isScreenSharingControlEnabled = function () {
        return this._enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype._disposeRenderer = function () {
        this._disposeControlCapturer();
        for (var _i = 0, _a = this._screenSharingVideoRendererSubscriptions; _i < _a.length; _i++) {
            var s = _a[_i];
            s.dispose();
        }
        this._screenSharingVideoRendererSubscriptions = [];
        this._screenSharingVideoRenderer = null;
    };
    SlimCoreElectronScreenSharingControl.prototype.setRenderer = function (renderer, target) {
        var _this = this;
        this._disposeRenderer();
        if (!renderer) {
            return Promise.resolve();
        }
        var videoRenderer = renderer;
        var container = (!!target ? target : videoRenderer.renderTarget);
        return async.asap(function () { return _this._setViewingRenderer(videoRenderer, container); });
    };
    SlimCoreElectronScreenSharingControl.prototype.setDataChannel = function (channel) {
        var _this = this;
        return async.asap(function () { return _this._setDataChannel(channel); });
    };
    SlimCoreElectronScreenSharingControl.prototype._setDataChannel = function (channel) {
        this._logger.info("Setting DataChannel " + (channel && channel.id));
        if (this._dataChannel && !channel) {
            this._detachAndDeleteControlDevices();
        }
        this._dataChannel = channel;
        if (channel) {
            this.controlDataChannelStatus = {
                id: channel.id,
                readyForControl: false,
                state: SlimCoreElectronDataChannel_1.default._mapDataChannelStatus(channel._lastDataChannelState)
            };
            this.event('controlDataChannelStateChanged').raise(this.controlDataChannelStatus);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.setProtocolDataSource = function (source) {
        var _this = this;
        return async.asap(function () { return _this._setProtocolDataSource(source); });
    };
    SlimCoreElectronScreenSharingControl.prototype._setProtocolDataSource = function (source) {
        this._protocolDataSource = source;
    };
    SlimCoreElectronScreenSharingControl.prototype._raiseScreenSharingControlCapableEvent = function (isCapable, participantId, disabledBySharer) {
        if (this._enabled) {
            this._logger.info("_raiseScreenSharingControlCapableEvent() enabled is true, raising control capability, capable=" + isCapable);
            var capable = { capable: isCapable, id: participantId, disabledBySharer: disabledBySharer };
            this.event('sharingControlCapable').raise(capable);
        }
        else {
            this._logger.info('_raiseScreenSharingControlCapableEvent() enabled is false, disabling control capability');
            var capable = { capable: false, id: participantId };
            this.event('sharingControlCapable').raise(capable);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.initControlForSharer = function (negotiationTag) {
        this._logger.info('initControlForSharer()');
        this._resetControlState();
        this._screenSharingVideoRenderer = null;
        this._disposeControlCapturer();
        this.role = 1;
        this._dataChannelAvailableSent = false;
        this._setInjectorMode(0);
        this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
        this._initiateSharerSessionTelemetry(negotiationTag);
    };
    SlimCoreElectronScreenSharingControl.prototype.shutdownControlForSharer = function () {
        this._logger.info('shutdownControlForSharer()');
        if (this._controlRequest) {
            this._logger.warn('Rejecting pending control requests');
            var controlRequesterSourceId = this._getDataSourceIdForParticipantLeg(this._controlRequest);
            var controlRequest = this._controlRequest;
            this._clearControlRequest();
            this._raiseControlRequestCanceled(controlRequest);
            this._sendRequest({ action: 4, terminatedReason: 5 }, controlRequesterSourceId);
        }
        this.role = 0;
        if (this._controllerParticipant) {
            var controlInfo = {
                inControl: false,
                id: this._controllerParticipant.participant.id,
                terminatedReason: 5
            };
            this.event('sharingControlChanged').raise(controlInfo);
        }
        this._finalizeSharerSessionTelemetry(SHARER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN);
        this._teardownSharerRemoteControl();
        this._resetControlState();
        this._resetParticipantSubscriptions();
        this._availableAckEnabled = this._enabled;
    };
    SlimCoreElectronScreenSharingControl.prototype._resetParticipantSubscriptions = function () {
        this._logger.info('resetParticipantSubscriptions(): Stopping tracking all participant state changes');
        _.each(this._participantSubscriptions, function (id) { id.dispose(); });
        this._participantSubscriptions = {};
    };
    SlimCoreElectronScreenSharingControl.prototype._initiateViewerSessionTelemetry = function (sharer, negotiationTag, alwaysCreate) {
        if (!alwaysCreate && !negotiationTag) {
            return null;
        }
        if (!alwaysCreate && _.find(this._completedViewerSessions, function (s) { return negotiationTag === s; })) {
            return null;
        }
        if (this._currentViewerSessionTelemetry) {
            if (this._currentViewerSessionTelemetry.negotiationTag === negotiationTag) {
                return null;
            }
            this._finalizeViewerSessionTelemetry(VIEWER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN_BY_ANOTHER_SESSION);
        }
        this._logger.info("initiating new viewer session telemetry for " + negotiationTag);
        this._currentViewerSessionTelemetry = new ViewerControlSessionTelemetry(this._logger, new Date().getTime(), negotiationTag, this._callId, this._participantId, this._endpointId, sharer);
        this._currentViewerSessionTelemetry.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.CALL_STATE, { state: this._callState });
        if (this._dataChannel && this._dataChannelActive) {
            this._currentViewerSessionTelemetry.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_AVAILABLE);
        }
        return this._currentViewerSessionTelemetry;
    };
    SlimCoreElectronScreenSharingControl.prototype._recordViewerSessionTelemetry = function (f, shouldHaveExistingSession) {
        if (shouldHaveExistingSession === void 0) { shouldHaveExistingSession = true; }
        if (!this._currentViewerSessionTelemetry) {
            if (shouldHaveExistingSession) {
                this._logger.error("Cannot record telemetry without current session");
            }
            return;
        }
        if (f) {
            f(this._currentViewerSessionTelemetry);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._finalizeViewerSessionTelemetry = function (reason) {
        if (!this._currentViewerSessionTelemetry) {
            return;
        }
        this._currentViewerSessionTelemetry.recordEvent(reason);
        var event = this._currentViewerSessionTelemetry.getEvent();
        this._sendTelemetryEvent('mdsc_gtc_viewer_session', event);
        if (this._currentViewerSessionTelemetry.negotiationTag) {
            this._completedViewerSessions.push(this._currentViewerSessionTelemetry.negotiationTag);
        }
        if (this._currentViewerSessionTelemetry.messagesFromUnknownSender &&
            Object.keys(this._currentViewerSessionTelemetry.messagesFromUnknownSender).length) {
            rt_js_bindings_1.RootToolsManager.logExternalForDDL("ScreenSharingControl: messages received from unkonwn sender => " + event.ProtocolMessages);
        }
        this._currentViewerSessionTelemetry = null;
    };
    SlimCoreElectronScreenSharingControl.prototype._initiateSharerSessionTelemetry = function (negotiationTag) {
        if (this._currentSharerSessionTelemetry) {
            if (this._currentSharerSessionTelemetry.negotiationTag === negotiationTag) {
                return null;
            }
            this._finalizeSharerSessionTelemetry(SHARER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN_BY_ANOTHER_SESSION);
        }
        this._logger.info("initiating new sharer session telemetry for " + negotiationTag);
        this._currentSharerSessionTelemetry = new SharerControlSessionTelemetry(this._logger, new Date().getTime(), negotiationTag, this._callId, this._participantId, this._endpointId);
        if (this._dataChannel && this._dataChannelActive) {
            this._currentSharerSessionTelemetry.recordEvent(SHARER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_AVAILABLE);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._recordSharerSessionTelemetry = function (f, shouldHaveExistingSession) {
        if (shouldHaveExistingSession === void 0) { shouldHaveExistingSession = true; }
        if (!this._currentSharerSessionTelemetry) {
            if (shouldHaveExistingSession) {
                this._logger.error("Cannot record telemetry without current session");
            }
            return;
        }
        if (f) {
            f(this._currentSharerSessionTelemetry);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._finalizeSharerSessionTelemetry = function (reason) {
        if (!this._currentSharerSessionTelemetry) {
            return;
        }
        this._currentSharerSessionTelemetry.recordEvent(reason);
        var event = this._currentSharerSessionTelemetry.getEvent();
        this._sendTelemetryEvent('mdsc_gtc_sharer_session', event);
        if (this._currentSharerSessionTelemetry.messagesFromUnknownSender &&
            Object.keys(this._currentSharerSessionTelemetry.messagesFromUnknownSender).length) {
            rt_js_bindings_1.RootToolsManager.logExternalForDDL("ScreenSharingControl: messages received from unkonwn sender => " + event.ProtocolMessages);
        }
        this._currentSharerSessionTelemetry = null;
    };
    SlimCoreElectronScreenSharingControl.prototype._sendTelemetryEvent = function (eventName, event) {
        var _this = this;
        if (this._enableControlSessionTelemetry) {
            this._logger.info("sending event " + eventName + ": ");
        }
        else {
            this._logger.info(eventName + ": ");
        }
        Object.keys(event).forEach(function (key) {
            _this._logger.info("     " + key + " => " + event[key]);
        });
        if (this._enableControlSessionTelemetry && this._telemetryService) {
            this._telemetryService.sendEvent(eventName, event);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._recordProtocolMessage = function (sender, sourceId) {
        if (this._currentViewerSessionTelemetry) {
            this._currentViewerSessionTelemetry.recordProtocolMessage(sender, sourceId);
        }
        if (this._currentSharerSessionTelemetry) {
            this._currentSharerSessionTelemetry.recordProtocolMessage(sender, sourceId);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.reportSharingSessionChangeForViewer = function (sharer, negotiationTag) {
        if (negotiationTag) {
            this._initiateViewerSessionTelemetry(sharer, negotiationTag, false);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.initControlForViewer = function (sharer, negotiationTag) {
        this._logger.info("initControlForViewer(" + negotiationTag + ")");
        var newSharingSession = (!this._sharerParticipant || this._sharerParticipant && this._sharerParticipant.id !== sharer.id || negotiationTag !== this._currentNegotiationTag);
        this._currentNegotiationTag = negotiationTag;
        this.role = 2;
        if (this._sharerParticipant) {
            if (this._sharerParticipant.id !== sharer.id) {
                this._recordViewerSessionTelemetry(function (e) { return e.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN_BY_ANOTHER_SESSION, null, negotiationTag); });
                this._logger.info("initControlForViewer() sharer switched, new sharer id=" + piiUtils.scrubMriOrOmit(sharer.id));
                this._dataChannelAvailableSent = false;
                if (this.controlState === 4) {
                    this._terminateControl(false);
                }
            }
        }
        else {
            this._logger.info("initControlForViewer() setting sharer to id=" + piiUtils.scrubMriOrOmit(sharer.id));
            this._sharerParticipant = sharer;
            this._dataChannelAvailableSent = false;
        }
        this._initiateViewerSessionTelemetry(sharer, negotiationTag, true);
        if (newSharingSession) {
            this._recordViewerSessionTelemetry(function (e) { return e.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.SHARING_STARTED); });
        }
        if (this._dataChannel && this._dataChannelActive && !this._dataChannelAvailableSent) {
            this._resetControlState();
            this.role = 2;
            this._sharerParticipant = sharer;
            this._logger.info('initControlForViewer() sending Available message to sharer');
            this._startAvailableHandshake();
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.shutdownControlForViewer = function (sharer) {
        this._logger.info('shutdownControlForViewer()');
        var shouldShutdownControlForViewer = false;
        if (!sharer ||
            (this._sharerParticipant && sharer.id === this._sharerParticipant.id)) {
            this._logger.info('shutdownControlForViewer: setting shouldShutdownControlForViewer to true');
            shouldShutdownControlForViewer = true;
        }
        if (shouldShutdownControlForViewer && this._isViewing()) {
            if (this.controlState === 1) {
                if (this._sharerParticipant) {
                    var sharerSourceId = this._getSharerDataSourceId();
                    this._sendRequest({ action: 2, terminatedReason: 6 }, sharerSourceId);
                }
                else {
                    this._logger.warn('shutdownControlForViewer: sharer participant is null');
                }
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6
                };
                if (this._requestControlPromise) {
                    this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
                }
                else {
                    this._logger.error('Unexpected, no promise could be resolved - state =ControlState.RequestSent action =shutdownControlForViewer');
                }
            }
            else if (this.controlState === 4) {
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
            this._teardownViewerRemoteControl();
            this._resetControlState();
            this._screenSharingVideoRenderer = null;
            this._disposeControlCapturer();
            if (this._terminateAvailableHandshake) {
                this._terminateAvailableHandshake(2);
            }
            this._dataChannelAvailableSent = false;
            this._finalizeViewerSessionTelemetry(VIEWER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN);
            this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._resetControlRequest = function (request) {
        this._clearControlRequest();
        this._controlRequest = request;
        this._registerParticipantListener(request);
        if (request.participantState === 3) {
            this.event('sharingIncomingControlRequest').raise(request.participant.id);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._clearControlRequest = function () {
        this._stopListeningToParticipantChanges(this._controlRequest);
        this._controlRequest = null;
    };
    SlimCoreElectronScreenSharingControl.prototype._stopListeningToParticipantChanges = function (previousRequest) {
        if (this._controlRequestSubscription) {
            this._logger.info("_stopListeningToParticipantChanges: stopping tracking changes for " + previousRequest.participant.id);
            this._controlRequestSubscription.dispose();
            this._controlRequestSubscription = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._registerParticipantListener = function (request) {
        var _this = this;
        this._logger.info("_registerParticipantListener: tracking changes for " + request.participant.id);
        this._controlRequestSubscription = request.participant.changed(function () {
            if (request.participant.state !== request.participantState) {
                request.participantState = request.participant.state;
                switch (request.participantState) {
                    case 3:
                        _this.event('sharingIncomingControlRequest').raise(request.participant.id);
                        break;
                    case 0:
                    case 5:
                    case 4:
                        _this.denyControlRequest().catch(function (err) {
                            _this._logger.info("it is ok if denyControlRequest rejects here as screensharing may have just been stopped. Err is " + err);
                        });
                        _this._logger.info("_registerParticipantListener: participant " + request.participant.id + " is no longer connected. resetting");
                        _this._clearControlRequest();
                        _this._raiseControlRequestCanceled(request);
                        break;
                    case 1:
                    case 2:
                    case 6:
                    case 7:
                        break;
                    default:
                        _this._logger.error("unexpected participantState {request.participantState} unhandled");
                }
            }
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._resetControllerParticipant = function (participantLeg) {
        var _this = this;
        if (this._controllerParticipantSubscription) {
            this._logger.info("_resetControllerParticipant: stopping tracking changes for " + this._controllerParticipant.participant.id);
            this._controllerParticipantSubscription.dispose();
            this._controllerParticipantSubscription = null;
        }
        if (participantLeg) {
            this._logger.info("_resetControllerParticipant: tracking changes for " + participantLeg.participant.id);
            this._controllerParticipantSubscription = participantLeg.participant.changed(function () {
                if (participantLeg.participant.state !== 3) {
                    _this.handleParticipantRemoved(participantLeg.participant.id);
                }
            });
        }
        this._controllerParticipant = participantLeg;
    };
    SlimCoreElectronScreenSharingControl.prototype.handleParticipantRemoved = function (participantId) {
        if (this._participantSubscriptions[participantId]) {
            this._logger.info("handleParticipantRemoved(): Stopping tracking state changes for " + participantId);
            this._participantSubscriptions[participantId].dispose();
            delete this._participantSubscriptions[participantId];
        }
        if (this._isSharing()) {
            if (this._controllerParticipant && this._controllerParticipant.participant.id === participantId) {
                this._logger.info('handleParticipantRemoved: controller left call, tearing down control session');
                this._teardownSharerRemoteControl();
                this.controlState = 0;
                this._resetControllerParticipant();
                var controlInfo = {
                    inControl: false,
                    id: participantId,
                    terminatedReason: 5
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
            this._raiseScreenSharingControlCapableEvent(false, participantId);
        }
        else {
            if (this._sharerParticipant && this._sharerParticipant.id === participantId && this.controlState === 4) {
                this._logger.info('handleParticipantRemoved: sharer left call, tearing down control session');
                this._teardownViewerRemoteControl();
                this.controlState = 0;
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 6
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.callStateChanged = function (state) {
        this._callState = state;
        this._recordViewerSessionTelemetry(function (e) { return e.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.CALL_STATE, { state: state }); }, false);
        this._recordSharerSessionTelemetry(function (e) { return e.recordEvent(SHARER_CONTROL_SESSION_OPERATIONS.CALL_STATE, { state: state }); }, false);
        if (state === 7) {
            this._handleCallDisconnected();
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._handleCallDisconnected = function () {
        this._logger.info('handleCallDisconnected()');
        if (this._isSharing()) {
            this.shutdownControlForSharer();
        }
        else {
            this.shutdownControlForViewer();
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._videoSizeChanged = function (width, height) {
        if (this._controlCapturer != null) {
            this._controlCapturer.updateVideoSize(width, height);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._onRenderStarted = function () {
        var data = { action: 11, terminatedReason: 0 };
        if (this._sharerParticipant) {
            var sharerSourceId = this._getSharerDataSourceId();
            this._sendRequest(data, sharerSourceId);
        }
        else {
            this._logger.error("Attempted to send sharing rendered message to null sharerParticipant");
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._setViewingRenderer = function (screenSharingRenderer, container) {
        var _this = this;
        try {
            this._screenSharingVideoRenderer = screenSharingRenderer;
            this._screenSharingVideoRendererSubscriptions.push(this._screenSharingVideoRenderer.on('videoSizeChanged', function (width, height) { return _this._videoSizeChanged(width, height); }));
            this._screenSharingVideoRendererSubscriptions.push(this._screenSharingVideoRenderer.on('renderStarted', function () { return _this._onRenderStarted(); }));
            this._controlCapturer = new skype_calling_utilities_1.SlimCoreElectronControlCapturer(this._logger, container);
            if (this.controlState === 4) {
                this._logger.info('_setViewingRenderer: detected local state is controlling');
                this._setupViewerRemoteControl();
            }
            else {
                this._teardownViewerRemoteControl();
            }
        }
        catch (error) {
            this._logger.error("_setViewingRenderer: unable to set _screenSharingVideoRenderer error = " + error);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._isSharing = function () {
        return (this.role === 1);
    };
    SlimCoreElectronScreenSharingControl.prototype._isViewing = function () {
        return (this.role === 2);
    };
    SlimCoreElectronScreenSharingControl.prototype._createAndAttachControlDevices = function () {
        var _this = this;
        this._logger.info('_createAndAttachControlDevices()');
        if (!SlimCoreCommon.hasCreateDataSource(this._slimcoreInstance) || !SlimCoreCommon.hasCreateDataSink(this._slimcoreInstance)) {
            this._logger.warn('createDataSource or createDataSink not implemented');
            return;
        }
        if (this._dataChannel) {
            var registerDataSource = Promise.resolve();
            var registerDataSink = Promise.resolve();
            if (!this._controlDataSource) {
                this._controlDataSource = SlimCoreCommon.createDataSource(this._slimcoreInstance, SlimCore.Enums.DataDeviceId.Control);
                this._logger.info('created Control DataSource');
                registerDataSource = this._dataChannel.registerDataSource(this._controlDataSource)
                    .then(function () { return _this._logger.info('registered Control DataSource'); })
                    .catch(function (error) { return _this._logger.error("registerDataSource threw exception: " + error); });
            }
            if (!this._controlDataSink) {
                this._controlDataSink = SlimCoreCommon.createDataSink(this._slimcoreInstance, SlimCore.Enums.DataDeviceId.Control);
                this._logger.info('created Control DataSink');
                registerDataSink = this._dataChannel.registerDataSink(this._controlDataSink)
                    .then(function () { return _this._logger.info('registered Control DataSink'); })
                    .catch(function (error) { return _this._logger.error("registerDataSink threw exception: " + error); });
            }
            Promise.all([registerDataSource, registerDataSink]).then(function () {
                _this.controlDataChannelStatus.readyForControl = true;
                _this.event('controlDataChannelStateChanged').raise(_this.controlDataChannelStatus);
            });
            this._controlDataSink.on('data', (function (args) {
                _this._controlInjector.injectRawInput(args.data, args.sourceID).catch(function (error) {
                    _this._lastInjectRawInputErrorCount++;
                    if (_this._injectRawInputErrorTimer === null) {
                        _this._injectRawInputErrorTimer = setTimeout(function () {
                            var controlError = {
                                reason: 1,
                                detail: JSON.stringify({ dataChannelId: _this._dataChannel.id, sourceId: args && args.sourceID, count: _this._lastInjectRawInputErrorCount, errorMsg: error })
                            };
                            _this.event('sharingControlError').raise(controlError);
                            _this._lastInjectRawInputErrorCount = 0;
                            _this._injectRawInputErrorTimer = null;
                        }, INPUT_RAW_ERROR_REPORTING_WAIT_TIMEOUT);
                    }
                });
            }));
        }
        else {
            this._logger.warn('_createAndAttachControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._detachAndDeleteControlDevices = function () {
        var _this = this;
        this._logger.info('_detachAndDeleteControlDevices()');
        if (this._controlDataSink) {
            this._controlDataSink.removeAllListeners('data');
        }
        if (this._dataChannel) {
            if (this._controlDataSource) {
                this._dataChannel.unregisterDataSource(this._controlDataSource)
                    .then(function () { return _this._logger.info('Control DataSource unregistered'); })
                    .catch(function (error) { return _this._logger.warn("unregisterDataSource threw exception: " + error); });
                this._controlDataSource = null;
                this._logger.info('deleted Control data source');
            }
            if (this._controlDataSink) {
                this._dataChannel.unregisterDataSink(this._controlDataSink)
                    .then(function () { return _this._logger.info('Control DataSink unregistered'); })
                    .catch(function (error) { return _this._logger.warn("unregisterDataSink threw exception: " + error); });
                this._controlDataSink = null;
                this._logger.info('deleted Control data sink');
            }
        }
        else {
            this._logger.warn('_detachAndDeleteControlDevices() null dataChannel');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.onDataChannelStatusChanged = function (dataChannelStatus) {
        var _this = this;
        return async.asap(function () { return _this._onDataChannelStatusChanged(dataChannelStatus); });
    };
    SlimCoreElectronScreenSharingControl.prototype._onDataChannelStatusChanged = function (dataChannelStatus) {
        this._logger.info("Data channel status = " + dataChannelStatus);
        this.controlDataChannelStatus.readyForControl = this.controlDataChannelStatus.readyForControl && dataChannelStatus === SlimCore.Enums.DataChannelStatus.Active;
        this.controlDataChannelStatus.state = SlimCoreElectronDataChannel_1.default._mapDataChannelStatus(dataChannelStatus);
        this.event('controlDataChannelStateChanged').raise(this.controlDataChannelStatus);
        if (dataChannelStatus === SlimCore.Enums.DataChannelStatus.Active) {
            if (this._enabled) {
                if (this._dataChannel && !this._dataChannelActive) {
                    this._dataChannelActive = true;
                    this._recordViewerSessionTelemetry(function (e) { return e.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_AVAILABLE); }, false);
                    this._recordSharerSessionTelemetry(function (e) { return e.recordEvent(SHARER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_AVAILABLE); }, false);
                    this._createAndAttachControlDevices();
                    if (this._isViewing()) {
                        if (!this._dataChannelAvailableSent) {
                            if (this._sharerParticipant) {
                                this._logger.info('_onDataChannelStatusChanged() sending Available message to sharer');
                                this._startAvailableHandshake();
                            }
                            else {
                                this._logger.error('Unexpected null _sharerParticipant trying to send Available to sharer');
                            }
                        }
                    }
                    else if (this._isSharing()) {
                        this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
                    }
                }
            }
        }
        else {
            if (this._dataChannel && this._dataChannelActive) {
                this._recordViewerSessionTelemetry(function (e) { return e.recordEvent(VIEWER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_UNAVAILABLE); }, false);
                this._recordSharerSessionTelemetry(function (e) { return e.recordEvent(SHARER_CONTROL_SESSION_OPERATIONS.DATA_CHANNEL_UNAVAILABLE); }, false);
                this._dataChannelActive = false;
                this._dataChannelAvailableSent = false;
                if (this._terminateAvailableHandshake) {
                    this._terminateAvailableHandshake(3);
                }
                this._detachAndDeleteControlDevices();
                this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
            }
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._handleAvailableRequest = function (controlMessage, sender, senderSourceId) {
        var _this = this;
        var rejectAck = false;
        var controlTerminatedReason = 0;
        if (this._enabled === false) {
            this._logger.info('feature flag is off. no need to answer the available ack');
            rejectAck = true;
            controlTerminatedReason = 9;
        }
        else if (this._availableAckEnabled === false) {
            this._logger.info('available ack is off. no need to answer the available ack');
            rejectAck = true;
            controlTerminatedReason = 9;
        }
        else {
            if (sender && sender.id) {
                if (this._allowControlForUser && typeof (this._allowControlForUser) === typeof (Function)) {
                    this._allowControlForUser(sender)
                        .then(function (allowControl) {
                        if (!allowControl) {
                            rejectAck = true;
                            controlTerminatedReason = 1;
                        }
                        _this._sendResponseToAvailableRequest(controlMessage, sender, senderSourceId, rejectAck, controlTerminatedReason);
                    });
                    return;
                }
            }
            else {
                rejectAck = true;
                controlTerminatedReason = 10;
            }
        }
        this._sendResponseToAvailableRequest(controlMessage, sender, senderSourceId, rejectAck, controlTerminatedReason);
    };
    SlimCoreElectronScreenSharingControl.prototype._sendResponseToAvailableRequest = function (controlMessage, sender, senderSourceId, rejectAck, controlTerminatedReason) {
        var _this = this;
        if (rejectAck) {
            this._logger.info("Rejecting Available for handShake:" + senderSourceId + ":" + controlMessage.handshakeId);
            this.event('controlAvailableHandshake').raise(controlMessage.handshakeId, senderSourceId, 7, this._getAvailableHandshakeTerminatedFromControlTerminated(controlTerminatedReason));
            this._sendRequest({ action: 10, terminatedReason: controlTerminatedReason, handshakeId: controlMessage.handshakeId }, senderSourceId);
        }
        else {
            this._raiseScreenSharingControlCapableEvent(true, sender.id);
            if (!this._participantSubscriptions[sender.id]) {
                this._logger.info("Tracking participant status for " + sender.id);
                this._participantSubscriptions[sender.id] = sender.changed(function () {
                    if (sender.state !== 3) {
                        _this._logger.info("Participant " + sender.id + " is not connected. removing");
                        _this.handleParticipantRemoved(sender.id);
                    }
                });
            }
            this._logger.info("Acking Available for handShake:" + senderSourceId + ":" + controlMessage.handshakeId);
            this.event('controlAvailableHandshake').raise(controlMessage.handshakeId, senderSourceId, 3);
            this._sendRequest({ action: 9, terminatedReason: 0, handshakeId: controlMessage.handshakeId }, senderSourceId);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.processProtocolMessage = function (message, sender, senderParticipantId, senderSourceId) {
        var _this = this;
        return async.asap(function () { return _this._processProtocolMessage(message, sender, senderParticipantId, senderSourceId); });
    };
    SlimCoreElectronScreenSharingControl.prototype._raiseControlRequestCanceled = function (controlRequest) {
        this.event('sharingIncomingControlRequestCancelled').raise(controlRequest.participant.id);
    };
    SlimCoreElectronScreenSharingControl.prototype._processProtocolMessage = function (message, sender, senderParticipantId, senderSourceId) {
        var controlMessage;
        this._recordProtocolMessage(sender, senderSourceId);
        try {
            controlMessage = JSON.parse(message);
        }
        catch (err) {
            this._logger.error('Error parsing controlMessage');
            return;
        }
        this._logger.info("_processProtocolMessage action=" + controlMessage.action + " sender=" + senderSourceId);
        if (!sender) {
            this._logger.warn("protocol message from unknown sender with sourceId=" + senderSourceId);
        }
        if (controlMessage.action === 0) {
            this._handleAvailableRequest(controlMessage, sender, senderSourceId);
        }
        else if (controlMessage.action === 1) {
            if (this._enabled === false) {
                this._logger.warn('Sharer control is disabled - rejecting request');
                this._sendRequest({ action: 4, terminatedReason: 9 }, senderSourceId);
            }
            else if (this._controlRequest) {
                this._logger.warn('Sharer is already processing a control request...rejecting new requests');
                this._sendRequest({ action: 4, terminatedReason: 3 }, senderSourceId);
            }
            else if (this._controllerParticipant && this._controllerParticipant.participant === sender) {
                if (this._controllerParticipant.participantId && this._controllerParticipant.participantId !== senderParticipantId) {
                    this._logger.warn("rejecting control request from second endpoint. participantId: " + senderParticipantId);
                    this._sendRequest({ action: 4, terminatedReason: 3 }, senderSourceId);
                }
                else {
                    this._logger.warn('Got control request for someone already in control');
                    this._sendRequest({ action: 3, terminatedReason: 0 }, senderSourceId);
                }
            }
            else {
                if (sender) {
                    this._resetControlRequest({ participant: sender, participantState: sender.state, participantId: senderParticipantId });
                }
                else {
                    this._logger.error('Got ControlRequest message but could not find a sender participant, ignoring');
                }
            }
        }
        else if (controlMessage.action === 3) {
            if (this.controlState === 1) {
                var sent = this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
                if (sent) {
                    this._setupViewerRemoteControl();
                    this.controlState = 4;
                    if (this._requestControlPromise) {
                        this._requestControlPromise.resolve();
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =ControlState.RequestSent action =" + controlMessage.action);
                    }
                }
                else {
                    if (this._requestControlPromise) {
                        this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: undefined, details: 'request control is accepted, but fail to send ack' })));
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =" + this.controlState + " action =" + controlMessage.action);
                    }
                }
                this._cancelRequestControlTimer();
            }
            else {
                this._logger.warn("AcceptRequest message received in controlState=" + this.controlState);
            }
        }
        else if (controlMessage.action === 4) {
            if (this.controlState === 1) {
                this.controlState = 0;
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: controlMessage.terminatedReason
                };
                if (this._requestControlPromise) {
                    this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
                }
                else {
                    this._logger.error("Unexpected, no promise could be resolved - state =ControlState.RequestSent action =" + controlMessage.action);
                }
                this._cancelRequestControlTimer();
            }
            else {
                this._logger.warn("RejectRequest message received in controlState=" + this.controlState + " reason=" + controlMessage.terminatedReason);
            }
        }
        else if (controlMessage.action === 2) {
            if (this._controlRequest) {
                var canceledRequest = this._controlRequest;
                this._clearControlRequest();
                this._raiseControlRequestCanceled(canceledRequest);
            }
        }
        else if (controlMessage.action === 6) {
            var sent = this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
            if (sent) {
                this._setupViewerRemoteControl();
                this.controlState = 4;
                var controlInfo = {
                    inControl: true,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: controlMessage.terminatedReason
                };
                this.event('sharingControlChanged').raise(controlInfo);
            }
        }
        else if (controlMessage.action === 5) {
            if (this.controlState === 2) {
                if (this._controllerParticipant && this._controllerParticipant.participant === sender) {
                    var controllerSourceId = this._getDataSourceIdForParticipantLeg(this._controllerParticipant);
                    if (senderSourceId !== controllerSourceId) {
                        this._logger.warn("acknowledging source id: " + senderSourceId + " does not match requesting source id: " + controllerSourceId);
                    }
                    this._logger.info("Setting up remote control for controller source id=" + controllerSourceId);
                    this._setupSharerRemoteControl(controllerSourceId);
                    this.controlState = 3;
                    var controlInfo = {
                        inControl: true,
                        id: this._controllerParticipant.participant.id,
                        terminatedReason: controlMessage.terminatedReason
                    };
                    this.event('sharingControlChanged').raise(controlInfo);
                    if (this._grantControlPromise) {
                        this._grantControlPromise.resolve();
                        this._cancelGrantControlTimer();
                    }
                    else if (this._acceptControlPromise) {
                        this._acceptControlPromise.resolve();
                        this._cancelAcceptControlTimer();
                    }
                    else {
                        this._logger.error("Unexpected, no promise could be resolved - state =ControlState.WaitingForControlAck action =" + controlMessage.action);
                    }
                }
                else if (sender) {
                    this._logger.warn("Ignoring ack from participant that does not match controller id = " + piiUtils.scrubMriOrOmit(sender.id));
                }
                else {
                    this._logger.warn("Ignoring ack from null participant source id = " + senderSourceId);
                }
            }
            else if (this.controlState === 5) {
                this.controlState = 0;
                this._resetControllerParticipant();
                if (this._terminateControlPromise) {
                    this._terminateControlPromise.resolve();
                    this._cancelTerminateControlTimer();
                }
                else {
                    this._logger.error("Unexpected, no promise could be resolved - state =ControlState.WaitingForTerminateAck action =" + controlMessage.action);
                }
            }
            else {
                this._logger.warn("Unexpected ack in control state = " + this.controlState);
            }
        }
        else if (controlMessage.action === 7 ||
            controlMessage.action === 8) {
            var controllerId = void 0;
            if (this._isViewing()) {
                this._teardownViewerRemoteControl();
                controllerId = LOCAL_PARTICIPANT_MRI;
            }
            else {
                this._teardownSharerRemoteControl();
                if (sender) {
                    controllerId = sender.id;
                }
                else {
                    this._logger.error('Got terminate message but could not find a sender participant!');
                }
            }
            this.controlState = 0;
            this._resetControllerParticipant();
            var controlInfo = {
                inControl: false,
                id: controllerId,
                terminatedReason: controlMessage.terminatedReason
            };
            this.event('sharingControlChanged').raise(controlInfo);
            if (controlMessage.action === 8) {
                this._sendRequest({ action: 5, terminatedReason: 0 }, senderSourceId);
            }
        }
        else if (controlMessage.action === 9) {
            if (this._terminateAvailableHandshake) {
                this._terminateAvailableHandshake(1, controlMessage.handshakeId);
            }
            this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI);
        }
        else if (controlMessage.action === 10) {
            this._recordViewerSessionTelemetry(function (e) { return e.updateOperationData(VIEWER_CONTROL_SESSION_OPERATIONS.AVAILABLE_HANDSHAKE, { nackReason: controlMessage.terminatedReason }, controlMessage.handshakeId); });
            if (controlMessage.terminatedReason === 10) {
                return;
            }
            if (this._terminateAvailableHandshake) {
                this._terminateAvailableHandshake(this._getAvailableHandshakeTerminatedFromControlTerminated(controlMessage.terminatedReason), controlMessage.handshakeId);
            }
            if (controlMessage.terminatedReason === 1) {
                this._raiseScreenSharingControlCapableEvent(true, LOCAL_PARTICIPANT_MRI, true);
            }
            else {
                this._raiseScreenSharingControlCapableEvent(false, LOCAL_PARTICIPANT_MRI);
            }
        }
        else if (controlMessage.action === 11) {
            if (this._raiseRenderedAtViewer) {
                if (sender) {
                    this._raiseRenderedAtViewer(sender.id);
                }
                else {
                    this._logger.error('Got RenderedAtViewer message but could not find a sender participant!');
                }
            }
        }
        else {
            this._logger.error("Unknown request action received on control protocol data sink, action=" + controlMessage.action);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._getAvailableHandshakeTerminatedFromControlTerminated = function (reason) {
        switch (reason) {
            case 10:
                return 6;
            case 1:
                return 7;
            case 9:
            default:
                return 0;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._sendRequest = function (data, sourceID) {
        var returnVal = false;
        var dataSource = this._protocolDataSource;
        if (sourceID < 0) {
            this._logger.error("Unexpected: invalid sourceID=" + sourceID);
            return returnVal;
        }
        if (dataSource) {
            this._logger.info("sending control message action=" + data.action + " to sourceID=" + sourceID);
            var protocolMessage = {
                type: 0,
                message: JSON.stringify(data)
            };
            try {
                var recipients = [sourceID];
                dataSource.sendData(SlimCoreCommon.stringToBuffer(JSON.stringify(protocolMessage)), recipients);
                returnVal = true;
            }
            catch (error) {
                this._logger.error("Unexpected: failure in call to sendData. Error=" + error);
                var controlError = {
                    reason: 5,
                    detail: JSON.stringify({ sourceId: sourceID, errorMsg: error })
                };
                this.event('sharingControlError').raise(controlError);
            }
        }
        else {
            this._logger.error('Unexpected: null dataSource in _sendRequest');
        }
        return returnVal;
    };
    SlimCoreElectronScreenSharingControl.prototype._resetControlState = function () {
        this._logger.info('_resetControlState()');
        this.controlState = 0;
        this._resetControllerParticipant();
        this._sharerParticipant = null;
        this._clearControlRequest();
        this._cancelRequestControlTimer();
        this._cancelAcceptControlTimer();
        this._cancelGrantControlTimer();
        this._cancelTerminateControlTimer();
    };
    SlimCoreElectronScreenSharingControl.prototype._setupSharerRemoteControl = function (sourceId) {
        var _this = this;
        this._logger.info("_setupSharerRemoteControl() sourceId=" + sourceId);
        this._setInjectorMode(1);
        this._controlInjector.allowSingleController(sourceId).catch(function (error) {
            var controlError = {
                reason: 3,
                detail: JSON.stringify({ sourceId: sourceId, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._teardownSharerRemoteControl = function () {
        var _this = this;
        this._logger.info('_teardownSharerRemoteControl()');
        this._controlInjector.allowSingleController(0).catch(function (error) {
            var controlError = {
                reason: 3,
                detail: JSON.stringify({ sourceId: 0, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
        this._setInjectorMode(0);
    };
    SlimCoreElectronScreenSharingControl.prototype._setupViewerRemoteControl = function () {
        this._logger.info('_setupViewerRemoteControl()');
        this._setCapturerMode(3);
    };
    SlimCoreElectronScreenSharingControl.prototype._teardownViewerRemoteControl = function () {
        this._logger.info('_teardownViewerRemoteControl()');
        this._setCapturerMode(0);
    };
    SlimCoreElectronScreenSharingControl.prototype._setInjectorMode = function (injectorMode) {
        var _this = this;
        this._logger.info("_setInjectorMode() mode=" + injectorMode);
        var injectorConfig = {
            mode: injectorMode,
            noMotionTimeoutMs: 0,
            noMotionSharerTimeoutMs: 0
        };
        this._controlInjector.setInjectorConfig(injectorConfig).catch(function (error) {
            var controlError = {
                reason: 0,
                detail: JSON.stringify({ mode: injectorMode, errorMsg: error })
            };
            _this.event('sharingControlError').raise(controlError);
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._clearCapturerEventSubscriptions = function () {
        this._logger.info('_clearCapturerEventSubscriptions()');
        if (this._captureEventSubscription) {
            this._captureEventSubscription.dispose();
            this._captureEventSubscription = null;
        }
        if (this._mouseControlEventSubscription) {
            this._mouseControlEventSubscription.dispose();
            this._mouseControlEventSubscription = null;
        }
        if (this._keyboardControlEventSubscription) {
            this._keyboardControlEventSubscription.dispose();
            this._keyboardControlEventSubscription = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.sendRemoteControlEvent = function (type, data) {
        if (!data) {
            this._logger.error('sendRemoteControlEvent: Invalid argument.');
            return;
        }
        switch (type) {
            case 'mouseControlEvent':
                this._sendControlEvent(skype_calling_utilities_1.SlimCoreElectronControlCapturer.formatMouseEvent(data));
                break;
            case 'keyboardControlEvent':
                this._sendControlEvent(skype_calling_utilities_1.SlimCoreElectronControlCapturer.formatKeyboardEvent(data));
                break;
            default:
                this._logger.error('sendRemoteControlEvent: Invalid type = ', type);
                return;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._sendControlEvent = function (data) {
        if (!this._controlDataSource || !this._sharerParticipant || this.controlState !== 4) {
            this._logger.error('_sendControlEvent: Data channel not set up / Not in control');
            return;
        }
        var sharerSourceId = this._getSharerDataSourceId();
        var recipients = [sharerSourceId];
        this._controlDataSource.sendData(data, recipients);
    };
    SlimCoreElectronScreenSharingControl.prototype._setCapturerMode = function (capturerMode) {
        var _this = this;
        this._logger.info("_setCapturerMode() capturerMode=" + capturerMode);
        if (this._controlCapturer) {
            this._controlCapturer.setCaptureMode(capturerMode);
            this._clearCapturerEventSubscriptions();
            if (capturerMode === 1) {
                this._captureEventSubscription = this._controlCapturer.on('ctrlCaptureEvent', (function (event) {
                    if (event === 0) {
                        _this.event('sharingRendererClicked').raise();
                    }
                }));
            }
            else if (capturerMode === 2) {
                this._captureEventSubscription = this._controlCapturer.on('ctrlCaptureEvent', (function (event) {
                    if (event === 1) {
                        _this.event('sharingRendererMouseEntering').raise();
                    }
                    else if (event === 2) {
                        _this.event('sharingRendererMouseLeaving').raise();
                    }
                }));
            }
            else if (capturerMode === 3) {
                this._mouseControlEventSubscription = this._controlCapturer.on('mouseControlEvent', (function (event) { return _this._sendControlEvent(skype_calling_utilities_1.SlimCoreElectronControlCapturer.formatMouseEvent(event)); }));
                this._keyboardControlEventSubscription = this._controlCapturer.on('keyboardControlEvent', (function (event) { return _this._sendControlEvent(skype_calling_utilities_1.SlimCoreElectronControlCapturer.formatKeyboardEvent(event)); }));
                this._captureEventSubscription = this._controlCapturer.on('ctrlCaptureEvent', (function (event) {
                    if (event === 1) {
                        _this.event('sharingRendererMouseEntering').raise();
                    }
                    else if (event === 2) {
                        _this.event('sharingRendererMouseLeaving').raise();
                    }
                }));
            }
        }
        else {
            this._logger.warn('_controlCapturer not found when trying to setup viewer capture mode');
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.setPointerImage = function (participant, base64str) {
        this._logger.warn('setPointerImage is deprecated. Use setLocalPointerImage or setRemotePointerImage');
        if (!participant) {
            return this.setLocalPointerImage(base64str);
        }
        else {
            return this.setRemotePointerImage(participant, base64str);
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.setLocalPointerImage = function (base64str) {
        if (base64str.length === 0) {
            return Promise.reject(new Error('setLocalPointerImage invalid image length'));
        }
        return this._setPointerImage(0, base64str);
    };
    SlimCoreElectronScreenSharingControl.prototype.setRemotePointerImage = function (participant, base64str) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceId, sourceIds, _i, sourceIds_1, sourceId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!participant) {
                            throw new Error('setRemotePointerImage participant is null');
                        }
                        if (base64str.length === 0) {
                            throw new Error('setRemotePointerImage invalid image length');
                        }
                        if (!!participant.enableParticipantLegToSourceIdMapping) return [3, 2];
                        sourceId = this._mapParticipantToSourceId(participant);
                        if (sourceId < 0) {
                            throw new Error('setRemotePointerImage unable to map participant to sourceId');
                        }
                        return [4, this._setPointerImage(sourceId, base64str)];
                    case 1:
                        _a.sent();
                        return [2];
                    case 2:
                        sourceIds = this._getParticipantsDataSourceIds(participant);
                        if (sourceIds.length === 0) {
                            throw new Error('setRemotePointerImage unable to map participant to sourceIds');
                        }
                        this._logger.info("set pointer image for " + sourceIds.length + " sources");
                        _i = 0, sourceIds_1 = sourceIds;
                        _a.label = 3;
                    case 3:
                        if (!(_i < sourceIds_1.length)) return [3, 6];
                        sourceId = sourceIds_1[_i];
                        return [4, this._setPointerImage(sourceId, base64str)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3, 3];
                    case 6: return [2];
                }
            });
        });
    };
    SlimCoreElectronScreenSharingControl.prototype._setPointerImage = function (sourceId, base64str) {
        if (!this._isSharing()) {
            this._logger.warn('_setPointerImage called when not sharing');
        }
        return this._controlInjector.setAvatar(SlimCoreCommon.stringToBuffer(base64str), sourceId);
    };
    SlimCoreElectronScreenSharingControl.prototype.startPointerMode = function () {
        var _this = this;
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('startPointerMode when data channel not active'));
        }
        else if (this.controlState !== 0) {
            return Promise.reject(new Error("startPointerMode called in bad control state=" + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('startPointerMode when not viewing'));
        }
        return async.asap(function () { return _this._setCapturerMode(2); });
    };
    SlimCoreElectronScreenSharingControl.prototype.stopPointerMode = function () {
        var _this = this;
        if (this.controlState !== 0) {
            return Promise.reject(new Error("stopPointerMode called in bad control state=" + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('stopPointerMode when not viewing'));
        }
        return async.asap(function () { return _this._setCapturerMode(1); });
    };
    SlimCoreElectronScreenSharingControl.prototype._startAvailableHandshake = function () {
        var _this = this;
        var sharerSourceId = this._getSharerDataSourceId();
        if (sharerSourceId < 0) {
            this._logger.warn("sharer: " + this._sharerParticipant + " has no data channel");
        }
        var handshakeId = guid_1.default();
        this._logger.info("_startAvailableHandshake() - handshakeId: " + sharerSourceId + ":" + handshakeId);
        this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, 1);
        if (this._terminateAvailableHandshake) {
            this._logger.warn('Replacing existing availble handshake');
            this._terminateAvailableHandshake(4);
        }
        this._recordViewerSessionTelemetry(function (e) { return e.recordOperation(VIEWER_CONTROL_SESSION_OPERATIONS.AVAILABLE_HANDSHAKE, handshakeId); });
        var sent = this._sendRequest({ action: 0, terminatedReason: 0, handshakeId: handshakeId }, sharerSourceId);
        if (!sent) {
            this._logger.error('Failed to send Available message to sharer, will retry after backoff');
        }
        this._dataChannelAvailableSent = true;
        this._waitForAvailableAck(handshakeId);
        this._terminateAvailableHandshake = function (reason, ackHandshakeId) {
            if (reason === void 0) { reason = 0; }
            _this._logger.info("_terminateAvailableHandshake() - handshakeId: " + sharerSourceId + ":" + handshakeId + ", status: " + reason);
            _this._recordViewerSessionTelemetry(function (e) { return e.updateOperationData(VIEWER_CONTROL_SESSION_OPERATIONS.AVAILABLE_HANDSHAKE, { tries: _this._retryAttempt }, ackHandshakeId); });
            if (reason === 1) {
                _this._recordViewerSessionTelemetry(function (e) { return e.recordOperationSuccess(VIEWER_CONTROL_SESSION_OPERATIONS.AVAILABLE_HANDSHAKE, null, '', ackHandshakeId); });
            }
            else {
                _this._recordViewerSessionTelemetry(function (e) { return e.recordOperationFailure(VIEWER_CONTROL_SESSION_OPERATIONS.AVAILABLE_HANDSHAKE, { reason: reason }, '', ackHandshakeId); });
            }
            _this._terminateAvailableHandshake = null;
            _this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, reason === 1 ? 5 : 6, reason);
            if (ackHandshakeId && ackHandshakeId !== handshakeId) {
                _this._logger.warn("AvailableSeries: Got handshake from another series - expected: " + handshakeId + ", received: " + ackHandshakeId);
            }
            if (_this._availableAckTimer) {
                clearTimeout(_this._availableAckTimer);
                _this._availableAckTimer = null;
            }
            _this._retryAttempt = 0;
        };
    };
    SlimCoreElectronScreenSharingControl.prototype._waitForAvailableAck = function (handshakeId) {
        var _this = this;
        this._logger.info('_waitForAvailableAck()');
        this._availableAckTimer = setTimeout(function () {
            _this._logger.warn("No Ack received for Available message from attempt=" + _this._retryAttempt);
            _this._availableAckTimer = null;
            var sharerSourceId = _this._getSharerDataSourceId();
            if (_this._retryAttempt <= AVAILABLE_RETRY_LIMIT) {
                _this._logger.info("Re-sending Available message handshakeId: " + sharerSourceId + ":" + handshakeId);
                _this.event('controlAvailableHandshake').raise(handshakeId, sharerSourceId, 2);
                _this._sendRequest({ action: 0, terminatedReason: 0, handshakeId: handshakeId }, sharerSourceId);
                _this._waitForAvailableAck(handshakeId);
            }
            else {
                _this._logger.error('Reached Available retry limit! Control capability will be false');
                if (_this._terminateAvailableHandshake) {
                    _this._terminateAvailableHandshake(5);
                }
                else {
                    var controlError = {
                        reason: 4,
                        detail: JSON.stringify({ sourceId: sharerSourceId, errorMsg: "Timed out after " + _this._retryAttempt + " tries" })
                    };
                    _this.event('sharingControlError').raise(controlError);
                }
            }
        }, (AVAILABLE_ACK_WAIT_TIMEOUT * ++this._retryAttempt));
    };
    SlimCoreElectronScreenSharingControl.prototype.requestControl = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('requestControl when data channel not active'));
        }
        else if (this.controlState !== 0) {
            return Promise.reject(new Error("requestControl called in bad state=" + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('requestControl when not viewing'));
        }
        else if (!this._sharerParticipant) {
            return Promise.reject(new Error('requestControl unexpected null sharer'));
        }
        if (this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has not been resolved yet while requesting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while requesting control'));
        }
        return this._requestControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._requestControl = function () {
        var _this = this;
        this._logger.info('_requestControl()');
        this._requestControlPromise = async.defer();
        var always = function () {
            _this._requestControlPromise = null;
        };
        this._requestControlPromise.promise.then(always, always);
        var sharerSourceId = this._getSharerDataSourceId();
        var sent = this._sendRequest({ action: 1, terminatedReason: 0 }, sharerSourceId);
        if (!sent) {
            var controlInfo = {
                inControl: false,
                id: LOCAL_PARTICIPANT_MRI,
                terminatedReason: 7
            };
            this._requestControlPromise.reject(new Error());
            return Promise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
        }
        this.controlState = 1;
        this._requestControlTimer = setTimeout(function () {
            if (_this.controlState === 1) {
                _this.controlState = 0;
                _this._logger.warn('No response to control request - canceling');
                var sent_1 = _this._sendRequest({ action: 2, terminatedReason: 2 }, sharerSourceId);
                if (!sent_1) {
                    _this._logger.error('fail to send the cancel control request');
                }
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 2
                };
                if (_this._requestControlPromise) {
                    _this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: 'we did not get any response to the control - terminating control' })));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.RequestSent');
                }
            }
            else {
                if (_this._requestControlPromise) {
                    _this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: undefined, details: 'request control - times out in bad state - do nothing' })));
                }
                else {
                    _this._logger.error("Unexpected, no promise could be resolved - controlState = " + _this.controlState);
                }
            }
            _this._requestControlTimer = null;
        }, CONTROL_REQUEST_WAIT_TIMEOUT);
        return this._requestControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelRequestControlTimer = function () {
        if (this._requestControlTimer) {
            if (this._requestControlPromise) {
                this._requestControlPromise.reject(new Error('cancelled by _cancelRequestControlTimer'));
            }
            clearTimeout(this._requestControlTimer);
            this._requestControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.cancelControl = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('cancelControl when data channel not active'));
        }
        else if (this.controlState !== 1) {
            return Promise.reject(new Error("cancelControl called in bad state=" + this.controlState));
        }
        else if (!this._isViewing()) {
            return Promise.reject(new Error('cancelControl when not viewing'));
        }
        else if (!this._sharerParticipant) {
            return Promise.reject(new Error('cancelControl unexpected null sharer'));
        }
        if (!this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has been resolved while cancelling control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while cancelling control'));
        }
        return this._cancelControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelControl = function () {
        this._logger.info('_cancelControl()');
        var sharerSourceId = this._getSharerDataSourceId();
        if (this.controlState === 1) {
            this._cancelRequestControlTimer();
            this.controlState = 0;
            this._logger.info('Viewer cancel the control');
            var sent = this._sendRequest({ action: 2, terminatedReason: 8 }, sharerSourceId);
            if (sent) {
                var controlInfo = {
                    inControl: false,
                    id: LOCAL_PARTICIPANT_MRI,
                    terminatedReason: 8
                };
                this._requestControlPromise.reject(new Error(JSON.stringify({ controlInfo: controlInfo, details: '' })));
            }
            else {
                return Promise.reject(new Error('fail to send cancel control request'));
            }
        }
        else {
            return Promise.reject(new Error('cancel control - in bad state - do nothing'));
        }
        return new Promise(function (resolve, reject) { resolve(); });
    };
    SlimCoreElectronScreenSharingControl.prototype.acceptControlRequest = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('acceptControlRequest when data channel not active'));
        }
        else if (!this._controlRequest) {
            return Promise.reject(new Error('acceptControlRequest while no control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('acceptControlRequest when not sharing'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while accepting control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while accepting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while accepting control'));
        }
        return this._acceptControlRequest();
    };
    SlimCoreElectronScreenSharingControl.prototype._acceptControlRequest = function () {
        var _this = this;
        this._logger.info('_acceptControlRequest()');
        this._acceptControlPromise = async.defer();
        var always = function () {
            _this._acceptControlPromise = null;
        };
        this._acceptControlPromise.promise.then(always, always);
        if (this._controllerParticipant) {
            this._logger.warn('_acceptControlRequest called while another participant already has control - terminating control');
            this._teardownSharerRemoteControl();
            var controllerSourceId = this._getDataSourceIdForParticipantLeg(this._controllerParticipant);
            var sent_2 = this._sendRequest({ action: 7, terminatedReason: 5 }, controllerSourceId);
            if (!sent_2) {
                this._logger.error('fail to send the terminateNoAck request');
            }
            this._resetControllerParticipant();
        }
        var controlRequesterSourceId = this._getDataSourceIdForParticipantLeg(this._controlRequest);
        var controlRequesterId = this._controlRequest.participant.id;
        var sent = this._sendRequest({ action: 3, terminatedReason: 0 }, controlRequesterSourceId);
        if (!sent) {
            this._logger.error('fail to send the accept control request');
            this._acceptControlPromise.reject(new Error());
            return Promise.reject(new Error('fail to send the accept control request!'));
        }
        this._resetControllerParticipant(this._controlRequest);
        this._clearControlRequest();
        this.controlState = 2;
        this._acceptControlTimer = setTimeout(function () {
            if (_this.controlState === 2) {
                _this.controlState = 0;
                _this._resetControllerParticipant();
                _this._logger.error('No ack received when accepting control request - terminating control');
                var sent_3 = _this._sendRequest({ action: 7, terminatedReason: 4 }, controlRequesterSourceId);
                if (!sent_3) {
                    _this._logger.error('fail to send the TerminateNoAck request');
                }
                var controlInfo = {
                    inControl: false,
                    id: controlRequesterId,
                    terminatedReason: 4
                };
                _this.event('sharingControlChanged').raise(controlInfo);
                if (_this._acceptControlPromise) {
                    _this._acceptControlPromise.reject(new Error('No ack received when accept control - terminating control'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForControlAck');
                }
            }
            else {
                if (_this._acceptControlPromise) {
                    _this._acceptControlPromise.reject(new Error('accept control - times out in bad state - do nothing'));
                }
                else {
                    _this._logger.error("Unexpected, no promise could be resolved - controlState = " + _this.controlState);
                }
            }
            _this._acceptControlTimer = null;
        }, CONTROL_ACK_WAIT_TIMEOUT);
        return this._acceptControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelAcceptControlTimer = function () {
        if (this._acceptControlTimer) {
            if (this._acceptControlPromise) {
                this._acceptControlPromise.reject(new Error('cancelled by _cancelAcceptControlTimer'));
            }
            clearTimeout(this._acceptControlTimer);
            this._acceptControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.denyControlRequest = function () {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('denyControlRequest when data channel not active'));
        }
        else if (!this._controlRequest) {
            return Promise.reject(new Error('denyControlRequest while no control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('denyControlRequest when not sharing'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while denying control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while denying control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while denying control'));
        }
        return this._denyControlRequest();
    };
    SlimCoreElectronScreenSharingControl.prototype._denyControlRequest = function () {
        this._logger.info('_denyControlRequest()');
        var controlRequesterSourceId = this._getDataSourceIdForParticipantLeg(this._controlRequest);
        this._clearControlRequest();
        var sent = this._sendRequest({ action: 4, terminatedReason: 1 }, controlRequesterSourceId);
        if (!sent) {
            return Promise.reject(new Error('fail to send the deny control requst'));
        }
        return new Promise(function (resolve, reject) { resolve(); });
    };
    SlimCoreElectronScreenSharingControl.prototype.grantControl = function (participant) {
        if (!this._dataChannelActive) {
            return Promise.reject(new Error('grantControl when data channel not active'));
        }
        else if (this._controlRequest) {
            return Promise.reject(new Error('grantControl called while control request pending'));
        }
        else if (!this._isSharing()) {
            return Promise.reject(new Error('grantControl when not sharing'));
        }
        else if (!participant) {
            return Promise.reject(new Error('grantControl null participant'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while granting control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while granting control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while granting control'));
        }
        return this._grantControl(participant);
    };
    SlimCoreElectronScreenSharingControl.prototype._grantControl = function (participant) {
        var _this = this;
        this._logger.info('_grantControl()');
        this._grantControlPromise = async.defer();
        var always = function () {
            _this._grantControlPromise = null;
        };
        this._grantControlPromise.promise.then(always, always);
        if (this.controlState === 3) {
            if (this._controllerParticipant.participant === participant) {
                this._logger.warn('grantControl called for participant who already has control');
                this._grantControlPromise.resolve();
                return new Promise(function (resolve, reject) { resolve(); });
            }
            else {
                this._logger.warn('_grantControl called while another participant already has control - terminating control');
                this._teardownSharerRemoteControl();
                var controllerSourceId = this._getDataSourceIdForParticipantLeg(this._controllerParticipant);
                var sent_4 = this._sendRequest({ action: 7, terminatedReason: 5 }, controllerSourceId);
                if (!sent_4) {
                    this._logger.error('fail to send the terminateNoAck request');
                }
            }
        }
        var participantSourceId = this._mapParticipantToSourceId(participant);
        var sent = this._sendRequest({ action: 6, terminatedReason: 0 }, participantSourceId);
        if (!sent) {
            this._logger.error('fail to send the grant control request');
            this._grantControlPromise.reject(new Error());
            return Promise.reject(new Error('fail to send the grant control request!'));
        }
        var participantId = this._getParticipantIdForDataSourceId(participant, participantSourceId);
        this._resetControllerParticipant({ participant: participant, participantState: participant.state, participantId: participantId });
        this.controlState = 2;
        this._grantControlTimer = setTimeout(function () {
            if (_this.controlState === 2) {
                _this.controlState = 0;
                _this._resetControllerParticipant();
                _this._logger.error('No ack received when granting control - terminating control');
                var sent_5 = _this._sendRequest({ action: 7, terminatedReason: 4 }, participantSourceId);
                if (!sent_5) {
                    _this._logger.error('fail to send the terminateNoAck request');
                }
                if (_this._grantControlPromise) {
                    _this._grantControlPromise.reject(new Error('No ack received when granting control - terminating control'));
                }
                else {
                    _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForControlAck');
                }
            }
            else {
                if (_this._grantControlPromise) {
                    _this._grantControlPromise.reject(new Error('grant control - times out in bad state - do nothing'));
                }
                else {
                    _this._logger.error("Unexpected, no promise could be resolved - controlState = " + _this.controlState);
                }
            }
            _this._grantControlTimer = null;
        }, CONTROL_ACK_WAIT_TIMEOUT);
        return this._grantControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelGrantControlTimer = function () {
        if (this._grantControlTimer) {
            if (this._grantControlPromise) {
                this._grantControlPromise.reject(new Error('cancelled by _cancelGrantControlTimer'));
            }
            clearTimeout(this._grantControlTimer);
            this._grantControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._mapParticipantToSourceId = function (participant) {
        if (this._dataChannel) {
            return participant.getSourceIdForMediaType(4);
        }
        else {
            this._logger.error('Null data channel cannot map participant to source id');
            return -1;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._getParticipantsDataSourceIds = function (participant) {
        var result = [];
        try {
            if (participant && participant.endpoints && participant.endpoints.endpointDetails) {
                if (participant.endpoints.endpointDetails.length === 1) {
                    var endpoint = participant.endpoints.endpointDetails[0];
                    if (!endpoint || !endpoint.mediaStreams) {
                        result.push(SlimCoreElectronDataChannel_1.DATA_SOURCE_ID_ANY);
                        return result;
                    }
                }
                for (var _i = 0, _a = participant.endpoints.endpointDetails; _i < _a.length; _i++) {
                    var endpoint = _a[_i];
                    if (endpoint && endpoint.mediaStreams) {
                        for (var _b = 0, _c = endpoint.mediaStreams; _b < _c.length; _b++) {
                            var stream = _c[_b];
                            if (SlimCoreCommon.mapMediaTypeStringToMediaType(stream.type) === 4) {
                                result.push(stream.sourceId);
                                if (result.length >= 8) {
                                    this._logger.error('excessive amount of data streams');
                                    return result;
                                }
                                break;
                            }
                        }
                    }
                }
            }
        }
        catch (error) {
            this._logger.error("_getParticipantsDataSourceIds caught exception error=" + error);
        }
        return result;
    };
    SlimCoreElectronScreenSharingControl.prototype._getParticipantIdForDataSourceId = function (participant, sourceId) {
        var p = participant;
        return p.getParticipantIdForSourceId(4, sourceId);
    };
    SlimCoreElectronScreenSharingControl.prototype._getDataSourceIdForParticipantId = function (participant, participantId) {
        if (this._dataChannel) {
            var p = participant;
            return p.getSourceId(participantId, 4);
        }
        else {
            this._logger.error('Null data channel cannot map participant to source id');
            return -1;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._getDataSourceIdForParticipantLeg = function (participantLeg) {
        return this._getDataSourceIdForParticipantId(participantLeg.participant, participantLeg.participantId);
    };
    SlimCoreElectronScreenSharingControl.prototype._getSharerDataSourceId = function () {
        var p = this._sharerParticipant;
        var participantId = p.getSharingParticipantLeg();
        if (!participantId) {
            this._logger.warn('unable to identify the sharer participantId, falling back to first data channel');
            return this._mapParticipantToSourceId(this._sharerParticipant);
        }
        return this._getDataSourceIdForParticipantId(this._sharerParticipant, participantId);
    };
    SlimCoreElectronScreenSharingControl.prototype.terminateControl = function () {
        if (this._isViewing()) {
            if (this.controlState !== 4) {
                return Promise.reject(new Error('terminateControl called while not in control'));
            }
            else if (!this._sharerParticipant) {
                return Promise.reject(new Error('terminateControl called but _sharerParticipant is null'));
            }
        }
        else if (this._isSharing()) {
            if (!this._controllerParticipant) {
                return Promise.reject(new Error('terminateControl called but controllerParticipant is null'));
            }
        }
        else {
            return Promise.reject(new Error('terminateControl called but not sharing nor viewing'));
        }
        if (this._requestControlPromise) {
            return Promise.reject(new Error('request control promise has not been resolved yet while terminating control'));
        }
        if (this._acceptControlPromise) {
            return Promise.reject(new Error('accept control promise has not been resolved yet while terminating control'));
        }
        if (this._grantControlPromise) {
            return Promise.reject(new Error('grant control promise has not been resolved yet while terminating control'));
        }
        if (this._terminateControlPromise) {
            return Promise.reject(new Error('terminate control promise has not been resolved yet while terminating control'));
        }
        return this._terminateControl();
    };
    SlimCoreElectronScreenSharingControl.prototype._terminateControl = function (waitForAck) {
        var _this = this;
        if (waitForAck === void 0) { waitForAck = true; }
        this._logger.info('_terminateControl()');
        this._terminateControlPromise = async.defer();
        var always = function () {
            _this._terminateControlPromise = null;
        };
        this._terminateControlPromise.promise.then(always, always);
        var reason = 0;
        var controlAction = waitForAck ? 8 : 7;
        var recipientSourceId;
        var controllerId;
        if (this._isViewing()) {
            if (this.controlState === 4) {
                this._teardownViewerRemoteControl();
                reason = 6;
                recipientSourceId = this._getSharerDataSourceId();
                controllerId = LOCAL_PARTICIPANT_MRI;
            }
            else {
                this._logger.error('Local viewer called terminateControl when not controlling');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('Local viewer called terminateControl when not controlling'));
            }
        }
        else {
            if (this.controlState === 3 &&
                this._controllerParticipant) {
                this._teardownSharerRemoteControl();
                reason = 5;
                recipientSourceId = this._getDataSourceIdForParticipantLeg(this._controllerParticipant);
                controllerId = this._controllerParticipant.participant.id;
            }
            else {
                this._logger.error('Local sherer called terminateControl when no one is in control');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('Local sherer called terminateControl when no one is in control'));
            }
        }
        var sent = this._sendRequest({ action: controlAction, terminatedReason: reason }, recipientSourceId);
        if (!sent) {
            if (waitForAck) {
                this._logger.error('fail to send the terminate control request');
                this._terminateControlPromise.reject(new Error());
                return Promise.reject(new Error('fail to send the grant control request!'));
            }
            else {
                this._logger.error('fail to send the terminateNoAck request');
            }
        }
        this.controlState = waitForAck ? 5 : 0;
        var controlInfo = {
            inControl: false,
            id: controllerId,
            terminatedReason: reason
        };
        this.event('sharingControlChanged').raise(controlInfo);
        if (waitForAck) {
            this._terminateControlTimer = setTimeout(function () {
                if (_this.controlState === 5) {
                    _this.controlState = 0;
                    _this._resetControllerParticipant();
                    _this._logger.error('No ack received when terminating control - resending terminate request');
                    var sent_6 = _this._sendRequest({ action: 7, terminatedReason: 4 }, recipientSourceId);
                    if (!sent_6) {
                        _this._logger.error('fail to send the terminateNoAck request');
                    }
                    if (_this._terminateControlPromise) {
                        _this._terminateControlPromise.reject(new Error('No ack received when terminating control - resending terminate request'));
                    }
                    else {
                        _this._logger.error('Unexpected, no promise could be resolved - controlState = ControlState.WaitingForTerminateAck');
                    }
                }
                else {
                    if (_this._terminateControlPromise) {
                        _this._terminateControlPromise.reject(new Error('terminate control - times out in bad state - do nothing'));
                    }
                    else {
                        _this._logger.error("Unexpected, no promise could be resolved - controlState = " + _this.controlState);
                    }
                }
                _this._terminateControlTimer = null;
            }, CONTROL_ACK_WAIT_TIMEOUT);
        }
        else {
            this._terminateControlPromise.resolve();
            return new Promise(function (resolve, reject) { resolve(); });
        }
        return this._terminateControlPromise.promise;
    };
    SlimCoreElectronScreenSharingControl.prototype._cancelTerminateControlTimer = function () {
        if (this._terminateControlTimer) {
            if (this._terminateControlPromise) {
                this._terminateControlPromise.reject(new Error('cancelled by _cancelTerminateControlTimer'));
            }
            clearTimeout(this._terminateControlTimer);
            this._terminateControlTimer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype._disposeControlCapturer = function () {
        this._logger.info('_disposeControlCapturer');
        this._clearCapturerEventSubscriptions();
        if (this._controlCapturer) {
            this._controlCapturer.dispose();
            this._controlCapturer = null;
        }
    };
    SlimCoreElectronScreenSharingControl.prototype.dispose = function () {
        this._logger.info('SlimCoreElectronScreenSharingControl.dispose()');
        this._detachAndDeleteControlDevices();
        this._resetControlState();
        if (this._dataChannel) {
            this._dataChannel = null;
        }
        this._disposeRenderer();
        this._cancelRequestControlTimer();
        this._cancelAcceptControlTimer();
        this._cancelGrantControlTimer();
        this._cancelTerminateControlTimer();
        if (this._terminateAvailableHandshake) {
            this._terminateAvailableHandshake(2);
        }
        this._resetParticipantSubscriptions();
        this._finalizeViewerSessionTelemetry(VIEWER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN);
        this._finalizeSharerSessionTelemetry(SHARER_CONTROL_SESSION_OPERATIONS.SESSION_SHUTDOWN);
        _super.prototype.dispose.call(this);
    };
    return SlimCoreElectronScreenSharingControl;
}(SlimCoreElectronBase_1.default));
exports.default = SlimCoreElectronScreenSharingControl;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(1));
	else if(typeof define === 'function' && define.amd)
		define("skype-calling-utilities", ["lodash"], factory);
	else if(typeof exports === 'object')
		exports["skype-calling-utilities"] = factory(require("lodash"));
	else
		root["skype-calling-utilities"] = factory(root["lodash"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_4__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var observableBase_1 = __webpack_require__(2);
var MOUSE_EVENT_SIZE = 7;
var KEYBOARD_EVENT_SIZE = 3;
var CTRL_MOUSE_MAXPOS = 65535;
var POLL_TIME = 3000;
var REACT_TIME = 250;
var CTRL_VK_MENU = 0x12;
var CTRL_VK_CONTROL = 0x11;
var CTRL_VK_SHIFT = 0x10;
var CTLR_VK_WINCMD = 0x5B;
var SlimCoreElectronControlCapturer = (function (_super) {
    __extends(SlimCoreElectronControlCapturer, _super);
    function SlimCoreElectronControlCapturer(_logger, _element, _captureRegionPreserveAspectRatio) {
        if (_captureRegionPreserveAspectRatio === void 0) { _captureRegionPreserveAspectRatio = true; }
        var _this = _super.call(this) || this;
        _this._logger = _logger;
        _this._element = _element;
        _this._captureRegionPreserveAspectRatio = _captureRegionPreserveAspectRatio;
        _this._mouseMoveCount = 0;
        _this._isMouseOnRenderer = false;
        _this._captureMode = 0;
        _this._pollTimerID = 0;
        _this._resizeTimerID = 0;
        _this._handleResizeEvents = function () {
            clearTimeout(_this._resizeTimerID);
            _this._resizeTimerID = window.setTimeout(function () { return _this.updateCaptureRegion(); }, REACT_TIME);
        };
        _this._handleMouseLeave = function (event) {
            if (!_this._isOnScreenContent(event) && _this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(2);
                _this._logger.info('Mouse leaving render region');
            }
            _this._isMouseOnRenderer = false;
        };
        _this._handleMouseEnter = function (event) {
            if (!_this._isOnScreenContent(event)) {
                return;
            }
            _this._isMouseOnRenderer = true;
            _this._raiseCaptureEvent(1);
            _this._logger.info('Mouse entering render region');
        };
        _this._handleLosingFocus = function (event) {
            _this._syncKeyStates(true);
        };
        _this._handleClick = function (event) {
            if (!_this._isOnScreenContent(event)) {
                return;
            }
            _this._raiseCaptureEvent(0);
            _this._logger.info('Mouse clicked');
        };
        _this._handleMouseMove = function (event) {
            if (!_this._isOnScreenContent(event) && _this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(2);
                _this._isMouseOnRenderer = false;
                _this._logger.info('Mouse leaving render region');
                return;
            }
            else if (_this._isOnScreenContent(event) && !_this._isMouseOnRenderer) {
                _this._raiseCaptureEvent(1);
                _this._isMouseOnRenderer = true;
                _this._logger.info('Mouse entering render region');
            }
            if (_this._captureMode !== 2 && _this._captureMode !== 3) {
                return;
            }
            _this._mouseMoveCount++;
            if (!_this._isOnScreenContent(event) || _this._mouseMoveCount % 2 === 0) {
                return;
            }
            var data = {
                type: 0
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleMouseDown = function (event) {
            if (_this._captureMode !== 2 && _this._captureMode !== 3) {
                return;
            }
            if (!_this._isOnScreenContent(event)) {
                return;
            }
            var data = {
                type: 2,
                buttonType: convertButton(event.button),
                buttonDown: true
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleMouseUp = function (event) {
            if (_this._captureMode !== 2 && _this._captureMode !== 3) {
                return;
            }
            if (!_this._isOnScreenContent(event)) {
                return;
            }
            var data = {
                type: 2,
                buttonType: convertButton(event.button),
                buttonDown: false
            };
            _this._normalizeMousePosition(event, data);
            _this._raiseMouseEvent(data);
        };
        _this._handleKeyDown = function (event) {
            _this._raiseKeyboardEvent({
                codeType: 1,
                code: event.keyCode,
                repeat: event.repeat,
                keyUp: false
            });
            event.stopPropagation();
            event.preventDefault();
        };
        _this._handleKeyUp = function (event) {
            _this._raiseKeyboardEvent({
                codeType: 1,
                code: event.keyCode,
                repeat: event.repeat,
                keyUp: true
            });
            event.stopPropagation();
            event.preventDefault();
        };
        _this._handleWheel = function (event) {
            _this._raiseMouseEvent({
                type: 1,
                wheelRotation: event.deltaY > 0 ? -120 : 120
            });
        };
        _this._handleContextMenu = function (event) {
            event.preventDefault();
        };
        _this._ensureCanReceiveKeyboardInput();
        if (_this._element.ownerDocument && _this._element.ownerDocument.defaultView) {
            _this._element.ownerDocument.defaultView.addEventListener('resize', _this._handleResizeEvents, false);
        }
        _this._captureRegion = { left: 0, top: 0, width: _this._element.clientWidth, height: _this._element.clientHeight };
        _this._videoSize = { width: 640, height: 360 };
        _this._origElementSize = { width: 0, height: 0 };
        _this._checkElementSize();
        return _this;
    }
    Object.defineProperty(SlimCoreElectronControlCapturer.prototype, "captureMode", {
        get: function () {
            return this._captureMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimCoreElectronControlCapturer.prototype, "captureRegion", {
        get: function () {
            return this._captureRegion;
        },
        enumerable: true,
        configurable: true
    });
    SlimCoreElectronControlCapturer.prototype.dispose = function () {
        this._logger.info('Disposing of Control Capturer');
        window.clearTimeout(this._pollTimerID);
        if (this._element.ownerDocument && this._element.ownerDocument.defaultView) {
            this._element.ownerDocument.defaultView.removeEventListener('resize', this._handleResizeEvents, false);
        }
    };
    SlimCoreElectronControlCapturer.prototype.updateVideoSize = function (width, height) {
        this._videoSize.width = width;
        this._videoSize.height = height;
        this.updateCaptureRegion();
    };
    SlimCoreElectronControlCapturer.prototype.updateCaptureRegion = function () {
        if (this._captureRegionPreserveAspectRatio) {
            this._captureRegion.width = this._element.clientWidth;
            this._captureRegion.height = this._element.clientWidth * this._videoSize.height / this._videoSize.width;
            if (this._captureRegion.height > this._element.clientHeight) {
                this._captureRegion.width = this._element.clientHeight * this._videoSize.width / this._videoSize.height;
                this._captureRegion.height = this._element.clientHeight;
                this._captureRegion.left = (this._element.clientWidth - this._captureRegion.width) / 2;
                this._captureRegion.top = 0;
            }
            else {
                this._captureRegion.left = 0;
                this._captureRegion.top = (this._element.clientHeight - this._captureRegion.height) / 2;
            }
        }
        else {
            this._captureRegion.width = this._element.clientWidth;
            this._captureRegion.height = this._element.clientHeight;
            this._captureRegion.top = 0;
            this._captureRegion.left = 0;
        }
    };
    SlimCoreElectronControlCapturer.prototype.setCaptureMode = function (mode) {
        if (this._captureMode === 3 && mode !== 3) {
            this._syncKeyStates(true);
        }
        this._captureMode = mode;
        if (mode !== 0) {
            this._element.addEventListener('click', this._handleClick);
            this._element.addEventListener('pointermove', this._handleMouseMove);
            this._element.addEventListener('pointerdown', this._handleMouseDown);
            this._element.addEventListener('pointerup', this._handleMouseUp);
            this._element.addEventListener('pointerenter', this._handleMouseEnter);
            this._element.addEventListener('pointerleave', this._handleMouseLeave);
            if (mode === 3) {
                this._element.addEventListener('wheel', this._handleWheel);
                this._element.addEventListener('keydown', this._handleKeyDown);
                this._element.addEventListener('keyup', this._handleKeyUp);
                this._element.addEventListener('contextmenu', this._handleContextMenu);
                this._element.addEventListener('blur', this._handleLosingFocus);
            }
            else {
                this._element.removeEventListener('wheel', this._handleWheel);
                this._element.removeEventListener('keydown', this._handleKeyDown);
                this._element.removeEventListener('keyup', this._handleKeyUp);
                this._element.removeEventListener('contextmenu', this._handleContextMenu);
                this._element.removeEventListener('blur', this._handleLosingFocus);
            }
        }
        else {
            this._element.removeEventListener('pointermove', this._handleMouseMove);
            this._element.removeEventListener('pointerdown', this._handleMouseDown);
            this._element.removeEventListener('pointerup', this._handleMouseUp);
            this._element.removeEventListener('pointerenter', this._handleMouseEnter);
            this._element.removeEventListener('pointerleave', this._handleMouseLeave);
            this._element.removeEventListener('click', this._handleClick);
            this._element.removeEventListener('wheel', this._handleWheel);
            this._element.removeEventListener('keydown', this._handleKeyDown);
            this._element.removeEventListener('keyup', this._handleKeyUp);
            this._element.removeEventListener('contextmenu', this._handleContextMenu);
            this._element.removeEventListener('blur', this._handleLosingFocus);
        }
    };
    SlimCoreElectronControlCapturer.prototype._ensureCanReceiveKeyboardInput = function () {
        this._element.tabIndex = this._element.tabIndex;
    };
    SlimCoreElectronControlCapturer.prototype._checkElementSize = function () {
        var _this = this;
        if (this._origElementSize.width !== this._element.clientWidth || this._origElementSize.height !== this._element.clientHeight) {
            this.updateCaptureRegion();
            this._origElementSize.width = this._element.clientWidth;
            this._origElementSize.height = this._element.clientHeight;
        }
        this._pollTimerID = window.setTimeout(function () { return _this._checkElementSize(); }, POLL_TIME);
    };
    SlimCoreElectronControlCapturer.prototype._raiseMouseEvent = function (data) {
        this.event('mouseControlEvent').raise(data);
    };
    SlimCoreElectronControlCapturer.prototype._raiseKeyboardEvent = function (data) {
        this.event('keyboardControlEvent').raise(data);
    };
    SlimCoreElectronControlCapturer.prototype._raiseCaptureEvent = function (event) {
        this.event('ctrlCaptureEvent').raise(event);
    };
    SlimCoreElectronControlCapturer.prototype._normalizeMousePosition = function (event, data) {
        data.xPos = (event.offsetX - this._captureRegion.left) / this._captureRegion.width * CTRL_MOUSE_MAXPOS;
        data.yPos = (event.offsetY - this._captureRegion.top) / this._captureRegion.height * CTRL_MOUSE_MAXPOS;
    };
    SlimCoreElectronControlCapturer.prototype._isOnScreenContent = function (event) {
        var minX = this._captureRegion.left;
        var maxX = this._captureRegion.left + this._captureRegion.width;
        var minY = this._captureRegion.top;
        var maxY = this._captureRegion.top + this._captureRegion.height;
        return (minX <= event.offsetX && event.offsetX < maxX && minY <= event.offsetY && event.offsetY < maxY);
    };
    SlimCoreElectronControlCapturer.prototype._syncKeyStates = function (captureWindowLoseFocus) {
        this._raiseKeyboardEvent({
            codeType: 1,
            code: CTRL_VK_CONTROL,
            repeat: false,
            keyUp: captureWindowLoseFocus
        });
        this._raiseKeyboardEvent({
            codeType: 1,
            code: CTRL_VK_SHIFT,
            repeat: false,
            keyUp: captureWindowLoseFocus
        });
        this._raiseKeyboardEvent({
            codeType: 1,
            code: CTRL_VK_MENU,
            repeat: false,
            keyUp: captureWindowLoseFocus
        });
        this._raiseKeyboardEvent({
            codeType: 1,
            code: CTLR_VK_WINCMD,
            repeat: false,
            keyUp: captureWindowLoseFocus
        });
        this._logger.info('Synced Key states.');
    };
    SlimCoreElectronControlCapturer.formatMouseEvent = function (data) {
        if (!data) {
            return new Uint8Array(0);
        }
        if (!data.buttonType) {
            data.buttonType = 0;
        }
        if (!data.xPos) {
            data.xPos = 0;
        }
        if (!data.yPos) {
            data.yPos = 0;
        }
        if (!data.wheelRotation) {
            data.wheelRotation = 0;
        }
        var buffer = new ArrayBuffer(MOUSE_EVENT_SIZE);
        var dataView = new DataView(buffer);
        var type = (data.type & 3) << 0;
        var buttonType = (data.buttonType & 7) << 2;
        var fButtonDown = (data.buttonDown ? 1 : 0) << 5;
        var fWheelButtonDown = (data.wheelButtonDown ? 1 : 0) << 6;
        var reserved = 0;
        dataView.setUint8(0, 1);
        dataView.setUint8(1, type | buttonType | fButtonDown | fWheelButtonDown | reserved);
        dataView.setUint16(2, data.xPos, true);
        dataView.setUint16(4, data.yPos, true);
        dataView.setUint8(6, data.wheelRotation);
        return new Uint8Array(buffer);
    };
    SlimCoreElectronControlCapturer.formatKeyboardEvent = function (data) {
        var buffer = new ArrayBuffer(KEYBOARD_EVENT_SIZE);
        var dataView = new DataView(buffer);
        var codeType = (data.codeType & 3) << 0;
        var reserved = 0;
        var fKeyUp = (data.keyUp ? 1 : 0) << 4;
        var fRepeat = (data.repeat ? 1 : 0) << 5;
        var fExtended = 0;
        var fExtended1 = 0;
        dataView.setUint8(0, 0);
        dataView.setUint8(1, codeType | reserved | fKeyUp | fRepeat | fExtended | fExtended1);
        dataView.setUint8(2, data.code);
        return new Uint8Array(buffer);
    };
    return SlimCoreElectronControlCapturer;
}(observableBase_1.default));
exports.SlimCoreElectronControlCapturer = SlimCoreElectronControlCapturer;
function convertButton(button) {
    switch (button) {
        case 0:
            return 0;
        case 2:
            return 1;
        case 1:
            return 2;
        default:
            return undefined;
    }
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(3);
var ObservableBase = (function (_super) {
    __extends(ObservableBase, _super);
    function ObservableBase(logger) {
        return _super.call(this, logger) || this;
    }
    ObservableBase.prototype.changed = function (callback) {
        return this.subscribe({
            changed: callback,
            on: undefined
        });
    };
    ObservableBase.prototype.on = function (eventName, callback) {
        return this.subscribe({
            changed: undefined,
            on: {
                name: String(eventName),
                handler: this._toEventCallback(callback)
            }
        });
    };
    ObservableBase.prototype.once = function (eventName, callback, causeId) {
        var _this = this;
        var subscription;
        var onceSubscription = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            subscription.dispose(causeId);
            _this._toEventCallback(callback).apply(void 0, args);
        };
        return subscription = this.on(eventName, this._fromEventCallback(onceSubscription));
    };
    ObservableBase.prototype.raiseChanged = function () {
        this.raiseEvents(function (callback) { return callback.changed && callback.changed(); });
    };
    ObservableBase.prototype.event = function (eventName) {
        var _this = this;
        return {
            raise: this._fromEventCallback(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this._raiseEventImpl.apply(_this, [String(eventName)].concat(args));
            })
        };
    };
    ObservableBase.prototype._raiseEventImpl = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.raiseEvents(function (callback) {
            var _a;
            return callback.on && callback.on.name === eventName && (_a = callback.on).handler.apply(_a, args);
        });
    };
    ObservableBase.prototype._toEventCallback = function (callback) {
        return callback;
    };
    ObservableBase.prototype._fromEventCallback = function (callback) {
        return callback;
    };
    return ObservableBase;
}(events_1.EventSourceImpl));
exports.default = ObservableBase;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(4);
var EventSourceImpl = (function () {
    function EventSourceImpl(logger) {
        this.subscriptions = [];
        this.eventLogger = logger;
    }
    EventSourceImpl.prototype.subscribe = function (eventHandler) {
        return new EventSubscriptionImpl(this.subscriptions, eventHandler);
    };
    EventSourceImpl.prototype.dispose = function (causeId) {
        this.subscriptions = [];
    };
    EventSourceImpl.prototype.raiseEvents = function (exec) {
        var _this = this;
        var subscriptions = this.subscriptions.slice();
        subscriptions.forEach(function (subscription) {
            try {
                subscription.eventHandler !== undefined && exec(subscription.eventHandler);
            }
            catch (e) {
                if (_this.eventLogger && _this.eventLogger.warn) {
                    _this.eventLogger.warn('Event handler exception caught!', e);
                }
            }
        });
    };
    return EventSourceImpl;
}());
exports.EventSourceImpl = EventSourceImpl;
var EventSubscriptionImpl = (function () {
    function EventSubscriptionImpl(subscriptions, eventHandler) {
        this.subscriptions = subscriptions;
        this.eventHandler = eventHandler;
        this.subscriptions.push(this);
    }
    EventSubscriptionImpl.prototype.dispose = function () {
        var _this = this;
        _.remove(this.subscriptions, function (subscription) { return subscription === _this; });
        this.eventHandler = undefined;
    };
    return EventSubscriptionImpl;
}());


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ })
/******/ ]);
});


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreElectronBindingManager = (function () {
    function SlimCoreElectronBindingManager(_create, _release, _logger) {
        this._create = _create;
        this._release = _release;
        this._logger = _logger;
        this._bindingMap = {};
        this._logger.info('BindingManager created');
    }
    SlimCoreElectronBindingManager.prototype.acquire = function (owner, videoObjectId) {
        var _this = this;
        if (!this._bindingMap[videoObjectId] || this._bindingMap[videoObjectId].releasePromise) {
            var chained = false;
            var prequisitePromise = void 0;
            if (this._bindingMap[videoObjectId]) {
                prequisitePromise = this._bindingMap[videoObjectId].releasePromise.catch(function (e) { return _this._logger.info("Release binding error: " + e); });
                chained = true;
            }
            else {
                prequisitePromise = Promise.resolve();
            }
            var createPromise = prequisitePromise.then(function () { return _this._create(videoObjectId); }).then(function (binding) {
                return binding;
            }).catch(function (e) {
                delete _this._bindingMap[videoObjectId];
                throw e;
            });
            this._bindingMap[videoObjectId] = { createPromise: createPromise, owners: [], chained: chained };
        }
        this._bindingMap[videoObjectId].owners.push(owner);
        return this._bindingMap[videoObjectId].createPromise;
    };
    SlimCoreElectronBindingManager.prototype.release = function (owner, videoObjectId) {
        return __awaiter(this, void 0, void 0, function () {
            var binding, index;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._bindingMap[videoObjectId]) return [3, 2];
                        return [4, this._bindingMap[videoObjectId].createPromise];
                    case 1:
                        binding = _a.sent();
                        index = this._bindingMap[videoObjectId].owners.indexOf(owner);
                        if (index > -1) {
                            this._bindingMap[videoObjectId].owners.splice(index, 1);
                        }
                        if (this._bindingMap[videoObjectId].owners.length === 0) {
                            this._bindingMap[videoObjectId].releasePromise = this._release(videoObjectId, binding)
                                .then(function () {
                                if (!_this._bindingMap[videoObjectId].chained) {
                                    delete _this._bindingMap[videoObjectId];
                                }
                            });
                            return [2, this._bindingMap[videoObjectId].releasePromise];
                        }
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    return SlimCoreElectronBindingManager;
}());
exports.SlimCoreElectronBindingManager = SlimCoreElectronBindingManager;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rt_js_bindings_1 = __webpack_require__(7);
var tscallingLogger_1 = __webpack_require__(52);
var ulLogAppender_1 = __webpack_require__(53);
var ElectronRootToolsManagerDelegate_1 = __webpack_require__(54);
function initDelegate(slimcore, config) {
    if (!rt_js_bindings_1.RootToolsManager.isDelegateSet()) {
        var rtDelegate = new ElectronRootToolsManagerDelegate_1.RootToolsManagerDelegate(slimcore, config.logger);
        rt_js_bindings_1.RootToolsManager.setDelegate(rtDelegate);
    }
}
exports.initDelegate = initDelegate;
function patchLogger(config) {
    if (!rt_js_bindings_1.RootToolsManager.isDelegateSet()) {
        if (config.logger) {
            var redirectingAppender = new ulLogAppender_1.RedirectingLogAppender(config.logger);
            rt_js_bindings_1.LogFactory.instance().addAppender(redirectingAppender);
        }
    }
    config.logger = new tscallingLogger_1.TsCallingLogger('JS.TsCalling.Electron', false);
}
exports.patchLogger = patchLogger;
function deinitLogging() {
    rt_js_bindings_1.RootToolsManager.stopAsyncOperations();
}
exports.deinitLogging = deinitLogging;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rt_js_bindings_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(1);
var TsCallingLogger = (function () {
    function TsCallingLogger(ulLogComponent, ulSafeComponent, prefix) {
        if (prefix === void 0) { prefix = ''; }
        this.ulLogComponent = ulLogComponent;
        this.ulSafeComponent = ulSafeComponent;
        this._getPrefix = lodash_1.isFunction(prefix) ? prefix : (function () { return prefix; });
        this.logComponent = rt_js_bindings_1.LogFactory.instance().component(this.ulLogComponent);
        rt_js_bindings_1.LogFactory.instance().declareComponentSafe(this.ulLogComponent, ulSafeComponent);
    }
    TsCallingLogger.prototype.createChild = function (prefix) {
        var _this = this;
        var getChildPrefix = lodash_1.isFunction(prefix) ? prefix : (function () { return prefix; });
        return new TsCallingLogger(this.ulLogComponent, this.ulSafeComponent, function () { return _this._getPrefix() ? _this._getPrefix() + "/" + getChildPrefix() : getChildPrefix(); });
    };
    TsCallingLogger.prototype.log = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._apply(function (log) { return _this.logComponent.debug2(null, log); }, args);
    };
    TsCallingLogger.prototype.debug = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._apply(function (log) { return _this.logComponent.debug4(null, log); }, args);
    };
    TsCallingLogger.prototype.info = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._apply(function (log) { return _this.logComponent.debug1(null, log); }, args);
    };
    TsCallingLogger.prototype.warn = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._apply(function (log) { return _this.logComponent.warn(null, log); }, args);
    };
    TsCallingLogger.prototype.error = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._apply(function (log) { return _this.logComponent.error(null, log); }, args);
    };
    TsCallingLogger.prototype._apply = function (logFunction, args) {
        if (args === void 0) { args = []; }
        this._addPrefix(args);
        var message = args
            .map(function (arg) { return (arg instanceof DOMException) ? arg.toString() : arg; })
            .map(function (arg) { return lodash_1.isObject(arg) ? JSON.stringify(arg) : arg; })
            .join(', ');
        logFunction(message);
    };
    TsCallingLogger.prototype._addPrefix = function (args) {
        if (args && args[0]) {
            var format = this._getPrefix() + " " + args[0];
            args[0] = format;
        }
    };
    return TsCallingLogger;
}());
exports.TsCallingLogger = TsCallingLogger;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rt_js_bindings_1 = __webpack_require__(7);
var RedirectingLogAppender = (function (_super) {
    __extends(RedirectingLogAppender, _super);
    function RedirectingLogAppender(_logger) {
        var _this = _super.call(this, new rt_js_bindings_1.StandardLogFormatter(rt_js_bindings_1.SLF_Flags.Component)) || this;
        _this._logger = _logger;
        return _this;
    }
    RedirectingLogAppender.prototype.log = function (md, logId, fmt, args) {
        if (!this._logger) {
            return;
        }
        var loggerFunc = (md.level <= rt_js_bindings_1.LogLevel.Debug4) ? this._logger.debug :
            (md.level <= rt_js_bindings_1.LogLevel.Debug2) ? this._logger.log :
                (md.level <= rt_js_bindings_1.LogLevel.Debug1) ? this._logger.info :
                    (md.level <= rt_js_bindings_1.LogLevel.Warning) ? this._logger.warn :
                        this._logger.error;
        if (loggerFunc) {
            loggerFunc.apply(this._logger, [this.formatter().format(md, logId, fmt, args)]);
        }
    };
    return RedirectingLogAppender;
}(rt_js_bindings_1.AbstractLogAppender));
exports.RedirectingLogAppender = RedirectingLogAppender;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SyncTasks = __webpack_require__(55);
var RootToolsManagerDelegate = (function () {
    function RootToolsManagerDelegate(_slimcore, _logger) {
        this._slimcore = _slimcore;
        this._logger = _logger;
    }
    RootToolsManagerDelegate.prototype.fetchEcsConfig = function (ecsNs, ecsKey) {
        return SyncTasks.Resolved(undefined);
    };
    RootToolsManagerDelegate.prototype.sendTelemetry = function (tenant, data) {
        return;
    };
    RootToolsManagerDelegate.prototype.sendLoggingEventToNative = function (message, auxiliaryPayload) {
        if (!this._slimcore.handleLoggingEvent) {
            this._logger.warn('slimcore.handleLoggingEvent is not available');
            return;
        }
        this._slimcore.handleLoggingEvent(message, auxiliaryPayload);
    };
    RootToolsManagerDelegate.prototype.setNativeLoggingEventCallback = function (callback) {
        var _this = this;
        if (!callback || typeof callback !== 'function') {
            this._logger.warn('RootToolsManagerDelegate.setNativeLoggingEventCallback invalid callback provided');
            return;
        }
        this._slimcore.handle('logging-event', undefined, function (data) {
            _this._logger.debug("RootToolsManagerDelegate: LoggingNativeEvent msg:" + data.message + " aux" + data.auxiliaryPayload);
            callback(data.message, data.auxiliaryPayload);
        });
    };
    return RootToolsManagerDelegate;
}());
exports.RootToolsManagerDelegate = RootToolsManagerDelegate;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {
/**
 * SyncTasks.ts
 * Author: David de Regt
 * Copyright: Microsoft 2015
 *
 * A very simple promise library that resolves all promises synchronously instead of
 * kicking them back to the main ticking thread.  This affirmatively rejects the A+
 * standard for promises, and is used for a combination of performance (wrapping
 * things back to the main thread is really slow) and because indexeddb loses
 * context for its calls if you send them around the event loop and transactions
 * automatically close.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = {
    // If we catch exceptions in success/fail blocks, it silently falls back to the fail case of the outer promise.
    // If this is global variable is true, it will also spit out a console.error with the exception for debugging.
    exceptionsToConsole: true,
    // Whether or not to actually attempt to catch exceptions with try/catch blocks inside the resolution cases.
    // Disable this for debugging when you'd rather the debugger caught the exception synchronously rather than
    // digging through a stack trace.
    catchExceptions: true,
    // Use this option in order to debug double resolution asserts locally.
    // Enabling this option in the release would have a negative impact on the application performance.
    traceEnabled: false,
    exceptionHandler: undefined,
    // If an ErrorFunc is not added to the task (then, catch, always) before the task rejects or synchonously
    // after that, then this function is called with the error. Default throws the error.
    unhandledErrorHandler: (function (err) { throw err; })
};
function fromThenable(thenable) {
    var deferred = Defer();
    // NOTE: The {} around the error handling is critical to ensure that
    // we do not trigger "Possible unhandled rejection" warnings. By adding
    // the braces, the error handler rejects the outer promise, but returns
    // void. If we remove the braces, it would *also* return something which
    // would be unhandled
    thenable.then(function (value) { deferred.resolve(value); }, function (err) { deferred.reject(err); });
    // Force async before this promise resolves to prevent ES6 promises from catching thrown exceptions downstream
    return deferred.promise().thenAsync(function (x) { return x; });
}
exports.fromThenable = fromThenable;
function isThenable(object) {
    return object !== null && object !== void 0 && typeof object.then === 'function';
}
function isCancelable(object) {
    return object !== null && object !== void 0 && typeof object.cancel === 'function';
}
// Runs trier(). If config.catchExceptions is set then any exception is caught and handed to catcher.
function run(trier, catcher) {
    if (exports.config.catchExceptions) {
        // Any try/catch/finally block in a function makes the entire function ineligible for optimization is most JS engines.
        // Make sure this stays in a small/quick function, or break out into its own function.
        try {
            return trier();
        }
        catch (e) {
            return catcher(e);
        }
    }
    else {
        return trier();
    }
}
var asyncCallbacks = [];
// Ideally, we use setImmediate, but that's only supported on some environments.
// Suggestion: Use the "setimmediate" NPM package to polyfill where it's not available.
var useSetImmediate = typeof setImmediate !== 'undefined';
/**
 * This function will defer callback of the specified callback lambda until the next JS tick, simulating standard A+ promise behavior
 */
function asyncCallback(callback) {
    asyncCallbacks.push(callback);
    if (asyncCallbacks.length === 1) {
        // Start a callback for the next tick
        if (useSetImmediate) {
            setImmediate(resolveAsyncCallbacks);
        }
        else {
            setTimeout(resolveAsyncCallbacks, 0);
        }
    }
}
exports.asyncCallback = asyncCallback;
function resolveAsyncCallbacks() {
    var savedCallbacks = asyncCallbacks;
    asyncCallbacks = [];
    for (var i = 0; i < savedCallbacks.length; i++) {
        savedCallbacks[i]();
    }
}
var Internal;
(function (Internal) {
    var SyncTask = /** @class */ (function () {
        function SyncTask() {
            this._completedSuccess = false;
            this._completedFail = false;
            this._traceEnabled = false;
            this._cancelCallbacks = [];
            this._wasCanceled = false;
            // The owner of this promise should not call cancel twice. However, cancellation through bubbling is independent of this.
            this._wasExplicitlyCanceled = false;
            this._resolving = false;
            this._storedCallbackSets = [];
            // 'Handled' just means there was a callback set added.
            // Note: If that callback does not handle the error then that callback's task will be 'unhandled' instead of this one.
            this._mustHandleError = true;
        }
        SyncTask.prototype._addCallbackSet = function (set, callbackWillChain) {
            var _this = this;
            var task = new SyncTask();
            task.onCancel(function (context) {
                set.wasCanceled = true;
                set.cancelContext = context;
                // Note: Cancel due to bubbling should not throw if the public cancel is called before/after.
                _this._cancelInternal(context);
            });
            set.task = task;
            this._storedCallbackSets.push(set);
            if (callbackWillChain) {
                // The callback inherits responsibility for "handling" errors.
                this._mustHandleError = false;
            }
            else {
                // The callback can never "handle" errors since nothing can chain to it.
                task._mustHandleError = false;
            }
            // The _resolve* functions handle callbacks being added while they are running.
            if (!this._resolving) {
                if (this._completedSuccess) {
                    this._resolveSuccesses();
                }
                else if (this._completedFail) {
                    this._resolveFailures();
                }
            }
            return task.promise();
        };
        SyncTask.prototype.onCancel = function (callback) {
            // Only register cancel callback handler on promise that hasn't been completed
            if (!this._completedSuccess && !this._completedFail) {
                if (this._wasCanceled) {
                    callback(this._cancelContext);
                }
                else {
                    this._cancelCallbacks.push(callback);
                }
            }
            return this;
        };
        SyncTask.prototype.then = function (successFunc, errorFunc) {
            return this._addCallbackSet({
                successFunc: successFunc,
                failFunc: errorFunc
            }, true);
        };
        SyncTask.prototype.thenAsync = function (successFunc, errorFunc) {
            return this._addCallbackSet({
                successFunc: successFunc,
                failFunc: errorFunc,
                asyncCallback: true
            }, true);
        };
        SyncTask.prototype.catch = function (errorFunc) {
            return this._addCallbackSet({
                failFunc: errorFunc
            }, true);
        };
        SyncTask.prototype.always = function (func) {
            return this._addCallbackSet({
                successFunc: func,
                failFunc: func
            }, true);
        };
        SyncTask.prototype.setTracingEnabled = function (enabled) {
            this._traceEnabled = enabled;
            return this;
        };
        // Finally should let you inspect the value of the promise as it passes through without affecting the then chaining
        // i.e. a failed promise with a finally after it should then chain to the fail case of the next then
        SyncTask.prototype.finally = function (func) {
            this._addCallbackSet({
                successFunc: func,
                failFunc: func
            }, false);
            return this;
        };
        SyncTask.prototype.done = function (successFunc) {
            this._addCallbackSet({
                successFunc: successFunc
            }, false);
            return this;
        };
        SyncTask.prototype.fail = function (errorFunc) {
            this._addCallbackSet({
                failFunc: errorFunc
            }, false);
            return this;
        };
        SyncTask.prototype.resolve = function (obj) {
            this._checkState(true);
            this._completedSuccess = true;
            this._storedResolution = obj;
            // Cannot cancel resolved promise - nuke chain
            this._cancelCallbacks = [];
            this._resolveSuccesses();
            return this;
        };
        SyncTask.prototype.reject = function (obj) {
            this._checkState(false);
            this._completedFail = true;
            this._storedErrResolution = obj;
            // Cannot cancel resolved promise - nuke chain
            this._cancelCallbacks = [];
            this._resolveFailures();
            SyncTask._enforceErrorHandled(this);
            return this;
        };
        SyncTask.prototype._checkState = function (resolve) {
            if (this._completedSuccess || this._completedFail) {
                if (this._completeStack) {
                    console.error(this._completeStack.message, this._completeStack.stack);
                }
                var message = 'Failed to ' + (resolve ? 'resolve' : 'reject') +
                    ': the task is already ' + (this._completedSuccess ? 'resolved' : 'rejected');
                throw new Error(message);
            }
            if (exports.config.traceEnabled || this._traceEnabled) {
                this._completeStack = new Error( true ? 'resolve' : 'reject');
            }
        };
        // Make sure any rejected task has its failured handled.
        SyncTask._enforceErrorHandled = function (task) {
            if (!task._mustHandleError) {
                return;
            }
            SyncTask._rejectedTasks.push(task);
            // Wait for some async time in the future to check these tasks.
            if (!SyncTask._enforceErrorHandledTimer) {
                SyncTask._enforceErrorHandledTimer = setTimeout(function () {
                    SyncTask._enforceErrorHandledTimer = undefined;
                    var rejectedTasks = SyncTask._rejectedTasks;
                    SyncTask._rejectedTasks = [];
                    rejectedTasks.forEach(function (rejectedTask, i) {
                        if (rejectedTask._mustHandleError) {
                            // Unhandled!
                            exports.config.unhandledErrorHandler(rejectedTask._storedErrResolution);
                        }
                    });
                }, 0);
            }
        };
        SyncTask.prototype.cancel = function (context) {
            if (this._wasExplicitlyCanceled) {
                throw new Error('Already Canceled');
            }
            this._wasExplicitlyCanceled = true;
            this._cancelInternal(context);
        };
        SyncTask.prototype._cancelInternal = function (context) {
            var _this = this;
            if (this._wasCanceled) {
                return;
            }
            this._wasCanceled = true;
            this._cancelContext = context;
            var callbacks = this._cancelCallbacks;
            this._cancelCallbacks = [];
            if (callbacks.length > 0) {
                callbacks.forEach(function (callback) {
                    if (!_this._completedSuccess && !_this._completedFail) {
                        callback(_this._cancelContext);
                    }
                });
            }
        };
        SyncTask.cancelOtherInternal = function (promise, context) {
            // Warning: this cast is a bit dirty, but we need to avoid .cancel for SyncTasks.
            // Note: Cancel due to bubbling should not throw if the public cancel is called before/after.
            var task = promise;
            if (task._storedCallbackSets && task._cancelInternal) {
                // Is probably a SyncTask.
                task._cancelInternal(context);
            }
            else {
                promise.cancel(context);
            }
        };
        SyncTask.prototype.promise = function () {
            return this;
        };
        SyncTask.prototype._resolveSuccesses = function () {
            var _this = this;
            this._resolving = true;
            // New callbacks can be added as the current callbacks run: use a loop to get through all of them.
            while (this._storedCallbackSets.length) {
                // Only iterate over the current list of callbacks.
                var callbacks = this._storedCallbackSets;
                this._storedCallbackSets = [];
                callbacks.forEach(function (callback) {
                    if (callback.asyncCallback) {
                        asyncCallback(function () { return _this._resolveSuccessCallback(callback); });
                    }
                    else {
                        _this._resolveSuccessCallback(callback);
                    }
                });
            }
            this._resolving = false;
        };
        SyncTask.prototype._resolveSuccessCallback = function (callback) {
            var _this = this;
            if (callback.successFunc) {
                run(function () {
                    var ret = callback.successFunc(_this._storedResolution);
                    if (isCancelable(ret)) {
                        if (callback.wasCanceled) {
                            SyncTask.cancelOtherInternal(ret, callback.cancelContext);
                        }
                        else {
                            callback.task.onCancel(function (context) { return SyncTask.cancelOtherInternal(ret, context); });
                        }
                        // Note: don't care if ret is canceled. We don't need to bubble out since this is already resolved.
                    }
                    if (isThenable(ret)) {
                        // The success block of a then returned a new promise, so
                        ret.then(function (r) { callback.task.resolve(r); }, function (e) { callback.task.reject(e); });
                    }
                    else {
                        callback.task.resolve(ret);
                    }
                }, function (e) {
                    _this._handleException(e, 'SyncTask caught exception in success block: ' + e.toString());
                    callback.task.reject(e);
                });
            }
            else {
                callback.task.resolve(this._storedResolution);
            }
        };
        SyncTask.prototype._resolveFailures = function () {
            var _this = this;
            this._resolving = true;
            // New callbacks can be added as the current callbacks run: use a loop to get through all of them.
            while (this._storedCallbackSets.length) {
                // Only iterate over the current list of callbacks.
                var callbacks = this._storedCallbackSets;
                this._storedCallbackSets = [];
                callbacks.forEach(function (callback) {
                    if (callback.asyncCallback) {
                        asyncCallback(function () { return _this._resolveFailureCallback(callback); });
                    }
                    else {
                        _this._resolveFailureCallback(callback);
                    }
                });
            }
            this._resolving = false;
        };
        SyncTask.prototype._resolveFailureCallback = function (callback) {
            var _this = this;
            if (callback.failFunc) {
                run(function () {
                    var ret = callback.failFunc(_this._storedErrResolution);
                    if (isCancelable(ret)) {
                        if (callback.wasCanceled) {
                            SyncTask.cancelOtherInternal(ret, callback.cancelContext);
                        }
                        else {
                            callback.task.onCancel(function (context) { return SyncTask.cancelOtherInternal(ret, context); });
                        }
                        // Note: don't care if ret is canceled. We don't need to bubble out since this is already rejected.
                    }
                    if (isThenable(ret)) {
                        ret.then(function (r) { callback.task.resolve(r); }, function (e) { callback.task.reject(e); });
                    }
                    else {
                        // The failure has been handled: ret is the resolved value.
                        callback.task.resolve(ret);
                    }
                }, function (e) {
                    _this._handleException(e, 'SyncTask caught exception in failure block: ' + e.toString());
                    callback.task.reject(e);
                });
            }
            else {
                callback.task.reject(this._storedErrResolution);
            }
        };
        SyncTask.prototype._handleException = function (e, message) {
            if (exports.config.exceptionsToConsole) {
                console.error(message);
            }
            if (exports.config.exceptionHandler) {
                exports.config.exceptionHandler(e);
            }
        };
        SyncTask.prototype.toEs6Promise = function () {
            var _this = this;
            return new Promise(function (resolve, reject) { return _this.then(resolve, reject); });
        };
        SyncTask._rejectedTasks = [];
        return SyncTask;
    }());
    Internal.SyncTask = SyncTask;
})(Internal || (Internal = {}));
function all(items) {
    if (items.length === 0) {
        return Resolved([]);
    }
    var outTask = Defer();
    var countRemaining = items.length;
    var foundError;
    var results = Array(items.length);
    outTask.onCancel(function (val) {
        items.forEach(function (item) {
            if (isCancelable(item)) {
                Internal.SyncTask.cancelOtherInternal(item, val);
            }
        });
    });
    var checkFinish = function () {
        if (--countRemaining === 0) {
            if (foundError !== undefined) {
                outTask.reject(foundError);
            }
            else {
                outTask.resolve(results);
            }
        }
    };
    items.forEach(function (item, index) {
        if (isThenable(item)) {
            var task = item;
            task.then(function (res) {
                results[index] = res;
                checkFinish();
            }, function (err) {
                if (foundError === undefined) {
                    foundError = (err !== undefined) ? err : true;
                }
                checkFinish();
            });
        }
        else {
            // Not a task, so resolve directly with the item
            results[index] = item;
            checkFinish();
        }
    });
    return outTask.promise();
}
exports.all = all;
function Defer() {
    return new Internal.SyncTask();
}
exports.Defer = Defer;
function Resolved(val) {
    return new Internal.SyncTask().resolve(val).promise();
}
exports.Resolved = Resolved;
function Rejected(val) {
    return new Internal.SyncTask().reject(val).promise();
}
exports.Rejected = Rejected;
function race(items) {
    var outTask = Defer();
    var hasSettled = false;
    outTask.onCancel(function (val) {
        items.forEach(function (item) {
            if (isCancelable(item)) {
                Internal.SyncTask.cancelOtherInternal(item, val);
            }
        });
    });
    items.forEach(function (item) {
        if (isThenable(item)) {
            var task = item;
            task.then(function (res) {
                if (!hasSettled) {
                    hasSettled = true;
                    outTask.resolve(res);
                }
            }, function (err) {
                if (!hasSettled) {
                    hasSettled = true;
                    outTask.reject(err);
                }
            });
        }
        else {
            // Not a task, so resolve directly with the item
            if (!hasSettled) {
                hasSettled = true;
                outTask.resolve(item);
            }
        }
    });
    return outTask.promise();
}
exports.race = race;
function raceTimer(promise, timeMs) {
    var timerDef = Defer();
    var token = setTimeout(function () {
        timerDef.resolve({ timedOut: true });
    }, timeMs);
    var adaptedPromise = promise.then(function (resp) {
        clearTimeout(token);
        return { timedOut: false, result: resp };
    });
    return race([adaptedPromise, timerDef.promise()]);
}
exports.raceTimer = raceTimer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(56).setImmediate))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(57);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(38), __webpack_require__(58)))

/***/ }),
/* 58 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __webpack_require__(1);
var MetatagType;
(function (MetatagType) {
    MetatagType[MetatagType["Integer"] = 0] = "Integer";
    MetatagType[MetatagType["String"] = 1] = "String";
    MetatagType[MetatagType["Binary"] = 2] = "Binary";
})(MetatagType || (MetatagType = {}));
var UwpNativeWrapper = (function () {
    function UwpNativeWrapper(_nativeObject) {
        var _this = this;
        this._nativeObject = _nativeObject;
        _.forIn(_nativeObject, function (v, k, o) {
            if (_.isFunction(v)) {
                if (!_this[k]) {
                    _this[k] = function () {
                        return v.apply(o, arguments);
                    };
                }
            }
            else {
                Object.defineProperty(_this, k, {
                    get: function () { return o[k]; },
                    set: function (nv) { o[k] = nv; }
                });
            }
        });
    }
    Object.defineProperty(UwpNativeWrapper.prototype, "objectToWrap", {
        get: function () {
            return this._nativeObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UwpNativeWrapper.prototype, "objectAsWrapped", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    return UwpNativeWrapper;
}());
var UwpEventWrapper = (function (_super) {
    __extends(UwpEventWrapper, _super);
    function UwpEventWrapper(nativeObject) {
        var _this = _super.call(this, nativeObject) || this;
        _this.eventListenerArrays = {};
        if (nativeObject.oncommonwrapperevent !== undefined) {
            nativeObject.oncommonwrapperevent = function (eventPayload) {
                var args = _this.argsFromCommonWrapperEventPayload(eventPayload);
                var eventListeners = _this.eventListenerArrays[eventPayload.target];
                if (eventListeners) {
                    eventListeners.forEach(function (listener) {
                        listener(args);
                    });
                }
            };
        }
        return _this;
    }
    UwpEventWrapper.prototype.argsFromCommonWrapperEventPayload = function (eventPayload) {
        if (eventPayload.target === 'object-property-changed') {
            var sourceArgs = eventPayload.detail[0];
            var args = {
                objectType: sourceArgs.objectType,
                objectId: sourceArgs.objectId,
                propKey: sourceArgs.propKey,
                value: undefined
            };
            switch (sourceArgs.value.type) {
                case MetatagType.Integer:
                    args.value = sourceArgs.value.intVal;
                    break;
                case MetatagType.String:
                    args.value = sourceArgs.value.strVal;
                    break;
                case MetatagType.Binary:
                    args.value = sourceArgs.value.binVal;
                    break;
                default:
            }
            return args;
        }
        return eventPayload.detail[0];
    };
    UwpEventWrapper.prototype.addListener = function (event, listener) {
        var eventListeners = this.eventListenerArrays[event];
        if (!eventListeners) {
            eventListeners = this.eventListenerArrays[event] = [];
        }
        if (eventListeners.indexOf(listener) === -1) {
            eventListeners.push(listener);
        }
        return this;
    };
    UwpEventWrapper.prototype.on = function (event, listener) {
        return this.addListener(event, listener);
    };
    UwpEventWrapper.prototype.once = function (event, listener) {
        return this.addListener(event, listener);
    };
    UwpEventWrapper.prototype.removeListener = function (event, listener) {
        var eventListeners = this.eventListenerArrays[event];
        if (eventListeners) {
            var index = eventListeners.indexOf(listener);
            if (index > -1) {
                eventListeners.splice(index, 1);
            }
        }
        return this;
    };
    UwpEventWrapper.prototype.removeAllListeners = function (event) {
        var _this = this;
        if (event) {
            var eventListeners = this.eventListenerArrays[event];
            if (eventListeners) {
                eventListeners = this.eventListenerArrays[event] = [];
            }
            return this;
        }
        Object.keys(this.eventListenerArrays).forEach(function (key) {
            _this.eventListenerArrays[key] = [];
        });
        return this;
    };
    UwpEventWrapper.prototype.getMaxListeners = function () {
        return 0;
    };
    UwpEventWrapper.prototype.setMaxListeners = function (n) {
    };
    UwpEventWrapper.prototype.listeners = function (event) {
        return this.eventListenerArrays[event];
    };
    UwpEventWrapper.prototype.emit = function (event, args) {
        var eventListeners = this.eventListenerArrays[event];
        if (eventListeners) {
            eventListeners.forEach(function (listener) {
                listener(args);
            });
        }
        return true;
    };
    return UwpEventWrapper;
}(UwpNativeWrapper));
var UwpVideoBinding = (function (_super) {
    __extends(UwpVideoBinding, _super);
    function UwpVideoBinding(nativeObject) {
        return _super.call(this, nativeObject) || this;
    }
    return UwpVideoBinding;
}(UwpEventWrapper));
var UwpEngineWrapped = (function (_super) {
    __extends(UwpEngineWrapped, _super);
    function UwpEngineWrapped(nativeObject) {
        return _super.call(this, nativeObject) || this;
    }
    UwpEngineWrapped.prototype.createCallInterface = function () {
        var object = this.objectToWrap.createCallInterface();
        var wrapped = new UwpEventWrapper(object);
        return wrapped.objectAsWrapped;
    };
    UwpEngineWrapped.prototype.getContentSharing = function (contentSharingObjectId) {
        var object = this.objectToWrap.getContentSharing(contentSharingObjectId);
        var wrapped = new UwpEventWrapper(object);
        return wrapped.objectAsWrapped;
    };
    UwpEngineWrapped.prototype.createVideoBindingRenderer = function (args) {
        var object = this.objectToWrap.createVideoBindingRenderer(args);
        var wrapped = new UwpVideoBinding(object);
        return wrapped.objectAsWrapped;
    };
    UwpEngineWrapped.prototype.createVideoBindingScreenShare = function () {
        var object = this.objectToWrap.createVideoBindingScreenShare();
        var wrapped = new UwpVideoBinding(object);
        return wrapped.objectAsWrapped;
    };
    UwpEngineWrapped.prototype.videoCreateBinding = function (videoObjectId, videoBinding) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var videoBindingWrapped = videoBinding;
            var videoBindingEvent = videoBindingWrapped.objectToWrap;
            if (videoBindingEvent.onvideobindingcreatedevent !== undefined) {
                videoBindingEvent.onvideobindingcreatedevent = function () {
                    resolve();
                };
            }
            if (videoBindingEvent.onvideobindingfailedevent !== undefined) {
                videoBindingEvent.onvideobindingfailedevent = function () {
                    _this.objectToWrap.videoReleaseBinding(videoObjectId, videoBindingWrapped.objectToWrap);
                    reject('binding creation failed');
                };
            }
            _this.objectToWrap.videoCreateBinding(videoObjectId, videoBindingWrapped.objectToWrap);
        });
    };
    UwpEngineWrapped.prototype.videoReleaseBinding = function (videoObjectId, videoBinding) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var videoBindingWrapped = videoBinding;
            var videoBindingEvent = videoBindingWrapped.objectToWrap;
            if (videoBindingEvent.onvideobindingreleasedevent !== undefined) {
                videoBindingEvent.onvideobindingreleasedevent = function () {
                    resolve();
                };
            }
            _this.objectToWrap.videoReleaseBinding(videoObjectId, videoBindingWrapped.objectToWrap);
        });
    };
    UwpEngineWrapped.prototype.setMediaConfig = function (configuration) {
        this.objectToWrap.setMediaConfig(JSON.stringify(configuration));
    };
    return UwpEngineWrapped;
}(UwpEventWrapper));
exports.UwpEngineWrapped = UwpEngineWrapped;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlimCoreElectronStack_1 = __webpack_require__(37);
exports.slimCoreElectronStackFactory = SlimCoreElectronStack_1.slimCoreElectronStackFactory;
exports.slimCoreUwpStackFactory = SlimCoreElectronStack_1.slimCoreUwpStackFactory;
var tsCallingVersionProvider_1 = __webpack_require__(10);
exports.getOvb = tsCallingVersionProvider_1.getOvb;
exports.getVersion = tsCallingVersionProvider_1.getTsCallingVersion;
var causeId_1 = __webpack_require__(2);
exports.generateCauseId = causeId_1.generateCauseId;


/***/ })
/******/ ]);
});
//# sourceMappingURL=skype-calling-electron.bundle.js.map