// =============================================================================
// Typescript Definition file for component skype-calling-electron
//
// THIS FILE GOT AUTO-GENERATED BY generateDts.ts.
// =============================================================================
/// <reference path="../skype-calling-interface/skype-calling-interface.d.ts" />

// -----------------------------------------------------------------------------
// Expansion of reference path 'slimcore_autogen.d.ts'
// -----------------------------------------------------------------------------
/*   ============================================================================
 *                         GENERATED FILE - DO NOT MODIFY
 *   ============================================================================
 *  */


// -----------------------------------------------------------------------------
// Expansion of reference path 'slimcore-enums_autogen.d.ts'
// -----------------------------------------------------------------------------
/*   ============================================================================
 *                         GENERATED FILE - DO NOT MODIFY
 *   ============================================================================
 *  */

declare namespace SlimCore {
    namespace Enums {
        
        enum CallType {
            CallTypeGroup,
            CallTypeS2s,
            CallTypePstn,
        }
        
        enum VideoStatus {
            NotAvailable,
            Available,
            Starting,
            Running,
            Stopping,
            Paused,
            NotStarted,
            None,
        }
        
        enum VideoType {
            ScreenShare,
            Video,
            Augmented,
        }
        
        enum DeviceType {
            UsbCamera,
            CaptureAdapter,
            Virtual,
            SRAugmented,
        }
        
        enum CameraFacing {
            Unknown,
            External,
            Front,
            Back,
            Panoramic,
            LeftFront,
            RightFront,
        }
        
        enum ContentSharingStatus {
            Initial,
            Routing,
            Ringing,
            Presenting,
            Connected,
            Viewing,
            Finishing,
            Done,
            Failed,
            TimedOut,
        }
        
        enum ContentSharingFailureReason {
            NoFailure,
            Failure,
            SessionNotFound,
            SessionTimedOut,
            NetworkError,
            NetworkCannotConnectError,
            AuthFailure,
            ServiceFailure,
            RequestTimedOut,
            ActionNotAllowed,
            Forbidden,
        }
        
        enum ContentSharingRole {
            None,
            Attendee,
            Presenter,
        }
        
        enum DataChannelStatus {
            Unknown,
            Available,
            Starting,
            Active,
            Stopping,
            NotStarted,
        }
        
        enum CallStatus {
            Unplaced,
            Routing,
            RingingOut,
            RingingIn,
            EarlyMedia,
            InProgress,
            InLobby,
            LocalHold,
            RemoteHold,
            Finished,
            Cancelled,
            Refused,
            Busy,
            Missed,
            Dropped,
            Failed,
            CallTimedOut,
            CallForwardingInitiated,
            VmRedirectInitiated,
            VmBufferingGreeting,
            VmPlayingGreeting,
            VmRecording,
            VmUploading,
            VmSent,
            VmCancelled,
            VmFailed,
            Transferring,
            Transferred,
            DeniedInLobby,
            TimedOutInLobby,
            Parking,
            Parked,
            Preheating,
            Preheated,
            Observing,
        }
        
        enum ParticipantFailureReason {
            NoFailure,
            MiscError,
            RecipientUserNotFound,
            RecipientNotOnline,
            SoundRecordingError,
            SoundPlaybackError,
            RemoteSoundIOError,
            RecipientBlocked,
            CallerNotFriend,
            CallerNotAuthorized,
            HostEndedConf,
            ConfParticipantCountLimitReached,
            AnsweredElsewhere,
            PstnNoSkypeoutSubscription,
            PstnInsufficientFunds,
            PstnInternetConnectionLost,
            PstnSkypeoutAccountBlocked,
            PstnCouldNotConnectToSkypeProxy,
            PstnBlockedByUs,
            PstnBlockedRegulatoryIndia,
            PstnInvalidNumber,
            PstnNumberForbidden,
            PstnCallTimedOut,
            PstnBusy,
            PstnCallTerminated,
            PstnNetworkError,
            PstnNumberUnavailable,
            PstnCallRejected,
            PstnEmergencyCallDenied,
            PstnMiscError,
            CallNotFound,
            TrouterError,
            MediaDroppedError,
            PstnNoSubscriptionCover,
            CallNotificationDeliveryFailure,
            PstnCreditExpired,
            PstnCreditExpiredButEnough,
            EnterprisePstnInternalError,
            EnterprisePstnUnavailable,
            EnterprisePstnForbidden,
            EnterprisePstnInvalidNumber,
            EnterprisePstnMiscError,
            Kicked,
            NetworkRequestTimeoutError,
            CallDoesNotExist,
            MediaSetupFailure,
            ServiceUnavailable,
            SignalingError,
            ConversationEstablishmentFailed,
            TemporarilyUnavailable,
            GeneralNetworkError,
            NetworkCannotConnectError,
            NoSignalingFromPeer,
            AnonymousJoinDisabledByPolicy,
            NoLobbyForBroadcastJoin,
            NotAllowedDueToInformationBarrier,
            BroadcastLimitReached,
            B2bJoinDisabledByPolicy,
            LocationBasedRoutingError,
            ConfLobbyParticipantCountLimitReached,
            Forbidden,
        }
        
        enum OriginType {
            Unspecified,
            Transfer,
            Park,
            TransferToVoicemail,
        }
        
        enum IdentityType {
            Unrecognized,
            Skype,
            Pstn,
            Emergency,
            Undisclosed,
            Lync,
            Bot,
        }
        
        enum CompositeAudioDeviceType {
            Speakers,
            Headphones,
            Headset,
            Handset,
            Speakerphone,
        }
        
        enum MediaType {
            Audio,
            Video,
            PanoramicCamera,
            AppSharing,
            Data,
        }
        
        enum AccountStatus {
            LoggedOut,
            LoggingIn,
            LoggedIn,
            LoggingOut,
        }
        
        enum LoginRequestResult {
            Rejected,
            Accepted,
            Ignored,
        }
        
        enum Intent {
            Regular,
            CallPush,
            CallUser,
            CallPreheat,
            MediaInit,
        }
        
        enum ServiceType {
            Testing,
            MicrosoftWNS,
            MicrosoftWP7NS,
            AppleAPN,
            GoogleAGCM,
            Hotmail,
            GoogleAC2DM,
            Trouter,
            Griffin,
            ADM,
            NNA,
        }
        
        enum PushHandlingResult {
            BadNotificationPayload,
            CallSetupSucceeded,
            CallSetupFailed,
            BadNotificationEventType,
            CallSetupSucceededCallAlreadyExists,
            CallSetupFailedCannotConnect,
            CallSetupFailedNoSignaling,
            CallSetupFailedNoPermission,
            CallSetupFailedNoCommonCodec,
            CallSetupFailedConflict,
            CallSetupFailedPushIgnored,
            CallSetupFailedAnsweredElsewhere,
            CallSetupFailedAlreadyEnded,
            CallSetupProgress,
        }
        
        enum DtmfTone {
            Num0,
            Num1,
            Num2,
            Num3,
            Num4,
            Num5,
            Num6,
            Num7,
            Num8,
            Num9,
            Star,
            Pound,
            A,
            B,
            C,
            D,
            Flash,
        }
        
        enum ModalityType {
            Audio,
            Video,
            Screenshare,
            Datachannel,
        }
        
        enum MediaDirection {
            Disabled,
            Inactive,
            SendToPeer,
            ReceiveFromPeer,
            Bidirectional,
        }
        
        enum MediaStreamState {
            StreamCreated,
            StreamRemoved,
            StreamStarted,
            StreamInactive,
            StreamActive,
            StreamStopped,
            StreamFail,
        }
        
        enum MuteFlags {
            MuteMicrophone = 1,
            MuteSpeaker = 2,
        }
        
        enum PreheatFlags {
            IsPreheatOnly = 1,
        }
        
        enum MediaNegotiationStatusCode {
            Succeeded,
            ErrorLocalInternal,
            ErrorRemoteInternal,
            OfferNotAcceptable,
            OfferDeclined,
            LocalCancel,
            RemoteCancel,
            FailedNoRetry,
            Terminated,
            GeneralFailure,
        }
        
        enum AnswerMediaType {
            AnswerWithAudioOnly,
            AnswerWithAudioVideo,
            AnswerWithScreenshareOnly,
        }
        
        enum Capability {
            None,
            Conference,
            ShareScreen,
            Merge,
            All,
        }
        
        enum SelfCapability {
            None,
            UnmuteSelf,
            MuteOthers,
            All,
        }
        
        enum EndpointType {
            Default,
            Lync,
            Voicemail,
        }
        
        enum MuteScope {
            All,
            Specified,
        }
        
        enum RemoveEndpointScope {
            RemoveEndpointScopeNone,
            RemoveEndpointScopeOther,
            RemoveEndpointScopeSpecified,
        }
        
        enum MediaPeerType {
            ConsumerTwoParty,
            ConsumerPstn,
            ConsumerMultiParty,
            EnterpriseTwoPartyOnlineOnly,
            EnterpriseTwoPartyHybrid,
            EnterpriseMultiParty,
            EnterprisePstnOnlineOnly,
            EnterprisePstnHybrid,
            EnterpriseFederated,
            EnterpriseUnknown,
            EnterpriseMultiPartyBroadcasting,
        }
        
        enum CallQualityRating {
            VeryBad,
            Bad,
            Average,
            Good,
            VeryGood,
        }
        
        enum AudioUsageMode {
            Default,
            LongrangeSpeaker,
            Auditorium,
        }
        
        enum OperationResultCode {
            None,
            Failure,
            Success,
        }
        
        enum ConnectionType {
            AllSupported,
            NoDirectConnection,
        }
        
        enum InvitationType {
            None,
            Nudge,
            Dialout,
        }
        
        enum ParkContext {
            Invalid,
            Team,
            Sharedline,
            Serverhold,
        }
        
        enum TransferType {
            TransferStandard,
            TransferToVoicemail,
        }
        
        enum Property {
            VideoStatus,
            VideoError,
            VideoType,
            VideoCallObjectId,
            VideoParticipantObjectId,
            VideoRank,
            VideoEndpointId,
            VideoParticipantLegId,
            VideoParticipantMri,
            VideoNegotiationTag,
            ContentSharingCallId,
            ContentSharingIdentity,
            ContentSharingStatus,
            ContentSharingId,
            ContentSharingState,
            ContentSharingFailureReason,
            ContentSharingFailureCode,
            ContentSharingFailureSubCode,
            DataChannelStatus,
            ParticipantIdentity,
            ParticipantDisplayName,
            ParticipantPricePerMinute,
            ParticipantPricePrecision,
            ParticipantPriceCurrency,
            ParticipantType,
            ParticipantStatus,
            ParticipantFailureReason,
            ParticipantPstnFeedback,
            ParticipantDebugInfo,
            ParticipantCountry,
            ParticipantMriIdentity,
            ParticipantVideoCountChanged,
            ParticipantIsActiveSpeaker,
            ParticipantDominantSpeakerRank,
            ParticipantSponsor,
            ParticipantContentRole,
            ParticipantEndpointDetails,
            ParticipantCapabilities,
            ParticipantEndpointType,
            ParticipantAcceptedBy,
            ParticipantDiagnosticsCode,
            ParticipantIsServerMuted,
            ParticipantAdmitFailureReason,
            ParticipantRemoveFailureReason,
            ParticipantRole,
            ParticipantMeetingRole,
            ParticipantTenantId,
            ParticipantSecondsLeft,
            ParticipantLimitingFactor,
            ParticipantBalanceUpdate,
            CallTopic,
            CallIsMuted,
            CallIsServerMuted,
            CallIsMutedSpeaker,
            CallIsHostless,
            CallActiveMembers,
            CallIsActive,
            CallName,
            CallIsIncoming,
            CallIsConference,
            CallIsOnHold,
            CallOptimalRemoteVideoCount,
            CallMessageId,
            CallStatus,
            CallThreadId,
            CallLegId,
            CallConversationType,
            CallDataChannelObjectId,
            CallEndpointDetails,
            CallerMriIdentity,
            CallMemberCountChanged,
            CallTransferStatus,
            CallTransferFailureReason,
            CallForwardingDestinationType,
            CallIncomingType,
            CallOnBehalfOfMri,
            CallTransferorMri,
            CallIsIncomingOneOnOneVideoCall,
            CallQueueInfo,
            CallTransferorType,
            CallTransferorDisplayName,
            CallInvitationData,
            CallMeetingDetails,
            SelfParticipantRole,
            SelfParticipantTenantId,
            CallBroadcastMetadata,
            CallContentSharingSessionCountChanged,
            CallFailureReason,
            SelfMeetingRole,
            CallProgressStatus,
            CallConsultativeTransferCallId,
            CallParkStatus,
            CallParkFailureReason,
            CallParkPickupCode,
            CallOrigin,
            CallEndDiagnosticsCode,
            TransferDiagnosticsCode,
            CallServerHoldLocation,
            CallAccountIdentity,
            CallCapabilities,
            CallActiveVideoChannelCount,
            AccountStatus,
        }
        
        enum ObjectType {
            Video,
            ContentSharing,
            DataChannel,
            Participant,
            Call,
            Account,
            CallHandler,
        }
    }
}


// -----------------------------------------------------------------------------
// Expansion of reference path 'slimcore-enums.d.ts'
// -----------------------------------------------------------------------------
declare namespace SlimCore {
    namespace Enums {

        enum DataDeviceEvent {
            Started,
            Stopped,
            BufferAvailable,
            PacketLoss,
        }

        enum DataDeviceId {
            Protocol,
            Control,
            Transcript,
        }

        enum QualityLevel {
            Unknown,
            Good,
            Poor,
            Bad,
        }

        enum QualityEventType {
            NetworkSendQuality,
            NetworkRecvQuality,
            NetworkDelay,
            NetworkBandwidthLow,
            NetworkPacketLoss,
            NetworkJitter,
            NetworkRateMatching,
            DeviceCaptureNotFunctioning,
            DeviceRenderNotFunctioning,
            DeviceRenderGlitches,
            DeviceLowSNR,
            DeviceLowSpeechLevel,
            DeviceClipping,
            DeviceEcho,
            PresentationAudioQuality,
            DeviceHalfDuplexAec,
            DeviceMultipleEndpoints,
            DeviceHowling,
            DeviceRenderZeroVolume,
            DeviceRenderMute,
            NetworkSendCatastrophic,
            NetworkRecvCatastrophic,
            CpuInsufficient,
            DeviceCaptureMute,
            DeviceCaptureNotMuteButSilent,
            DeviceSpeakWhileMuted,
            VideoVbssRendered,
            NetworkRoaming,
            NetworkEthernetInterfaceUsed,
            NetworkWlanInterfaceUsed,
            NetworkWwanInterfaceUsed,
            RelayWhiteListing,
            NetworkReconnect,
            VideoCapturerDeviceStartFailed,
            VideoCapturerDeviceStartTimedOut,
            VideoCapturerDeviceStartFailureLackSystemRes,
            VideoCapturerDeviceStartFailureMFResConflict,
            ZeroCaptureDevicesEnumerated,
            ZeroRenderDevicesEnumerated,
            NoNetwork,
            NetworkNotWorking,
            DeviceCaptureNotFunctioningAudioSrvNotRunning,
            DeviceRenderNotFunctioningAudioSrvNotRunning,
            DeviceCaptureNotFunctioningDeviceInUse,
            DeviceRenderNotFunctioningDeviceInUse,
            VideoCaptureDeviceFreeze,
            AudioCapturePermissionDenied,
            VideoCapturePermissionDenied,
            VideoCaptureFreezeRecovered,
            DeviceRenderHowling,
            LowFarEndInput,
            RemoteNetworkConnectivityIssue,
            PresentationAudioLoopbackDeviceState
        }

        enum TrouterMessageSendStatusCode {
            ResponseSent,
            ResponseTimeout,
            ResponseDuplicate,
            ResponseIncomplete,
            TrouterDisconnected,
        }

        enum ScraperEvent {
            Ok,
            Started,
            Stopped,
            Error,
            WindowMinimized,
            WindowRestored,
            WindowFullyOccluded,
            WindowExposed,
            WindowClosed,
            PPTPresenterView_Enter,
            PPTPresenterView_Exit,
            WindowInPriviledgedProcess,
            OcclusionRemovalDisabled,
            FrameCount,
            Resolution,
        }

        enum VideoEffectType {
            Off                                 = 0,
            BackgroundBlurDefault               = 1 << 0,
            BackgroundBlurLight                 = 1 << 1,
            BackgroundBlurExperimental_1        = 1 << 2,
            BackgroundBlurExperimental_2        = 1 << 3,
            BackgroundReplacement               = 1 << 4,    
            WhiteboardZoom                      = 1 << 5,
            WhiteboardCleanup                   = 1 << 6,
            WhiteboardZoomAndCleanup            = WhiteboardZoom | WhiteboardCleanup,
        }

        enum LibStatus {
            Constructed,
            Starting,
            Running,
            Stopping,
            Stopped,
            FatalError,
        }

        enum Feature {
            AsyncStart,
            RemoteVideosCountChanged,
            StructuredMeetings,
            MultiUserSupport,
            ObservingStateSupported,
            LazyMediaInit,
            AttendeeBlackList
        }

        enum AuthorizationStatus {
            NotDetermined,
            Restricted,
            Denied,
            Authorized,
        }

        enum MediaStatus {
            NotAvailable,
            Initialized,
            Failed,
            Uninitialized,
        }
    }
}


declare namespace SlimCore {
    
    namespace Engine {
        namespace Events {
            type ProbeDevicesStatusChangedArgs = {
                ready: boolean;
            };
            
            type PushHandlingCompleteArgs = {
                token: number;
                result: Enums.PushHandlingResult;
            };
            
            type SkypeTokenRequiredArgs = {
                invalidToken: string;
            };
            
            type ProxiedPushNotificationArgs = {
                eventId: number;
                payload: string;
            };
            
            type LoggingEventArgs = {
                message: string;
                auxiliaryPayload: string;
            };
            
        }
        
        interface Events {
            "probe-devices-status-changed": Events.ProbeDevicesStatusChangedArgs;
            "push-handling-complete": Events.PushHandlingCompleteArgs;
            "skype-token-required": Events.SkypeTokenRequiredArgs;
            "proxied-push-notification": Events.ProxiedPushNotificationArgs;
            "logging-event": Events.LoggingEventArgs;
        }
        
    }
    
    interface Engine extends Disposable, EventEmitter<Engine.Events> {
        getIntProperty(objectId: number, propKey: Enums.Property): number;
        getStrProperty(objectId: number, propKey: Enums.Property): string;
        setEcsConfig(ecsBlob: string, userIdentity: string, etag: string, isCached?: boolean): void;
        shouldTriggerCQF(username: string, callId: string, callType: Enums.CallType): boolean;
        getSpeakerVolume(): number;
        getSpeakerSystemVolume(): number;
        setSpeakerVolume(volume: number): void;
        setSpeakerSystemVolume(volume: number): void;
        unmuteMicrophone(): void;
        unmuteSpeaker(): void;
        getNrgLevelsForDeviceTuner(microphone: string): number;
        getRegistrationId(accountIdentity?: string): string;
        ecsGetETag(): string;
        getBuildName(): string;
        getBuildVersion(): string;
        getE911Info(): string;
        handleLoggingEvent(message: string, auxiliaryPayload: string): void;
    }
    
    namespace ContentSharing {
        namespace Events {
            type ContentSharingSessionStateUpdateResultArgs = {
                id: string;
                failureReason: Enums.ContentSharingFailureReason;
                code: number;
                subCode: number;
            };
            
            type ContentSharingResultArgs = {
                failureReason: Enums.ContentSharingFailureReason;
                code: number;
                subCode: number;
            };
            
        }
        
        interface Events {
            "update-session-state-result": Events.ContentSharingSessionStateUpdateResultArgs;
            "take-control-result": Events.ContentSharingResultArgs;
            "update-participant-state-result": Events.ContentSharingResultArgs;
            "join-result": Events.ContentSharingResultArgs;
        }
        
    }
    
    interface ContentSharing extends Disposable, EventEmitter<ContentSharing.Events> {
        startContentSharing(): void;
        updateContentSharingSessionState(id: string, sessionState: string): void;
        takeContentSharingControl(): void;
        updateContentSharingParticipantState(): void;
        stopContentSharing(): void;
    }
    
    namespace Account {
        namespace Events {
            type SkypeTokenRequiredArgs = {
                invalidToken: string;
            };
            
        }
        
        interface Events {
            "skype-token-required": Events.SkypeTokenRequiredArgs;
        }
        
    }
    
    interface Account extends Disposable, EventEmitter<Account.Events> {
        getObjectId(): number;
        login(skypeToken: string, displayName?: string, configuration?: string): Enums.LoginRequestResult;
        logout(): void;
        updateSkypeToken(skypeToken: string): void;
        setAdditionalIdentities(identities: string): void;
        setRing(ring: string): void;
        setTenantId(tenantId: string): void;
        updateDisplayName(displayName: string): void;
        setConfiguration(configuration: string): void;
    }
    
    namespace CallHandler {
        namespace Events {
            type TransferRequestedArgs = {
                callObjectId: ObjectId;
                targetCallObjectId: ObjectId;
                transferorMri: string;
                transferTargetMri: string;
            };
            
            type AudioStreamStateChangedArgs = {
                callObjectId: ObjectId;
                direction: Enums.MediaDirection;
                streamState: Enums.MediaStreamState;
            };
            
            type CallMeBackOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                participantMri: string;
                failureReason: number;
                code: number;
                subCode: number;
                phrase: string;
                causeId: string;
            };
            
            type UnmuteSelfOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                operationResult: Enums.OperationResultCode;
                failureReason: number;
            };
            
            type RemoteVideosCountChangedArgs = {
                participantObjectId: ObjectId;
            };
            
            type MediaNegotiationStatusChangedArgs = {
                callObjectId: ObjectId;
                modalityType: Enums.ModalityType;
                mediaNegotiationStatusCode: Enums.MediaNegotiationStatusCode;
                causeId: string;
            };
            
            type NudgeParticipantsOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                context: string;
                failureReason: number;
            };
            
            type ActiveSpeakerListChangedArgs = {
                callObjectId: ObjectId;
                activeSpeakers: string[];
            };
            
            type DominantSpeakerListChangedArgs = {
                callObjectId: ObjectId;
                dominantSpeakers: string[];
            };
            
            type ProxiedPushNotificationArgs = {
                eventId: number;
                payload: string;
            };
            
            type UpdateMeetingRolesOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                causeId: string;
                code: number;
                subCode: number;
                phrase: string;
            };
            
            type MuteParticipantsOperationStatusChangedArgs = {
                callObjectId: ObjectId;
                causeId: string;
                code: number;
                subCode: number;
                phrase: string;
            };
            
            type RemoteUserEventsReceivedArgs = {
                callObjectId: ObjectId;
                participantId: string;
                events: string;
            };
            
            type OperationStatusChangedArgs = {
                callObjectId: ObjectId;
                result: string;
            };
            
        }
        
        interface Events {
            "transfer-requested": Events.TransferRequestedArgs;
            "audio-stream-state-changed": Events.AudioStreamStateChangedArgs;
            "callmeback-operation-status-changed": Events.CallMeBackOperationStatusChangedArgs;
            "unmuteself-operation-status-changed": Events.UnmuteSelfOperationStatusChangedArgs;
            "remote-videos-count-changed": Events.RemoteVideosCountChangedArgs;
            "media-negotiation-status-changed": Events.MediaNegotiationStatusChangedArgs;
            "nudge-participants-operation-status-changed": Events.NudgeParticipantsOperationStatusChangedArgs;
            "active-speaker-list-changed": Events.ActiveSpeakerListChangedArgs;
            "dominant-speaker-list-changed": Events.DominantSpeakerListChangedArgs;
            "proxied-push-notification": Events.ProxiedPushNotificationArgs;
            "update-meeting-roles-operation-status-changed": Events.UpdateMeetingRolesOperationStatusChangedArgs;
            "mute-participants-operation-status-changed": Events.MuteParticipantsOperationStatusChangedArgs;
            "remote-user-events-received": Events.RemoteUserEventsReceivedArgs;
            "operation-status-changed": Events.OperationStatusChangedArgs;
        }
        
    }
    
    interface CallHandler extends Disposable, EventEmitter<CallHandler.Events> {
        getActiveCalls(): ObjectId[];
        unsubscribe(callObjectId: ObjectId): void;
        leaveCall(callObjectId: ObjectId): void;
        callGetParticipants(callObjectId: ObjectId): ObjectId[];
        removeParticipant(participantObjectId: ObjectId, removeEndpointScope?: Enums.RemoveEndpointScope): void;
        callMute(callObjectId: ObjectId, mute?: boolean): void;
        callMuteParticipants(callObjectId: ObjectId, muteScope: Enums.MuteScope, participantList: string[], causeId?: string): void;
        callMuteSpeaker(callObjectId: ObjectId, mute?: boolean): void;
        callHold(callObjectId: ObjectId, hold?: boolean, negotiationTag?: string): void;
        callSendDtmf(callObjectId: ObjectId, dtmfTone: Enums.DtmfTone): void;
        callAttachSendVideo(callObjectId: ObjectId, videoObjectId: ObjectId): void;
        callGetSendVideos(callObjectId: ObjectId): ObjectId[];
        callGetParticipantVideos(callParticipantObjectId: ObjectId): ObjectId[];
        callParticipantGetCallObject(callParticipantObjectId: ObjectId): ObjectId;
        getDebugInformation(command: string): string;
        callAssimilate(callObjectId1: ObjectId, callObjectId2: ObjectId, threadId?: string, messageId?: string): void;
        startCallTransfer(callObjectId: ObjectId, participantId: string, transferType?: Enums.TransferType): void;
        startConsultativeCallTransfer(consultativeCallObjectId: ObjectId, transfereeCallObjectId: ObjectId): void;
        startTransferTargetCall(callObjectId: ObjectId, isVideoEnabled?: boolean, threadId?: string, messageId?: string): void;
        endCallForAll(callObjectId: ObjectId): void;
        createContentSharing(callObjectId: ObjectId, contentSharingGuid: string, contentSharingIdentity: string, subject?: string, initialContentSharingSessionState?: string): ObjectId;
        getContentSharingSessions(callObjectId: ObjectId): ObjectId[];
        callShareSystemSound(callObjectId: ObjectId, enable: boolean): void;
        admitParticipants(callObjectId: ObjectId, participantList: string[]): void;
        addParticipantToCall(callObjectId: ObjectId, participant: string, threadId?: string, messageId?: string, additionalData?: string, disableUnmute?: boolean, causeId?: string): ObjectId;
        callMeBack(callObjectId: ObjectId, participantMri: string, assertedId: string, causeId?: string): void;
        provideCallQualityFeedback(callId: string, participantId: string, questionaryId: string, trackingReason: string, rating: Enums.CallQualityRating, problemTokens: string): void;
        callSetAudioUsageMode(callObjectId: ObjectId, audioUsageMode: Enums.AudioUsageMode): void;
        removeParticipantByMri(callObjectId: ObjectId, participantMri: string, endpoint?: string, removeEndpointScope?: Enums.RemoveEndpointScope): void;
        callGetTechnicalInformationJson(callObjectId: ObjectId): string;
        callStartAudio(callObjectId: ObjectId, negotiationTag?: string): void;
        callStopAudio(callObjectId: ObjectId, negotiationTag?: string): void;
        callSetMaxVideoChannels(callObjectId: ObjectId, maxVideoChannels: number, negotiationTag: string, causeId?: string): void;
        startCallPark(callObjectId: ObjectId, parkContext: Enums.ParkContext): void;
        startCallUnpark(callGuid: string, callProperties: CallProperties, parkContext: Enums.ParkContext, pickupCode: string): ObjectId;
        updateMeetingRoles(callObjectId: ObjectId, participantList: string[], meetingRole?: string, causeId?: string): void;
        joinPreheatedCall(callObjectId: ObjectId, causeId?: string, muteFlags?: number): void;
        callMerge(callObjectId1: ObjectId, callObjectId2: ObjectId, threadId?: string, messageId?: string, causeId?: string): void;
        addParticipantsToCall(callObjectId: ObjectId, participantList: string[], threadId?: string, messageId?: string, additionalData?: string, disableUnmute?: boolean, causeId?: string): ObjectId[];
        addGroupModality(callObjectId: ObjectId, threadId?: string, messageId?: string, additionalData?: string, causeId?: string): void;
        mergeCall(callObjectId: ObjectId, pickupCode?: string, threadId?: string, messageId?: string, causeId?: string): void;
        consultativeTransferWithOptions(transfereeCallObjectId: ObjectId, pickupCode?: string, consultativeCallObjectId?: ObjectId, causeId?: string): void;
    }
    
    interface CallProperties {
        audioDirection?: Enums.MediaDirection;
        videoDirection?: Enums.MediaDirection;
        screenshareDirection?: Enums.MediaDirection;
        datachannelDirection?: Enums.MediaDirection;
        threadId?: string;
        messageId?: string;
        isVideoEnabled?: boolean;
        isGoLive?: boolean;
        isHostless?: boolean;
        enableGroupCallMeetupGeneration?: boolean;
        subject?: string;
        conversationType?: string;
        meetingInfo?: string;
        endpointMetadata?: string;
        onBehalfOf?: string;
        enableLightWeightMeeting?: boolean;
        emergencyContent?: string;
        broadcastContext?: string;
        participantLegId?: string;
        callKey?: string;
        encryptedKey?: string;
        connectionType?: Enums.ConnectionType;
        invitationType?: Enums.InvitationType;
        maxVideoChannels?: number;
        mediaPeerType?: Enums.MediaPeerType;
        muteFlags?: number;
        negotiationTag?: string;
        routingFlags?: string[];
        debugInfo?: string;
        scenario?: string;
        preheatFlags?: number;
        locationContent?: string;
        mediaConfigurationJson?: string;
        mediaStateConfigurationJson?: string;
    }
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore.d.ts'
// -----------------------------------------------------------------------------

declare module SlimCore {

    interface Disposable {
        dispose(): void;
        isDisposed?(): boolean;
    }

    type EventHandler<T> = (args: T) => void;

    interface EventEmitter<T> {
        handle?<P extends keyof T>(event: P, filter: Partial<T[P]>, listener: EventHandler<T[P]>): Disposable;
        addListener<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        on<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        once<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        removeListener<P extends keyof T>(event: P, listener: EventHandler<T[P]>): this;
        removeAllListeners<P extends keyof T>(event?: P): this;
        getMaxListeners(): number;
        setMaxListeners(n: number): void;
        listeners<P extends keyof T>(event: P): Function[];
        emit<P extends keyof T>(event: P, args: T[P]): boolean;
    }

    interface SlimCoreOptions {
        version: string;
        dataPath: string;
        logFileName?: string;
        mediaLogsPath?: string;
        isEncrypted?: boolean;
        objectLogging?: boolean;
        stdoutLogging?: boolean;
    }

    interface InstanceCounts {
        ChromiumFrameSink?: number;
        VideoBindingRenderer?: number;
        VideoBindingScreenShare?: number;
        DataChannel?: number;
        DataSink?: number;
        DataSource?: number;
        Ndi?: number;
        Trouter?: number;
        TrouterListener?: number;
        TrouterRequest?: number;
        TrouterResponse?: number;
    }

    function getVersion(): string;
    function getApiVersion(): number;

    function createSlimCoreInstance(options: SlimCoreOptions): Engine;
    function createChromiumFrameSink(): ChromiumFrameSink;
    function getInstanceCounts(): InstanceCounts;
    function queryDeviceRotation(): number;
    function getAuthorizationStatus(mediaType: Enums.MediaType): Enums.AuthorizationStatus;
    function requestAuthorization(mediaType: Enums.MediaType): Promise<boolean>;

    interface DeviceInfo {
        id: string;
        label: string;
        vendorId: number | string;
        productId: number | string;
    }

    interface AudioDeviceInfo extends DeviceInfo {
        isSystemDefault: boolean;
    }

    interface VideoDeviceInfo extends DeviceInfo {
        deviceType: Enums.DeviceType;
        cameraFacing: Enums.CameraFacing;
    }

    interface CompositeAudioDeviceInfo {
        label: string;
        microphoneId: string;
        microphoneProductId: string;
        speakerId: string;
        speakerProductId: string;
        deviceType: Enums.CompositeAudioDeviceType;
        isPcInternalDevice: boolean;
    }

    interface SnapshotOptions {
        width?: number;
        height?: number;
        asImage?: boolean;
        allowRetinaSizedImages?: boolean;
    }

    interface Region {
        x: number;
        y: number;
        width: number;
        height: number;
    }

    interface MonitorInfo {
        monitorId: number;
        name: string;
        region: Region;
        isPrimary: boolean;
        isInternal: boolean;
        isDuplicated: boolean;
    }

    interface WindowInfo {
        windowId: number;
        title: string;
        applicationName?: string;
    }

    interface ImageData {
        data: Uint8Array | string;
        width: number;
        height: number;
        isImage: boolean;
    }

    interface VideoBindingRendererArgs {
        enableDXVA?: boolean;
        ignoreBlankFrame?: boolean;
        isLocalPreview?: boolean;
    }

    interface HandlePushNotificationOptions {
        eventType: number;
        servicePayload: string;
        correlationIdsJson?: string;
        notificationSource?: string;
        isBuddy?: boolean;
        callKey?: string;
        connectionType?: Enums.ConnectionType;
        accountIdentity?: string;
        mediaConfigurationJson?: string;
    }

    interface InsertRegistrationTransportOptions {
        serviceTypes: Enums.ServiceType[];
        contexts: string[];
        registrationTokens: string[];
        registrationTTLs: number[];
        activityId: string;
        reason: string;
    }

    interface Credentials {
        accountName: string;
        passwordHash: string;
        refreshToken: string;
        refreshTokenExpiration: number;
        skypeToken: string;
        skypeTokenExpiration: number;
        partnerId: number;
    }

    interface MediaConfiguration {
        openCameraInMaxResolution?: boolean;
        mediaPortRanges?: MediaPortRanges;
        enableMediaQoS?: boolean;
        enableAGC?: boolean;
        enableTtySupport?: boolean;
        setOutputSliderVolume?: number;
        enableSystemSoundSharing?: boolean;
        audioUsageMode?: Enums.AudioUsageMode;
        maxBandwidthInBps?: number;
    }

    interface Size {
        width: number;
        height: number;
    }
    
    interface VideoCaptureConfig {
        minFrameSize?: Size;
        maxFrameSize?: Size;
        minFrameRate?: number;
        maxFrameRate?: number;
        orientationOffset?: number;
    }

    interface Setup extends Disposable {
        isDefined(key: string): boolean;
        delete(key: string): void;
        getStr(key: string, defaultValue?: string): string;
        getInt(key: string, defaultValue?: number): number;
        setStr(key: string, value: string): void;
        setInt(key: string, value: number): void;
    }

    namespace Engine {
        namespace Events {
            type ObjectPropertyChangedArgs = {
                objectType: Enums.ObjectType;
                objectId: ObjectId;
                propKey: Enums.Property;
                value: string | number;
            };

            type QualityChangedArgs = {
                objectType: Enums.ObjectType;
                objectId: ObjectId;
                type: Enums.QualityEventType;
                value: Enums.QualityLevel;
                mediaType: Enums.MediaType;
            };

            type DeviceListChangedArgs = {
                video: boolean;
            };

            type E911InfoArgs = {
                info: string;
            };

            type LibStatusChangedArgs = {
                libStatus: Enums.LibStatus;
            }

            type MediaStatusChangedArgs = {
                mediaStatus: Enums.MediaStatus;
            }

            type NdiTelemetryEventArgs = {
                name: string;
                payload: string;
            };
        }

        interface Events {
            "object-property-changed": Events.ObjectPropertyChangedArgs;
            "quality-changed": Events.QualityChangedArgs;
            "device-list-changed": Events.DeviceListChangedArgs;
            "e911-info-changed": Events.E911InfoArgs;
            "lib-status-changed": Events.LibStatusChangedArgs;
            "media-status-changed": Events.MediaStatusChangedArgs;
            "ndi-telemetry-event": Events.NdiTelemetryEventArgs;
        }
    }

    interface Engine extends Disposable, EventEmitter<Engine.Events> {
        start(block?: boolean): void;

        login(userId: string, skypeToken: string, displayName?: string): void; // DEPRECATED
        logout(): void; // DEPRECATED
        updateSkypeToken(skypeToken: string): void; // DEPRECATED

        // Ideally to be set as soon as you login.
        // Can be of the format - <rc_id1>:<userId1>;aliases=<rc_id2>:<userId2>,<rc_id3>:<userId3>
        // Example: 8:identity;aliases=2:sipId@microsoft.com,4:+100000001
        setAdditionalIdentities(identities: string): void; // DEPRECATED

        setRing(ring: string): void; // DEPRECATED
        setTenantId(tenantId: string): void; // DEPRECATED

        fireIntent(intent: Enums.Intent, identity?: string, preheatCall?: CallProperties, accountIdentity?: string): void;
        flushLogs(): void;

        getNodeId(): string;
        getFingerprintId(): string;

        setupIsDefined(key: string): boolean; // DEPRECATED
        setupDelete(key: string): void; // DEPRECATED
        setupGetSubKey(key: string, index: number): string; // DEPRECATED
        setupGetStr(key: string, defaultValue?: string): string; // DEPRECATED
        setupGetInt(key: string, defaultValue?: number): number; // DEPRECATED
        setupSetStr(key: string, value: string): void; // DEPRECATED
        setupSetInt(key: string, value: number): void; // DEPRECATED

        getEcsQueryParameters(): string;
        shouldTriggerCQF(username: string, callId: string, callType: Enums.CallType): boolean;
        getSetup(accountIdentity?: string): Setup;

        // agent corresponds to the ECS project name and path corresponds to the short path in the JSON.
        // Ex: The API parameters to read a config in SkypeCalling project with the JSON { "ngIcoming": { "isUdpEnabled": true } }
        // ecsGetSettingAsBool("SkypeCalling", "ngIncoming/isUdpEnabled, false);
        ecsGetSettingAsInt(agent: string, path: string, defaultValue?: number): number;
        ecsGetSettingAsString(agent: string, path: string, defaultValue?: string): string;
        ecsGetSettingAsBool(agent: string, path: string, defaultValue?: boolean): boolean;

        setMediaConfig(configuration: MediaConfiguration): void;
        setDeviceRotation(rotation: number): void;

        getCameraList(): VideoDeviceInfo[];
        getMicrophoneList(): AudioDeviceInfo[];
        getSpeakerList(): AudioDeviceInfo[];
        getCompositeAudioDevices(): CompositeAudioDeviceInfo[];

        getMonitorList(): MonitorInfo[];
        getMonitorSnapshot(monitorId: number, options: SnapshotOptions, region?: Region): Promise<ImageData>;

        getWindowList(): WindowInfo[];
        getWindowIcon(windowId: number, options: SnapshotOptions): Promise<ImageData>;
        getWindowSnapshot(windowId: number, options: SnapshotOptions): Promise<ImageData>;

        selectAudioDevices(microphone: string, speaker: string): void;

        getMicrophoneVolume(): number;
        setMicrophoneVolume(volume: number): void;

        videoStart(videoObjectId: ObjectId, negotiationTag?: string): void;
        videoStop(videoObjectId: ObjectId, negotiationTag?: string): void;

        createDataSource(dataId: number): DataSource;
        createDataSink(dataId: number): DataSink;

        createVideoBindingRenderer(args: VideoBindingRendererArgs): VideoBindingRenderer;
        createVideoBindingScreenShare(): VideoBindingScreenShare;
        videoCreateBinding(videoObjectId: ObjectId, videoBinding: VideoBinding): Promise<void>;
        videoReleaseBinding(videoObjectId: ObjectId, videoBinding: VideoBinding): Promise<void>;

        createLocalVideo(type: Enums.VideoType, name?: string, path?: string): ObjectId;
        createPreviewVideo(type: Enums.VideoType, name?: string, path?: string): ObjectId;

        createNdi(localizedStrings?: string): Ndi;
        createCallInterface(): CallHandler;

        getAccount(accountIdentity: string): Account;
        getCallHandler(accountObjectId: ObjectId): CallHandler;
        getContentSharing(contentSharingObjectId: ObjectId): ContentSharing;
        getDataChannel(dataChannelObjectId: ObjectId): DataChannel;

        createTrouter(handle?: string): Trouter;
        createTrouterListener(): TrouterListener;

        handlePushNotification(options: HandlePushNotificationOptions): number;
        insertRegistrationTransports(options: InsertRegistrationTransportOptions): number;

        getOldCredentials(): Credentials;

        setDeviceEffects(deviceId: DeviceId, type: Enums.VideoEffectType): void;
        getDeviceEffectsCapability(deviceId: DeviceId, mask?: number): number;
        setBackgroundImage(deviceId: DeviceId, imagePath: string): void;
        setVideoCaptureConfig(deviceId: DeviceId, config: VideoCaptureConfig): void;
        dumpVideoSourceImages(videoObjectId: ObjectId): Promise<number>;

        getProperties?<T extends StrProperties, U extends IntProperties>(objectId: ObjectId, strProperties: T, intProperties: U): PropertyResults<T, U>;

        getMediaStatus(): Enums.MediaStatus;

        addProbeDevices(): boolean;
    }

    interface VideoBinding extends Disposable {
        isAttached(): boolean;
    }

    namespace VideoBindingRenderer {
        type CaptureFrameOptions = {
            timeout?: number; // milliseconds
        };

        type Frame = {
            image: ImageData;
            origWidth: number;
            origHeight: number;
            mirror: boolean;
            cropInfo: FrameSink.CropInfo;
        } & FrameSink.Metadata;
    }

    interface VideoBindingRenderer extends VideoBinding {
        hasFrameSink(frameSink: FrameSink): boolean;
        addFrameSink(frameSink: FrameSink): void;
        removeFrameSink(frameSink: FrameSink): void;
        setVideoPreference(width: number, height: number): void;
        captureFrame(options?: VideoBindingRenderer.CaptureFrameOptions): Promise<VideoBindingRenderer.Frame>;
    }

    namespace VideoBindingScreenShare {
        namespace Events {
            type ScraperEventArgs = {
                event: Enums.ScraperEvent;
                data: number;
            };
        }

        interface Events {
            "scraper-event": Events.ScraperEventArgs;
        }
    }

    interface VideoBindingScreenShare extends EventEmitter<VideoBindingScreenShare.Events>, VideoBinding {
        setCaptureRegionAndWindow(region?: Region, windowId?: number): void;
    }

    namespace FrameSink {
        type Format = string;

        type CropInfo = {
            leftOffset: number;
            rightOffset: number;
            topOffset: number;
            bottomOffset: number;
        }

        type ImageInfo = {
            format: Format;
            width: number;
            height: number;
            origWidth: number;
            origHeight: number;
            stride: number;
            timestamp: Date;
            timestampValue: number;
            mirror: boolean;
            padding: CropInfo;
            cropInfo: CropInfo;
        }

        type VideoFrame = {
            info: ImageInfo;
            data: ArrayBuffer;
        }

        type Metadata = {
            attachment: Uint8Array;
            timestamp: Date;
            timestampValue: number;
        }

        const enum FrameType {
            None,
            Software,
            Hardware,
        }

        const enum LogLevel {
            Default,
            Debug,
            Info,
            Warning,
            Error,
        }

        type Stats = {
            framesDropped: number;
            framesTotal: number;
        }

        namespace Events {
            type FirstFrameRenderedArgs = {
            };

            type FrameTypeChangedArgs = {
                type: FrameType;
            };

            type FrameSizeChangedArgs = {
                width: number;
                height: number;
            };
			
            type FullFrameRenderRequiredArgs = {
                fullFrameRenderRequired: boolean;
            };
        }

        interface Events {
            "first-frame-rendered": Events.FirstFrameRenderedArgs;
            "frame-type-changed": Events.FrameTypeChangedArgs;
            "frame-size-changed": Events.FrameSizeChangedArgs;
            "full-frame-render-required": Events.FullFrameRenderRequiredArgs;
        }
    }

    interface FrameSink extends EventEmitter<FrameSink.Events>, Disposable {
        getStats(): FrameSink.Stats;
        getMetadata(): FrameSink.Metadata;
        getFrameType(): FrameSink.FrameType;
        setVideoPreference(width: number, height: number): void;
        setIgnoreMirroring(ignore: boolean): void;
        log(level: FrameSink.LogLevel, message: string): void;
    }

    namespace ChromiumFrameSink {
        type Stats = FrameSink.Stats & {
            rendererFramesDropped: number;
            rendererFramesTotal: number;
            rendererFramesInBackground: number;
        };

        const enum StorageType {
            None,
            Buffer,
            Texture,
        }

        namespace Events {
            type StorageTypeChangedArgs = {
                type: StorageType;
            };
        }

        interface Events extends FrameSink.Events {
            "storage-type-changed": Events.StorageTypeChangedArgs;
        }
    }

    interface ChromiumFrameSink extends EventEmitter<ChromiumFrameSink.Events>, FrameSink {
        getBufferName(): string;
        getStats(): ChromiumFrameSink.Stats;
    }

    interface CallVoicemailProperties {
        threadId?: string;
        voicemailResourcePath?: string;
        voicemailItemId?: string;
    }

    interface StrProperties {
        [key: string]: {
            objectId?: ObjectId;
            propKey: SlimCore.Enums.Property;
            fallback?: string;
        };
    }

    interface IntProperties {
        [key: string]: {
            objectId?: ObjectId;
            propKey: SlimCore.Enums.Property;
            fallback?: number;
        };
    }

    type StrPropertyResults<T> = {
        [P in keyof T]: string;
    };

    type IntPropertyResults<T> = {
        [P in keyof T]: number;
    };

    type PropertyResults<T, U> = StrPropertyResults<T> & IntPropertyResults<U>;

    type ObjectId = number;
    type DeviceId = string;

    // This interface contains CallHandler APIs that are not autogenerated
    // avoid manually inserting any in here at all costs.
    interface CallHandler extends Disposable, EventEmitter<CallHandler.Events> {
        placeCall(callGuid: string, participantList: string[], callProperties?: CallProperties): ObjectId;
        startSignalingSession(callGuid: string, participantList: string[], callProperties?: CallProperties): ObjectId;

        joinCall(joinContext: string, callProperties: CallProperties): ObjectId;
        joinSignalingSession(joinContext: string, callProperties: CallProperties): ObjectId;

        subscribe(joinContext: string, callProperties: CallProperties): ObjectId;
        subscribeToSignalingSession(joinContext: string, callProperties: CallProperties): ObjectId;

        answerCall(callObjectId: ObjectId, isVideoEnabled?: boolean): void;
        acceptCall(callObjectId: ObjectId, answerMediaType: Enums.AnswerMediaType): void;

        addParticipant(callObjectId: ObjectId, participant: string, threadId?: string, messageId?: string, additionalData?: string): ObjectId;
        nudgeParticipants(callObjectId: ObjectId, participantList: string[], context?: string, threadId?: string, messageId?: string, additionalData?: string): void;

        callUpdateEndpointMetadata(callObjectId: ObjectId, endpointMetadata: string): void;

        getIntProperty(objectId: ObjectId, propertyKey: Enums.Property): number; // DEPRECATED
        getStrProperty(objectId: ObjectId, propertyKey: Enums.Property): string; // DEPRECATED

        getProperties?<T extends StrProperties, U extends IntProperties>(objectId: SlimCore.ObjectId, strProperties: T, intProperties: U): PropertyResults<T, U>; // DEPRECATED

        placeCallToVoicemail(callGuid: string, mediaPeerType: Enums.MediaPeerType, participant: string, callProperties?: CallVoicemailProperties): ObjectId;
    }

    interface MediaPortRanges {
        audioMin: number;
        audioMax: number;
        videoMin: number;
        videoMax: number;
        dataMin: number;
        dataMax: number;
        vbssMin?: number;
        vbssMax?: number;
    }

    interface DataChannel extends Disposable {
        start(negotiationTag?: string): void;
        stop(negotiationTag?: string): void;

        registerDataSource(dataSource: DataSource): void;
        unregisterDataSource(dataSource: DataSource): void;

        registerDataSink(dataSink: DataSink): void;
        unregisterDataSink(dataSink: DataSink): void;

        setDataDevices(): void;

        sendUserEvents(events: string, participantIds?: string[]): void;
    }

    namespace DataDevice {
        namespace Events {
            type EventArgs = {
                event: Enums.DataDeviceEvent;
            };
        }

        interface Events {
            "event": Events.EventArgs;
        }
    }

    interface DataDevice extends Disposable, EventEmitter<DataDevice.Events> {
    }

    interface DataSource extends DataDevice {
        sendData(data: Uint8Array, recipients?: number[]): void;
    }

    namespace DataSink {
        namespace Events {
            type DataArgs = {
                data: Uint8Array;
                sourceID: number;
            };
        }

        interface Events {
            "data": Events.DataArgs;
        }
    }

    interface DataSink extends EventEmitter<DataSink.Events>, DataDevice {
    }

    namespace Trouter {
        interface HeaderEntry {
            header: string;
            value: string;
        }
    }

    interface TrouterRequest extends Disposable {
        getHeaders(): Trouter.HeaderEntry[];
        getBody(): string;
        getMethod(): string;
        getURLPathComponent(): string;
    }

    interface TrouterResponse extends Disposable {
        getId(): number;
        getHeaders() : Trouter.HeaderEntry[];
        getBody() : string;
        getStatus() : number;

        setHeader(header: string, value: string): void;
        setBody(body: string): void;
        setStatus(status: number): void;

        send(): Enums.TrouterMessageSendStatusCode;
    }

    namespace TrouterListener {
        namespace Events {
            type TrouterConnectedArgs = {
                routingPath: string;
                newPublicUrl: boolean;
                missedRequests: boolean;
            };

            type TrouterDisconnectedArgs = { };

            type TrouterRequestArgs = {
                request: TrouterRequest;
                response: TrouterResponse;
            };

            type TrouterResponsSentArgs = {
                response: TrouterResponse;
                isSuccess: boolean;
            };
        }
        interface Events {
            "trouter-connected": Events.TrouterConnectedArgs;
            "trouter-disconnected": Events.TrouterDisconnectedArgs;
            "trouter-request": Events.TrouterRequestArgs;
            "trouter-response-sent": Events.TrouterResponsSentArgs;
        }
    }

    interface TrouterListener extends Disposable, EventEmitter<TrouterListener.Events> {
    }

    interface Trouter extends Disposable {
        createTrouterListener(): TrouterListener;
        registerListener(listener: TrouterListener, path: string, loggingName: string): void;
        unregisterListener(listener: TrouterListener): void;
        registerListener2(listener: TrouterListener2, path: string): void;
        unregisterListener2(remoteId: string): void;

        getConnectionTTLInSec(): number;
        getConnectionId(): string;
        getConnectedClientId(): string;
    }

    // TsTrouter-like interfaces with a few changes for better IPC layout

    interface TrouterConnectionInfo2 {
        readonly baseEndpointUrl: string;
        readonly newEndpointUrl: boolean;
        readonly clientId: string;
        readonly connectionId: string;
        readonly connectionTtlSec: number;
    }

    type TrouterHeaders2 = {
        [name: string]: string;
    };

    interface TrouterRequest2 {
        readonly id: number;
        readonly method: string;
        readonly path: string;
        readonly headers: TrouterHeaders2;
        readonly body: string;
    }

    interface TrouterResponse2 {
        readonly id: number;
        status: number;
        headers: TrouterHeaders2;
        body: string;
    }

    interface TrouterListener2 {
        onTrouterConnected(endpointUrl: string, connectionInfo: TrouterConnectionInfo2): void;
        onTrouterDisconnected?(): void;
        onTrouterRequest(request: TrouterRequest2, responseSendFunc: (response: TrouterResponse2) => number): void;
        remoteId: string;
    }

    namespace Ndi {
        namespace Events {
            type IsCapturedChangedArgs = {
            };
        }

        interface Events {
            "is-captured-changed": Events.IsCapturedChangedArgs;
        }
    }

    interface Ndi extends Disposable, EventEmitter<Ndi.Events> {
        cleanUpAsync(): Promise<void>;
        isSupported(): boolean;
        isCaptured(): boolean;
        updateLocalizedStrings(localizedStrings: string): void;
        updateSettings(settings: string): void;
    }
}

declare module 'slimcore' {
    export = SlimCore;
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore-uwp.d.ts'
// -----------------------------------------------------------------------------

declare module SlimCoreRT {
    interface CommonWrapperEventPayload {
        target: string;
        detail: any[];
        type: string;
    }

    export interface LogFunction {
        target: string;
        detail: any[];
        type: string;
    }

    export class Config {
        constructor();
        logger(logger: SlimCoreRT.LogFunction, dispatchToCoreWindow: boolean): SlimCoreRT.Config;
        logger(logger: SlimCoreRT.LogFunction): SlimCoreRT.Config;
        dispatchToCoreWindow(): SlimCoreRT.Config;
        uiVersion(uiVersion: string): SlimCoreRT.Config;
        storageDir(storageDir: string): SlimCoreRT.Config;
        mediaBinDir(mediaBinDir: string): SlimCoreRT.Config;
        logsDir(logsDir: string): SlimCoreRT.Config;
        encryptSkyLibLogs(encryptLogs: boolean): SlimCoreRT.Config;
        validate(): SlimCoreRT.Config;
        clone(): SlimCoreRT.Config;
        writeToLog(): SlimCoreRT.Config;
    }

    class SkyLib {
        static current: Engine;
    }

    interface Engine {
        inner: SlimCore.Engine;
        start(config: Config): void;

        setClientDescription(app: string,
                             platform: string,
                             templateKey : string,
                             activityId: string,
                             reason: string,
                             xuid: string
        ): number;

        insertRegistrationTransports(
            serviceTypes : SlimCore.Enums.ServiceType[],
            contexts : string[],
            registrationTokens : string[],
            registrationTTLs : number[],
            activityId : string,
            reason : string
        ) : number;
    }

    namespace VideoBindingRenderer {
        namespace Events {
            type VideoUriChangedArgs = {
                uri: string;
            };
        }

        interface Events {
            "video-uri-changed": Events.VideoUriChangedArgs;
        }
    }

    interface VideoBindingRenderer extends SlimCore.EventEmitter<VideoBindingRenderer.Events>, SlimCore.VideoBindingRenderer {
        uri: string;
        setVideoPreference(width: number, height: number): void;
    }
}

declare module 'slimcore-uwp' {
    export = SlimCoreRT;
}


// -----------------------------------------------------------------------------
// Expansion of reference path './slimcore-legacy.d.ts'
// -----------------------------------------------------------------------------

type GlobalImageData = ImageData;

declare module SlimCore {

    function createPepperFrameSink(): ChromiumFrameSink;
    function createVideoBindingRenderer(): VideoBindingRenderer;
    function createVideoBindingScreenShare(): VideoBindingScreenShare;
    function createDataSource(dataId: number): DataSource;
    function createDataSink(dataId: number): DataSink;

    interface MediaConfig {
        enableMediaQoS(enable: boolean): void;
        setMediaPortRanges(portRanges: MediaPortRanges): void;
        enableTtySupport(enable: boolean): void;
        dispose(): void;
    }

    interface Engine {
        createMediaConfig(): MediaConfig;
        setScreenCaptureRectangle(videoObjectId: ObjectId, region?: Region, monitorNumber?: number, windowHandle?: number): void;
        enableMediaQoS(enable: boolean): void;
        setOpenCameraInMaxResolution(enable: boolean): void;
        enableTtySupport(enable: boolean): void;
        enableAGC(enable: boolean): void;
        setMediaPortRanges(portRanges: MediaPortRanges): void;
    }

    namespace VideoRenderer {
        interface ConstructorArgs {
            useCropInfo?: boolean;
        }
    }

    interface ImageInfo {
        data: string;
        width: number;
        height: number;
    }

    class ScreenScraper {
        getMonitorList(): MonitorInfo[];
        getMonitorPreview(monitorId: number, width?: number, height?: number, asImage?: boolean, region?: Region): Promise<GlobalImageData | ImageInfo>;

        getWindowList(): WindowInfo[];
        getWindowIcon(windowId: number, width?: number, height?: number, asImage?: boolean): Promise<GlobalImageData | ImageInfo>;
        getWindowPreview(windowId: number, width?: number, height?: number, asImage?: boolean): Promise<GlobalImageData | ImageInfo>;
    }

    namespace VideoRenderer {
        const enum RendererType {
            WebGLv1 = 1,
            WebGLv2 = 2,
            Pepper = 3,
            Chromium = 4,
            Ndi = 5,
        }
    }
}


// -----------------------------------------------------------------------------
// Expansion of reference path './video-renderer.d.ts'
// -----------------------------------------------------------------------------
declare namespace SlimCore {

    namespace VideoRenderer {
        interface Logger {
            createChild(namespace: string): Logger;

            log(...args: any[]): void;
            debug(...args: any[]): void;
            info(...args: any[]): void;
            warn(...args: any[]): void;
            error(...args: any[]): void;
        }

        const enum ScalingMode {
            Stretch,
            Crop,
            Fit
        }

        interface ConstructorArgs {
            container: HTMLElement;
            transparent: boolean;
            scalingMode: ScalingMode;
            logger?: Logger;
            useBufferSharing?: boolean;
            useFirstFrameRender?: boolean;
        }

        const enum ErrorReason {
            Unknown,
            ContextFailed,
            Unavailable,
        }

        type Size = {
            width: number;
            height: number;
        }

        namespace Events {
            type VideoSizeChangedArgs = Size;
        }

        interface Events {
            "video-size-changed": Events.VideoSizeChangedArgs;
        }
    }

    interface VideoRendererError extends Error {
        readonly reason: VideoRenderer.ErrorReason;
    }

    interface VideoRenderer extends EventEmitter<VideoRenderer.Events>, Disposable {
        getFrameSink(): FrameSink;
        getVideoSize(): VideoRenderer.Size;
        setScalingMode(mode: VideoRenderer.ScalingMode): Promise<void>;
    }

    interface VideoRendererModule {
        createChromiumVideoRenderer(frameSink: ChromiumFrameSink, args: VideoRenderer.ConstructorArgs): VideoRenderer;
        isChromiumVideoRendererAvailable(): boolean;
    }
}

declare const VideoRenderer: SlimCore.VideoRendererModule;


// -----------------------------------------------------------------------------
// Component 'skype-calling-electron'
// -----------------------------------------------------------------------------
declare module skype.calling.electron {


import CallingLogger = skype.calling.CallingLogger;
import ICallingStack = skype.calling.ICallingStack;
import IDisposable = skype.calling.IDisposable;
import IObservableObject = skype.calling.IObservableObject;
import IVideoFrame = skype.calling.IVideoFrame;
import TsCallingVersion = skype.calling.TsCallingVersion;

export type SlimCoreSettings = {
    enableDXVA: boolean;
    enableBufferSharing?: boolean;
    enableFirstFrameRender?: boolean;
    autoStopLocalVideo?: boolean;
    enableNativeHandle?: boolean;
    enableNativeGetProperties?: boolean;
    enableSlimCoreEventsCounting?: boolean;
    enableTsCallingULLogging?: boolean;
    enableRemoteStreamVideoBindingRetry?: boolean;
    enableParticipantsGetPropsAggregation?: boolean;
};

export interface Rectangle {
    x: number;
    y: number;
    width: number;
    height: number;
}

export const enum InjectorMode {
    Disabled,
    Seamless,
    Classic
}

export interface InjectorConfig {
    mode: InjectorMode;
    numVirtualCursors?: number;
    noMotionTimeoutMs?: number;
    noMotionSharerTimeoutMs?: number;
}

export interface ISlimCoreElectronControlInjector extends IDisposable {
    setInjectorConfig(config: InjectorConfig): Promise<void>;
    injectRawInput(buffer: Uint8Array, sourceId: number): Promise<void>;
    setInjectionRect(rect: Rectangle): Promise<void>;
    setAvatar(base64Buffer: Uint8Array, sourceId: number): Promise<void>;
    allowSingleController(sourceId: number): Promise<void>;
}

export interface ISlimCoreElectronApplicationHooks {
    onDisplaysChanged(callback: () => void): IDisposable;

    showSharingIndicator(regionOrWindowId?: Rectangle | number): void;
    hideSharingIndicator(): void;

    getControlInjector(): ISlimCoreElectronControlInjector;
}

export type SlimCoreElectronStackConfig = {
    logger: CallingLogger;
    slimCoreInstance: SlimCore.Engine;
    settings: SlimCoreSettings;
    appHooks: ISlimCoreElectronApplicationHooks;
    telemetryService?: TelemetryService;
};

export interface TelemetryService {
    sendEvent(eventName: string, properties: any): void;
}

export interface ISlimCoreStackFactory<T> {
    build(config: T): Promise<ICallingStack>;
    getVersion(): TsCallingVersion;
}

export interface ISlimCoreElectronStackFactory extends ISlimCoreStackFactory<SlimCoreElectronStackConfig> {
    build(config: SlimCoreElectronStackConfig): Promise<ICallingStack>;
}

export interface ISlimCoreUwpStackFactory extends ISlimCoreStackFactory<SlimCoreElectronStackConfig> {
    build(config: SlimCoreElectronStackConfig): Promise<ICallingStack>;
}

export interface IElectronVideoFrame extends IVideoFrame {
    getImageData(): ImageData;
}

export const slimCoreElectronStackFactory: ISlimCoreElectronStackFactory;
export const getVersion: () => string;
export const getOvb: () => string;
export const generateCauseId: () => string;
export const slimCoreUwpStackFactory: ISlimCoreUwpStackFactory;

} // declare module skype.calling.electron

declare module 'skype-calling-electron' {
    import ExportedNamespace = skype.calling.electron;
    export = ExportedNamespace;
} // declare module 'skype-calling-electron'

declare module '@skype/skype-calling-electron' {
    import ExportedNamespace = skype.calling.electron;
    export = ExportedNamespace;
} // declare module '@skype/skype-calling-electron'
