var $wnd = $wnd || window.parent;
var __gwtModuleFunction = $wnd.umletvscode;
var $sendStats = __gwtModuleFunction.__sendStats;
$sendStats('moduleStartup', 'moduleEvalStart');
var $gwt_version = "2.8.2";
var $strongName = '20574E2772347EDB438DA9E84CFC71F6';
var $gwt = {};
var $doc = $wnd.document;
var $moduleName, $moduleBase;
function __gwtStartLoadingFragment(frag) {
var fragFile = 'deferredjs/' + $strongName + '/' + frag + '.cache.js';
return __gwtModuleFunction.__startLoadingFragment(fragFile);
}
function __gwtInstallCode(code) {return __gwtModuleFunction.__installRunAsyncCode(code);}
function __gwt_isKnownPropertyValue(propName, propValue) {
return __gwtModuleFunction.__gwt_isKnownPropertyValue(propName, propValue);
}
function __gwt_getMetaProperty(name) {
return __gwtModuleFunction.__gwt_getMetaProperty(name);
}
var $stats = $wnd.__gwtStatsEvent ? function(a) {
return $wnd.__gwtStatsEvent && $wnd.__gwtStatsEvent(a);
} : null;
var $sessionId = $wnd.__gwtStatsSessionId ? $wnd.__gwtStatsSessionId : null;
var $intern_0 = 2147483647, $intern_1 = {157:1}, $intern_2 = {3:1, 6:1, 7:1, 4:1, 34:1}, $intern_3 = {3:1, 6:1, 4:1}, $intern_4 = {3:1, 6:1, 7:1, 304:1, 249:1, 4:1}, $intern_5 = {3:1, 6:1, 7:1, 4:1}, $intern_6 = {3:1, 4:1}, $intern_7 = {300:1, 23:1, 52:1, 41:1}, $intern_8 = {15:1, 3:1, 4:1}, $intern_9 = {250:1, 3:1, 4:1}, $intern_10 = {3:1, 17:1}, $intern_11 = {3:1, 14:1, 11:1, 17:1}, $intern_12 = -2147483648, $intern_13 = {27:1, 64:1}, $intern_14 = {303:1, 3:1, 4:1}, $intern_15 = {19:1}, $intern_16 = 1063, $intern_17 = 3.141592653589793, $intern_18 = {113:1}, $intern_19 = 1000, $intern_20 = {47:1, 3:1}, $intern_21 = 126976, $intern_22 = 4096, $intern_23 = {3:1}, $intern_24 = {l:0, m:0, h:16368}, $intern_25 = -9217, $intern_26 = {l:4194302, m:4192287, h:32767}, $intern_27 = 541165879422, $intern_28 = -268435457, $intern_29 = 137438953472, $intern_30 = 2048, $intern_31 = 268435456, $intern_32 = 65536, $intern_33 = 536870912, $intern_34 = 201326592, $intern_35 = 67108864, $intern_36 = 134217728, $intern_37 = 16384, $intern_38 = 32768, $intern_39 = 4236312576, $intern_40 = 1073741824, $intern_41 = 8388608, $intern_42 = 2147483648, $intern_43 = 1099511627776, $intern_44 = 65535, $intern_45 = {27:1, 64:1, 236:1, 389:1}, $intern_46 = {53:1, 22:1}, $intern_47 = 0.017453292519943295, $intern_48 = {153:1}, $intern_49 = {223:1}, $intern_50 = {151:1, 3:1}, $intern_51 = 983040, $intern_52 = 335544320, $intern_53 = 33554432, $intern_54 = 2097152, $intern_55 = 4194304, $intern_56 = 524288, $intern_57 = 131072, $intern_58 = 4194303, $intern_59 = {l:4185087, m:4194303, h:1015807}, $intern_60 = {l:4194303, m:4194239, h:786431}, $intern_61 = {l:0, m:64, h:327684}, $intern_62 = {l:0, m:64, h:4}, $intern_63 = {l:4194303, m:4194239, h:720895}, $intern_64 = 262144, $intern_65 = 8589934592, $intern_66 = {l:0, m:0, h:2}, $intern_67 = 2199023255552, $intern_68 = {l:0, m:0, h:64}, $intern_69 = 549755813888, $intern_70 = {l:0, m:0, h:4}, $intern_71 = {l:0, m:0, h:32}, $intern_72 = 274877906944, $intern_73 = 8796093022208, $intern_74 = {l:0, m:0, h:16}, $intern_75 = 824633720832, $intern_76 = {l:0, m:0, h:8}, $intern_77 = {l:0, m:0, h:36}, $intern_78 = {l:0, m:0, h:1}, $intern_79 = {l:0, m:524288, h:32}, $intern_80 = {l:8128, m:4186112, h:127}, $intern_81 = {l:192, m:983040, h:101}, $intern_82 = {1079:1, 64:1}, $intern_83 = {172:1}, $intern_84 = {26:1, 21:1}, $intern_85 = {30:1, 20:1, 28:1, 26:1, 31:1, 21:1, 24:1}, $intern_86 = {30:1, 20:1, 28:1, 26:1, 51:1, 31:1, 21:1, 24:1, 23:1}, $intern_87 = {82:1}, $intern_88 = {3:1, 82:1}, $intern_89 = 0.800000011920929, $intern_90 = 6.283185307179586, $intern_91 = {42:1, 35:1, 3:1, 9:1, 8:1}, $intern_92 = {35:1, 118:1, 3:1, 9:1, 8:1}, $intern_93 = {67:1, 3:1, 9:1, 8:1}, $intern_94 = {35:1, 179:1, 3:1, 9:1, 8:1}, $intern_95 = {20:1}, $intern_96 = {136:1, 137:1, 3:1, 14:1, 11:1, 17:1}, $intern_97 = 1048575, $intern_98 = 17592186044416, $intern_99 = -17592186044416, $intern_100 = {176:1}, $intern_101 = 1048576, $intern_102 = 16777216, $intern_103 = {30:1, 20:1, 28:1, 26:1, 51:1, 31:1, 63:1, 21:1, 24:1, 23:1}, $intern_104 = {302:1, 29:1}, $intern_105 = {30:1, 20:1, 28:1, 26:1, 51:1, 31:1, 203:1, 21:1, 24:1, 23:1}, $intern_106 = {998:1, 29:1}, $intern_107 = {23:1}, $intern_108 = {186:1, 3:1, 14:1, 11:1, 17:1}, $intern_109 = {76:1, 87:1}, $intern_110 = {76:1, 1009:1, 87:1}, $intern_111 = {3:1, 14:1, 66:1, 11:1, 17:1}, $intern_112 = {23:1, 52:1}, $intern_113 = 1036, $intern_114 = {23:1, 52:1, 108:1}, $intern_115 = {23:1, 52:1, 41:1}, $intern_116 = {3:1, 23:1, 52:1, 41:1, 222:1}, $intern_117 = {3:1, 23:1, 52:1, 108:1}, $intern_118 = {3:1, 9:1, 8:1, 135:1}, $intern_119 = 1034, $intern_120 = {3:1, 4:1, 381:1};
var _, prototypesByTypeId_0, initFnList_0, permutationId = -1;
function setGwtProperty(propertyName, propertyValue){
  typeof window === 'object' && typeof window['$gwt'] === 'object' && (window['$gwt'][propertyName] = propertyValue);
}

function gwtOnLoad_0(errFn, modName, modBase, softPermutationId){
  ensureModuleInit();
  var initFnList = initFnList_0;
  $moduleName = modName;
  $moduleBase = modBase;
  permutationId = softPermutationId;
  function initializeModules(){
    for (var i = 0; i < initFnList.length; i++) {
      initFnList[i]();
    }
  }

  if (errFn) {
    try {
      $entry(initializeModules)();
    }
     catch (e) {
      errFn(modName, e);
    }
  }
   else {
    $entry(initializeModules)();
  }
}

function ensureModuleInit(){
  initFnList_0 == null && (initFnList_0 = []);
}

function addInitFunctions(){
  ensureModuleInit();
  var initFnList = initFnList_0;
  for (var i = 0; i < arguments.length; i++) {
    initFnList.push(arguments[i]);
  }
}

function typeMarkerFn(){
}

function toString_36(object){
  var number;
  if (Array.isArray(object) && object.typeMarker === typeMarkerFn) {
    return $getName(getClass__Ljava_lang_Class___devirtual$(object)) + '@' + (number = hashCode__I__devirtual$(object) >>> 0 , number.toString(16));
  }
  return object.toString();
}

function portableObjCreate(obj){
  function F(){
  }

  ;
  F.prototype = obj || {};
  return new F;
}

function emptyMethod(){
}

function defineClass(typeId, superTypeIdOrPrototype, castableTypeMap){
  var prototypesByTypeId = prototypesByTypeId_0, superPrototype;
  var prototype_0 = prototypesByTypeId[typeId];
  var clazz = prototype_0 instanceof Array?prototype_0[0]:null;
  if (prototype_0 && !clazz) {
    _ = prototype_0;
  }
   else {
    _ = (superPrototype = superTypeIdOrPrototype && superTypeIdOrPrototype.prototype , !superPrototype && (superPrototype = prototypesByTypeId_0[superTypeIdOrPrototype]) , portableObjCreate(superPrototype));
    _.castableTypeMap = castableTypeMap;
    !superTypeIdOrPrototype && (_.typeMarker = typeMarkerFn);
    prototypesByTypeId[typeId] = _;
  }
  for (var i = 3; i < arguments.length; ++i) {
    arguments[i].prototype = _;
  }
  clazz && (_.___clazz = clazz);
}

function bootstrap(){
  prototypesByTypeId_0 = {};
  !Array.isArray && (Array.isArray = function(vArg){
    return Object.prototype.toString.call(vArg) === '[object Array]';
  }
  );
  function now_0(){
    return (new Date).getTime();
  }

  !Date.now && (Date.now = now_0);
}

bootstrap();
function Object_0(){
}

function equals_Ljava_lang_Object__Z__devirtual$(this$static, other){
  return instanceOfString(this$static)?$equals_6(this$static, other):instanceOfDouble(this$static)?(checkCriticalNotNull(this$static) , this$static === other):instanceOfBoolean(this$static)?(checkCriticalNotNull(this$static) , this$static === other):hasJavaObjectVirtualDispatch(this$static)?this$static.equals_0(other):isJavaArray(this$static)?this$static === other:!!this$static && !!this$static.equals?this$static.equals(other):maskUndefined(this$static) === maskUndefined(other);
}

function getClass__Ljava_lang_Class___devirtual$(this$static){
  return instanceOfString(this$static)?Ljava_lang_String_2_classLit:instanceOfDouble(this$static)?Ljava_lang_Double_2_classLit:instanceOfBoolean(this$static)?Ljava_lang_Boolean_2_classLit:hasJavaObjectVirtualDispatch(this$static)?this$static.___clazz:isJavaArray(this$static)?this$static.___clazz:this$static.___clazz || Array.isArray(this$static) && getClassLiteralForArray(Lcom_google_gwt_core_client_JavaScriptObject_2_classLit, 1) || Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}

function hashCode__I__devirtual$(this$static){
  return instanceOfString(this$static)?getHashCode_1(this$static):instanceOfDouble(this$static)?$hashCode_3(this$static):instanceOfBoolean(this$static)?(checkCriticalNotNull(this$static) , this$static)?1231:1237:hasJavaObjectVirtualDispatch(this$static)?this$static.hashCode_0():isJavaArray(this$static)?getHashCode_0(this$static):$hashCode_2(this$static);
}

defineClass(1, null, {}, Object_0);
_.equals_0 = function equals(other){
  return this === other;
}
;
_.hashCode_0 = function hashCode_0(){
  return getHashCode_0(this);
}
;
_.toString_0 = function toString_0(){
  var number;
  return $getName(getClass__Ljava_lang_Class___devirtual$(this)) + '@' + (number = hashCode__I__devirtual$(this) >>> 0 , number.toString(16));
}
;
_.equals = function(other){
  return this.equals_0(other);
}
;
_.hashCode = function(){
  return this.hashCode_0();
}
;
_.toString = function(){
  return this.toString_0();
}
;
function canCast(src_0, dstId){
  if (instanceOfString(src_0)) {
    return !!stringCastMap[dstId];
  }
   else if (src_0.castableTypeMap) {
    return !!src_0.castableTypeMap[dstId];
  }
   else if (instanceOfDouble(src_0)) {
    return !!doubleCastMap[dstId];
  }
   else if (instanceOfBoolean(src_0)) {
    return !!booleanCastMap[dstId];
  }
  return false;
}

function castTo(src_0, dstId){
  checkCriticalType(src_0 == null || canCast(src_0, dstId));
  return src_0;
}

function castToArray(src_0){
  var elementTypeCategory;
  checkCriticalType(src_0 == null || Array.isArray(src_0) && (elementTypeCategory = getElementTypeCategory(src_0) , !(elementTypeCategory >= 14 && elementTypeCategory <= 16)));
  return src_0;
}

function castToBoolean(src_0){
  checkCriticalType(src_0 == null || instanceOfBoolean(src_0));
  return src_0;
}

function castToDouble(src_0){
  checkCriticalType(src_0 == null || instanceOfDouble(src_0));
  return src_0;
}

function castToJso(src_0){
  checkCriticalType(src_0 == null || isJsObjectOrFunction(src_0) && !(src_0.typeMarker === typeMarkerFn));
  return src_0;
}

function castToString(src_0){
  checkCriticalType(src_0 == null || instanceOfString(src_0));
  return src_0;
}

function hasJavaObjectVirtualDispatch(src_0){
  return !Array.isArray(src_0) && src_0.typeMarker === typeMarkerFn;
}

function instanceOf(src_0, dstId){
  return src_0 != null && canCast(src_0, dstId);
}

function instanceOfBoolean(src_0){
  return typeof src_0 === 'boolean';
}

function instanceOfDouble(src_0){
  return typeof src_0 === 'number';
}

function instanceOfJso(src_0){
  return src_0 != null && isJsObjectOrFunction(src_0) && !(src_0.typeMarker === typeMarkerFn);
}

function instanceOfNative(src_0, jsType){
  return src_0 && jsType && src_0 instanceof jsType;
}

function instanceOfString(src_0){
  return typeof src_0 === 'string';
}

function isJsObjectOrFunction(src_0){
  return typeof src_0 === 'object' || typeof src_0 === 'function';
}

function maskUndefined(src_0){
  return src_0 == null?null:src_0;
}

function round_int(x_0){
  return Math.max(Math.min(x_0, $intern_0), -2147483648) | 0;
}

function throwClassCastExceptionUnlessNull(o){
  checkCriticalType(o == null);
  return o;
}

var booleanCastMap, doubleCastMap, stringCastMap;
function $ensureNamesAreInitialized(this$static){
  if (this$static.typeName != null) {
    return;
  }
  initializeNames(this$static);
}

function $getName(this$static){
  $ensureNamesAreInitialized(this$static);
  return this$static.typeName;
}

function Class_0(){
  ++nextSequentialId;
  this.typeName = null;
  this.simpleName = null;
  this.packageName = null;
  this.compoundName = null;
  this.canonicalName = null;
  this.typeId = null;
  this.arrayLiterals = null;
}

function createClassObject(packageName, compoundClassName){
  var clazz;
  clazz = new Class_0;
  clazz.packageName = packageName;
  clazz.compoundName = compoundClassName;
  return clazz;
}

function createForClass(packageName, compoundClassName, typeId){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  return clazz;
}

function createForEnum(packageName, compoundClassName, typeId, enumConstantsFunc){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  clazz.modifiers = enumConstantsFunc?8:0;
  return clazz;
}

function createForInterface(packageName, compoundClassName){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  clazz.modifiers = 2;
  return clazz;
}

function createForPrimitive(className, primitiveTypeId){
  var clazz;
  clazz = createClassObject('', className);
  clazz.typeId = primitiveTypeId;
  clazz.modifiers = 1;
  return clazz;
}

function getClassLiteralForArray_0(leafClass, dimensions){
  var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];
  return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));
}

function getPrototypeForClass(clazz){
  if (clazz.isPrimitive()) {
    return null;
  }
  var typeId = clazz.typeId;
  return prototypesByTypeId_0[typeId];
}

function initializeNames(clazz){
  if (clazz.isArray_0()) {
    var componentType = clazz.componentType;
    componentType.isPrimitive()?(clazz.typeName = '[' + componentType.typeId):!componentType.isArray_0()?(clazz.typeName = '[L' + componentType.getName() + ';'):(clazz.typeName = '[' + componentType.getName());
    clazz.canonicalName = componentType.getCanonicalName() + '[]';
    clazz.simpleName = componentType.getSimpleName() + '[]';
    return;
  }
  var packageName = clazz.packageName;
  var compoundName = clazz.compoundName;
  compoundName = compoundName.split('/');
  clazz.typeName = join_0('.', [packageName, join_0('$', compoundName)]);
  clazz.canonicalName = join_0('.', [packageName, join_0('.', compoundName)]);
  clazz.simpleName = compoundName[compoundName.length - 1];
}

function join_0(separator, strings){
  var i = 0;
  while (!strings[i] || strings[i] == '') {
    i++;
  }
  var result = strings[i++];
  for (; i < strings.length; i++) {
    if (!strings[i] || strings[i] == '') {
      continue;
    }
    result += separator + strings[i];
  }
  return result;
}

function maybeSetClassLiteral(typeId, clazz){
  var proto;
  if (!typeId) {
    return;
  }
  clazz.typeId = typeId;
  var prototype_0 = getPrototypeForClass(clazz);
  if (!prototype_0) {
    prototypesByTypeId_0[typeId] = [clazz];
    return;
  }
  prototype_0.___clazz = clazz;
}

defineClass(312, 1, {}, Class_0);
_.createClassLiteralForArray = function createClassLiteralForArray(dimensions){
  var clazz;
  clazz = new Class_0;
  clazz.modifiers = 4;
  dimensions > 1?(clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1)):(clazz.componentType = this);
  return clazz;
}
;
_.getCanonicalName = function getCanonicalName(){
  $ensureNamesAreInitialized(this);
  return this.canonicalName;
}
;
_.getName = function getName_16(){
  return $getName(this);
}
;
_.getSimpleName = function getSimpleName(){
  $ensureNamesAreInitialized(this);
  return this.simpleName;
}
;
_.isArray_0 = function isArray(){
  return (this.modifiers & 4) != 0;
}
;
_.isPrimitive = function isPrimitive(){
  return (this.modifiers & 1) != 0;
}
;
_.toString_0 = function toString_47(){
  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + ($ensureNamesAreInitialized(this) , this.typeName);
}
;
_.modifiers = 0;
var nextSequentialId = 1;
var Ljava_lang_Object_2_classLit = createForClass('java.lang', 'Object', 1);
var Ljava_lang_Class_2_classLit = createForClass('java.lang', 'Class', 312);
defineClass(157, 1, $intern_1);
var Lcom_baselet_command_Command_2_classLit = createForClass('com.baselet.command', 'Command', 157);
function AddGridElementCommand(target, elements){
  this.target_0 = target;
  this.elements = elements;
}

defineClass(183, 157, $intern_1, AddGridElementCommand);
_.execute = function execute(){
  this.target_0.addGridElements(this.elements);
}
;
var Lcom_baselet_command_AddGridElementCommand_2_classLit = createForClass('com.baselet.command', 'AddGridElementCommand', 183);
function $executeCommand(this$static, newCommand){
  var i;
  for (i = this$static.commands.array.length - 1; i > this$static._cursor; i--) {
    $remove_12(this$static.commands, i);
  }
  $add_13(this$static.commands, newCommand);
  newCommand.execute();
  if (this$static.commands.array.length >= 2) {
    castTo($get_7(this$static.commands, this$static.commands.array.length - 1), 157);
    castTo($get_7(this$static.commands, this$static.commands.array.length - 2), 157);
  }
  this$static._cursor = this$static.commands.array.length - 1;
}

defineClass(561, 1, {});
_._cursor = 0;
var Lcom_baselet_command_Controller_2_classLit = createForClass('com.baselet.command', 'Controller', 561);
function RemoveGridElementCommand(target, elements){
  this.target_0 = target;
  this.elements = elements;
}

defineClass(276, 157, $intern_1, RemoveGridElementCommand);
_.execute = function execute_0(){
  this.target_0.removeGridElements(this.elements);
}
;
var Lcom_baselet_command_RemoveGridElementCommand_2_classLit = createForClass('com.baselet.command', 'RemoveGridElementCommand', 276);
function $addLine(this$static, line){
  $add_13(this$static.matrix, line);
}

function $cell(this$static, row, col){
  return castTo($get_7(this$static.matrix, row), 41).get_0(col);
}

function $col(this$static, index_0){
  var result, row, row$iterator;
  result = new ArrayList_0($cols(this$static));
  for (row$iterator = new ArrayList$1(this$static.matrix); row$iterator.i < row$iterator.this$01.array.length;) {
    row = castTo($next_3(row$iterator), 41);
    index_0 < row.size_1()?$add_13(result, row.get_0(index_0)):(result.array[result.array.length] = null , true);
  }
  return result;
}

function $cols(this$static){
  var longestCol, row, row$iterator;
  longestCol = 0;
  for (row$iterator = new ArrayList$1(this$static.matrix); row$iterator.i < row$iterator.this$01.array.length;) {
    row = castTo($next_3(row$iterator), 41);
    row.size_1() > longestCol && (longestCol = row.size_1());
  }
  return longestCol;
}

function $invert(this$static){
  var i, result;
  result = new ArrayList_0($cols(this$static));
  for (i = 0; i < $cols(this$static); i++) {
    $add_13(result, $col(this$static, i));
  }
  this$static.matrix = result;
}

function $isEmpty(this$static){
  var row, row$iterator;
  for (row$iterator = new ArrayList$1(this$static.matrix); row$iterator.i < row$iterator.this$01.array.length;) {
    row = castTo($next_3(row$iterator), 41);
    if (!row.isEmpty()) {
      return false;
    }
  }
  return true;
}

function $row(this$static, index_0){
  return castTo($get_7(this$static.matrix, index_0), 41);
}

function Matrix(){
  this.matrix = new ArrayList;
}

defineClass(285, 1, {}, Matrix);
_.toString_0 = function toString_1(){
  var row, row$iterator, sb, value_0, value$iterator;
  sb = new StringBuilder_1('');
  for (row$iterator = new ArrayList$1(this.matrix); row$iterator.i < row$iterator.this$01.array.length;) {
    row = castTo($next_3(row$iterator), 41);
    for (value$iterator = row.iterator(); value$iterator.hasNext_0();) {
      value_0 = value$iterator.next_1();
      $append_5((sb.string += '' + (value_0 != null?value_0:'null') , sb), '\t');
    }
    sb.string += '\n';
  }
  return sb.string;
}
;
var Lcom_baselet_control_Matrix_2_classLit = createForClass('com.baselet.control', 'Matrix', 285);
function $clinit_SharedUtils(){
  $clinit_SharedUtils = emptyMethod;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_control_SharedUtils_2_classLit) , Lcom_baselet_control_SharedUtils_2_classLit.typeName));
}

function cloneArray_0(src_0){
  $clinit_SharedUtils();
  var target;
  target = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_2, 2, src_0.length, 6, 1);
  arraycopy(src_0, 0, target, 0, src_0.length);
  return target;
}

function cloneArray_1(src_0){
  $clinit_SharedUtils();
  var i, length_0, target;
  length_0 = src_0.length;
  target = initMultidimensionalArray(Ljava_lang_Double_2_classLit, [$intern_3, $intern_4], [304, 256], 7, [length_0, src_0[0].length], 2);
  for (i = 0; i < length_0; i++) {
    arraycopy(src_0[i], 0, target[i], 0, src_0[i].length);
  }
  return target;
}

function listToString(sep, list){
  $clinit_SharedUtils();
  return listToStringHelper(new StringBuilder, sep, list).string;
}

function listToStringHelper(sb, sep, list){
  var line, line$iterator;
  for (line$iterator = list.iterator(); line$iterator.hasNext_0();) {
    line = line$iterator.next_1();
    $append_5((sb.string += '' + line , sb), sep);
  }
  sb.string.length > 0 && $setLength(sb, sb.string.length - sep.length);
  return sb;
}

function mapToString(map_0){
  $clinit_SharedUtils();
  var e, e$iterator, sb;
  sb = new StringBuilder;
  for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(map_0)).this$01); e$iterator.hasNext;) {
    e = $next_1(e$iterator);
    $append_5($append_4(sb, e.getKey()), ': ');
    instanceOf(e.getValue_0(), 52)?listToStringHelper(sb, ',', castTo(e.getValue_0(), 52)):$append_5(sb, toString_36(e.getValue_0()));
    sb.string += '\n';
  }
  sb.string.length > 0 && $setLength(sb, sb.string.length - '\n'.length);
  return sb.string;
}

function mergeLists(listA, listB, listC){
  $clinit_SharedUtils();
  var returnList;
  returnList = new ArrayList_1(listA);
  $addAll_1(returnList, listB);
  $addAll_1(returnList, listC);
  return $clinit_Collections() , new Collections$UnmodifiableRandomAccessList(returnList);
}

function realignTo(val, roundUp, gridSize){
  $clinit_SharedUtils();
  var alignedVal, mod;
  alignedVal = val;
  mod = val % gridSize;
  if (mod != 0) {
    alignedVal -= mod;
    val > 0 && roundUp && (alignedVal += gridSize);
    val < 0 && !roundUp && (alignedVal -= gridSize);
  }
  return round_int(alignedVal);
}

function realignToGrid(rectangle, realignHeightAndWidth){
  $clinit_SharedUtils();
  var height, width_0, x_0, y_0;
  x_0 = realignTo(rectangle.x_0, false, 10);
  y_0 = realignTo(rectangle.y_0, false, 10);
  if (realignHeightAndWidth) {
    width_0 = realignTo(rectangle.x_0 - x_0 + rectangle.width_0, true, 10);
    height = realignTo(rectangle.y_0 - y_0 + rectangle.height_0, true, 10);
    return new Rectangle_0(x_0, y_0, width_0, height);
  }
   else {
    return new Rectangle_0(x_0, y_0, rectangle.width_0, rectangle.height_0);
  }
}

function realignToGridRoundToNearest(val){
  $clinit_SharedUtils();
  var roundUp;
  $wnd.Math.abs(val % 10) < 5?(roundUp = val < 0):(roundUp = val >= 0);
  return realignTo(val, roundUp, 10);
}

function splitAtLineEndChar_0(text_0){
  $clinit_SharedUtils();
  var rep, split_0;
  rep = replaceNotEscaped_0(text_0, '\\n', '\n');
  if (rep.indexOf('\n') != -1) {
    split_0 = $split(rep, '\n', 0);
    return split_0;
  }
  return stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, [text_0]);
}

var Lcom_baselet_control_SharedUtils_2_classLit = createForClass('com.baselet.control', 'SharedUtils', null);
function StringStyle(format, stringWithoutMarkup){
  this.format = format;
  this.stringWithoutMarkup = stringWithoutMarkup;
}

function analyzeFormatLabels(s){
  var format, formatLabel, formatLabel$array, formatLabel$index, formatLabel$max, markup, matchFound, suffixlength;
  format = new HashSet;
  if (s != null && s.length != 0) {
    matchFound = true;
    while (matchFound) {
      matchFound = false;
      for (formatLabel$array = ($clinit_FormatLabels() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_FormatLabels_2_classLit, 1), $intern_5, 192, 0, [UNDERLINE, BOLD, ITALIC])) , formatLabel$index = 0 , formatLabel$max = formatLabel$array.length; formatLabel$index < formatLabel$max; ++formatLabel$index) {
        formatLabel = formatLabel$array[formatLabel$index];
        markup = formatLabel.value_0;
        if ($equals_6(s.substr(0, markup.length), markup) && (suffixlength = markup.length , $equals_6(s.substr(s.length - suffixlength, suffixlength), markup)) && s.length > markup.length * 2) {
          $put(format.map_0, formatLabel, format);
          s = $substring_0(s, markup.length, s.length - markup.length);
          matchFound = true;
        }
      }
    }
  }
  return new StringStyle(format, s);
}

function replaceNotEscaped(line){
  line = replaceNotEscaped_0(line, '<<', '\xAB');
  line = replaceNotEscaped_0(line, '>>', '\xBB');
  return line;
}

function replaceNotEscaped_0(s, old, replacement){
  s = $replace_0(s, '\\' + old, '\xA7$\xA7\xE4%\xA7%\xFC/,');
  s = $replace_0(s, old, replacement);
  s = $replace_0(s, '\xA7$\xA7\xE4%\xA7%\xFC/,', old);
  return s;
}

defineClass(37, 1, {37:1}, StringStyle);
_.toString_0 = function toString_2(){
  return 'StringStyle [format=' + this.format + ', stringWithoutMarkup=' + this.stringWithoutMarkup + ']';
}
;
var Lcom_baselet_control_StringStyle_2_classLit = createForClass('com.baselet.control', 'StringStyle', 37);
function $contains(this$static, value_0){
  return $doubleValue_0(this$static.low) <= value_0 && value_0 <= $doubleValue_0(this$static.high);
}

function $isIntersecting(this$static, other){
  var isIntersecting;
  isIntersecting = $contains(this$static, $doubleValue_0(other.low)) || $contains(this$static, $doubleValue_0(other.high)) || $contains(other, $doubleValue_0(this$static.low));
  return isIntersecting;
}

function Line1D(low, high){
  this.low = low;
  this.high = high;
}

defineClass(70, 1, {70:1}, Line1D);
_.equals_0 = function equals_0(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_control_basics_Line1D_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 70);
  if (this.high == null) {
    if (other.high != null) {
      return false;
    }
  }
   else if (!$equals_4(this.high, other.high)) {
    return false;
  }
  if (this.low == null) {
    if (other.low != null) {
      return false;
    }
  }
   else if (!$equals_4(this.low, other.low)) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_1(){
  var result;
  result = 31 + (this.high == null?0:$hashCode_3(this.high));
  result = 31 * result + (this.low == null?0:$hashCode_3(this.low));
  return result;
}
;
_.toString_0 = function toString_3(){
  return 'Line1D [low=' + this.low + ', high=' + this.high + ']';
}
;
var Lcom_baselet_control_basics_Line1D_2_classLit = createForClass('com.baselet.control.basics', 'Line1D', 70);
function $sort_0(this$static, c){
  var a, i;
  a = $toArray(this$static, initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, this$static.size_0, 5, 1));
  mergeSort(a, 0, a.length, c);
  for (i = 0; i < a.length; i++) {
    $set_4(this$static, i, a[i]);
  }
}

function $add(this$static, e){
  var high, insertIndex, isIntersecting, listIter, low, tmpLine;
  if ($indexOf_2(this$static.list, e, 0) != -1) {
    return false;
  }
   else {
    listIter = new AbstractList$ListIteratorImpl(this$static.list, 0);
    while (listIter.i < listIter.this$01_0.size_1()) {
      if ($doubleValue_0((checkCriticalElement(listIter.i < listIter.this$01_0.size_1()) , castTo(listIter.this$01_0.get_0(listIter.last = listIter.i++), 70)).high) >= $doubleValue_0(e.low)) {
        checkCriticalElement(listIter.i > 0);
        listIter.this$01.get_0(listIter.last = --listIter.i);
        break;
      }
    }
    if (listIter.i < listIter.this$01_0.size_1()) {
      insertIndex = listIter.i;
      tmpLine = (checkCriticalElement(listIter.i < listIter.this$01_0.size_1()) , castTo(listIter.this$01_0.get_0(listIter.last = listIter.i++), 70));
      if ($doubleValue_0(tmpLine.low) <= $doubleValue_0(e.high)) {
        low = $wnd.Math.min($doubleValue_0(tmpLine.low), $doubleValue_0(e.low));
        high = $doubleValue_0(tmpLine.high);
        while (listIter.i < listIter.this$01_0.size_1()) {
          tmpLine = (checkCriticalElement(listIter.i < listIter.this$01_0.size_1()) , castTo(listIter.this$01_0.get_0(listIter.last = listIter.i++), 70));
          isIntersecting = $contains(e, $doubleValue_0(tmpLine.low)) || $contains(e, $doubleValue_0(tmpLine.high)) || $contains(tmpLine, $doubleValue_0(e.low));
          if (isIntersecting) {
            $remove_11(listIter);
            high = $doubleValue_0(tmpLine.high);
          }
           else {
            break;
          }
        }
        $set_5(this$static.list, insertIndex, new Line1D(low, $wnd.Math.max($doubleValue_0(e.high), high)));
      }
       else {
        $add_12(this$static.list, insertIndex, e);
      }
      return true;
    }
     else {
      $add_13(this$static.list, e);
      return true;
    }
  }
}

function $set(){
  throw toJs(new UnsupportedOperationException);
}

function SortedMergedLine1DList(){
  this.list = new ArrayList;
}

defineClass(300, 1, $intern_7, SortedMergedLine1DList);
_.add_0 = function add_1(e){
  return $add(this, castTo(e, 70));
}
;
_.get_0 = function get_0(index_0){
  return castTo($get_7(this.list, index_0), 70);
}
;
_.remove = function remove_0(index_0){
  return castTo($remove_12(this.list, index_0), 70);
}
;
_.set_0 = function set_1(index_0, element){
  return throwClassCastExceptionUnlessNull(element) , $set();
}
;
_.contains_0 = function contains(o){
  return $indexOf_2(this.list, o, 0) != -1;
}
;
_.isEmpty = function isEmpty(){
  return this.list.array.length == 0;
}
;
_.iterator = function iterator_0(){
  return new ArrayList$1(this.list);
}
;
_.listIterator = function listIterator(){
  return new AbstractList$ListIteratorImpl(this.list, 0);
}
;
_.listIterator_0 = function listIterator_0(index_0){
  return new AbstractList$ListIteratorImpl(this.list, index_0);
}
;
_.size_1 = function size_1(){
  return this.list.array.length;
}
;
_.subList = function subList(fromIndex, toIndex){
  return new AbstractList$SubList(this.list, fromIndex, toIndex);
}
;
_.toArray = function toArray(){
  return $toArray_0(this.list);
}
;
_.toArray_0 = function toArray_0(a){
  return $toArray_1(this.list, a);
}
;
var Lcom_baselet_control_basics_SortedMergedLine1DList_2_classLit = createForClass('com.baselet.control.basics', 'SortedMergedLine1DList', 300);
function $addLeft(this$static, inc){
  this$static.left_0 = $doubleValue_0(this$static.left_0) + inc;
}

function $getSpace(this$static){
  return $doubleValue_0(this$static.right) - $doubleValue_0(this$static.left_0);
}

function $intersect(this$static, other, nanPriority){
  var maxLeft, minRight;
  maxLeft = this$static.left_0;
  minRight = this$static.right;
  if (nanPriority) {
    ($equals_4(other.left_0, NaN) || $doubleValue_0(other.left_0) > $doubleValue_0(this$static.left_0)) && (maxLeft = other.left_0);
    ($equals_4(other.right, NaN) || $doubleValue_0(other.right) < $doubleValue_0(this$static.right)) && (minRight = other.right);
  }
   else {
    ($equals_4(this$static.left_0, NaN) || $doubleValue_0(other.left_0) > $doubleValue_0(this$static.left_0)) && (maxLeft = other.left_0);
    ($equals_4(this$static.right, NaN) || $doubleValue_0(other.right) < $doubleValue_0(this$static.right)) && (minRight = other.right);
  }
  return new XValues((checkCriticalNotNull(maxLeft) , maxLeft), (checkCriticalNotNull(minRight) , minRight));
}

function $subRight(this$static, inc){
  this$static.right = $doubleValue_0(this$static.right) - inc;
}

function XValues(left, right){
  this.left_0 = left;
  this.right = right;
}

function createForEllipse(y_0, height, width_0){
  var halfEllipseWidthOnY, halfHeight, halfWidth, returnVal;
  halfHeight = height / 2;
  halfWidth = width_0 / 2;
  halfEllipseWidthOnY = $wnd.Math.sqrt((1 - $wnd.Math.pow(halfHeight - y_0, 2) / $wnd.Math.pow(halfHeight, 2)) * $wnd.Math.pow(halfWidth, 2));
  returnVal = new XValues(halfWidth - halfEllipseWidthOnY, halfWidth + halfEllipseWidthOnY);
  return returnVal;
}

defineClass(291, 1, {}, XValues);
_.toString_0 = function toString_4(){
  return 'XValues [left=' + this.left_0 + ', right=' + this.right + ']';
}
;
var Lcom_baselet_control_basics_XValues_2_classLit = createForClass('com.baselet.control.basics', 'XValues', 291);
function Dimension(width_0, height){
  this.width_0 = width_0;
  this.height_0 = height;
}

defineClass(38, 1, {38:1}, Dimension);
_.equals_0 = function equals_1(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_control_basics_geom_Dimension_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 38);
  if (this.height_0 != other.height_0) {
    return false;
  }
  if (this.width_0 != other.width_0) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_2(){
  var result;
  result = 31 + this.height_0;
  result = 31 * result + this.width_0;
  return result;
}
;
_.toString_0 = function toString_5(){
  return 'Dimension [width=' + this.width_0 + ', height=' + this.height_0 + ']';
}
;
_.height_0 = 0;
_.width_0 = 0;
var Lcom_baselet_control_basics_geom_Dimension_2_classLit = createForClass('com.baselet.control.basics.geom', 'Dimension', 38);
function DimensionDouble(width_0, height){
  this.width_0 = width_0;
  this.height_0 = height;
}

defineClass(287, 1, {}, DimensionDouble);
_.toString_0 = function toString_6(){
  return 'Dimension [height=' + this.height_0 + ', width=' + this.width_0 + ']';
}
;
_.height_0 = 0;
_.width_0 = 0;
var Lcom_baselet_control_basics_geom_DimensionDouble_2_classLit = createForClass('com.baselet.control.basics.geom', 'DimensionDouble', 287);
function distanceBetweenTwoPoints(x1, y1, x2, y2){
  var xDist, yDist;
  xDist = x1 - x2;
  yDist = y1 - y2;
  return $wnd.Math.sqrt(xDist * xDist + yDist * yDist);
}

function distanceBetweenTwoPoints_0(p1, p2){
  return distanceBetweenTwoPoints($doubleValue_0(p1.x_0), $doubleValue_0(p1.y_0), $doubleValue_0(p2.x_0), $doubleValue_0(p2.y_0));
}

function getDistanceBetweenLineAndPoint(x1, y1, x2, y2, checkX, checkY){
  var mult, px, py, u, x_0, y_0;
  px = x2 - x1;
  py = y2 - y1;
  mult = px * px + py * py;
  u = ((checkX - x1) * px + (checkY - y1) * py) / mult;
  u > 1?(u = 1):u < 0 && (u = 0);
  x_0 = x1 + u * px;
  y_0 = y1 + u * py;
  return distanceBetweenTwoPoints(x_0, y_0, checkX, checkY);
}

function getDistanceBetweenLineAndPoint_0(start_0, end, pointToCheck){
  return getDistanceBetweenLineAndPoint($doubleValue_0(start_0.x_0), $doubleValue_0(start_0.y_0), $doubleValue_0(end.x_0), $doubleValue_0(end.y_0), $doubleValue_0(pointToCheck.x_0), $doubleValue_0(pointToCheck.y_0));
}

function getIntersectionPoint(lineA, lineB){
  var d, p, x1, x2, x3, x4, xi, y1, y2, y3, y4, yi;
  x1 = $doubleValue_0(lineA.start_0.x_0);
  y1 = $doubleValue_0(lineA.start_0.y_0);
  x2 = $doubleValue_0(lineA.end.x_0);
  y2 = $doubleValue_0(lineA.end.y_0);
  x3 = $doubleValue_0(lineB.start_0.x_0);
  y3 = $doubleValue_0(lineB.start_0.y_0);
  x4 = $doubleValue_0(lineB.end.x_0);
  y4 = $doubleValue_0(lineB.end.y_0);
  p = null;
  d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
  if (d != 0) {
    xi = ((x3 - x4) * (x1 * y2 - y1 * x2) - (x1 - x2) * (x3 * y4 - y3 * x4)) / d;
    yi = ((y3 - y4) * (x1 * y2 - y1 * x2) - (y1 - y2) * (x3 * y4 - y3 * x4)) / d;
    p = new PointDouble(xi, yi);
    ($getDistanceToPoint(lineA, p) > 1 || $getDistanceToPoint(lineB, p) > 1) && (p = null);
  }
  return p;
}

function getIntersectionPoints(line, rectangle){
  var list, p, p$iterator, returnList;
  list = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [getIntersectionPoint(line, new Line(new PointDouble(rectangle.x_0, rectangle.y_0), new PointDouble(rectangle.x_0 + rectangle.width_0, rectangle.y_0))), getIntersectionPoint(line, new Line(new PointDouble(rectangle.x_0, rectangle.y_0 + rectangle.height_0), new PointDouble(rectangle.x_0 + rectangle.width_0, rectangle.y_0 + rectangle.height_0))), getIntersectionPoint(line, new Line(new PointDouble(rectangle.x_0, rectangle.y_0), new PointDouble(rectangle.x_0, rectangle.y_0 + rectangle.height_0))), getIntersectionPoint(line, new Line(new PointDouble(rectangle.x_0 + rectangle.width_0, rectangle.y_0), new PointDouble(rectangle.x_0 + rectangle.width_0, rectangle.y_0 + rectangle.height_0)))]));
  returnList = new ArrayList;
  for (p$iterator = new AbstractList$IteratorImpl(list); p$iterator.i < p$iterator.this$01_0.size_1();) {
    p = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , castTo(p$iterator.this$01_0.get_0(p$iterator.last = p$iterator.i++), 5));
    !!p && (returnList.array[returnList.array.length] = p , true);
  }
  return returnList;
}

function getPointOnLineWithDistanceFromStart(start_0, end, distance){
  var distanceToGo, length_0, xDiff, yDiff;
  xDiff = $doubleValue_0(end.x_0) - $doubleValue_0(start_0.x_0);
  yDiff = $doubleValue_0(end.y_0) - $doubleValue_0(start_0.y_0);
  length_0 = distanceBetweenTwoPoints($doubleValue_0(start_0.x_0), $doubleValue_0(start_0.y_0), $doubleValue_0(end.x_0), $doubleValue_0(end.y_0));
  distanceToGo = distance / length_0;
  return new PointDouble($doubleValue_0(start_0.x_0) + xDiff * distanceToGo, $doubleValue_0(start_0.y_0) + yDiff * distanceToGo);
}

function $clinit_Line(){
  $clinit_Line = emptyMethod;
  log_1 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_control_basics_geom_Line_2_classLit) , Lcom_baselet_control_basics_geom_Line_2_classLit.typeName));
}

function $equals(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (this$static.___clazz != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 62);
  if (!this$static.end) {
    if (other.end) {
      return false;
    }
  }
   else if (!this$static.end.equals_0(other.end)) {
    return false;
  }
  if (!this$static.start_0) {
    if (other.start_0) {
      return false;
    }
  }
   else if (!this$static.start_0.equals_0(other.start_0)) {
    return false;
  }
  return true;
}

function $getAngleOfSlope(this$static){
  var rad, radDeg, radius;
  radius = distanceBetweenTwoPoints_0(this$static.start_0, this$static.end);
  rad = $wnd.Math.acos(($doubleValue_0(this$static.start_0.x_0) - $doubleValue_0(this$static.end.x_0)) / radius);
  radDeg = rad * 57.29577951308232;
  $doubleValue_0(this$static.start_0.y_0) < $doubleValue_0(this$static.end.y_0) && (radDeg = 360 - radDeg);
  return radDeg;
}

function $getCenter(this$static){
  return new PointDouble(($doubleValue_0(this$static.start_0.x_0) + $doubleValue_0(this$static.end.x_0)) / 2, ($doubleValue_0(this$static.start_0.y_0) + $doubleValue_0(this$static.end.y_0)) / 2);
}

function $getDirectionOfLine(this$static, directionOfStart){
  var angleOfSlope, direction;
  angleOfSlope = $getAngleOfSlope(this$static);
  angleOfSlope > 315 || angleOfSlope < 45?(direction = ($clinit_Direction() , RIGHT_0)):angleOfSlope < 135?(direction = ($clinit_Direction() , DOWN)):angleOfSlope < 225?(direction = ($clinit_Direction() , LEFT_0)):(direction = ($clinit_Direction() , UP));
  directionOfStart || (direction = $invert_0(direction));
  return direction;
}

function $getDistanceToPoint(this$static, pointToCheck){
  var dist;
  dist = getDistanceBetweenLineAndPoint_0(this$static.start_0, this$static.end, pointToCheck);
  $trace_0(log_1, 'Minimal distance between ' + this$static + ' and ' + pointToCheck + ' is ' + dist);
  return dist;
}

function $getPointOnLineWithDistanceFrom(this$static, fromStart){
  return fromStart?getPointOnLineWithDistanceFromStart(this$static.start_0, this$static.end, 15):getPointOnLineWithDistanceFromStart(this$static.end, this$static.start_0, 15);
}

function Line(start_0, end){
  $clinit_Line();
  this.start_0 = start_0;
  this.end = end;
}

defineClass(62, 1, {62:1}, Line);
_.equals_0 = function equals_2(obj){
  return $equals(this, obj);
}
;
_.hashCode_0 = function hashCode_3(){
  var result;
  result = 31 + (!this.end?0:this.end.hashCode_0());
  result = 31 * result + (!this.start_0?0:this.start_0.hashCode_0());
  return result;
}
;
_.toString_0 = function toString_7(){
  return 'Line [start=' + this.start_0 + ', end=' + this.end + ']';
}
;
var log_1;
var Lcom_baselet_control_basics_geom_Line_2_classLit = createForClass('com.baselet.control.basics.geom', 'Line', 62);
function toPoints(lines){
  var line, line$index, line$max, p, p$array, p$index, p$max, points;
  points = new ArrayList;
  for (line$index = 0 , line$max = lines.length; line$index < line$max; ++line$index) {
    line = lines[line$index];
    for (p$array = stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [line.start_0, line.end]) , p$index = 0 , p$max = p$array.length; p$index < p$max; ++p$index) {
      p = p$array[p$index];
      (points.array.length == 0 || !castTo($get_7(points, points.array.length - 1), 5).equals_0(p)) && (points.array[points.array.length] = p , true);
    }
  }
  return points;
}

function $setX(this$static, x_0){
  this$static.x_0 = x_0;
}

function $setY(this$static, y_0){
  this$static.y_0 = y_0;
}

function Point(x_0, y_0){
  this.x_0 = x_0;
  this.y_0 = y_0;
}

defineClass(45, 1, {45:1}, Point);
_.equals_0 = function equals_3(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_control_basics_geom_Point_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 45);
  if (this.x_0 != other.x_0) {
    return false;
  }
  if (this.y_0 != other.y_0) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_4(){
  var result;
  result = 31 + this.x_0;
  result = 31 * result + this.y_0;
  return result;
}
;
_.toString_0 = function toString_8(){
  return 'p(x=' + this.x_0 + ', y=' + this.y_0 + ')';
}
;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_baselet_control_basics_geom_Point_2_classLit = createForClass('com.baselet.control.basics.geom', 'Point', 45);
function $distance(this$static, o){
  var distX, distY;
  distX = $doubleValue_0(o.x_0) - $doubleValue_0(this$static.x_0);
  distY = $doubleValue_0(o.y_0) - $doubleValue_0(this$static.y_0);
  return $wnd.Math.sqrt(distX * distX + distY * distY);
}

function $equals_0(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (this$static.___clazz != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 5);
  if (this$static.x_0 == null) {
    if (other.x_0 != null) {
      return false;
    }
  }
   else if (!$equals_4(this$static.x_0, other.x_0)) {
    return false;
  }
  if (this$static.y_0 == null) {
    if (other.y_0 != null) {
      return false;
    }
  }
   else if (!$equals_4(this$static.y_0, other.y_0)) {
    return false;
  }
  return true;
}

function $hashCode(this$static){
  var result;
  result = 31 + (this$static.x_0 == null?0:$hashCode_3(this$static.x_0));
  result = 31 * result + (this$static.y_0 == null?0:$hashCode_3(this$static.y_0));
  return result;
}

function PointDouble(x_0, y_0){
  this.x_0 = x_0;
  this.y_0 = y_0;
}

defineClass(5, 1, {5:1}, PointDouble);
_.equals_0 = function equals_4(obj){
  return $equals_0(this, obj);
}
;
_.hashCode_0 = function hashCode_5(){
  return $hashCode(this);
}
;
_.toString_0 = function toString_9(){
  return 'p(x=' + this.x_0 + ' y=' + this.y_0 + ')';
}
;
var Lcom_baselet_control_basics_geom_PointDouble_2_classLit = createForClass('com.baselet.control.basics.geom', 'PointDouble', 5);
function $contains_0(this$static, p){
  return $contains_1(this$static, new Rectangle_0(p.x_0, p.y_0, 0, 0));
}

function $contains_1(this$static, other){
  return this$static.x_0 <= other.x_0 && this$static.x_0 + this$static.width_0 >= other.x_0 + other.width_0 && this$static.y_0 <= other.y_0 && this$static.y_0 + this$static.height_0 >= other.y_0 + other.height_0;
}

function $copy_0(this$static){
  return new Rectangle_0(this$static.x_0, this$static.y_0, this$static.width_0, this$static.height_0);
}

function $getUpperLeftCorner(this$static){
  return new PointDouble(this$static.x_0, this$static.y_0);
}

function $getX2(this$static){
  return this$static.x_0 + this$static.width_0;
}

function $getY2(this$static){
  return this$static.y_0 + this$static.height_0;
}

function $move_0(this$static, diffX, diffY){
  this$static.x_0 += diffX;
  this$static.y_0 += diffY;
}

function $setBounds(this$static, x_0, y_0, width_0, height){
  this$static.x_0 = x_0;
  this$static.y_0 = y_0;
  this$static.width_0 = width_0;
  this$static.height_0 = height;
}

function $setHeight(this$static, height){
  this$static.height_0 = height;
}

function $setLocation(this$static, x_0, y_0){
  this$static.x_0 = x_0;
  this$static.y_0 = y_0;
}

function $setSize(this$static, width_0, height){
  this$static.width_0 = width_0;
  this$static.height_0 = height;
}

function $setWidth(this$static, width_0){
  this$static.width_0 = width_0;
}

function $setX_0(this$static, x_0){
  this$static.x_0 = x_0;
}

function $setY_0(this$static, y_0){
  this$static.y_0 = y_0;
}

function Rectangle(){
}

function Rectangle_0(x_0, y_0, width_0, height){
  $setBounds(this, x_0, y_0, width_0, height);
}

function Rectangle_1(x_0, y_0, width_0, height){
  Rectangle_0.call(this, toInt(fromDouble_0($wnd.Math.round((checkCriticalNotNull(x_0) , x_0)))), toInt(fromDouble_0($wnd.Math.round((checkCriticalNotNull(y_0) , y_0)))), toInt(fromDouble_0($wnd.Math.round((checkCriticalNotNull(width_0) , width_0)))), toInt(fromDouble_0($wnd.Math.round((checkCriticalNotNull(height) , height)))));
}

function mergeToLeft(left, right){
  var oldX2, oldY2;
  !left?(left = right):(oldX2 = left.x_0 + left.width_0 , oldY2 = left.y_0 + left.height_0 , $setX_0(left, $wnd.Math.min(left.x_0, right.x_0)) , $setY_0(left, $wnd.Math.min(left.y_0, right.y_0)) , $setWidth(left, $wnd.Math.max(oldX2, right.x_0 + right.width_0) - left.x_0) , $setHeight(left, $wnd.Math.max(oldY2, right.y_0 + right.height_0) - left.y_0) , undefined);
  return left;
}

defineClass(40, 1, {40:1}, Rectangle, Rectangle_0, Rectangle_1);
_.equals_0 = function equals_5(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_control_basics_geom_Rectangle_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 40);
  if (this.height_0 != other.height_0) {
    return false;
  }
  if (this.width_0 != other.width_0) {
    return false;
  }
  if (this.x_0 != other.x_0) {
    return false;
  }
  if (this.y_0 != other.y_0) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_6(){
  var result;
  result = 31 + this.height_0;
  result = 31 * result + this.width_0;
  result = 31 * result + this.x_0;
  result = 31 * result + this.y_0;
  return result;
}
;
_.toString_0 = function toString_10(){
  return 'Rectangle [x=' + this.x_0 + ', y=' + this.y_0 + ', width=' + this.width_0 + ', height=' + this.height_0 + ']';
}
;
_.height_0 = 0;
_.width_0 = 0;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_baselet_control_basics_geom_Rectangle_2_classLit = createForClass('com.baselet.control.basics.geom', 'Rectangle', 40);
function $clinit_SharedConfig(){
  $clinit_SharedConfig = emptyMethod;
  instance_0 = new SharedConfig;
}

function $setDev_mode(this$static, dev_mode){
  this$static.dev_mode = dev_mode;
}

function SharedConfig(){
}

defineClass(432, 1, {}, SharedConfig);
_.dev_mode = false;
_.show_stickingpolygon = true;
_.stickingEnabled = true;
var instance_0;
var Lcom_baselet_control_config_SharedConfig_2_classLit = createForClass('com.baselet.control.config', 'SharedConfig', 432);
function $compareTo(this$static, other){
  return this$static.ordinal - other.ordinal;
}

function $toString(this$static){
  return this$static.name_0 != null?this$static.name_0:'' + this$static.ordinal;
}

function Enum(name_0, ordinal){
  this.name_0 = name_0;
  this.ordinal = ordinal;
}

function createValueOfMap(enumConstants){
  var result, value_0, value$index, value$max;
  result = {};
  for (value$index = 0 , value$max = enumConstants.length; value$index < value$max; ++value$index) {
    value_0 = enumConstants[value$index];
    result[':' + (value_0.name_0 != null?value_0.name_0:'' + value_0.ordinal)] = value_0;
  }
  return result;
}

function valueOf(map_0, name_0){
  var result;
  checkCriticalNotNull(name_0);
  result = map_0[':' + name_0];
  checkCriticalArgument_0(!!result, 'Enum constant undefined: %s', stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_6, 1, 5, [name_0]));
  return result;
}

defineClass(8, 1, {3:1, 9:1, 8:1});
_.compareTo = function compareTo(other){
  return $compareTo(this, castTo(other, 8));
}
;
_.equals_0 = function equals_6(other){
  return this === other;
}
;
_.hashCode_0 = function hashCode_7(){
  return getHashCode_0(this);
}
;
_.toString_0 = function toString_11(){
  return $toString(this);
}
;
_.ordinal = 0;
var Ljava_lang_Enum_2_classLit = createForClass('java.lang', 'Enum', 8);
function $clinit_AlignHorizontal(){
  $clinit_AlignHorizontal = emptyMethod;
  LEFT = new AlignHorizontal('LEFT', 0);
  CENTER = new AlignHorizontal('CENTER', 1);
  RIGHT = new AlignHorizontal('RIGHT', 2);
}

function AlignHorizontal(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_0(name_0){
  $clinit_AlignHorizontal();
  return valueOf(($clinit_AlignHorizontal$Map() , $MAP), name_0);
}

function values_0(){
  $clinit_AlignHorizontal();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_AlignHorizontal_2_classLit, 1), $intern_5, 189, 0, [LEFT, CENTER, RIGHT]);
}

defineClass(189, 8, {189:1, 3:1, 9:1, 8:1}, AlignHorizontal);
var CENTER, LEFT, RIGHT;
var Lcom_baselet_control_enums_AlignHorizontal_2_classLit = createForEnum('com.baselet.control.enums', 'AlignHorizontal', 189, values_0);
function $clinit_AlignHorizontal$Map(){
  $clinit_AlignHorizontal$Map = emptyMethod;
  $MAP = createValueOfMap(($clinit_AlignHorizontal() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_AlignHorizontal_2_classLit, 1), $intern_5, 189, 0, [LEFT, CENTER, RIGHT])));
}

var $MAP;
function $clinit_AlignVertical(){
  $clinit_AlignVertical = emptyMethod;
  TOP = new AlignVertical('TOP', 0);
  CENTER_0 = new AlignVertical('CENTER', 1);
  BOTTOM = new AlignVertical('BOTTOM', 2);
}

function AlignVertical(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_1(name_0){
  $clinit_AlignVertical();
  return valueOf(($clinit_AlignVertical$Map() , $MAP_0), name_0);
}

function values_1(){
  $clinit_AlignVertical();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_AlignVertical_2_classLit, 1), $intern_5, 191, 0, [TOP, CENTER_0, BOTTOM]);
}

defineClass(191, 8, {191:1, 3:1, 9:1, 8:1}, AlignVertical);
var BOTTOM, CENTER_0, TOP;
var Lcom_baselet_control_enums_AlignVertical_2_classLit = createForEnum('com.baselet.control.enums', 'AlignVertical', 191, values_1);
function $clinit_AlignVertical$Map(){
  $clinit_AlignVertical$Map = emptyMethod;
  $MAP_0 = createValueOfMap(($clinit_AlignVertical() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_AlignVertical_2_classLit, 1), $intern_5, 191, 0, [TOP, CENTER_0, BOTTOM])));
}

var $MAP_0;
function $clinit_Direction(){
  $clinit_Direction = emptyMethod;
  LEFT_0 = new Direction('LEFT', 0);
  RIGHT_0 = new Direction('RIGHT', 1);
  UP = new Direction('UP', 2);
  DOWN = new Direction('DOWN', 3);
}

function $invert_0(this$static){
  switch (this$static.ordinal) {
    case 0:
      return RIGHT_0;
    case 1:
      return LEFT_0;
    case 2:
      return DOWN;
    case 3:
      return UP;
    default:throw toJs(new RuntimeException_0('missing invert mapping'));
  }
}

function $isHorizontal(this$static){
  return this$static == LEFT_0 || this$static == RIGHT_0;
}

function Direction(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_2(){
  $clinit_Direction();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_Direction_2_classLit, 1), $intern_5, 131, 0, [LEFT_0, RIGHT_0, UP, DOWN]);
}

defineClass(131, 8, {131:1, 3:1, 9:1, 8:1}, Direction);
var DOWN, LEFT_0, RIGHT_0, UP;
var Lcom_baselet_control_enums_Direction_2_classLit = createForEnum('com.baselet.control.enums', 'Direction', 131, values_2);
function $clinit_ElementId(){
  $clinit_ElementId = emptyMethod;
  UMLClass = new ElementId('UMLClass', 0);
  UMLUseCase = new ElementId('UMLUseCase', 1);
  UMLInterface = new ElementId('UMLInterface', 2);
  UMLActor = new ElementId('UMLActor', 3);
  UMLState = new ElementId('UMLState', 4);
  UMLObject = new ElementId('UMLObject', 5);
  UMLTimer = new ElementId('UMLTimer', 6);
  UMLSpecialState = new ElementId('UMLSpecialState', 7);
  UMLNote = new ElementId('UMLNote', 8);
  UMLSyncBarHorizontal = new ElementId('UMLSyncBarHorizontal', 9);
  UMLSyncBarVertical = new ElementId('UMLSyncBarVertical', 10);
  UMLPackage = new ElementId('UMLPackage', 11);
  UMLFrame = new ElementId('UMLFrame', 12);
  UMLDeployment = new ElementId('UMLDeployment', 13);
  UMLGeneric = new ElementId('UMLGeneric', 14);
  UMLHierarchy = new ElementId('UMLHierarchy', 15);
  Relation = new ElementId('Relation', 16);
  Text_0 = new ElementId('Text', 17);
  PlotGrid = new ElementId('PlotGrid', 18);
  UMLSequenceAllInOne = new ElementId('UMLSequenceAllInOne', 19);
}

function ElementId(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_2(name_0){
  $clinit_ElementId();
  return valueOf(($clinit_ElementId$Map() , $MAP_1), name_0);
}

function values_3(){
  $clinit_ElementId();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_ElementId_2_classLit, 1), $intern_5, 58, 0, [UMLClass, UMLUseCase, UMLInterface, UMLActor, UMLState, UMLObject, UMLTimer, UMLSpecialState, UMLNote, UMLSyncBarHorizontal, UMLSyncBarVertical, UMLPackage, UMLFrame, UMLDeployment, UMLGeneric, UMLHierarchy, Relation, Text_0, PlotGrid, UMLSequenceAllInOne]);
}

defineClass(58, 8, {58:1, 3:1, 9:1, 8:1}, ElementId);
var PlotGrid, Relation, Text_0, UMLActor, UMLClass, UMLDeployment, UMLFrame, UMLGeneric, UMLHierarchy, UMLInterface, UMLNote, UMLObject, UMLPackage, UMLSequenceAllInOne, UMLSpecialState, UMLState, UMLSyncBarHorizontal, UMLSyncBarVertical, UMLTimer, UMLUseCase;
var Lcom_baselet_control_enums_ElementId_2_classLit = createForEnum('com.baselet.control.enums', 'ElementId', 58, values_3);
function $clinit_ElementId$Map(){
  $clinit_ElementId$Map = emptyMethod;
  $MAP_1 = createValueOfMap(values_3());
}

var $MAP_1;
function $clinit_ElementStyle(){
  $clinit_ElementStyle = emptyMethod;
  AUTORESIZE = new ElementStyle('AUTORESIZE', 0);
  SIMPLE = new ElementStyle('SIMPLE', 1);
  NORESIZE = new ElementStyle('NORESIZE', 2);
  WORDWRAP = new ElementStyle('WORDWRAP', 3);
}

function ElementStyle(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_3(name_0){
  $clinit_ElementStyle();
  return valueOf(($clinit_ElementStyle$Map() , $MAP_2), name_0);
}

function values_4(){
  $clinit_ElementStyle();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_ElementStyle_2_classLit, 1), $intern_5, 162, 0, [AUTORESIZE, SIMPLE, NORESIZE, WORDWRAP]);
}

defineClass(162, 8, {162:1, 3:1, 9:1, 8:1}, ElementStyle);
var AUTORESIZE, NORESIZE, SIMPLE, WORDWRAP;
var Lcom_baselet_control_enums_ElementStyle_2_classLit = createForEnum('com.baselet.control.enums', 'ElementStyle', 162, values_4);
function $clinit_ElementStyle$Map(){
  $clinit_ElementStyle$Map = emptyMethod;
  $MAP_2 = createValueOfMap(($clinit_ElementStyle() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_ElementStyle_2_classLit, 1), $intern_5, 162, 0, [AUTORESIZE, SIMPLE, NORESIZE, WORDWRAP])));
}

var $MAP_2;
function $clinit_FormatLabels(){
  $clinit_FormatLabels = emptyMethod;
  UNDERLINE = new FormatLabels('UNDERLINE', 0, '_');
  BOLD = new FormatLabels('BOLD', 1, '*');
  ITALIC = new FormatLabels('ITALIC', 2, '/');
}

function FormatLabels(enum$name, enum$ordinal, value_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.value_0 = value_0;
}

function values_5(){
  $clinit_FormatLabels();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_FormatLabels_2_classLit, 1), $intern_5, 192, 0, [UNDERLINE, BOLD, ITALIC]);
}

defineClass(192, 8, {192:1, 3:1, 9:1, 8:1}, FormatLabels);
var BOLD, ITALIC, UNDERLINE;
var Lcom_baselet_control_enums_FormatLabels_2_classLit = createForEnum('com.baselet.control.enums', 'FormatLabels', 192, values_5);
function $clinit_LineType(){
  $clinit_LineType = emptyMethod;
  SOLID = new LineType('SOLID', 0, '-');
  DASHED = new LineType('DASHED', 1, '.');
  DOTTED = new LineType('DOTTED', 2, '..');
  DOUBLE = new LineType('DOUBLE', 3, '=');
  DOUBLE_DASHED = new LineType('DOUBLE_DASHED', 4, ':');
  DOUBLE_DOTTED = new LineType('DOUBLE_DOTTED', 5, '::');
  LT_LIST = unmodifiableList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_LineType_2_classLit, 1), $intern_5, 90, 0, [SOLID, DASHED, DOTTED])));
}

function LineType(enum$name, enum$ordinal, value_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.value_0 = value_0;
}

function values_6(){
  $clinit_LineType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_LineType_2_classLit, 1), $intern_5, 90, 0, [SOLID, DASHED, DOTTED, DOUBLE, DOUBLE_DASHED, DOUBLE_DOTTED]);
}

defineClass(90, 8, {90:1, 53:1, 3:1, 9:1, 8:1}, LineType);
_.getRegexValue = function getRegexValue(){
  return $replaceAll(this.value_0, '\\.', '\\\\.');
}
;
var DASHED, DOTTED, DOUBLE, DOUBLE_DASHED, DOUBLE_DOTTED, LT_LIST, SOLID;
var Lcom_baselet_control_enums_LineType_2_classLit = createForEnum('com.baselet.control.enums', 'LineType', 90, values_6);
function $clinit_Priority(){
  $clinit_Priority = emptyMethod;
  HIGHEST = new Priority('HIGHEST', 0);
  HIGH = new Priority('HIGH', 1);
  DEFAULT = new Priority('DEFAULT', 2);
  LOW = new Priority('LOW', 3);
  LOWEST = new Priority('LOWEST', 4);
}

function Priority(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_7(){
  $clinit_Priority();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_Priority_2_classLit, 1), $intern_5, 170, 0, [HIGHEST, HIGH, DEFAULT, LOW, LOWEST]);
}

defineClass(170, 8, {170:1, 3:1, 9:1, 8:1}, Priority);
var DEFAULT, HIGH, HIGHEST, LOW, LOWEST;
var Lcom_baselet_control_enums_Priority_2_classLit = createForEnum('com.baselet.control.enums', 'Priority', 170, values_7);
function $clinit_Program(){
  $clinit_Program = emptyMethod;
  log_2 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_control_enums_Program_2_classLit) , Lcom_baselet_control_enums_Program_2_classLit.typeName));
}

function Program(runtimeType){
  $clinit_Program();
  $info_0(log_2, 'Initializing Program: Version=14.4.0-SNAPSHOT, Runtime=' + runtimeType);
  this.programName = 'UMLet';
  'http://www.' + this.programName.toLowerCase() + '.com';
  runtimeType == ($clinit_RuntimeType() , ECLIPSE_PLUGIN)?this.programName.toLowerCase() + 'plugin.cfg':this.programName.toLowerCase() + '.cfg';
}

defineClass(401, 1, {}, Program);
var log_2;
var Lcom_baselet_control_enums_Program_2_classLit = createForClass('com.baselet.control.enums', 'Program', 401);
function $clinit_RuntimeType(){
  $clinit_RuntimeType = emptyMethod;
  STANDALONE = new RuntimeType('STANDALONE', 0);
  ECLIPSE_PLUGIN = new RuntimeType('ECLIPSE_PLUGIN', 1);
  BATCH = new RuntimeType('BATCH', 2);
  GWT = new RuntimeType('GWT', 3);
}

function RuntimeType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_8(){
  $clinit_RuntimeType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_RuntimeType_2_classLit, 1), $intern_5, 177, 0, [STANDALONE, ECLIPSE_PLUGIN, BATCH, GWT]);
}

defineClass(177, 8, {177:1, 3:1, 9:1, 8:1}, RuntimeType);
var BATCH, ECLIPSE_PLUGIN, GWT, STANDALONE;
var Lcom_baselet_control_enums_RuntimeType_2_classLit = createForEnum('com.baselet.control.enums', 'RuntimeType', 177, values_8);
function $addDrawable(this$static, drawable){
  this$static.enableDrawing && (this$static.layer == 0?$add_13(this$static.drawablesForeground, drawable):$add_13(this$static.drawablesBackground, drawable));
}

function $assertDoubleRange(doubleValue){
  if (doubleValue < 0 || doubleValue > 5000) {
    throw toJs(new StyleException('value must be >=0 and <=5000'));
  }
}

function $clearCache(this$static){
  this$static.drawablesBackground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  this$static.drawablesForeground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
}

function $drawLine(this$static, x1, y1, x2, y2){
  $drawLines_0(this$static, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(x1, y1), new PointDouble(x2, y2)]));
}

function $drawLines(this$static, points){
  $drawLines_0(this$static, castTo(points.toArray_0(initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, points.size_1(), 0, 1)), 15));
}

function $drawRectangle(this$static, rect){
  $drawRectangle_1(this$static, rect.x_0, rect.y_0, rect.width_0, rect.height_0);
}

function $print(this$static, singleLine, x_0, y_0, align_0){
  $printHelper(this$static, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_StringStyle_2_classLit, 1), $intern_9, 37, 0, [singleLine]), new PointDouble(x_0, y_0), align_0);
}

function $print_0(this$static, multiLineWithMarkup, x_0, y_0, align_0){
  $print_1(this$static, multiLineWithMarkup, new PointDouble(x_0, y_0), align_0);
}

function $print_1(this$static, multiLineWithMarkup, point, align_0){
  var formatedLines, i, lines, styleAtDrawingCall;
  lines = $split(multiLineWithMarkup, '\n', 0);
  formatedLines = initUnidimensionalArray(Lcom_baselet_control_StringStyle_2_classLit, $intern_9, 37, lines.length, 0, 1);
  for (i = 0; i < lines.length; i++) {
    formatedLines[i] = analyzeFormatLabels(replaceNotEscaped(lines[i]));
  }
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$7(this$static, point, styleAtDrawingCall, formatedLines, align_0));
}

function $resetColorSettings(this$static){
  $setForegroundColor(this$static, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND)));
  $setBackgroundColorAndKeepTransparency(this$static, 'bg');
}

function $resetStyle(this$static){
  $setForegroundColor(this$static, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND)));
  $setBackgroundColorAndKeepTransparency(this$static, 'bg');
  this$static.style_0.fontSize = 12;
  $setLineType_0(this$static.style_0, ($clinit_LineType() , SOLID));
  this$static.style_0.lineWidth_0 = 1;
}

function $setBackgroundColor(this$static, color_0){
  !color_0?$setBackgroundColor_0(this$static.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(this$static.style_0, color_0);
}

function $setBackgroundColorAndKeepTransparency(this$static, color_0){
  var currentTheme, defaultBg, newAlpha, oldBg;
  if ($equals_6(color_0, 'bg')) {
    $setBackgroundColor(this$static, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND)));
  }
   else {
    currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
    oldBg = this$static.style_0.backgroundColor_0;
    defaultBg = $getColor(currentTheme, ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND));
    newAlpha = oldBg == defaultBg?($clinit_ColorOwn$Transparency() , BACKGROUND).alpha_0:oldBg.alpha_0;
    $setBackgroundColor(this$static, $forString(currentTheme, color_0, newAlpha));
  }
}

function $setEnableDrawing(this$static, enableDrawing){
  this$static.enableDrawing = enableDrawing;
}

function $setFontSize(this$static, fontSize){
  $assertDoubleRange(fontSize);
  $setFontSize_0(this$static.style_0, fontSize);
}

function $setForegroundColor(this$static, color_0){
  !color_0?$setForegroundColor_1(this$static.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND))):$setForegroundColor_1(this$static.style_0, color_0);
}

function $setForegroundColor_0(this$static, color_0){
  $equals_6(color_0, 'fg')?$setForegroundColor(this$static, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND))):$setForegroundColor(this$static, $forString(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), color_0, ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0));
}

function $setLineType(this$static, type_0){
  $setLineType_0(this$static.style_0, type_0);
}

function $setLineWidth(this$static, lineWidth){
  $assertDoubleRange(lineWidth);
  $setLineWidth_0(this$static.style_0, lineWidth);
}

defineClass(721, 1, {});
_.enableDrawing = true;
_.layer = 1;
var Lcom_baselet_diagram_draw_DrawHandler_2_classLit = createForClass('com.baselet.diagram.draw', 'DrawHandler', 721);
function $clinit_TextSplitter(){
  $clinit_TextSplitter = emptyMethod;
  log_3 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_diagram_draw_TextSplitter_2_classLit) , Lcom_baselet_diagram_draw_TextSplitter_2_classLit.typeName));
  wordCache = new LRUCache(180);
  minWidthCache = new LRUCache(190);
  wordwrapCache = new LRUCache(400);
}

function checkifStringFitsNoWordwrap(text_0, width_0, drawer){
  $clinit_TextSplitter();
  var analyzedText, words, wwValue;
  analyzedText = analyzeFormatLabels(replaceNotEscaped(text_0));
  words = getCachedWords(analyzedText.stringWithoutMarkup);
  if (words == null) {
    return $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(analyzedText.stringWithoutMarkup))).width_0 + $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped('n'))).width_0 + 0.01 < width_0;
  }
   else {
    wwValue = getCachedWordwrap(new TextSplitter$WordwrapCacheKey(words, width_0, $cloneFromMe(drawer.style_0), analyzedText.format));
    return !wwValue?$textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(analyzedText.stringWithoutMarkup))).width_0 + $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped('n'))).width_0 + 0.01 < width_0:wwValue.wrappedLines.length < 2;
  }
}

function drawText(drawer, textLines, topLeftX, topLeftY, width_0, height, hAlignment, vAlignment){
  $clinit_TextSplitter();
  var l, l$index, l$max, textHeight, wl, wl$array, wl$index, wl$max;
  textHeight = getSplitStringHeight(textLines, width_0, drawer);
  if (textHeight > height) {
    throw toJs(new IllegalArgumentException_0('The text needs more height then specified in the parameter'));
  }
  switch (vAlignment.ordinal) {
    case 0:
      break;
    case 1:
      topLeftY += (height - textHeight) / 2;
      break;
    case 2:
      topLeftY += height - textHeight;
      break;
    default:$error_1(log_3, "Encountered unhandled enumeration value '" + vAlignment + "'.");
  }
  topLeftY += $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
  switch (hAlignment.ordinal) {
    case 0:
      break;
    case 1:
      topLeftX += width_0 / 2;
      break;
    case 2:
      topLeftX += width_0;
      break;
    default:$error_1(log_3, "Encountered unhandled enumeration value '" + hAlignment + "'.");
  }
  for (l$index = 0 , l$max = textLines.length; l$index < l$max; ++l$index) {
    l = textLines[l$index];
    for (wl$array = splitStringAndHeightAlgorithm(l, width_0, drawer).wrappedLines , wl$index = 0 , wl$max = wl$array.length; wl$index < wl$max; ++wl$index) {
      wl = wl$array[wl$index];
      $printHelper(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_StringStyle_2_classLit, 1), $intern_9, 37, 0, [wl]), new PointDouble(topLeftX, topLeftY), hAlignment);
      topLeftY += $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3;
    }
  }
}

function getCachedWords(lineKey){
  return castTo($get_1(wordCache, lineKey), 252);
}

function getCachedWordwrap(key){
  return castTo($get_1(wordwrapCache, key), 215);
}

function getSplitStringHeight(textLines, width_0, drawer){
  $clinit_TextSplitter();
  var height, l, l$index, l$max;
  height = 0;
  for (l$index = 0 , l$max = textLines.length; l$index < l$max; ++l$index) {
    l = textLines[l$index];
    height += splitStringAndHeightAlgorithm(l, width_0, drawer).height_0;
  }
  return height;
}

function getTextMinWidth(text_0, drawer){
  var analyzedText, key, minWidth, wr, wr$array, wr$index, wr$max;
  analyzedText = analyzeFormatLabels(replaceNotEscaped(text_0));
  key = new TextSplitter$MinWidthCacheKey(splitIntoWords(analyzedText.stringWithoutMarkup), $cloneFromMe(drawer.style_0), analyzedText.format);
  if (castToDouble($get_1(minWidthCache, key)) != null) {
    return $doubleValue_0(castToDouble($get_1(minWidthCache, key)));
  }
   else {
    minWidth = 0;
    if ($trim(analyzedText.stringWithoutMarkup).length > 0) {
      for (wr$array = key.words , wr$index = 0 , wr$max = wr$array.length; wr$index < wr$max; ++wr$index) {
        wr = wr$array[wr$index];
        minWidth = $wnd.Math.max(minWidth, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped($substring_0(analyzedText.stringWithoutMarkup, wr.begin, wr.end)))).width_0);
      }
    }
    minWidth += $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped('n'))).width_0 + 0.01;
    $put_0(minWidthCache, key, minWidth);
    return minWidth;
  }
}

function getTextMinWidth_0(textLines, drawer){
  $clinit_TextSplitter();
  var line, line$index, line$max, minWidth;
  minWidth = 0;
  for (line$index = 0 , line$max = textLines.length; line$index < line$max; ++line$index) {
    line = textLines[line$index];
    minWidth = $wnd.Math.max(minWidth, getTextMinWidth(line, drawer));
  }
  return minWidth;
}

function isWhitespace(c){
  var i;
  for (i = 0; i < 2; i++) {
    checkCriticalStringElementIndex(i, ' \t'.length);
    if (' \t'.charCodeAt(i) == c) {
      return true;
    }
  }
  return false;
}

function splitIntoWords(text_0){
  var current, inWord, wordStart, words;
  words = castTo($get_1(wordCache, text_0), 252);
  if (words == null) {
    words = initUnidimensionalArray(Lcom_baselet_diagram_draw_TextSplitter$WordRegion_2_classLit, {252:1, 3:1, 4:1}, 149, 0, 0, 1);
    if ($trim(text_0).length > 0) {
      wordStart = 0;
      current = 0;
      while (isWhitespace((checkCriticalStringElementIndex(current, text_0.length) , text_0.charCodeAt(current)))) {
        ++current;
      }
      ++current;
      inWord = true;
      for (; current < text_0.length; current++) {
        if (inWord) {
          if (isWhitespace((checkCriticalStringElementIndex(current, text_0.length) , text_0.charCodeAt(current)))) {
            words = castTo(copyOf_0(words, words.length + 1), 252);
            setCheck(words, words.length - 1, new TextSplitter$WordRegion(wordStart, current));
            inWord = false;
          }
        }
         else {
          if (!isWhitespace((checkCriticalStringElementIndex(current, text_0.length) , text_0.charCodeAt(current)))) {
            wordStart = current;
            inWord = true;
          }
        }
      }
      if (inWord) {
        words = castTo(copyOf_0(words, words.length + 1), 252);
        setCheck(words, words.length - 1, new TextSplitter$WordRegion(wordStart, current));
      }
    }
    $put_0(wordCache, text_0, words);
  }
  return words;
}

function splitStringAndHeightAlgorithm(text_0, maxWidth, drawer){
  $clinit_TextSplitter();
  var analyzedText, cachedWordwrap, currentRegion, currentWord, endIndex, finalText, height, iter, key, lastFittingRegion, mergedWord, partialWord, substring, words, wordsList, wordwrapValue, wrappedText;
  analyzedText = analyzeFormatLabels(replaceNotEscaped(text_0));
  finalText = analyzedText.stringWithoutMarkup;
  words = splitIntoWords(finalText);
  key = new TextSplitter$WordwrapCacheKey(words, maxWidth, $cloneFromMe(drawer.style_0), analyzedText.format);
  cachedWordwrap = castTo($get_1(wordwrapCache, key), 215);
  if (cachedWordwrap) {
    $trace_0(log_3, 'got value from cache ' + cachedWordwrap);
    return cachedWordwrap;
  }
   else {
    maxWidth -= $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped('n'))).width_0;
    wrappedText = new LinkedList;
    wordsList = new ArrayList_1(new Arrays$ArrayList(words));
    for (iter = new AbstractList$ListIteratorImpl(wordsList, 0); iter.i < iter.this$01_0.size_1();) {
      currentRegion = (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , castTo(iter.this$01_0.get_0(iter.last = iter.i++), 149));
      currentWord = $substring_0(finalText, currentRegion.begin, currentRegion.end);
      $trace_0(log_3, 'current word: ' + currentWord);
      if (wordFits(maxWidth, drawer, currentWord)) {
        mergedWord = currentWord;
        while (iter.i < iter.this$01_0.size_1() && wordFits(maxWidth, drawer, mergedWord)) {
          mergedWord = $substring_0(finalText, currentRegion.begin, (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , castTo(iter.this$01_0.get_0(iter.last = iter.i++), 149)).end);
        }
        if (wordFits(maxWidth, drawer, mergedWord)) {
          $add_15(wrappedText, new StringStyle(analyzedText.format, mergedWord));
        }
         else {
          checkCriticalElement(iter.i > 0);
          iter.this$01.get_0(iter.last = --iter.i);
          lastFittingRegion = (checkCriticalElement(iter.i > 0) , castTo(iter.this$01.get_0(iter.last = --iter.i), 149));
          substring = $substring_0(finalText, currentRegion.begin, lastFittingRegion.end);
          $add_15(wrappedText, new StringStyle(analyzedText.format, substring));
          checkCriticalElement(iter.i < iter.this$01_0.size_1());
          iter.this$01_0.get_0(iter.last = iter.i++);
        }
      }
       else {
        endIndex = currentRegion.end;
        partialWord = $substring_0(finalText, currentRegion.begin, endIndex);
        while (endIndex > 0 && !wordFits(maxWidth, drawer, partialWord)) {
          partialWord = $substring_0(finalText, currentRegion.begin, --endIndex);
        }
        if (currentRegion.begin != endIndex) {
          $add_15(wrappedText, new StringStyle(analyzedText.format, partialWord));
          $set_3(iter, new TextSplitter$WordRegion(endIndex, currentRegion.end));
          checkCriticalElement(iter.i > 0);
          iter.this$01.get_0(iter.last = --iter.i);
        }
      }
    }
    height = wrappedText.size_0 * ($textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3);
    wordwrapValue = new TextSplitter$WordwrapCacheValue(castTo($toArray(wrappedText, initUnidimensionalArray(Lcom_baselet_control_StringStyle_2_classLit, $intern_9, 37, 0, 0, 1)), 250), height);
    $put_0(wordwrapCache, key, wordwrapValue);
    $isLoggable(log_3.logger, ($clinit_Level() , FINEST)) && $trace_0(log_3, 'split result: ' + toString_54(wordwrapValue.wrappedLines));
    return wordwrapValue;
  }
}

function wordFits(maxWidth, drawer, word){
  var width_0;
  width_0 = $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(word))).width_0;
  $trace_0(log_3, 'checking if "' + word + '" with width ' + width_0 + ' fits available space of ' + maxWidth);
  return width_0 <= maxWidth;
}

var log_3, minWidthCache, wordCache, wordwrapCache;
var Lcom_baselet_diagram_draw_TextSplitter_2_classLit = createForClass('com.baselet.diagram.draw', 'TextSplitter', null);
function TextSplitter$MinWidthCacheKey(words, style, format){
  this.words = words;
  this.style_0 = style;
  this.format = format;
}

defineClass(294, 1, {294:1}, TextSplitter$MinWidthCacheKey);
_.equals_0 = function equals_7(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_diagram_draw_TextSplitter$MinWidthCacheKey_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 294);
  if (!this.format) {
    if (other.format) {
      return false;
    }
  }
   else if (!equals_Ljava_lang_Object__Z__devirtual$(this.format, other.format)) {
    return false;
  }
  if (!this.style_0) {
    if (other.style_0) {
      return false;
    }
  }
   else if (!$equals_2(this.style_0, other.style_0)) {
    return false;
  }
  if (!equals_31(this.words, other.words)) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_8(){
  var result;
  result = 31 + (!this.format?0:hashCode__I__devirtual$(this.format));
  result = 31 * result + (!this.style_0?0:$hashCode_1(this.style_0));
  result = 31 * result + hashCode_28(this.words);
  return result;
}
;
var Lcom_baselet_diagram_draw_TextSplitter$MinWidthCacheKey_2_classLit = createForClass('com.baselet.diagram.draw', 'TextSplitter/MinWidthCacheKey', 294);
function TextSplitter$WordRegion(begin, end){
  this.begin = begin;
  this.end = end;
}

defineClass(149, 1, {149:1}, TextSplitter$WordRegion);
_.toString_0 = function toString_12(){
  return 'WordRegion [begin=' + this.begin + ', end=' + this.end + ']';
}
;
_.begin = 0;
_.end = 0;
var Lcom_baselet_diagram_draw_TextSplitter$WordRegion_2_classLit = createForClass('com.baselet.diagram.draw', 'TextSplitter/WordRegion', 149);
function TextSplitter$WordwrapCacheKey(words, width_0, style, format){
  this.words = words;
  this.width_0 = width_0;
  this.style_0 = style;
  this.format = format;
}

defineClass(242, 1, {242:1}, TextSplitter$WordwrapCacheKey);
_.equals_0 = function equals_8(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_diagram_draw_TextSplitter$WordwrapCacheKey_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 242);
  if (!this.format) {
    if (other.format) {
      return false;
    }
  }
   else if (!equals_Ljava_lang_Object__Z__devirtual$(this.format, other.format)) {
    return false;
  }
  if (!this.style_0) {
    if (other.style_0) {
      return false;
    }
  }
   else if (!$equals_2(this.style_0, other.style_0)) {
    return false;
  }
  if (neq(doubleToLongBits(this.width_0), doubleToLongBits(other.width_0))) {
    return false;
  }
  if (!equals_31(this.words, other.words)) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_9(){
  var result, temp;
  result = 31 + (!this.format?0:hashCode__I__devirtual$(this.format));
  result = 31 * result + (!this.style_0?0:$hashCode_1(this.style_0));
  temp = doubleToLongBits(this.width_0);
  result = 31 * result + toInt(xor_0(temp, shru_0(temp, 32)));
  result = 31 * result + hashCode_28(this.words);
  return result;
}
;
_.width_0 = 0;
var Lcom_baselet_diagram_draw_TextSplitter$WordwrapCacheKey_2_classLit = createForClass('com.baselet.diagram.draw', 'TextSplitter/WordwrapCacheKey', 242);
function TextSplitter$WordwrapCacheValue(wrappedLines, height){
  this.wrappedLines = wrappedLines;
  this.height_0 = height;
}

defineClass(215, 1, {215:1}, TextSplitter$WordwrapCacheValue);
_.equals_0 = function equals_9(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_diagram_draw_TextSplitter$WordwrapCacheValue_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 215);
  if (neq(doubleToLongBits(this.height_0), doubleToLongBits(other.height_0))) {
    return false;
  }
  if (!equals_31(this.wrappedLines, other.wrappedLines)) {
    return false;
  }
  return true;
}
;
_.hashCode_0 = function hashCode_10(){
  var result, temp;
  temp = doubleToLongBits(this.height_0);
  result = 31 + toInt(xor_0(temp, shru_0(temp, 32)));
  result = 31 * result + hashCode_28(this.wrappedLines);
  return result;
}
;
_.height_0 = 0;
var Lcom_baselet_diagram_draw_TextSplitter$WordwrapCacheValue_2_classLit = createForClass('com.baselet.diagram.draw', 'TextSplitter/WordwrapCacheValue', 215);
function $clinit_ColorOwn(){
  $clinit_ColorOwn = emptyMethod;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_diagram_draw_helper_ColorOwn_2_classLit) , Lcom_baselet_diagram_draw_helper_ColorOwn_2_classLit.typeName));
}

function $darken(this$static, factor){
  return new ColorOwn($wnd.Math.max(0, this$static.red - factor), $wnd.Math.max(0, this$static.green - factor), $wnd.Math.max(0, this$static.blue - factor), this$static.alpha_0);
}

function $equals_1(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_diagram_draw_helper_ColorOwn_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 39);
  if (this$static.alpha_0 != other.alpha_0) {
    return false;
  }
  if (this$static.blue != other.blue) {
    return false;
  }
  if (this$static.green != other.green) {
    return false;
  }
  if (this$static.red != other.red) {
    return false;
  }
  return true;
}

function $hashCode_0(this$static){
  var result;
  result = 31 + this$static.alpha_0;
  result = 31 * result + this$static.blue;
  result = 31 * result + this$static.green;
  result = 31 * result + this$static.red;
  return result;
}

function $transparency(this$static, alpha_0){
  return new ColorOwn(this$static.red, this$static.green, this$static.blue, alpha_0);
}

function ColorOwn(red, green, blue, alpha_0){
  $clinit_ColorOwn();
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.alpha_0 = alpha_0;
}

function ColorOwn_0(red, green, blue, transparency){
  $clinit_ColorOwn();
  ColorOwn.call(this, red, green, blue, transparency.alpha_0);
}

function ColorOwn_1(hex){
  $clinit_ColorOwn();
  var decode, i;
  i = valueOf_9((decode = __decodeNumberString(hex) , __parseAndValidateInt(decode.payload, decode.radix))).value_0;
  this.red = i >> 16 & 255;
  this.green = i >> 8 & 255;
  this.blue = i & 255;
  this.alpha_0 = ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0;
}

defineClass(39, 1, {39:1}, ColorOwn, ColorOwn_0, ColorOwn_1);
_.equals_0 = function equals_10(obj){
  return $equals_1(this, obj);
}
;
_.hashCode_0 = function hashCode_11(){
  return $hashCode_0(this);
}
;
_.toString_0 = function toString_13(){
  return 'ColorOwn [red=' + this.red + ', green=' + this.green + ', blue=' + this.blue + ', alpha=' + this.alpha_0 + ']';
}
;
_.alpha_0 = 0;
_.blue = 0;
_.green = 0;
_.red = 0;
var Lcom_baselet_diagram_draw_helper_ColorOwn_2_classLit = createForClass('com.baselet.diagram.draw.helper', 'ColorOwn', 39);
function $clinit_ColorOwn$Transparency(){
  $clinit_ColorOwn$Transparency = emptyMethod;
  FOREGROUND = new ColorOwn$Transparency('FOREGROUND', 0, 255);
  FULL_TRANSPARENT = new ColorOwn$Transparency('FULL_TRANSPARENT', 1, 0);
  DEPRECATED_WARNING = new ColorOwn$Transparency('DEPRECATED_WARNING', 2, 175);
  BACKGROUND = new ColorOwn$Transparency('BACKGROUND', 3, 125);
  SELECTION_BACKGROUND = new ColorOwn$Transparency('SELECTION_BACKGROUND', 4, 20);
}

function ColorOwn$Transparency(enum$name, enum$ordinal, alpha_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.alpha_0 = alpha_0;
}

function values_9(){
  $clinit_ColorOwn$Transparency();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_diagram_draw_helper_ColorOwn$Transparency_2_classLit, 1), $intern_5, 155, 0, [FOREGROUND, FULL_TRANSPARENT, DEPRECATED_WARNING, BACKGROUND, SELECTION_BACKGROUND]);
}

defineClass(155, 8, {155:1, 3:1, 9:1, 8:1}, ColorOwn$Transparency);
_.alpha_0 = 0;
var BACKGROUND, DEPRECATED_WARNING, FOREGROUND, FULL_TRANSPARENT, SELECTION_BACKGROUND;
var Lcom_baselet_diagram_draw_helper_ColorOwn$Transparency_2_classLit = createForEnum('com.baselet.diagram.draw.helper', 'ColorOwn/Transparency', 155, values_9);
function $cloneFromMe(this$static){
  var clone;
  clone = new Style;
  clone.lineWidth_0 = this$static.lineWidth_0;
  clone.lineType = this$static.lineType;
  clone.foregroundColor = this$static.foregroundColor;
  clone.backgroundColor_0 = this$static.backgroundColor_0;
  clone.fontSize = this$static.fontSize;
  clone.applyZoom = this$static.applyZoom;
  return clone;
}

function $equals_2(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lcom_baselet_diagram_draw_helper_Style_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 214);
  if (this$static.applyZoom != other.applyZoom) {
    return false;
  }
  if (!this$static.backgroundColor_0) {
    if (other.backgroundColor_0) {
      return false;
    }
  }
   else if (!$equals_1(this$static.backgroundColor_0, other.backgroundColor_0)) {
    return false;
  }
  if (!this$static.foregroundColor) {
    if (other.foregroundColor) {
      return false;
    }
  }
   else if (!$equals_1(this$static.foregroundColor, other.foregroundColor)) {
    return false;
  }
  if (neq(doubleToLongBits(this$static.fontSize), doubleToLongBits(other.fontSize))) {
    return false;
  }
  if (neq(doubleToLongBits(this$static.lineWidth_0), doubleToLongBits(other.lineWidth_0))) {
    return false;
  }
  if (this$static.lineType != other.lineType) {
    return false;
  }
  return true;
}

function $hashCode_1(this$static){
  var result, temp;
  result = 31 + (this$static.applyZoom?1231:1237);
  result = 31 * result + (!this$static.backgroundColor_0?0:$hashCode_0(this$static.backgroundColor_0));
  result = 31 * result + (!this$static.foregroundColor?0:$hashCode_0(this$static.foregroundColor));
  temp = doubleToLongBits(this$static.fontSize);
  result = 31 * result + toInt(xor_0(temp, shru_0(temp, 32)));
  temp = doubleToLongBits(this$static.lineWidth_0);
  result = 31 * result + toInt(xor_0(temp, shru_0(temp, 32)));
  result = 31 * result + (!this$static.lineType?0:getHashCode_0(this$static.lineType));
  return result;
}

function $setBackgroundColor_0(this$static, backgroundColor){
  this$static.backgroundColor_0 = backgroundColor;
}

function $setFontSize_0(this$static, fontSize){
  this$static.fontSize = fontSize;
}

function $setForegroundColor_1(this$static, foregroundColor){
  this$static.foregroundColor = foregroundColor;
}

function $setLineType_0(this$static, lineType){
  this$static.lineType = lineType;
}

function $setLineWidth_0(this$static, lineWidth){
  this$static.lineWidth_0 = lineWidth;
}

function Style(){
  this.lineWidth_0 = 1;
  this.lineType = ($clinit_LineType() , SOLID);
  this.applyZoom = true;
}

defineClass(214, 1, {214:1}, Style);
_.equals_0 = function equals_11(obj){
  return $equals_2(this, obj);
}
;
_.hashCode_0 = function hashCode_12(){
  return $hashCode_1(this);
}
;
_.applyZoom = false;
_.fontSize = 0;
_.lineWidth_0 = 0;
var Lcom_baselet_diagram_draw_helper_Style_2_classLit = createForClass('com.baselet.diagram.draw.helper', 'Style', 214);
function $$init(this$static){
  this$static.stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_3, 126, 0, 0, 1);
}

function $addSuppressed(this$static, exception){
  checkCriticalNotNull_0(exception, 'Cannot suppress a null exception.');
  checkCriticalArgument(exception != this$static, 'Exception can not suppress itself.');
  if (this$static.disableSuppression) {
    return;
  }
  this$static.suppressedExceptions == null?(this$static.suppressedExceptions = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Throwable_2_classLit, 1), $intern_3, 17, 0, [exception])):(this$static.suppressedExceptions[this$static.suppressedExceptions.length] = exception);
}

function $fillInStackTrace(this$static){
  if (this$static.writetableStackTrace) {
    this$static.backingJsObject !== '__noinit__' && this$static.initializeBackingError();
    this$static.stackTrace = null;
  }
  return this$static;
}

function $initCause(this$static, cause){
  checkCriticalState_0(!this$static.cause, "Can't overwrite cause");
  checkCriticalArgument(cause != this$static, 'Self-causation not permitted');
  this$static.cause = cause;
  return this$static;
}

function $printStackTraceImpl(this$static, out, prefix, ident){
  var t, t$array, t$index, t$max, theCause;
  out.println(ident + prefix + this$static);
  $printStackTraceItems(this$static, out, ident);
  for (t$array = (this$static.suppressedExceptions == null && (this$static.suppressedExceptions = initUnidimensionalArray(Ljava_lang_Throwable_2_classLit, $intern_3, 17, 0, 0, 1)) , this$static.suppressedExceptions) , t$index = 0 , t$max = t$array.length; t$index < t$max; ++t$index) {
    t = t$array[t$index];
    $printStackTraceImpl(t, out, 'Suppressed: ', '\t' + ident);
  }
  theCause = this$static.cause;
  !!theCause && $printStackTraceImpl(theCause, out, 'Caused by: ', ident);
}

function $printStackTraceItems(this$static, out, ident){
  var element, element$array, element$index, element$max, stackTrace;
  for (element$array = (this$static.stackTrace == null && (this$static.stackTrace = ($clinit_StackTraceCreator() , stackTrace = collector.getStackTrace(this$static) , dropInternalFrames(stackTrace))) , this$static.stackTrace) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {
    element = element$array[element$index];
    out.println(ident + '\tat ' + element);
  }
}

function $setBackingJsObject(this$static, backingJsObject){
  this$static.backingJsObject = backingJsObject;
  backingJsObject != null && setPropertySafe(backingJsObject, '__java$exception', this$static);
}

function $toString_0(this$static, message){
  var className;
  className = $getName(this$static.___clazz);
  return message == null?className:className + ': ' + message;
}

function Throwable(message, cause){
  $$init(this);
  this.cause = cause;
  this.detailMessage = message;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

function fixIE(e){
  if (!('stack' in e)) {
    try {
      throw e;
    }
     catch (ignored) {
    }
  }
  return e;
}

function of(e){
  var throwable;
  if (e != null) {
    throwable = e['__java$exception'];
    if (throwable) {
      return throwable;
    }
  }
  return instanceOfNative(e, TypeError)?new NullPointerException_0(e):new JsException(e);
}

defineClass(17, 1, $intern_10);
_.createError = function createError(msg){
  return new Error(msg);
}
;
_.getMessage = function getMessage(){
  return this.detailMessage;
}
;
_.initializeBackingError = function initializeBackingError(){
  var className, errorMessage, message;
  message = this.detailMessage == null?null:this.detailMessage.replace(new RegExp('\n', 'g'), ' ');
  errorMessage = (className = $getName(this.___clazz) , message == null?className:className + ': ' + message);
  $setBackingJsObject(this, fixIE(this.createError(errorMessage)));
  captureStackTrace(this);
}
;
_.toString_0 = function toString_14(){
  return $toString_0(this, this.getMessage());
}
;
_.backingJsObject = '__noinit__';
_.disableSuppression = false;
_.writetableStackTrace = true;
var Ljava_lang_Throwable_2_classLit = createForClass('java.lang', 'Throwable', 17);
function Exception_0(){
  $$init(this);
  $fillInStackTrace(this);
  this.initializeBackingError();
}

function Exception_1(message){
  $$init(this);
  this.detailMessage = message;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

defineClass(14, 17, {3:1, 14:1, 17:1}, Exception_0);
var Ljava_lang_Exception_2_classLit = createForClass('java.lang', 'Exception', 14);
function RuntimeException(){
  Exception_0.call(this);
}

function RuntimeException_0(message){
  Exception_1.call(this, message);
}

function RuntimeException_1(message, cause){
  Throwable.call(this, message, cause);
}

function RuntimeException_2(cause){
  $$init(this);
  this.detailMessage = !cause?null:$toString_0(cause, cause.getMessage());
  this.cause = cause;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

defineClass(11, 14, $intern_11, RuntimeException, RuntimeException_0, RuntimeException_1, RuntimeException_2);
var Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang', 'RuntimeException', 11);
function StyleException(message){
  RuntimeException_0.call(this, message);
}

defineClass(72, 11, {72:1, 3:1, 14:1, 11:1, 17:1}, StyleException);
var Lcom_baselet_diagram_draw_helper_StyleException_2_classLit = createForClass('com.baselet.diagram.draw.helper', 'StyleException', 72);
function $forString(this$static, colorString, transparency){
  var c, c$iterator, error, returnColor;
  error = false;
  returnColor = null;
  if (colorString == null) {
    error = true;
  }
   else {
    for (c$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.colorMap)).this$01); c$iterator.hasNext;) {
      c = $next_1(c$iterator);
      if ($equalsIgnoreCase(colorString, $toString(castTo(c.getKey(), 78)))) {
        returnColor = castTo(c.getValue_0(), 39);
        break;
      }
    }
    if (!returnColor) {
      try {
        returnColor = new ColorOwn_1(colorString);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 77)) {
          error = true;
        }
         else 
          throw toJs($e0);
      }
    }
    !!returnColor && (returnColor = new ColorOwn(returnColor.red, returnColor.green, returnColor.blue, transparency));
  }
  if (error) {
    throw toJs(new StyleException('value must be a color string (green,...) or code (#3c7a00,...)'));
  }
  return returnColor;
}

function $forStringOrNull(this$static, colorString, transparency){
  try {
    return $forString(this$static, colorString, transparency.alpha_0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 72)) {
      return null;
    }
     else 
      throw toJs($e0);
  }
}

function $getColor(this$static, colorStyle){
  return castTo($get_0(this$static.styleColorMap, colorStyle), 39);
}

function $getColor_0(this$static, color_0){
  return castTo($get_0(this$static.colorMap, color_0), 39);
}

defineClass(1038, 1, {});
var Lcom_baselet_diagram_draw_helper_theme_Theme_2_classLit = createForClass('com.baselet.diagram.draw.helper.theme', 'Theme', 1038);
function $clinit_Theme$ColorStyle(){
  $clinit_Theme$ColorStyle = emptyMethod;
  SELECTION_FG = new Theme$ColorStyle('SELECTION_FG', 0);
  SELECTION_BG = new Theme$ColorStyle('SELECTION_BG', 1);
  STICKING_POLYGON = new Theme$ColorStyle('STICKING_POLYGON', 2);
  SYNTAX_HIGHLIGHTING = new Theme$ColorStyle('SYNTAX_HIGHLIGHTING', 3);
  DEFAULT_FOREGROUND = new Theme$ColorStyle('DEFAULT_FOREGROUND', 4);
  DEFAULT_BACKGROUND = new Theme$ColorStyle('DEFAULT_BACKGROUND', 5);
  DEFAULT_DOCUMENT_BACKGROUND = new Theme$ColorStyle('DEFAULT_DOCUMENT_BACKGROUND', 6);
  DEFAULT_SPLITTER_COLOR = new Theme$ColorStyle('DEFAULT_SPLITTER_COLOR', 7);
}

function Theme$ColorStyle(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_10(){
  $clinit_Theme$ColorStyle();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_diagram_draw_helper_theme_Theme$ColorStyle_2_classLit, 1), $intern_5, 120, 0, [SELECTION_FG, SELECTION_BG, STICKING_POLYGON, SYNTAX_HIGHLIGHTING, DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_DOCUMENT_BACKGROUND, DEFAULT_SPLITTER_COLOR]);
}

defineClass(120, 8, {120:1, 3:1, 9:1, 8:1}, Theme$ColorStyle);
var DEFAULT_BACKGROUND, DEFAULT_DOCUMENT_BACKGROUND, DEFAULT_FOREGROUND, DEFAULT_SPLITTER_COLOR, SELECTION_BG, SELECTION_FG, STICKING_POLYGON, SYNTAX_HIGHLIGHTING;
var Lcom_baselet_diagram_draw_helper_theme_Theme$ColorStyle_2_classLit = createForEnum('com.baselet.diagram.draw.helper.theme', 'Theme/ColorStyle', 120, values_10);
function $clinit_Theme$PredefinedColors(){
  $clinit_Theme$PredefinedColors = emptyMethod;
  RED = new Theme$PredefinedColors('RED', 0);
  GREEN = new Theme$PredefinedColors('GREEN', 1);
  BLUE = new Theme$PredefinedColors('BLUE', 2);
  YELLOW = new Theme$PredefinedColors('YELLOW', 3);
  MAGENTA = new Theme$PredefinedColors('MAGENTA', 4);
  WHITE = new Theme$PredefinedColors('WHITE', 5);
  BLACK = new Theme$PredefinedColors('BLACK', 6);
  ORANGE = new Theme$PredefinedColors('ORANGE', 7);
  CYAN = new Theme$PredefinedColors('CYAN', 8);
  DARK_GRAY = new Theme$PredefinedColors('DARK_GRAY', 9);
  GRAY = new Theme$PredefinedColors('GRAY', 10);
  LIGHT_GRAY = new Theme$PredefinedColors('LIGHT_GRAY', 11);
  PINK = new Theme$PredefinedColors('PINK', 12);
  TRANSPARENT = new Theme$PredefinedColors('TRANSPARENT', 13);
  NONE = new Theme$PredefinedColors('NONE', 14);
}

function Theme$PredefinedColors(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_11(){
  $clinit_Theme$PredefinedColors();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_diagram_draw_helper_theme_Theme$PredefinedColors_2_classLit, 1), $intern_5, 78, 0, [RED, GREEN, BLUE, YELLOW, MAGENTA, WHITE, BLACK, ORANGE, CYAN, DARK_GRAY, GRAY, LIGHT_GRAY, PINK, TRANSPARENT, NONE]);
}

defineClass(78, 8, {78:1, 3:1, 9:1, 8:1}, Theme$PredefinedColors);
var BLACK, BLUE, CYAN, DARK_GRAY, GRAY, GREEN, LIGHT_GRAY, MAGENTA, NONE, ORANGE, PINK, RED, TRANSPARENT, WHITE, YELLOW;
var Lcom_baselet_diagram_draw_helper_theme_Theme$PredefinedColors_2_classLit = createForEnum('com.baselet.diagram.draw.helper.theme', 'Theme/PredefinedColors', 78, values_11);
function $generateColorMaps(this$static){
  var colorMap, styleColorMap;
  colorMap = new HashMap;
  $put(colorMap, ($clinit_Theme$PredefinedColors() , BLACK), this$static.BLACK);
  $put(colorMap, BLUE, this$static.BLUE);
  $put(colorMap, CYAN, this$static.CYAN);
  $put(colorMap, DARK_GRAY, this$static.DARK_GRAY);
  $put(colorMap, GRAY, this$static.GRAY);
  $put(colorMap, GREEN, this$static.GREEN);
  $put(colorMap, LIGHT_GRAY, this$static.LIGHT_GRAY);
  $put(colorMap, MAGENTA, this$static.MAGENTA);
  $put(colorMap, ORANGE, this$static.ORANGE);
  $put(colorMap, PINK, this$static.PINK);
  $put(colorMap, RED, this$static.RED);
  $put(colorMap, WHITE, this$static.WHITE);
  $put(colorMap, YELLOW, this$static.YELLOW);
  $put(colorMap, TRANSPARENT, this$static.TRANSPARENT);
  $put(colorMap, NONE, this$static.TRANSPARENT);
  this$static.colorMap = colorMap;
  styleColorMap = new HashMap;
  $put(styleColorMap, ($clinit_Theme$ColorStyle() , SELECTION_FG), this$static.SELECTION_FG);
  $put(styleColorMap, SELECTION_BG, this$static.SELECTION_BG);
  $put(styleColorMap, STICKING_POLYGON, this$static.STICKING_POLYGON);
  $put(styleColorMap, SYNTAX_HIGHLIGHTING, this$static.SYNTAX_HIGHLIGHTING);
  $put(styleColorMap, DEFAULT_FOREGROUND, this$static.DEFAULT_FOREGROUND);
  $put(styleColorMap, DEFAULT_BACKGROUND, this$static.DEFAULT_BACKGROUND);
  $put(styleColorMap, DEFAULT_SPLITTER_COLOR, this$static.DEFAULT_SPLITTER_COLOR);
  $put(styleColorMap, DEFAULT_DOCUMENT_BACKGROUND, this$static.DEFAULT_DOCUMENT_BACKGROUND);
  this$static.styleColorMap = styleColorMap;
}

function ThemeDark(){
  this.RED = new ColorOwn_0(220, 0, 0, ($clinit_ColorOwn$Transparency() , FOREGROUND));
  this.GREEN = new ColorOwn_0(0, 220, 0, FOREGROUND);
  this.BLUE = new ColorOwn_0(0, 0, 220, FOREGROUND);
  this.YELLOW = new ColorOwn_0(100, 100, 0, FOREGROUND);
  this.MAGENTA = new ColorOwn_0(100, 0, 100, FOREGROUND);
  this.WHITE = new ColorOwn_0(255, 255, 255, FOREGROUND);
  this.BLACK = new ColorOwn_0(40, 40, 40, FOREGROUND);
  this.ORANGE = new ColorOwn_0(175, 117, 0, FOREGROUND);
  this.CYAN = new ColorOwn_0(0, 100, 100, FOREGROUND);
  this.DARK_GRAY = new ColorOwn_0(70, 70, 70, FOREGROUND);
  this.GRAY = new ColorOwn_0(120, 120, 120, FOREGROUND);
  this.LIGHT_GRAY = new ColorOwn_0(200, 200, 200, FOREGROUND);
  this.PINK = new ColorOwn_0(205, 120, 120, FOREGROUND);
  this.TRANSPARENT = $transparency(this.BLACK, FULL_TRANSPARENT.alpha_0);
  this.SELECTION_FG = new ColorOwn_0(150, 150, 255, FOREGROUND);
  this.SELECTION_BG = new ColorOwn_0(0, 0, 255, SELECTION_BACKGROUND);
  this.STICKING_POLYGON = new ColorOwn_0(100, 180, 255, FOREGROUND);
  this.SYNTAX_HIGHLIGHTING = new ColorOwn_0(0, 100, 255, FOREGROUND);
  this.DEFAULT_FOREGROUND = this.WHITE;
  this.DEFAULT_BACKGROUND = this.TRANSPARENT;
  this.DEFAULT_DOCUMENT_BACKGROUND = this.BLACK;
  this.DEFAULT_SPLITTER_COLOR = this.GRAY;
  $generateColorMaps(this);
}

defineClass(546, 1038, {}, ThemeDark);
var Lcom_baselet_diagram_draw_helper_theme_ThemeDark_2_classLit = createForClass('com.baselet.diagram.draw.helper.theme', 'ThemeDark', 546);
function $clinit_ThemeFactory(){
  $clinit_ThemeFactory = emptyMethod;
  listeners = new ArrayList;
}

function changeTheme(chosenTheme, backgroundColor, overrideBackground){
  $clinit_ThemeFactory();
  var listener, listener$iterator;
  if (chosenTheme != activeThemeEnum) {
    switch (chosenTheme.ordinal) {
      case 1:
        activeThemeEnum = chosenTheme;
        theme_0 = new ThemeDark;
        break;
      case 0:
        activeThemeEnum = chosenTheme;
        theme_0 = new ThemeLight;
        break;
      default:activeThemeEnum = ($clinit_ThemeFactory$THEMES() , LIGHT);
        theme_0 = new ThemeLight;
    }
  }
  backgroundColor != null && (lastBackgroundColor = backgroundColor);
  lastBackgroundColor != null && overrideBackground && $put(theme_0.styleColorMap, ($clinit_Theme$ColorStyle() , DEFAULT_DOCUMENT_BACKGROUND), new ColorOwn_1(lastBackgroundColor));
  for (listener$iterator = new ArrayList$1(listeners); listener$iterator.i < listener$iterator.this$01.array.length;) {
    listener = castTo($next_3(listener$iterator), 199);
    listener.onThemeChange();
  }
}

defineClass(1030, 1, {});
var activeThemeEnum, lastBackgroundColor, listeners, theme_0;
var Lcom_baselet_diagram_draw_helper_theme_ThemeFactory_2_classLit = createForClass('com.baselet.diagram.draw.helper.theme', 'ThemeFactory', 1030);
function $clinit_ThemeFactory$THEMES(){
  $clinit_ThemeFactory$THEMES = emptyMethod;
  LIGHT = new ThemeFactory$THEMES('LIGHT', 0);
  DARK = new ThemeFactory$THEMES('DARK', 1);
}

function ThemeFactory$THEMES(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_12(){
  $clinit_ThemeFactory$THEMES();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_diagram_draw_helper_theme_ThemeFactory$THEMES_2_classLit, 1), $intern_5, 154, 0, [LIGHT, DARK]);
}

defineClass(154, 8, {154:1, 3:1, 9:1, 8:1}, ThemeFactory$THEMES);
var DARK, LIGHT;
var Lcom_baselet_diagram_draw_helper_theme_ThemeFactory$THEMES_2_classLit = createForEnum('com.baselet.diagram.draw.helper.theme', 'ThemeFactory/THEMES', 154, values_12);
function $clinit_ThemeFactory$THEMES$Map(){
  $clinit_ThemeFactory$THEMES$Map = emptyMethod;
  $MAP_3 = createValueOfMap(($clinit_ThemeFactory$THEMES() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_diagram_draw_helper_theme_ThemeFactory$THEMES_2_classLit, 1), $intern_5, 154, 0, [LIGHT, DARK])));
}

var $MAP_3;
function $generateColorMaps_0(this$static){
  var colorMap, styleColorMap;
  colorMap = new HashMap;
  $put(colorMap, ($clinit_Theme$PredefinedColors() , BLACK), this$static.BLACK);
  $put(colorMap, BLUE, this$static.BLUE);
  $put(colorMap, CYAN, this$static.CYAN);
  $put(colorMap, DARK_GRAY, this$static.DARK_GRAY);
  $put(colorMap, GRAY, this$static.GRAY);
  $put(colorMap, GREEN, this$static.GREEN);
  $put(colorMap, LIGHT_GRAY, this$static.LIGHT_GRAY);
  $put(colorMap, MAGENTA, this$static.MAGENTA);
  $put(colorMap, ORANGE, this$static.ORANGE);
  $put(colorMap, PINK, this$static.PINK);
  $put(colorMap, RED, this$static.RED);
  $put(colorMap, WHITE, this$static.WHITE);
  $put(colorMap, YELLOW, this$static.YELLOW);
  $put(colorMap, TRANSPARENT, this$static.TRANSPARENT);
  $put(colorMap, NONE, this$static.TRANSPARENT);
  this$static.colorMap = colorMap;
  styleColorMap = new HashMap;
  $put(styleColorMap, ($clinit_Theme$ColorStyle() , SELECTION_FG), this$static.SELECTION_FG);
  $put(styleColorMap, SELECTION_BG, this$static.SELECTION_BG);
  $put(styleColorMap, STICKING_POLYGON, this$static.STICKING_POLYGON);
  $put(styleColorMap, SYNTAX_HIGHLIGHTING, this$static.SYNTAX_HIGHLIGHTING);
  $put(styleColorMap, DEFAULT_FOREGROUND, this$static.DEFAULT_FOREGROUND);
  $put(styleColorMap, DEFAULT_BACKGROUND, this$static.DEFAULT_BACKGROUND);
  $put(styleColorMap, DEFAULT_DOCUMENT_BACKGROUND, this$static.DEFAULT_CANVAS);
  $put(styleColorMap, DEFAULT_SPLITTER_COLOR, this$static.DEFAULT_SPLITTER_COLOR);
  this$static.styleColorMap = styleColorMap;
}

function ThemeLight(){
  this.RED = new ColorOwn_0(255, 0, 0, ($clinit_ColorOwn$Transparency() , FOREGROUND));
  this.GREEN = new ColorOwn_0(0, 255, 0, FOREGROUND);
  this.BLUE = new ColorOwn_0(0, 0, 255, FOREGROUND);
  this.YELLOW = new ColorOwn_0(255, 255, 0, FOREGROUND);
  this.MAGENTA = new ColorOwn_0(255, 0, 255, FOREGROUND);
  this.WHITE = new ColorOwn_0(255, 255, 255, FOREGROUND);
  this.BLACK = new ColorOwn_0(0, 0, 0, FOREGROUND);
  this.ORANGE = new ColorOwn_0(255, 165, 0, FOREGROUND);
  this.CYAN = new ColorOwn_0(0, 255, 255, FOREGROUND);
  this.DARK_GRAY = new ColorOwn_0(70, 70, 70, FOREGROUND);
  this.GRAY = new ColorOwn_0(120, 120, 120, FOREGROUND);
  this.LIGHT_GRAY = new ColorOwn_0(200, 200, 200, FOREGROUND);
  this.PINK = new ColorOwn_0(255, 175, 175, FOREGROUND);
  this.TRANSPARENT = $transparency(this.WHITE, FULL_TRANSPARENT.alpha_0);
  this.SELECTION_FG = this.BLUE;
  this.SELECTION_BG = new ColorOwn_0(0, 0, 255, SELECTION_BACKGROUND);
  this.STICKING_POLYGON = new ColorOwn_0(100, 180, 255, FOREGROUND);
  this.SYNTAX_HIGHLIGHTING = new ColorOwn_0(0, 100, 255, FOREGROUND);
  this.DEFAULT_FOREGROUND = this.BLACK;
  this.DEFAULT_BACKGROUND = this.TRANSPARENT;
  this.DEFAULT_CANVAS = this.WHITE;
  this.DEFAULT_SPLITTER_COLOR = new ColorOwn_0(231, 231, 231, FOREGROUND);
  $generateColorMaps_0(this);
}

defineClass(324, 1038, {}, ThemeLight);
var Lcom_baselet_diagram_draw_helper_theme_ThemeLight_2_classLit = createForClass('com.baselet.diagram.draw.helper.theme', 'ThemeLight', 324);
function getGridElementsRectangle(gridElements){
  var ge, ge$iterator, x_0, x2, y_0, y2;
  x_0 = $intern_0;
  y_0 = $intern_0;
  x2 = $intern_12;
  y2 = $intern_12;
  for (ge$iterator = gridElements.iterator(); ge$iterator.hasNext_0();) {
    ge = castTo(ge$iterator.next_1(), 27);
    x_0 = $wnd.Math.min(ge.getRectangle().x_0, x_0);
    y_0 = $wnd.Math.min(ge.getRectangle().y_0, y_0);
    x2 = $wnd.Math.max($getX2(ge.getRectangle()), x2);
    y2 = $wnd.Math.max($getY2(ge.getRectangle()), y2);
  }
  return new Rectangle_0(x_0, y_0, x2 - x_0, y2 - y_0);
}

var Lcom_baselet_element_interfaces_GridElement_2_classLit = createForInterface('com.baselet.element.interfaces', 'GridElement');
function $drawError(this$static, drawer, errorText){
  var errorLines, i, red, y_0;
  red = $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , RED));
  drawer.enableDrawing = true;
  !red?$setForegroundColor_1(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND))):$setForegroundColor_1(drawer.style_0, red);
  $setBackgroundColor(drawer, $transparency(red, ($clinit_ColorOwn$Transparency() , SELECTION_BACKGROUND).alpha_0));
  $assertDoubleRange(0.2);
  drawer.style_0.lineWidth_0 = 0.2;
  $drawRectangle_1(drawer, 0, 0, (new Dimension($zoom(this$static, this$static.getRectangle().width_0), $zoom(this$static, this$static.getRectangle().height_0))).width_0, (new Dimension($zoom(this$static, this$static.getRectangle().width_0), $zoom(this$static, this$static.getRectangle().height_0))).height_0);
  this$static.resetAndDrawMetaDrawerContent(this$static.metaDrawer);
  errorLines = $split(errorText, '\n', 0);
  y_0 = (new Dimension($zoom(this$static, this$static.getRectangle().width_0), $zoom(this$static, this$static.getRectangle().height_0))).height_0 * 0.5 - errorLines.length * ($textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3) / 2 + $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0;
  for (i = 0; i < errorLines.length; ++i , y_0 += $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3) {
    $print_0(drawer, errorLines[i], 3, y_0, ($clinit_AlignHorizontal() , LEFT));
  }
}

function $generateStickingBorder(this$static, rect){
  return this$static.state.stickingPolygonGenerator.generateStickingBorder_0(rect);
}

function $getRealSize(this$static){
  return new Dimension($zoom(this$static, this$static.getRectangle().width_0), $zoom(this$static, this$static.getRectangle().height_0));
}

function $handleAutoresize(this$static, necessaryElementDimension, alignHorizontal){
  var diffh, diffhInt, diffw, diffwInt, directions, realSize;
  realSize = new Dimension($zoom(this$static, this$static.getRectangle().width_0), $zoom(this$static, this$static.getRectangle().height_0));
  diffw = necessaryElementDimension.width_0 - realSize.width_0;
  diffh = necessaryElementDimension.height_0 - realSize.height_0;
  diffwInt = realignTo(diffw / 10 * this$static.getGridSize(), true, this$static.getGridSize());
  diffhInt = realignTo(diffh / 10 * this$static.getGridSize(), true, this$static.getGridSize());
  directions = null;
  if (alignHorizontal == ($clinit_AlignHorizontal() , LEFT)) {
    directions = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_Direction_2_classLit, 1), $intern_5, 131, 0, [($clinit_Direction() , RIGHT_0), DOWN]));
  }
   else if (alignHorizontal == RIGHT) {
    diffwInt = -diffwInt;
    directions = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_Direction_2_classLit, 1), $intern_5, 131, 0, [($clinit_Direction() , LEFT_0), DOWN]));
  }
   else if (alignHorizontal == CENTER) {
    diffwInt = realignTo(diffwInt / 2, true, this$static.getGridSize()) * 2;
    directions = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_Direction_2_classLit, 1), $intern_5, 131, 0, [($clinit_Direction() , RIGHT_0), LEFT_0, DOWN]));
  }
  this$static.drag(directions, diffwInt, diffhInt, new Point(0, 0), false, true, $getStickableMap(this$static.handler), false);
}

function $init(this$static, bounds, panelAttributes, additionalAttributes, component, handler){
  this$static.component = component;
  this$static.drawer = component.drawer;
  this$static.metaDrawer = component.metadrawer;
  this$static.panelAttributes = new Arrays$ArrayList($split(panelAttributes, '\n', -1));
  this$static.setRectangle(bounds);
  this$static.handler = handler;
  this$static.state = new PropertiesParserState(this$static.createSettings(), this$static.drawer);
  this$static.setAdditionalAttributes(additionalAttributes);
}

function $setLocation_0(this$static, x_0, y_0){
  var rect;
  rect = this$static.getRectangle();
  rect.x_0 = x_0;
  rect.y_0 = y_0;
  $setBoundsRect(this$static.component, rect);
}

function $setPanelAttributes(this$static, panelAttributes){
  this$static.panelAttributes = new Arrays$ArrayList($split(panelAttributes, '\n', -1));
  $updateModelFromText(this$static);
}

function $setProperty(this$static, key, newValue){
  var keyWithSep, line, line$iterator, sb;
  keyWithSep = key + '=';
  sb = new StringBuilder_1('');
  for (line$iterator = new AbstractList$IteratorImpl(this$static.panelAttributes); line$iterator.i < line$iterator.this$01_0.size_1();) {
    line = (checkCriticalElement(line$iterator.i < line$iterator.this$01_0.size_1()) , castToString(line$iterator.this$01_0.get_0(line$iterator.last = line$iterator.i++)));
    $equals_6(line.substr(0, keyWithSep.length), keyWithSep) || $append_5((sb.string += '' + line , sb), '\n');
  }
  sb.string.length > 0 && $setLength(sb, sb.string.length - 1);
  !!newValue && $append_5($append_5((sb.string += '\n' , sb), keyWithSep), '' + newValue.value_0);
  $setPanelAttributes(this$static, sb.string);
}

function $updateModelFromText(this$static){
  var e, localizedMessage;
  this$static.autoresizePossiblyInProgress = true;
  $clearCache(this$static.drawer);
  $resetStyle(this$static.drawer);
  try {
    parsePropertiesAndHandleFacets(this$static, this$static.state);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      e = $e0;
      $info_1(this$static.log_0, e);
      $resetStyle(this$static.drawer);
      localizedMessage = e.getMessage();
      localizedMessage == null && (localizedMessage = $toString_0(e, e.getMessage()));
      this$static.drawError(this$static.drawer, localizedMessage);
    }
     else 
      throw toJs($e0);
  }
  this$static.autoresizePossiblyInProgress = false;
  this$static.component.redrawNecessary = true;
}

function $zoom(this$static, val){
  return val * 10 / this$static.getGridSize() | 0;
}

function NewGridElement(){
  this.log_0 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_NewGridElement_2_classLit) , Lcom_baselet_element_NewGridElement_2_classLit.typeName));
  this.undoStack = new UndoHistory;
}

defineClass(68, 1, $intern_13);
_.drag = function drag(resizeDirection, diffX, diffY, mousePosBeforeDrag, isShiftKeyDown, firstDrag, stickables, undoable){
  var lastArg, mouseDown, mouseLeft, mouseToRight, mouseUp, newHeight, newWidth, oldRect, rect, stickingPolygonBeforeLocationChange;
  oldRect = this.getRectangle();
  stickingPolygonBeforeLocationChange = $generateStickingBorder(this, this.getRealRectangle());
  this.getAdditionalAttributes();
  if (resizeDirection.isEmpty()) {
    $setLocation_0(this, this.getRectangle().x_0 + diffX, this.getRectangle().y_0 + diffY);
  }
   else {
    rect = this.getRectangle();
    if (isShiftKeyDown && (resizeDirection.contains_0(($clinit_Direction() , UP)) && resizeDirection.contains_0(RIGHT_0) || resizeDirection.contains_0(UP) && resizeDirection.contains_0(LEFT_0) || resizeDirection.contains_0(DOWN) && resizeDirection.contains_0(LEFT_0) || resizeDirection.contains_0(DOWN) && resizeDirection.contains_0(RIGHT_0))) {
      mouseToRight = diffX > 0 && diffX > diffY;
      mouseDown = diffY > 0 && diffY > diffX;
      mouseLeft = diffX < 0 && diffX < diffY;
      mouseUp = diffY < 0 && diffY < diffX;
      (mouseToRight || mouseLeft) && (diffY = diffX);
      (mouseDown || mouseUp) && (diffX = diffY);
    }
    if (resizeDirection.contains_0(($clinit_Direction() , LEFT_0)) && resizeDirection.contains_0(RIGHT_0)) {
      $setX_0(rect, rect.x_0 - (diffX / 2 | 0));
      $setWidth(rect, $wnd.Math.max(rect.width_0 + diffX, 20));
    }
     else if (resizeDirection.contains_0(LEFT_0)) {
      newWidth = rect.width_0 - diffX;
      if (newWidth >= 20) {
        $setX_0(rect, rect.x_0 + diffX);
        rect.width_0 = newWidth;
      }
    }
     else 
      resizeDirection.contains_0(RIGHT_0) && $setWidth(rect, $wnd.Math.max(rect.width_0 + diffX, 20));
    if (resizeDirection.contains_0(UP)) {
      newHeight = rect.height_0 - diffY;
      if (newHeight >= 20) {
        $setY_0(rect, rect.y_0 + diffY);
        rect.height_0 = newHeight;
      }
    }
    resizeDirection.contains_0(DOWN) && $setHeight(rect, $wnd.Math.max(rect.height_0 + diffY, 20));
    this.setRectangle(rect);
    this.autoresizePossiblyInProgress || $updateModelFromText(this);
  }
  moveStickPointsBasedOnPolygonChanges(stickingPolygonBeforeLocationChange, $generateStickingBorder(this, this.getRealRectangle()), stickables, this.getGridSize());
  undoable && $add_0(this.undoStack, new UndoInformation(this.getRectangle(), oldRect, (lastArg = this.getGridSize() , this.getAdditionalAttributes() , lastArg)));
}
;
_.drawError = function drawError(drawer, errorText){
  $drawError(this, drawer, errorText);
}
;
_.generateStickingBorder = function generateStickingBorder(){
  return $generateStickingBorder(this, this.getRealRectangle());
}
;
_.getAdditionalAttributes = function getAdditionalAttributes(){
  return '';
}
;
_.getGridSize = function getGridSize(){
  return 10;
}
;
_.getGroup = function getGroup(){
  return castTo($getFacetResponse(this.state, Lcom_baselet_element_facet_common_GroupFacet_2_classLit, null), 48);
}
;
_.getLayer = function getLayer(){
  return castTo($getFacetResponse(this.state, Lcom_baselet_element_facet_common_LayerFacet_2_classLit, ($clinit_LayerFacet() , DEFAULT_VALUE)), 48);
}
;
_.getPanelAttributes = function getPanelAttributes(){
  return listToString('\n', this.panelAttributes);
}
;
_.getRealRectangle = function getRealRectangle(){
  return new Rectangle_0(this.getRectangle().x_0 * 10 / this.getGridSize() | 0, this.getRectangle().y_0 * 10 / this.getGridSize() | 0, this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0);
}
;
_.getRectangle = function getRectangle(){
  return $copy_0(this.component.rect_0);
}
;
_.resetAndDrawMetaDrawerContent = function resetAndDrawMetaDrawerContent(drawer){
  var currentTheme, rect, poly, lines;
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  drawer.drawablesBackground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  drawer.drawablesForeground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  $setForegroundColor(drawer, $getColor(currentTheme, ($clinit_Theme$ColorStyle() , SELECTION_FG)));
  $setBackgroundColor(drawer, $getColor(currentTheme, SELECTION_BG));
  $drawRectangle_1(drawer, 0, 0, (new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).width_0, (new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).height_0);
  if (($clinit_SharedConfig() , $clinit_SharedConfig() , instance_0).dev_mode) {
    $setForegroundColor(drawer, $getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , BLACK)));
    $assertDoubleRange(10.5);
    drawer.style_0.fontSize = 10.5;
    $print_1(drawer, $toString(this.getId()), new PointDouble((new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).width_0 - 3, (new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).height_0 - 2), ($clinit_AlignHorizontal() , RIGHT));
  }
  $setForegroundColor(drawer, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), DEFAULT_FOREGROUND));
  $setBackgroundColorAndKeepTransparency(drawer, 'bg');
  (null , instance_0).show_stickingpolygon && (rect = new Rectangle_0(0, 0, (new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).width_0, (new Dimension(this.getRectangle().width_0 * 10 / this.getGridSize() | 0, this.getRectangle().height_0 * 10 / this.getGridSize() | 0)).height_0) , poly = this.state.stickingPolygonGenerator.generateStickingBorder_0(rect) , $setLineType(drawer, ($clinit_LineType() , DASHED)) , $setForegroundColor(drawer, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), STICKING_POLYGON)) , $setBackgroundColor(drawer, $getColor_0((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT))) , lines = poly.stick , $drawLines(drawer, toPoints(castTo($toArray_3(lines, initUnidimensionalArray(Lcom_baselet_control_basics_geom_Line_2_classLit, $intern_14, 62, lines.arrayList.array.length, 0, 1)), 303))) , $setLineType(drawer, SOLID) , $setForegroundColor(drawer, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), DEFAULT_FOREGROUND)) , $setBackgroundColorAndKeepTransparency(drawer, 'bg') , undefined);
}
;
_.setAdditionalAttributes = function setAdditionalAttributes(additionalAttributes){
}
;
_.setLocation = function setLocation(x_0, y_0){
  $setLocation_0(this, x_0, y_0);
}
;
_.setProperty_0 = function setProperty(key, newValue){
  $setProperty(this, key, newValue);
}
;
_.setRectangle = function setRectangle(bounds){
  $setBoundsRect(this.component, bounds);
}
;
_.autoresizePossiblyInProgress = false;
var Lcom_baselet_element_NewGridElement_2_classLit = createForClass('com.baselet.element', 'NewGridElement', 68);
function doPreparsing(element, state, propertiesText){
  var height, textblockHeight, width_0;
  $resetValues(state, new Dimension($zoom(element, element.getRectangle().width_0), $zoom(element, element.getRectangle().height_0)), state.totalTextBlockHeight, false);
  parseFacets(element, state, propertiesText, false);
  if (state.elementStyle == ($clinit_ElementStyle() , AUTORESIZE)) {
    width_0 = state.minimumWidth;
    height = state.textPrintPosition + state.buffer.top_0;
    $handleAutoresize(element, new DimensionDouble(width_0, height), state.alignment.horizontal);
  }
  textblockHeight = state.textPrintPosition + state.buffer.top_0 - state.buffer.top_0;
  $resetValues(state, new Dimension($zoom(element, element.getRectangle().width_0), $zoom(element, element.getRectangle().height_0)), textblockHeight, true);
}

function parseFacets(element, state, propertiesText, drawMetaDrawer){
  var propertiesAfterFirstRun;
  propertiesAfterFirstRun = parseFacets_0($getFacetsForFirstRun(state.settings), propertiesText, state);
  element.drawCommonContent(state);
  drawMetaDrawer && element.resetAndDrawMetaDrawerContent(element.metaDrawer);
  parseFacets_0($getFacetsForSecondRun(state.settings), propertiesAfterFirstRun, state);
}

function parseFacets_0(facets, properties, state){
  var f, f$iterator, f$iterator0, f$iterator1, facetUsageMap, iter, line, unusedProperties;
  facetUsageMap = new HashMap;
  for (f$iterator0 = new ArrayList$1(facets); f$iterator0.i < f$iterator0.this$01.array.length;) {
    f = castTo($next_3(f$iterator0), 19);
    $put(facetUsageMap, f, new ArrayList);
  }
  unusedProperties = new ArrayList_1(properties);
  for (iter = new ArrayList$1(unusedProperties); iter.i < iter.this$01.array.length;) {
    line = castToString($next_3(iter));
    for (f$iterator1 = new ArrayList$1(facets); f$iterator1.i < f$iterator1.this$01.array.length;) {
      f = castTo($next_3(f$iterator1), 19);
      if (f.checkStart(line, state)) {
        f.handleLine(line, state);
        castTo(getEntryValueOrNull($getEntry(facetUsageMap.hashCodeMap, f)), 41).add_0(line);
        $remove_14(iter);
        break;
      }
    }
  }
  for (f$iterator = new ArrayList$1(facets); f$iterator.i < f$iterator.this$01.array.length;) {
    f = castTo($next_3(f$iterator), 19);
    f.parsingFinished(state, castTo(getEntryValueOrNull($getEntry(facetUsageMap.hashCodeMap, f)), 41));
  }
  return unusedProperties;
}

function parsePropertiesAndHandleFacets(element, state){
  var propertiesText;
  propertiesText = element.panelAttributes;
  doPreparsing(element, state, propertiesText);
  parseFacets(element, state, propertiesText, true);
}

function createGroupElementMap(elements){
  var e, e$iterator, elementsWithGroup, returnmap;
  returnmap = new HashMap;
  for (e$iterator = new ArrayList$1(elements); e$iterator.i < e$iterator.this$01.array.length;) {
    e = castTo($next_3(e$iterator), 27);
    if (e.getGroup()) {
      elementsWithGroup = castTo($get_0(returnmap, e.getGroup()), 52);
      if (!elementsWithGroup) {
        elementsWithGroup = new ArrayList;
        $put(returnmap, e.getGroup(), elementsWithGroup);
      }
      elementsWithGroup.add_0(e);
    }
  }
  return returnmap;
}

function replaceGroupsWithNewGroups(elements, selector){
  var e, e$iterator, entry, entry$iterator, groupedElements, newGroup, unusedId, usedIds;
  usedIds = new HashSet_0(new AbstractMap$1(createGroupElementMap(selector.getAllElements())));
  groupedElements = createGroupElementMap(elements);
  for (entry$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(groupedElements)).this$01); entry$iterator.hasNext;) {
    entry = $next_1(entry$iterator);
    unusedId = ($size(usedIds.map_0) == 0?(newGroup = valueOf_9(1)):(newGroup = valueOf_9(($clinit_Collections() , castTo(max_1(usedIds, null), 48)).value_0 + 1)) , newGroup);
    $put(usedIds.map_0, unusedId, usedIds);
    for (e$iterator = castTo(entry.getValue_0(), 52).iterator(); e$iterator.hasNext_0();) {
      e = castTo(e$iterator.next_1(), 27);
      e.setProperty_0('group', unusedId);
    }
  }
}

function $add_0(this$static, undoInformation){
  while (this$static.history_0.array.length > this$static.currentIndex + 1) {
    $remove_12(this$static.history_0, this$static.history_0.array.length - 1);
  }
  $add_13(this$static.history_0, undoInformation);
  ++this$static.currentIndex;
}

function UndoHistory(){
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_UndoHistory_2_classLit) , Lcom_baselet_element_UndoHistory_2_classLit.typeName));
  this.history_0 = new ArrayList;
}

defineClass(856, 1, {}, UndoHistory);
_.currentIndex = -1;
var Lcom_baselet_element_UndoHistory_2_classLit = createForClass('com.baselet.element', 'UndoHistory', 856);
function UndoInformation(newRect, oldRect, gridSize){
  toMinZoom(new Rectangle_0(newRect.x_0 - oldRect.x_0, newRect.y_0 - oldRect.y_0, newRect.width_0 - oldRect.width_0, newRect.height_0 - oldRect.height_0), gridSize);
}

function toMinZoom(rectangle, gridSize){
  var hBefore, wBefore, xBefore, yBefore;
  xBefore = rectangle.x_0 / gridSize | 0;
  yBefore = rectangle.y_0 / gridSize | 0;
  wBefore = rectangle.width_0 / gridSize | 0;
  hBefore = rectangle.height_0 / gridSize | 0;
  return new Rectangle_0(xBefore, yBefore, wBefore, hBefore);
}

defineClass(290, 1, {}, UndoInformation);
var Lcom_baselet_element_UndoInformation_2_classLit = createForClass('com.baselet.element', 'UndoInformation', 290);
function drawActor(drawer, hCenter, yTop, dimension){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(drawer.style_0);
  $addDrawable(drawer, new DrawHandlerGwt$2(drawer, styleAtDrawingCall, hCenter, yTop + dimension / 2, dimension / 2));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(hCenter - dimension * 1.5, yTop + dimension * 1.5), new PointDouble(hCenter + dimension * 1.5, yTop + dimension * 1.5)]));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(hCenter, yTop + dimension / 2 * 2), new PointDouble(hCenter, yTop + (dimension * 2 + dimension / 2 * 2))]));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(hCenter, yTop + (dimension * 2 + dimension / 2 * 2)), new PointDouble(hCenter - dimension, yTop + (dimension * 2 + (dimension * 2 + dimension / 2 * 2)))]));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(hCenter, yTop + (dimension * 2 + dimension / 2 * 2)), new PointDouble(hCenter + dimension, yTop + (dimension * 2 + (dimension * 2 + dimension / 2 * 2)))]));
}

function drawPackage(drawer, upperLeftX, upperLeftY, titleHeight, titleWidth, fullHeight, fullWidth){
  var points, start_0;
  start_0 = new PointDouble(upperLeftX, upperLeftY);
  points = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble(upperLeftX + titleWidth, upperLeftY), new PointDouble(upperLeftX + titleWidth, upperLeftY + titleHeight), new PointDouble(upperLeftX + fullWidth, upperLeftY + titleHeight), new PointDouble(upperLeftX + fullWidth, upperLeftY + fullHeight), new PointDouble(upperLeftX, upperLeftY + fullHeight), start_0]));
  $drawLines_0(drawer, castTo($toArray_2(points, initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, points.array.length, 0, 1)), 15));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(upperLeftX, upperLeftY + titleHeight), new PointDouble(upperLeftX + titleWidth, upperLeftY + titleHeight)]));
  return points;
}

function createAssociatedGridElement(id_0){
  switch (id_0.ordinal) {
    case 18:
      return new PlotGrid_0;
    case 16:
      return new Relation_0;
    case 17:
      return new Text_1;
    case 3:
      return new Actor;
    case 0:
      return new Class;
    case 13:
      return new Deployment;
    case 12:
      return new Frame_0;
    case 14:
      return new Generic;
    case 2:
      return new Interface;
    case 8:
      return new Note;
    case 5:
      return new ActivityObject;
    case 11:
      return new Package;
    case 7:
      return new SpecialState;
    case 4:
      return new State;
    case 9:
      return new SyncBarHorizontal;
    case 10:
      return new SyncBarVertical;
    case 6:
      return new Timer;
    case 1:
      return new UseCase;
    case 15:
      return new Hierarchy;
    case 19:
      return new SequenceAllInOne;
    default:throw toJs(new RuntimeException_0('Unknown class id: ' + id_0));
  }
}

function Text_1(){
  NewGridElement.call(this);
}

defineClass(729, 68, $intern_13, Text_1);
_.createSettings = function createSettings(){
  return new SettingsText;
}
;
_.drawCommonContent = function drawCommonContent(state){
}
;
_.getId = function getId(){
  return $clinit_ElementId() , Text_0;
}
;
var Lcom_baselet_element_elementnew_Text_2_classLit = createForClass('com.baselet.element.elementnew', 'Text', 729);
function $clinit_PlotGrid(){
  $clinit_PlotGrid = emptyMethod;
  log_4 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_elementnew_plot_PlotGrid_2_classLit) , Lcom_baselet_element_elementnew_plot_PlotGrid_2_classLit.typeName));
  PSEUDO_PLOT_FACET = new PlotGrid$1;
}

function $createPlot(this$static, drawer, plotState, xPos, yPos, info){
  var plotDrawConfig, type_0;
  type_0 = $getValueValidated(plotState, ($clinit_PlotConstants$PlotType() , 'type'), $getValue(Bar), ($clinit_PlotConstants() , toStringList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$PlotType_2_classLit, 1), $intern_5, 165, 0, [Bar, Line_1, Pie, Scatter])))));
  $debug_1(log_4, 'PlotGrid insert : ' + type_0 + ' (' + xPos + ';' + yPos + ') ' + info);
  plotDrawConfig = new PlotGridDrawConfig(new Dimension($zoom(this$static, $copy_0(this$static.component.rect_0).width_0), $zoom(this$static, $copy_0(this$static.component.rect_0).height_0)), (new Dimension($copy_0(this$static.component.rect_0).width_0, $copy_0(this$static.component.rect_0).height_0) , this$static.minValue), this$static.maxValue);
  return $equals_6($getValue(Pie), type_0)?new PiePlot(drawer, plotDrawConfig, plotState, xPos, yPos):$equals_6($getValue(Line_1), type_0)?new LinePlot(drawer, plotDrawConfig, plotState, xPos, yPos):$equals_6($getValue(Scatter), type_0)?new ScatterPlot(drawer, plotDrawConfig, plotState, xPos, yPos):new BarPlot(drawer, plotDrawConfig, plotState, xPos, yPos);
}

function $createPlots(this$static, drawer, plotState, xPos, yPos, info){
  var plotList, subPlotState, subPlotState$iterator;
  plotList = new ArrayList;
  $add_13(plotList, $createPlot(this$static, drawer, plotState, xPos.value_0, yPos.value_0, info));
  for (subPlotState$iterator = new ArrayList$1(plotState.subPlots); subPlotState$iterator.i < subPlotState$iterator.this$01.array.length;) {
    subPlotState = castTo($next_3(subPlotState$iterator), 123);
    $add_13(plotList, $createPlot(this$static, drawer, subPlotState, xPos.value_0, yPos.value_0, info));
  }
  return plotList;
}

function $drawPlots(this$static){
  var col, oneCell, onePlot, onePlot$iterator, row;
  for (row = 0; row < this$static.matrix.matrix.array.length; row++) {
    for (col = 0; col < $row(this$static.matrix, row).size_1(); col++) {
      oneCell = castTo($cell(this$static.matrix, row, col), 41);
      for (onePlot$iterator = oneCell.iterator(); onePlot$iterator.hasNext_0();) {
        onePlot = castTo(onePlot$iterator.next_1(), 113);
        if (onePlot) {
          col != onePlot.xPosition.value_0 && $error_1(log_4, 'Plot contains wrong coordinates: ' + col + ' != ' + onePlot.xPosition);
          row != onePlot.yPosition.value_0 && $error_1(log_4, 'Plot contains wrong coordinates: ' + row + ' != ' + onePlot.yPosition);
          onePlot.plot_0($cols(this$static.matrix), this$static.matrix.matrix.array.length);
        }
      }
    }
  }
}

function $fillWithPlots(this$static, parserState){
  var drawer, plotState, plotState$iterator, plotStateList, xCoordinateList, xPos, yPos;
  plotStateList = parserState.plotStateList;
  drawer = parserState.drawer;
  $setOverallMinMaxValue(this$static, plotStateList);
  for (plotState$iterator = new ArrayList$1(plotStateList); plotState$iterator.i < plotState$iterator.this$01.array.length;) {
    plotState = castTo($next_3(plotState$iterator), 123);
    xPos = $getValueAsInt(plotState, 'pos.x');
    yPos = $getValueAsInt(plotState, 'pos.y');
    !!xPos && (xPos = valueOf_9(xPos.value_0 - 1));
    !!yPos && (yPos = valueOf_9(yPos.value_0 - 1));
    if (!!xPos && !!yPos) {
      $setMatrixHeightMinimum(this$static, yPos);
      xCoordinateList = $row(this$static.matrix, yPos.value_0);
      $setMinimumListSize(xPos, xCoordinateList);
      xCoordinateList.set_0(xPos.value_0, $createPlots(this$static, drawer, plotState, xPos, yPos, 'x and y are specified'));
    }
     else if (xPos) {
      $putPlotInFirstFreeVerticalSpaceOrAddPlot(this$static, drawer, xPos, plotState);
    }
     else if (yPos) {
      $setMatrixHeightMinimum(this$static, yPos);
      xCoordinateList = $row(this$static.matrix, yPos.value_0);
      $putPlotInFirstFreeHorizontalSpaceOrAddPlot(this$static, drawer, xCoordinateList, yPos, plotState);
    }
     else {
      $putPlotInFirstFreeMatrixSpace(this$static, drawer, plotState);
    }
  }
  this$static.gridWidth = valueOf_9($cols(this$static.matrix));
  $debug_1(log_4, '\n' + $toString_1(this$static) + '\n');
}

function $putPlotInFirstFreeHorizontalSpaceOrAddPlot(this$static, drawer, xCoordinateList, yFix, plotState){
  var xSeq;
  for (xSeq = 0; true; xSeq++) {
    if (xSeq == xCoordinateList.size_1()) {
      xCoordinateList.add_0($createPlots(this$static, drawer, plotState, valueOf_9(xSeq), yFix, 'only y specified -> added new x-entry'));
      return;
    }
    if (xCoordinateList.get_0(xSeq) == null) {
      xCoordinateList.set_0(xSeq, $createPlots(this$static, drawer, plotState, valueOf_9(xSeq), yFix, 'only y specified -> replaced x-entry'));
      return;
    }
  }
}

function $putPlotInFirstFreeMatrixSpace(this$static, drawer, plotState){
  var newLine, oneLine, oneValue, xSeq, ySeq;
  for (ySeq = 0; ySeq < this$static.matrix.matrix.array.length; ySeq++) {
    oneLine = $row(this$static.matrix, ySeq);
    for (xSeq = 0; xSeq < oneLine.size_1(); xSeq++) {
      oneValue = castTo(oneLine.get_0(xSeq), 41);
      if (!oneValue) {
        oneLine.set_0(xSeq, $createPlots(this$static, drawer, plotState, valueOf_9(xSeq), valueOf_9(ySeq), 'no coordinate specified -> free space found'));
        return;
      }
    }
    if (oneLine.size_1() < this$static.gridWidth.value_0) {
      oneLine.add_0($createPlots(this$static, drawer, plotState, valueOf_9(oneLine.size_1()), valueOf_9(ySeq), 'no coordinate specified -> expanded x-list'));
      return;
    }
  }
  newLine = new ArrayList;
  $add_13(newLine, $createPlots(this$static, drawer, plotState, valueOf_9(0), valueOf_9(this$static.matrix.matrix.array.length), 'no coordinate specified -> every matrix space occupied, expanded y-list'));
  $addLine(this$static.matrix, newLine);
}

function $putPlotInFirstFreeVerticalSpaceOrAddPlot(this$static, drawer, xFix, plotState){
  var newColumn, plotFilledInFreeSpace, xCoordinateList, ySeq;
  plotFilledInFreeSpace = false;
  for (ySeq = 0; ySeq < this$static.matrix.matrix.array.length; ySeq++) {
    xCoordinateList = $row(this$static.matrix, ySeq);
    xFix.value_0 >= xCoordinateList.size_1() && $setMinimumListSize(xFix, xCoordinateList);
    if (xCoordinateList.get_0(xFix.value_0) == null) {
      xCoordinateList.set_0(xFix.value_0, $createPlots(this$static, drawer, plotState, xFix, valueOf_9(ySeq), 'only x is specified -> space replaced'));
      plotFilledInFreeSpace = true;
      break;
    }
  }
  if (!plotFilledInFreeSpace) {
    newColumn = new ArrayList;
    $setMinimumListSize(xFix, newColumn);
    $set_5(newColumn, xFix.value_0, $createPlots(this$static, drawer, plotState, xFix, valueOf_9(this$static.matrix.matrix.array.length), 'only x is specified -> expanded y-list'));
    $addLine(this$static.matrix, newColumn);
  }
}

function $setMatrixHeightMinimum(this$static, minHeight){
  while (minHeight.value_0 > this$static.matrix.matrix.array.length - 1) {
    $addLine(this$static.matrix, new ArrayList);
  }
}

function $setMinimumListSize(minWidth, lineToSet){
  while (minWidth.value_0 > lineToSet.size_1() - 1) {
    lineToSet.add_0(null);
  }
}

function $setOverallMinMaxValue(this$static, plotStateList){
  var d, d$index, d$max, dArray, dArray$index, dArray$max, data_0, state, state$iterator;
  this$static.minValue = 1.7976931348623157E308;
  this$static.maxValue = 4.9E-324;
  for (state$iterator = new ArrayList$1(plotStateList); state$iterator.i < state$iterator.this$01.array.length;) {
    state = castTo($next_3(state$iterator), 123);
    data_0 = $data(state.dataset);
    for (dArray$index = 0 , dArray$max = data_0.length; dArray$index < dArray$max; ++dArray$index) {
      dArray = data_0[dArray$index];
      for (d$index = 0 , d$max = dArray.length; d$index < d$max; ++d$index) {
        d = dArray[d$index];
        (checkCriticalNotNull(d) , d) > $doubleValue_0(this$static.maxValue) && (this$static.maxValue = d);
        (checkCriticalNotNull(d) , d) < $doubleValue_0(this$static.minValue) && (this$static.minValue = d);
      }
    }
  }
}

function $toString_1(this$static){
  var i, oneCell, oneCell$iterator, onePlot, onePlot$iterator, row, sb;
  sb = new StringBuilder_1('------------------------------\n');
  for (i = 0; i < this$static.matrix.matrix.array.length; i++) {
    row = $row(this$static.matrix, i);
    for (oneCell$iterator = row.iterator(); oneCell$iterator.hasNext_0();) {
      oneCell = castTo(oneCell$iterator.next_1(), 41);
      for (onePlot$iterator = oneCell.iterator(); onePlot$iterator.hasNext_0();) {
        onePlot = castTo(onePlot$iterator.next_1(), 113);
        !onePlot?(sb.string += 'null\t' , sb):$append_5($append_4(sb, valueOf_9(onePlot.plotState.plotLineNr)), '\t');
      }
    }
    sb.string += '\n';
  }
  return (sb.string += '------------------------------' , sb).string;
}

function PlotGrid_0(){
  $clinit_PlotGrid();
  NewGridElement.call(this);
}

defineClass(725, 68, $intern_13, PlotGrid_0);
_.createSettings = function createSettings_0(){
  return new PlotGrid$2;
}
;
_.drawCommonContent = function drawCommonContent_0(state){
  var currentTheme, drawer, e, parserState, x_0, keyValue;
  drawer = state.drawer;
  try {
    this.matrix = new Matrix;
    parserState = $parse(new Parser, listToString('\n', this.panelAttributes));
    parserState.drawer = drawer;
    $debug_1(log_4, $toString_2(parserState));
    this.gridWidth = valueOf_9(__parseAndValidateInt((keyValue = castTo($getStringValue(parserState.plotGridValues, 'grid.width'), 81) , !!keyValue && (keyValue.used = true) , !keyValue || $equals_6(keyValue.value_0, 'auto')?'3':keyValue.value_0), 10));
    $fillWithPlots(this, parserState);
    $drawPlots(this);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 60)) {
      e = $e0;
      currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
      $setForegroundColor(drawer, $getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , RED)));
      $setBackgroundColor(drawer, $getColor_0(currentTheme, WHITE));
      $drawRectangle_1(drawer, 0, 0, $copy_0(this.component.rect_0).width_0 - 1, $copy_0(this.component.rect_0).height_0 - 1);
      x_0 = $copy_0(this.component.rect_0).width_0 / 2;
      $print_0(drawer, e.detailMessage, x_0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0 / 2, ($clinit_AlignHorizontal() , CENTER));
    }
     else 
      throw toJs($e0);
  }
}
;
_.getId = function getId_0(){
  return $clinit_ElementId() , PlotGrid;
}
;
_.toString_0 = function toString_15(){
  return $toString_1(this);
}
;
var PSEUDO_PLOT_FACET, log_4;
var Lcom_baselet_element_elementnew_plot_PlotGrid_2_classLit = createForClass('com.baselet.element.elementnew.plot', 'PlotGrid', 725);
function Facet(){
  this.log_1 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_facet_Facet_2_classLit) , Lcom_baselet_element_facet_Facet_2_classLit.typeName));
}

defineClass(19, 1, $intern_15);
_.getPriority = function getPriority(){
  return $clinit_Priority() , DEFAULT;
}
;
_.handleOnFirstRun = function handleOnFirstRun(){
  return false;
}
;
_.parsingFinished = function parsingFinished(state, handledLines){
}
;
var Lcom_baselet_element_facet_Facet_2_classLit = createForClass('com.baselet.element.facet', 'Facet', 19);
function PlotGrid$1(){
  Facet.call(this);
}

defineClass(726, 19, $intern_15, PlotGrid$1);
_.checkStart = function checkStart(line, propConfig){
  return true;
}
;
_.handleLine = function handleLine(line, propConfig){
}
;
var Lcom_baselet_element_elementnew_plot_PlotGrid$1_2_classLit = createForClass('com.baselet.element.elementnew.plot', 'PlotGrid/1', 726);
function $clinit_Settings(){
  $clinit_Settings = emptyMethod;
  BASE = listOf_0(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_BackgroundColorFacet() , INSTANCE), ($clinit_TransparencyFacet() , INSTANCE_13), ($clinit_ForegroundColorFacet() , INSTANCE_3), ($clinit_LayerFacet() , INSTANCE_6), ($clinit_LineWidthFacet() , INSTANCE_8), ($clinit_GroupFacet() , INSTANCE_4), ($clinit_CommentFacet() , INSTANCE_0)]));
  BASE_WITH_LINETYPE = listOf(BASE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_LineTypeFacet() , INSTANCE_7), ($clinit_CustomDrawingFacet() , INSTANCE_15)]));
  BASE_EXTENDED = listOf(BASE_WITH_LINETYPE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_TextPrintFacet() , INSTANCE_12), ($clinit_FontSizeFacet() , INSTANCE_2)]));
  RELATION = listOf(BASE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [INSTANCE_2, ($clinit_RelationLineTypeFacet() , INSTANCE_25), ($clinit_LineDescriptionFacet() , INSTANCE_24), ($clinit_LineDescriptionPositionFacet() , INSTANCE_MESSAGE_START), INSTANCE_MESSAGE_END, INSTANCE_ROLE_START, INSTANCE_ROLE_END]));
  MANUALRESIZE = listOf(BASE_EXTENDED, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_VerticalAlignFacet() , INSTANCE_14), ($clinit_HorizontalAlignFacet() , INSTANCE_5), ($clinit_ElementStyleFacet() , INSTANCE_1)]));
  NOTEXT = BASE_WITH_LINETYPE;
  AUTORESIZE_0 = listOf(BASE_EXTENDED, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineFacet() , INSTANCE_9)]));
  HIERARCHY = listOf(BASE_WITH_LINETYPE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [INSTANCE_2, INSTANCE_AUTORESIZEONLY, ($clinit_HierarchyFacet() , INSTANCE_17)]));
}

function $addAll(this$static, facets){
  var f, f$iterator;
  for (f$iterator = new ArrayList$1(facets); f$iterator.i < f$iterator.this$01.array.length;) {
    f = castTo($next_3(f$iterator), 19);
    f.handleOnFirstRun()?$add_13(this$static.secondRunFacets, f):$add_13(this$static.firstRunFacets, f);
  }
}

function $getFacetsForFirstRun(this$static){
  $initFacets(this$static);
  return this$static.secondRunFacets;
}

function $getFacetsForSecondRun(this$static){
  $initFacets(this$static);
  return this$static.firstRunFacets;
}

function $initFacets(this$static){
  if (!this$static.firstRunFacets) {
    this$static.firstRunFacets = new ArrayList;
    this$static.secondRunFacets = new ArrayList;
    $addAll(this$static, this$static.createFacets());
    $sortListByPriority(this$static.firstRunFacets);
    $sortListByPriority(this$static.secondRunFacets);
  }
}

function $sortListByPriority(facets){
  $clinit_Collections();
  $sort(facets, new Settings$1);
}

function listOf(list, f){
  var facetList;
  facetList = new ArrayList_1(list);
  $addAll_1(facetList, new Arrays$ArrayList(f));
  return facetList;
}

function listOf_0(f){
  var facetList;
  facetList = new ArrayList;
  $addAll_1(facetList, new Arrays$ArrayList(f));
  return facetList;
}

defineClass($intern_16, 1, {});
_.getHAlign = function getHAlign(){
  return $clinit_AlignHorizontal() , CENTER;
}
;
_.getVAlign = function getVAlign(){
  return $clinit_AlignVertical() , TOP;
}
;
_.getXValues = function getXValues(y_0, height, width_0){
  return new XValues(0, width_0);
}
;
var AUTORESIZE_0, BASE, BASE_EXTENDED, BASE_WITH_LINETYPE, HIERARCHY, MANUALRESIZE, NOTEXT, RELATION;
var Lcom_baselet_element_facet_Settings_2_classLit = createForClass('com.baselet.element.facet', 'Settings', $intern_16);
defineClass(1064, $intern_16, {});
_.createFacets = function createFacets(){
  return MANUALRESIZE;
}
;
_.getElementStyle = function getElementStyle(){
  return $clinit_ElementStyle() , SIMPLE;
}
;
_.getVAlign = function getVAlign_0(){
  return $clinit_AlignVertical() , CENTER_0;
}
;
var Lcom_baselet_element_settings_SettingsManualresizeCenter_2_classLit = createForClass('com.baselet.element.settings', 'SettingsManualresizeCenter', 1064);
function PlotGrid$2(){
  $clinit_Settings();
}

defineClass(727, 1064, {}, PlotGrid$2);
_.createFacets = function createFacets_0(){
  return listOf_0(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_PlotGrid() , PSEUDO_PLOT_FACET)]));
}
;
var Lcom_baselet_element_elementnew_plot_PlotGrid$2_2_classLit = createForClass('com.baselet.element.elementnew.plot', 'PlotGrid/2', 727);
function $drawXAxis(this$static){
  return this$static.xIsDescription && this$static.descAxisLine || !this$static.xIsDescription && this$static.valueAxisLine;
}

function $drawYAxis(this$static){
  return this$static.xIsDescription && this$static.valueAxisLine || !this$static.xIsDescription && this$static.descAxisLine;
}

function $enableDescAxis(this$static, showList){
  this$static.drawAxis = true;
  this$static.descAxisLine = showList.contains_0(($clinit_PlotConstants$AxisShow() , Axis).value_0);
  this$static.descAxisGray = showList.contains_0(Line_0.value_0);
  this$static.descAxisMarkers = showList.contains_0(Marker.value_0);
  this$static.descAxisText = showList.contains_0(Text_2.value_0);
}

function $enableValueAxis(this$static, showList, valueList){
  var e, v, v$iterator;
  this$static.drawAxis = true;
  this$static.valueAxisLine = showList.contains_0(($clinit_PlotConstants$AxisShow() , Axis).value_0);
  this$static.valueAxisGray = showList.contains_0(Line_0.value_0);
  this$static.valueAxisMarkers = showList.contains_0(Marker.value_0);
  this$static.valueAxisText = showList.contains_0(Text_2.value_0);
  this$static.showRelevantValues = valueList.contains_0(($clinit_PlotConstants$AxisList() , Relevant).value_0);
  this$static.valueAxisList = new TreeSet;
  for (v$iterator = valueList.iterator(); v$iterator.hasNext_0();) {
    v = castToString(v$iterator.next_1());
    if ($equals_6('', v) || $equals_6(Relevant.value_0, v)) {
      continue;
    }
    try {
      $add_18(this$static.valueAxisList, __parseAndValidateDouble(v));
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 14)) {
        e = $e0;
        throw toJs(new RuntimeException_1('Value must be a double: ' + v, e));
      }
       else 
        throw toJs($e0);
    }
  }
}

function $setDescAxisPos(this$static, pos){
  this$static.descAxisPos = pos;
  this$static.xIsDescription?(this$static.xAxisPos = pos):(this$static.yAxisPos = pos);
}

function $setDescSegment(this$static, descSegment){
  this$static.descSegment = descSegment;
}

function $setValueAxisList(this$static, valuesSorted){
  this$static.showRelevantValues && $addAll_0(this$static.valueAxisList, valuesSorted);
  return this$static.valueAxisList;
}

function $setValueAxisPos(this$static, pos){
  this$static.valueAxisPos = pos;
  this$static.xIsDescription?(this$static.yAxisPos = pos):(this$static.xAxisPos = pos);
}

function $setValueSegment(this$static, valueSegment){
  this$static.valueSegment = valueSegment;
}

function $setxIsDescription(this$static, xIsDescription){
  this$static.xIsDescription = xIsDescription;
}

function AxisConfig(){
  this.drawAxis = false;
}

defineClass(983, 1, {}, AxisConfig);
_.descAxisGray = false;
_.descAxisLine = false;
_.descAxisMarkers = false;
_.descAxisPos = 0;
_.descAxisText = false;
_.descSegment = 0;
_.drawAxis = false;
_.showRelevantValues = false;
_.valueAxisGray = false;
_.valueAxisLine = false;
_.valueAxisMarkers = false;
_.valueAxisPos = 0;
_.valueAxisText = false;
_.xAxisPos = 0;
_.xIsDescription = false;
_.yAxisPos = 0;
var Lcom_baselet_element_elementnew_plot_drawer_AxisConfig_2_classLit = createForClass('com.baselet.element.elementnew.plot.drawer', 'AxisConfig', 983);
function $getInnerDownPos(this$static){
  return this$static.gridElementSize.height_0 - this$static.innerBorder.height_0;
}

function $getInnerHorizontalDrawspace(this$static){
  return this$static.gridElementSize.width_0 - this$static.innerBorder.width_0 - this$static.innerBorder.x_0;
}

function $getInnerRightPos(this$static){
  return this$static.gridElementSize.width_0 - this$static.innerBorder.width_0;
}

function $getInnerVerticalDrawspace(this$static){
  return this$static.gridElementSize.height_0 - this$static.innerBorder.height_0 - this$static.innerBorder.y_0;
}

function $setBorder(this$static, x_0, y_0, width_0, height, borderspace){
  this$static.borderspace = borderspace;
  $setBounds(this$static.outerBorder, x_0, y_0, width_0, height);
  $setBounds(this$static.innerBorder, this$static.outerBorder.x_0 + this$static.borderspace, this$static.outerBorder.y_0 + this$static.borderspace, this$static.outerBorder.width_0 + this$static.borderspace, this$static.outerBorder.height_0 + this$static.borderspace);
}

function $setBorderX(this$static, x_0){
  $setBounds(this$static.outerBorder, x_0, this$static.outerBorder.y_0, this$static.outerBorder.width_0, this$static.outerBorder.height_0);
  $setBounds(this$static.innerBorder, this$static.outerBorder.x_0 + this$static.borderspace, this$static.outerBorder.y_0 + this$static.borderspace, this$static.outerBorder.width_0 + this$static.borderspace, this$static.outerBorder.height_0 + this$static.borderspace);
}

function Canvas_0(gridElementSize){
  this.gridElementSize = gridElementSize;
  this.outerBorder = new Rectangle;
  this.innerBorder = new Rectangle;
  $setBorder(this, 0, 0, 0, 0, 0);
}

defineClass(984, 1, {}, Canvas_0);
_.borderspace = 0;
var Lcom_baselet_element_elementnew_plot_drawer_Canvas_2_classLit = createForClass('com.baselet.element.elementnew.plot.drawer', 'Canvas', 984);
function $calculateAdditionalSpaceForYAxisTextWidth(this$static){
  var adjustValue, d, d$array, d$index, d$max, entry, entryIterator, maxWidth, v, v$iterator, valueWidth;
  maxWidth = 0;
  if (this$static.axisConfig.xIsDescription) {
    if (this$static.axisConfig.valueAxisText) {
      for (v$iterator = (entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(this$static.valuesShownOnAxisSorted.map_0)).map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator)); $hasNext(v$iterator.val$entryIterator2.iter);) {
        v = (entry = $next_6(v$iterator.val$entryIterator2) , castToDouble(entry.getKey()));
        valueWidth = $textDimensionHelper(this$static.base, analyzeFormatLabels(replaceNotEscaped(v == null?'null':'' + (checkCriticalNotNull(v) , v)))).width_0;
        valueWidth > maxWidth && (maxWidth = valueWidth);
      }
    }
  }
   else {
    if (this$static.axisConfig.descAxisText) {
      for (d$array = this$static.desc , d$index = 0 , d$max = d$array.length; d$index < d$max; ++d$index) {
        d = d$array[d$index];
        valueWidth = $textDimensionHelper(this$static.base, analyzeFormatLabels(replaceNotEscaped(d))).width_0;
        valueWidth > maxWidth && (maxWidth = valueWidth);
      }
    }
  }
  adjustValue = maxWidth + this$static.canvas.outerBorder.x_0 - (this$static.axisConfig.yAxisPos - this$static.canvas.innerBorder.x_0) - 5;
  if (adjustValue > this$static.canvas.outerBorder.x_0) {
    $setBorderX(this$static.canvas, round_int(adjustValue));
    $setupAxis(this$static);
    if (this$static.axisConfig.yAxisPos - this$static.canvas.innerBorder.x_0 != 0) {
      adjustValue = maxWidth + this$static.canvas.outerBorder.x_0 - (this$static.axisConfig.yAxisPos - this$static.canvas.innerBorder.x_0) - 5;
      if (adjustValue > this$static.canvas.outerBorder.x_0) {
        $setBorderX(this$static.canvas, round_int(adjustValue));
        $setupAxis(this$static);
      }
    }
  }
}

function $calculateValuePos(this$static, value_0, valueSegment){
  value_0 > 0 && $doubleValue_0(this$static.minVal) > 0?(value_0 -= $doubleValue_0(this$static.minVal)):value_0 < 0 && $doubleValue_0(this$static.maxVal) < 0 && (value_0 -= $doubleValue_0(this$static.maxVal));
  return value_0 * valueSegment;
}

function $drawAxis(this$static, xIsDescription, sourceAxisPos, valueAxisPos, valueSegment, descSegment){
  var d, d$array, d$index, d$max, entry, entryIterator, lineIterator, linePos, v, v$iterator, xpoints, xtext, ypoints, ytext;
  xpoints = new ArrayList;
  xtext = new ArrayList;
  ypoints = new ArrayList;
  ytext = new ArrayList;
  lineIterator = valueAxisPos + (descSegment / 2 | 0);
  for (d$array = this$static.desc , d$index = 0 , d$max = d$array.length; d$index < d$max; ++d$index) {
    d = d$array[d$index];
    if (xIsDescription) {
      $add_13(xpoints, valueOf_9(lineIterator));
      xtext.array[xtext.array.length] = d;
    }
     else {
      $add_13(ypoints, valueOf_9(lineIterator));
      ytext.array[ytext.array.length] = d;
    }
    lineIterator += descSegment;
  }
  for (v$iterator = (entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(this$static.valuesShownOnAxisSorted.map_0)).map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator)); $hasNext(v$iterator.val$entryIterator2.iter);) {
    v = (entry = $next_6(v$iterator.val$entryIterator2) , castToDouble(entry.getKey()));
    linePos = round_int($calculateValuePos(this$static, (checkCriticalNotNull(v) , v), (checkCriticalNotNull(valueSegment) , valueSegment)));
    if (xIsDescription) {
      $add_13(ypoints, valueOf_9(sourceAxisPos - linePos));
      $add_13(ytext, v == null?'null':'' + (checkCriticalNotNull(v) , v));
    }
     else {
      $add_13(xpoints, valueOf_9(sourceAxisPos + linePos));
      $add_13(xtext, v == null?'null':'' + (checkCriticalNotNull(v) , v));
    }
  }
  $drawGraylines(this$static, xpoints, ypoints);
  $setForegroundColor(this$static.base, $transparency($getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , BLACK)), ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0));
  $drawAxisLine(this$static);
  $drawMarkers(this$static, xpoints, ypoints);
  $drawMarkerTexts(this$static, xpoints, xtext, ypoints, ytext);
}

function $drawAxisLine(this$static){
  var x_0, x1, x2, y_0, y1, y2;
  if ($drawXAxis(this$static.axisConfig)) {
    x1 = this$static.canvas.innerBorder.x_0;
    x2 = $getInnerRightPos(this$static.canvas);
    y_0 = this$static.axisConfig.xAxisPos;
    $drawLine(this$static.base, x1, y_0, x2, y_0);
  }
  if ($drawYAxis(this$static.axisConfig)) {
    x_0 = this$static.axisConfig.yAxisPos;
    y1 = this$static.canvas.innerBorder.y_0;
    y2 = $getInnerDownPos(this$static.canvas);
    $drawLine(this$static.base, x_0, y1, x_0, y2);
  }
}

function $drawBars(this$static, xIsDescription, values, sourceAxisPos, valueAxisPos, valueSegment, descSegment, colors){
  var barLength, barWidth, cIndex, ownvar, subBarIterator, v, v$array, v$index, v$max, vIndex, valueRowAmount;
  valueRowAmount = values.length;
  for (vIndex = 0; vIndex < valueRowAmount; vIndex++) {
    cIndex = 0;
    subBarIterator = valueAxisPos;
    for (v$array = values[vIndex] , v$index = 0 , v$max = v$array.length; v$index < v$max; ++v$index) {
      v = v$array[v$index];
      cIndex >= colors.array.length && (cIndex = 0);
      $setForegroundColor(this$static.base, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
      $setBackgroundColorAndKeepTransparency(this$static.base, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])));
      barLength = round_int($calculateValuePos(this$static, (checkCriticalNotNull(v) , v), (checkCriticalNotNull(valueSegment) , valueSegment)));
      ownvar = vIndex * toInt(fromDouble_0($wnd.Math.round(descSegment / valueRowAmount)));
      vIndex == valueRowAmount - 1?(barWidth = subBarIterator + descSegment - (subBarIterator + ownvar)):(barWidth = toInt(fromDouble_0($wnd.Math.round(descSegment / valueRowAmount))));
      xIsDescription?barLength > 0?$drawRectangle_1(this$static.base, subBarIterator + ownvar, sourceAxisPos - barLength, barWidth, barLength):$drawRectangle_1(this$static.base, subBarIterator + ownvar, sourceAxisPos, barWidth, -barLength):barLength > 0?$drawRectangle_1(this$static.base, sourceAxisPos, subBarIterator + ownvar, barLength, barWidth):$drawRectangle_1(this$static.base, sourceAxisPos + barLength, subBarIterator + ownvar, -barLength, barWidth);
      subBarIterator += descSegment;
      ++cIndex;
    }
  }
  $resetColorSettings(this$static.base);
}

function $drawGraylines(this$static, xpoints, ypoints){
  var drawHorizontalGraylines, drawVerticalGraylines, x_0, x$iterator, y_0, y$iterator;
  $setForegroundColor(this$static.base, $transparency($getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , BLACK)), ($clinit_ColorOwn$Transparency() , SELECTION_BACKGROUND).alpha_0));
  drawVerticalGraylines = this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisGray || !this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisGray;
  drawHorizontalGraylines = !this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisGray || this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisGray;
  if (drawVerticalGraylines) {
    for (x$iterator = new ArrayList$1(xpoints); x$iterator.i < x$iterator.this$01.array.length;) {
      x_0 = castTo($next_3(x$iterator), 48);
      $drawLine(this$static.base, x_0.value_0, this$static.canvas.innerBorder.y_0, x_0.value_0, $getInnerDownPos(this$static.canvas));
    }
  }
  if (drawHorizontalGraylines) {
    for (y$iterator = new ArrayList$1(ypoints); y$iterator.i < y$iterator.this$01.array.length;) {
      y_0 = castTo($next_3(y$iterator), 48);
      $drawLine(this$static.base, this$static.canvas.innerBorder.x_0, y_0.value_0, $getInnerRightPos(this$static.canvas), y_0.value_0);
    }
  }
}

function $drawLineOrPoints(this$static, xIsDescription, values, sourceAxisPos, valueAxisPos, valueSegment, descSegment, colors, line){
  var actualValPos, cIndex, currentTheme, i, lineIterator, point, point$iterator, point1, point2, points, v, v$index, v$max, vArray, valueIndex;
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  cIndex = 0;
  for (valueIndex = 0; valueIndex < values.length; valueIndex++) {
    vArray = values[valueIndex];
    lineIterator = valueAxisPos + (descSegment / 2 | 0);
    points = new ArrayList;
    for (v$index = 0 , v$max = vArray.length; v$index < v$max; ++v$index) {
      v = vArray[v$index];
      actualValPos = round_int($calculateValuePos(this$static, (checkCriticalNotNull(v) , v), (checkCriticalNotNull(valueSegment) , valueSegment)));
      xIsDescription?$add_13(points, new Point(lineIterator, sourceAxisPos - actualValPos)):$add_13(points, new Point(sourceAxisPos + actualValPos, lineIterator));
      lineIterator += descSegment;
    }
    cIndex >= colors.array.length && (cIndex = 0);
    $setForegroundColor(this$static.base, $forStringOrNull(currentTheme, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])), ($clinit_ColorOwn$Transparency() , FOREGROUND)));
    $setBackgroundColor(this$static.base, $forStringOrNull(currentTheme, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])), FOREGROUND));
    if (line) {
      for (i = 0; i < points.array.length - 1; i++) {
        point1 = (checkCriticalElementIndex(i, points.array.length) , castTo(points.array[i], 45));
        point2 = (checkCriticalElementIndex(i + 1, points.array.length) , castTo(points.array[i + 1], 45));
        $drawLine(this$static.base, point1.x_0, point1.y_0, point2.x_0, point2.y_0);
      }
    }
     else {
      for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
        point = castTo($next_3(point$iterator), 45);
        $drawCircle_0(this$static.base, point.x_0, point.y_0, 2);
      }
    }
    $setForegroundColor(this$static.base, $darken($forStringOrNull(currentTheme, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])), FOREGROUND), 75));
    $print_0(this$static.base, this$static.title_0[valueIndex], castTo($get_7(points, points.array.length - 1), 45).x_0, castTo($get_7(points, points.array.length - 1), 45).y_0, ($clinit_AlignHorizontal() , CENTER));
    ++cIndex;
  }
  $resetColorSettings(this$static.base);
}

function $drawMarkerTexts(this$static, xpoints, xtext, ypoints, ytext){
  var drawHorizontalMarkerTexts, drawVerticalMarkerTexts, i;
  drawVerticalMarkerTexts = this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisText || !this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisText;
  drawHorizontalMarkerTexts = !this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisText || this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisText;
  if (drawVerticalMarkerTexts) {
    for (i = 0; i < xpoints.array.length; i++) {
      $print_0(this$static.base, (checkCriticalElementIndex(i, xtext.array.length) , castToString(xtext.array[i])), (checkCriticalElementIndex(i, xpoints.array.length) , castTo(xpoints.array[i], 48)).value_0, this$static.axisConfig.xAxisPos + 15, ($clinit_AlignHorizontal() , CENTER));
    }
  }
  if (drawHorizontalMarkerTexts) {
    for (i = 0; i < ypoints.array.length; i++) {
      $print_0(this$static.base, (checkCriticalElementIndex(i, ytext.array.length) , castToString(ytext.array[i])), this$static.axisConfig.yAxisPos - 8, round_int((checkCriticalElementIndex(i, ypoints.array.length) , castTo(ypoints.array[i], 48)).value_0 + $textDimensionHelper(this$static.base, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 / 2), ($clinit_AlignHorizontal() , RIGHT));
    }
  }
}

function $drawMarkers(this$static, xpoints, ypoints){
  var drawHorizontalMarkers, drawVerticalMarkers, x_0, x$iterator, y_0, y$iterator;
  drawVerticalMarkers = this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisMarkers || !this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisMarkers;
  drawHorizontalMarkers = !this$static.axisConfig.xIsDescription && this$static.axisConfig.descAxisMarkers || this$static.axisConfig.xIsDescription && this$static.axisConfig.valueAxisMarkers;
  if (drawVerticalMarkers) {
    for (x$iterator = new ArrayList$1(xpoints); x$iterator.i < x$iterator.this$01.array.length;) {
      x_0 = castTo($next_3(x$iterator), 48);
      $drawLine(this$static.base, x_0.value_0, this$static.axisConfig.xAxisPos, x_0.value_0, this$static.axisConfig.xAxisPos + 5);
    }
  }
  if (drawHorizontalMarkers) {
    for (y$iterator = new ArrayList$1(ypoints); y$iterator.i < y$iterator.this$01.array.length;) {
      y_0 = castTo($next_3(y$iterator), 48);
      $drawLine(this$static.base, this$static.axisConfig.yAxisPos - 5, y_0.value_0, this$static.axisConfig.yAxisPos, y_0.value_0);
    }
  }
}

function $drawPieArcs(this$static, values, desc, ulCorner, diameter, valueSum, colors){
  var arcAngle, cIndex, currentFg, currentTheme, height, i, radians, startAngle, value_x, value_y, width_0;
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  cIndex = 0;
  startAngle = 0;
  for (i = 0; i < values.length; i++) {
    cIndex >= colors.array.length && (cIndex = 0);
    currentFg = this$static.base.style_0.foregroundColor;
    $setForegroundColor(this$static.base, $getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    $setBackgroundColorAndKeepTransparency(this$static.base, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])));
    arcAngle = i < values.length - 1?toDouble_0(fromDouble_0($wnd.Math.round(360 / (checkCriticalNotNull(valueSum) , valueSum) * $wnd.Math.abs($doubleValue_0(values[i]))))):360 - (checkCriticalNotNull(startAngle) , startAngle);
    height = $getInnerVerticalDrawspace(this$static.canvas);
    width_0 = $getInnerHorizontalDrawspace(this$static.canvas);
    $drawArc_0(this$static.base, ulCorner.x_0 + width_0 / 2 - diameter / 2, ulCorner.y_0 + height / 2 - diameter / 2, diameter, diameter, (checkCriticalNotNull(startAngle) , startAngle), (checkCriticalNotNull(arcAngle) , arcAngle), false);
    $setForegroundColor(this$static.base, currentFg);
    radians = (360 - (checkCriticalNotNull(startAngle) , startAngle) + (360 - (checkCriticalNotNull(arcAngle) , arcAngle) / 2)) * $intern_17 / 180;
    value_x = round_int(diameter / 2 * $wnd.Math.cos(radians) + ulCorner.x_0 + diameter / 2 + width_0 / 2 - diameter / 2);
    value_y = round_int(diameter / 2 * $wnd.Math.sin(radians) + ulCorner.y_0 + diameter / 2 + height / 2 - diameter / 2);
    $setForegroundColor(this$static.base, $darken($forStringOrNull(currentTheme, (checkCriticalElementIndex(cIndex, colors.array.length) , castToString(colors.array[cIndex])), ($clinit_ColorOwn$Transparency() , FOREGROUND)), 75));
    $print_0(this$static.base, desc[i], value_x, value_y, ($clinit_AlignHorizontal() , CENTER));
    startAngle = (checkCriticalNotNull(startAngle) , startAngle) + (checkCriticalNotNull(arcAngle) , arcAngle);
    ++cIndex;
  }
  $resetColorSettings(this$static.base);
}

function $drawPiePlot(this$static){
  var diameter, height, ulCorner, v, v$array, v$index, v$max, valueSum, width_0;
  valueSum = 0;
  for (v$array = this$static.values[0] , v$index = 0 , v$max = v$array.length; v$index < v$max; ++v$index) {
    v = v$array[v$index];
    valueSum = (checkCriticalNotNull(valueSum) , valueSum) + $wnd.Math.abs((checkCriticalNotNull(v) , v));
  }
  height = $getInnerVerticalDrawspace(this$static.canvas);
  width_0 = $getInnerHorizontalDrawspace(this$static.canvas);
  diameter = height > width_0?width_0:height;
  ulCorner = new Point(this$static.canvas.innerBorder.x_0, this$static.canvas.innerBorder.y_0);
  $drawPieArcs(this$static, this$static.values[0], this$static.desc, ulCorner, diameter, valueSum, this$static.colors);
}

function $drawPlotAndDescValueAxis(this$static, xIsDescription, drawBars, drawLines, drawPoints){
  $setxIsDescription(this$static.axisConfig, xIsDescription);
  $setupAxis(this$static);
  $calculateAdditionalSpaceForYAxisTextWidth(this$static);
  drawBars && $drawBars(this$static, xIsDescription, this$static.values, this$static.axisConfig.descAxisPos, this$static.axisConfig.valueAxisPos, this$static.axisConfig.valueSegment, this$static.axisConfig.descSegment, this$static.colors);
  drawLines && $drawLineOrPoints(this$static, xIsDescription, this$static.values, this$static.axisConfig.descAxisPos, this$static.axisConfig.valueAxisPos, this$static.axisConfig.valueSegment, this$static.axisConfig.descSegment, this$static.colors, true);
  drawPoints && $drawLineOrPoints(this$static, xIsDescription, this$static.values, this$static.axisConfig.descAxisPos, this$static.axisConfig.valueAxisPos, this$static.axisConfig.valueSegment, this$static.axisConfig.descSegment, this$static.colors, false);
  this$static.axisConfig.drawAxis && $drawAxis(this$static, xIsDescription, this$static.axisConfig.descAxisPos, this$static.axisConfig.valueAxisPos, this$static.axisConfig.valueSegment, this$static.axisConfig.descSegment);
}

function $setMaxValue(this$static, maxVal){
  var limit;
  limit = $wnd.Math.max(this$static.valuesShownOnAxisSorted.map_0.size_0 == 0?$doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesSorted.map_0)))):$wnd.Math.max($doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesSorted.map_0)))), $doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesShownOnAxisSorted.map_0))))), $doubleValue_0(this$static.minVal));
  if ((checkCriticalNotNull(maxVal) , maxVal) < (checkCriticalNotNull(limit) , limit)) {
    throw toJs(new IOException_0('maxValue must be >= ' + limit));
  }
   else {
    this$static.maxVal = maxVal;
  }
}

function $setMinValue(this$static, minVal){
  var limit;
  limit = $wnd.Math.min(this$static.valuesShownOnAxisSorted.map_0.size_0 == 0?$doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesSorted.map_0)))):$wnd.Math.min($doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesSorted.map_0)))), $doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesShownOnAxisSorted.map_0))))), $doubleValue_0(this$static.maxVal));
  if ((checkCriticalNotNull(minVal) , minVal) > (checkCriticalNotNull(limit) , limit)) {
    throw toJs(new IOException_0('minValue must be <= ' + limit));
  }
   else {
    this$static.minVal = minVal;
  }
}

function $setValues(this$static, desc, title_0, values, colors){
  var v, v$index, v$max, vArray, vArray$index, vArray$max;
  this$static.desc = cloneArray_0(desc);
  this$static.title_0 = cloneArray_0(title_0);
  this$static.colors = new ArrayList_1(colors);
  this$static.values = cloneArray_1(values);
  this$static.valuesSorted = new TreeSet;
  for (vArray$index = 0 , vArray$max = values.length; vArray$index < vArray$max; ++vArray$index) {
    vArray = values[vArray$index];
    for (v$index = 0 , v$max = vArray.length; v$index < v$max; ++v$index) {
      v = vArray[v$index];
      $add_18(this$static.valuesSorted, v);
    }
  }
  this$static.valuesShownOnAxisSorted = $setValueAxisList(this$static.axisConfig, this$static.valuesSorted);
  this$static.minVal = this$static.valuesShownOnAxisSorted.map_0.size_0 == 0?$doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesSorted.map_0)))):$wnd.Math.min($doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesSorted.map_0)))), $doubleValue_0(castToDouble(getKeyOrNSE($getFirstEntry(this$static.valuesShownOnAxisSorted.map_0)))));
  this$static.maxVal = this$static.valuesShownOnAxisSorted.map_0.size_0 == 0?$doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesSorted.map_0)))):$wnd.Math.max($doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesSorted.map_0)))), $doubleValue_0(castToDouble(getKeyOrNSE($getLastEntry(this$static.valuesShownOnAxisSorted.map_0)))));
}

function $setupAxis(this$static){
  var elementCount, negativeRange, vArray, vArray$array, vArray$index, vArray$max, valueRange;
  valueRange = $wnd.Math.max(1, $doubleValue_0(this$static.maxVal) - $doubleValue_0(this$static.minVal));
  negativeRange = 0;
  $doubleValue_0(this$static.minVal) > 0 && (negativeRange = 0);
  $doubleValue_0(this$static.minVal) < 0 && ($doubleValue_0(this$static.maxVal) < 0?(negativeRange = valueRange):(negativeRange = -$doubleValue_0(this$static.minVal)));
  elementCount = this$static.desc.length;
  for (vArray$array = this$static.values , vArray$index = 0 , vArray$max = vArray$array.length; vArray$index < vArray$max; ++vArray$index) {
    vArray = vArray$array[vArray$index];
    vArray.length > elementCount && (elementCount = vArray.length);
  }
  if (this$static.axisConfig.xIsDescription) {
    $setDescSegment(this$static.axisConfig, $getInnerHorizontalDrawspace(this$static.canvas) / elementCount | 0);
    $setValueSegment(this$static.axisConfig, $getInnerVerticalDrawspace(this$static.canvas) / (checkCriticalNotNull(valueRange) , valueRange));
    $setDescAxisPos(this$static.axisConfig, round_int($getInnerDownPos(this$static.canvas) - $doubleValue_0(this$static.axisConfig.valueSegment) * (checkCriticalNotNull(negativeRange) , negativeRange)));
    $setValueAxisPos(this$static.axisConfig, this$static.canvas.innerBorder.x_0);
  }
   else {
    $setDescSegment(this$static.axisConfig, $getInnerVerticalDrawspace(this$static.canvas) / elementCount | 0);
    $setValueSegment(this$static.axisConfig, $getInnerHorizontalDrawspace(this$static.canvas) / (checkCriticalNotNull(valueRange) , valueRange));
    $setDescAxisPos(this$static.axisConfig, round_int(this$static.canvas.innerBorder.x_0 + $doubleValue_0(this$static.axisConfig.valueSegment) * (checkCriticalNotNull(negativeRange) , negativeRange)));
    $setValueAxisPos(this$static.axisConfig, this$static.canvas.innerBorder.y_0);
  }
}

function PlotDrawHandler(baseDrawHandler, size_0){
  this.base = baseDrawHandler;
  this.axisConfig = new AxisConfig;
  this.canvas = new Canvas_0(size_0);
}

defineClass(978, 1, {}, PlotDrawHandler);
_.maxVal = null;
_.minVal = null;
var Lcom_baselet_element_elementnew_plot_drawer_PlotDrawHandler_2_classLit = createForClass('com.baselet.element.elementnew.plot.drawer', 'PlotDrawHandler', 978);
function PlotGridDrawConfig(realSize, minValue, maxValue){
  this.realSize = realSize;
  this.minValue = minValue;
  this.maxValue = maxValue;
}

defineClass(962, 1, {}, PlotGridDrawConfig);
var Lcom_baselet_element_elementnew_plot_drawer_PlotGridDrawConfig_2_classLit = createForClass('com.baselet.element.elementnew.plot.drawer', 'PlotGridDrawConfig', 962);
function $setMinMaxValue(this$static, key){
  var e, stringValue;
  stringValue = $getValue_0(this$static.plotState, key, null);
  if (stringValue != null) {
    try {
      $equals_6(key, 'value.min')?$equals_6(stringValue, 'all')?$setMinValue(this$static.plot, this$static.plotDrawConfig.minValue):$setMinValue(this$static.plot, __parseAndValidateDouble(stringValue)):$equals_6(key, 'value.max') && ($equals_6(stringValue, 'all')?$setMaxValue(this$static.plot, this$static.plotDrawConfig.maxValue):$setMaxValue(this$static.plot, __parseAndValidateDouble(stringValue)));
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 14)) {
        e = $e0;
        throw toJs(new ParserException_1(key, stringValue, $getLine(this$static.plotState, key), e.getMessage()));
      }
       else 
        throw toJs($e0);
    }
  }
}

function $setPlotPosition(this$static, columnCount, rowCount){
  var segmentHeight, segmentWidth, spaceBottom, spaceLeft, spaceRight, spaceTop;
  if (this$static.xPosition.value_0 > columnCount) {
    throw toJs(new ParserException('The x coordinate is invalid. PlotGrid width is too small'));
  }
  if (this$static.yPosition.value_0 > rowCount) {
    throw toJs(new ParserException('The y coordinate is invalid. PlotGrid height is too small'));
  }
  segmentWidth = this$static.plotDrawConfig.realSize.width_0 / columnCount;
  segmentHeight = this$static.plotDrawConfig.realSize.height_0 / rowCount;
  spaceLeft = round_int(segmentWidth * this$static.xPosition.value_0);
  spaceRight = round_int(segmentWidth * (columnCount - this$static.xPosition.value_0 - 1));
  spaceTop = round_int(segmentHeight * this$static.yPosition.value_0);
  spaceBottom = round_int(segmentHeight * (rowCount - this$static.yPosition.value_0 - 1));
  $setBorder(this$static.plot.canvas, spaceLeft, spaceTop, spaceRight, spaceBottom, 15);
}

function $setupAbstractPlot(this$static){
  var color_0, color$iterator, colors, desc, ds, title_0, values;
  ds = this$static.plotState.dataset;
  $setInvert(ds, $booleanValue($getValueAsBoolean(this$static.plotState, 'data.invert', ($clinit_PlotConstants() , DATA_INVERT_DEFAULT))));
  desc = castTo(ds.titleRow.toArray_0(initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_2, 2, ds.titleRow.size_1(), 6, 1)), 34);
  title_0 = castTo(ds.titleCol.toArray_0(initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_2, 2, ds.titleCol.size_1(), 6, 1)), 34);
  values = $data(ds);
  colors = $getValueList(this$static.plotState, 'colors', COLORS_DEFAULT);
  for (color$iterator = colors.iterator(); color$iterator.hasNext_0();) {
    color_0 = castToString(color$iterator.next_1());
    if (!$forStringOrNull(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), color_0, ($clinit_ColorOwn$Transparency() , FOREGROUND))) {
      throw toJs(new ParserException('Unknown color: ' + color_0 + '(line: ' + $getLine(this$static.plotState, 'colors') + ')'));
    }
  }
  if (values.length > this$static.getMaxAllowedValueRows()) {
    throw toJs(new ParserException('The dataset (line: ' + this$static.plotState.dataset.lineNr + ') has too many rows for the plot (line: ' + this$static.plotState.plotLineNr + ')'));
  }
  $setValues(this$static.plot, desc, title_0, values, colors);
  $setMinMaxValue(this$static, 'value.min');
  $setMinMaxValue(this$static, 'value.max');
}

function AbstractPlot(drawer, plotDrawConfig, plotState, xPosition, yPosition){
  this.plotDrawConfig = plotDrawConfig;
  this.plotState = plotState;
  this.xPosition = valueOf_9(xPosition);
  this.yPosition = valueOf_9(yPosition);
  this.plot = new PlotDrawHandler(drawer, plotDrawConfig.realSize);
  $enableDescAxis(this.plot.axisConfig, $getValueListValidated(this.plotState, ($clinit_PlotConstants$AxisShow() , 'axis.desc.show'), toStringList(this.defaultDescAxisShow()), ($clinit_PlotConstants() , toStringList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [Axis, Line_0, Marker, Text_2, Nothing_0])))), false));
  $enableValueAxis(this.plot.axisConfig, $getValueListValidated(this.plotState, 'axis.value.show', toStringList(this.defaultValueAxisShow()), toStringList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [Axis, Line_0, Marker, Text_2, Nothing_0]))), false), $getValueListValidated(this.plotState, ($clinit_PlotConstants$AxisList() , 'axis.value.list'), toStringList(this.defaultValueAxisList()), toStringList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, [Relevant, Nothing]))), true));
  $setupAbstractPlot(this);
}

defineClass(113, 1, $intern_18);
var Lcom_baselet_element_elementnew_plot_elements_AbstractPlot_2_classLit = createForClass('com.baselet.element.elementnew.plot.elements', 'AbstractPlot', 113);
function BarPlot(drawer, plotDrawConfig, plotState, xPos, yPos){
  AbstractPlot.call(this, drawer, plotDrawConfig, plotState, xPos, yPos);
}

defineClass(966, 113, $intern_18, BarPlot);
_.defaultDescAxisShow = function defaultDescAxisShow(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Marker, Text_2]));
}
;
_.defaultValueAxisList = function defaultValueAxisList(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, [($clinit_PlotConstants$AxisList() , Relevant)]));
}
;
_.defaultValueAxisShow = function defaultValueAxisShow(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Line_0, Marker, Text_2]));
}
;
_.getMaxAllowedValueRows = function getMaxAllowedValueRows(){
  return $intern_0;
}
;
_.plot_0 = function plot(columnCount, rowCount){
  var tilt;
  $setPlotPosition(this, columnCount, rowCount);
  try {
    $containsKey(this.plotState, 'value.min') || $setMinValue(this.plot, 0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 13))
      throw toJs($e0);
  }
  try {
    $containsKey(this.plotState, 'value.max') || $setMaxValue(this.plot, 0);
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (!instanceOf($e1, 13))
      throw toJs($e1);
  }
  tilt = $getValueAsBoolean(this.plotState, 'tilt', ($clinit_PlotConstants() , PLOT_TILT_DEFAULT));
  $checkIfAllValuesUsed(this.plotState);
  $drawPlotAndDescValueAxis(this.plot, !(checkCriticalNotNull(tilt) , tilt), true, false, false);
}
;
var Lcom_baselet_element_elementnew_plot_elements_BarPlot_2_classLit = createForClass('com.baselet.element.elementnew.plot.elements', 'BarPlot', 966);
function LinePlot(drawer, plotDrawConfig, plotState, xPos, yPos){
  AbstractPlot.call(this, drawer, plotDrawConfig, plotState, xPos, yPos);
}

defineClass(964, 113, $intern_18, LinePlot);
_.defaultDescAxisShow = function defaultDescAxisShow_0(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Line_0, Marker, Text_2]));
}
;
_.defaultValueAxisList = function defaultValueAxisList_0(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, [($clinit_PlotConstants$AxisList() , Relevant)]));
}
;
_.defaultValueAxisShow = function defaultValueAxisShow_0(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Line_0, Marker, Text_2]));
}
;
_.getMaxAllowedValueRows = function getMaxAllowedValueRows_0(){
  return $intern_0;
}
;
_.plot_0 = function plot_0(columnCount, rowCount){
  var tilt;
  $setPlotPosition(this, columnCount, rowCount);
  tilt = $getValueAsBoolean(this.plotState, 'tilt', ($clinit_PlotConstants() , PLOT_TILT_DEFAULT));
  $checkIfAllValuesUsed(this.plotState);
  $drawPlotAndDescValueAxis(this.plot, !(checkCriticalNotNull(tilt) , tilt), false, true, false);
}
;
var Lcom_baselet_element_elementnew_plot_elements_LinePlot_2_classLit = createForClass('com.baselet.element.elementnew.plot.elements', 'LinePlot', 964);
function PiePlot(drawer, plotDrawConfig, plotState, xPos, yPos){
  AbstractPlot.call(this, drawer, plotDrawConfig, plotState, xPos, yPos);
}

defineClass(963, 113, $intern_18, PiePlot);
_.defaultDescAxisShow = function defaultDescAxisShow_1(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, []));
}
;
_.defaultValueAxisList = function defaultValueAxisList_1(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, []));
}
;
_.defaultValueAxisShow = function defaultValueAxisShow_1(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, []));
}
;
_.getMaxAllowedValueRows = function getMaxAllowedValueRows_1(){
  return 1;
}
;
_.plot_0 = function plot_1(columnCount, rowCount){
  $setPlotPosition(this, columnCount, rowCount);
  $checkIfAllValuesUsed(this.plotState);
  $drawPiePlot(this.plot);
}
;
var Lcom_baselet_element_elementnew_plot_elements_PiePlot_2_classLit = createForClass('com.baselet.element.elementnew.plot.elements', 'PiePlot', 963);
function ScatterPlot(drawer, plotDrawConfig, plotState, xPos, yPos){
  AbstractPlot.call(this, drawer, plotDrawConfig, plotState, xPos, yPos);
}

defineClass(965, 113, $intern_18, ScatterPlot);
_.defaultDescAxisShow = function defaultDescAxisShow_2(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Marker, Text_2]));
}
;
_.defaultValueAxisList = function defaultValueAxisList_2(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, [($clinit_PlotConstants$AxisList() , Relevant)]));
}
;
_.defaultValueAxisShow = function defaultValueAxisShow_2(){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [($clinit_PlotConstants$AxisShow() , Axis), Marker, Text_2]));
}
;
_.getMaxAllowedValueRows = function getMaxAllowedValueRows_2(){
  return $intern_0;
}
;
_.plot_0 = function plot_2(columnCount, rowCount){
  var tilt;
  $setPlotPosition(this, columnCount, rowCount);
  tilt = $getValueAsBoolean(this.plotState, 'tilt', ($clinit_PlotConstants() , PLOT_TILT_DEFAULT));
  $checkIfAllValuesUsed(this.plotState);
  $drawPlotAndDescValueAxis(this.plot, !(checkCriticalNotNull(tilt) , tilt), false, false, true);
}
;
var Lcom_baselet_element_elementnew_plot_elements_ScatterPlot_2_classLit = createForClass('com.baselet.element.elementnew.plot.elements', 'ScatterPlot', 965);
function $clinit_DataSet(){
  $clinit_DataSet = emptyMethod;
}

function $addLine_0(this$static, line){
  $addLine(this$static.analyseMatrix, new ArrayList_1(new Arrays$ArrayList(line)));
}

function $createEmptyList(size_0){
  var i, returnList;
  returnList = new ArrayList;
  for (i = 0; i < size_0; i++) {
    returnList.array[returnList.array.length] = '';
  }
  return returnList;
}

function $data(this$static){
  var i, list, returnArray;
  if ($isEmpty(this$static.valueMatrix)) {
    throw toJs(new ParserException('The dataset (line: ' + this$static.lineNr + ') has no values'));
  }
  returnArray = initUnidimensionalArray(Ljava_lang_Double_2_classLit, $intern_3, 304, this$static.valueMatrix.matrix.array.length, 0, 2);
  for (i = 0; i < this$static.valueMatrix.matrix.array.length; i++) {
    returnArray[i] = (list = $row(this$static.valueMatrix, i) , castTo(list.toArray_0(initUnidimensionalArray(Ljava_lang_Double_2_classLit, $intern_4, 256, list.size_1(), 7, 1)), 304));
  }
  return returnArray;
}

function $isTitleLine(row){
  var cell, cell$iterator, numbersInRow;
  numbersInRow = 0;
  for (cell$iterator = row.iterator(); cell$iterator.hasNext_0();) {
    cell = castToString(cell$iterator.next_1());
    if (cell == null) {
      continue;
    }
    try {
      __parseAndValidateDouble(cell);
      ++numbersInRow;
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 77))
        throw toJs($e0);
    }
  }
  return row.size_1() - numbersInRow > numbersInRow;
}

function $separateTitleRowColFromContent(this$static){
  var c, firstCol, firstRow, hasTitleCol, hasTitleRow, r, row, rowDouble, val;
  if ($isEmpty(this$static.analyseMatrix)) {
    throw toJs(new ParserException('The dataset (line: ' + this$static.lineNr + ') has no content'));
  }
  firstRow = $row(this$static.analyseMatrix, 0);
  firstCol = $col(this$static.analyseMatrix, 0);
  hasTitleRow = $isTitleLine(firstRow);
  hasTitleCol = $isTitleLine(firstCol);
  if (hasTitleRow && hasTitleCol) {
    if (castToString(firstRow.get_0(0)).length != 0 || (checkCriticalElementIndex(0, firstCol.array.length) , castToString(firstCol.array[0])).length != 0) {
      throw toJs(new ParserException('If a dataset has a title row and column, the upper left space must be empty'));
    }
    this$static.titleRow = firstRow.subList(1, firstRow.size_1());
    this$static.titleCol = new AbstractList$SubList(firstCol, 1, firstCol.array.length);
  }
   else if (hasTitleRow && !hasTitleCol) {
    this$static.titleRow = firstRow;
    this$static.titleCol = $createEmptyList(firstCol.array.length - 1);
  }
   else if (!hasTitleRow && hasTitleCol) {
    this$static.titleRow = $createEmptyList(firstRow.size_1() - 1);
    this$static.titleCol = firstCol;
  }
   else {
    this$static.titleRow = $createEmptyList(firstRow.size_1());
    this$static.titleCol = $createEmptyList(firstCol.array.length);
  }
  this$static.valueMatrix = new Matrix;
  for (r = hasTitleRow?1:0; r < this$static.analyseMatrix.matrix.array.length; r++) {
    row = $row(this$static.analyseMatrix, r);
    rowDouble = new ArrayList;
    for (c = hasTitleCol?1:0; c < row.size_1(); c++) {
      val = castToString(row.get_0(c));
      try {
        if (val == null) {
          throw toJs(new NumberFormatException);
        }
         else {
          $add_13(rowDouble, __parseAndValidateDouble(val));
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 77)) {
          throw toJs(new ParserException('The Dataset (line: ' + this$static.lineNr + ') contains invalid values'));
        }
         else 
          throw toJs($e0);
      }
    }
    $addLine(this$static.valueMatrix, rowDouble);
  }
}

function $setInvert(this$static, shouldBeInverted){
  if (this$static.isInverted == !shouldBeInverted) {
    $invert(this$static.analyseMatrix);
    $separateTitleRowColFromContent(this$static);
    this$static.isInverted = shouldBeInverted;
  }
}

function DataSet(id_0, nr, lineNr){
  $clinit_DataSet();
  this.id_0 = id_0;
  this.nr = valueOf_9(nr);
  this.lineNr = lineNr;
  this.analyseMatrix = new Matrix;
}

defineClass(166, 1, {166:1}, DataSet);
_.toString_0 = function toString_16(){
  return 'Dataset (' + this.id_0 + ')\n' + this.analyseMatrix;
}
;
_.isInverted = false;
_.lineNr = 0;
_.titleCol = null;
_.titleRow = null;
var Lcom_baselet_element_elementnew_plot_parser_DataSet_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'DataSet', 166);
function KeyValue(key, value_0, line){
  this.key = key;
  this.value_0 = value_0;
  this.line_0 = line;
  this.used = false;
}

defineClass(81, 1, {81:1}, KeyValue);
_.toString_0 = function toString_17(){
  return this.key + '\t-> ' + this.value_0 + ' (line ' + this.line_0 + ')';
}
;
_.line_0 = 0;
_.used = false;
var Lcom_baselet_element_elementnew_plot_parser_KeyValue_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'KeyValue', 81);
function $clinit_Parser(){
  $clinit_Parser = emptyMethod;
  log_5 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_elementnew_plot_parser_Parser_2_classLit) , Lcom_baselet_element_elementnew_plot_parser_Parser_2_classLit.typeName));
}

function $addDataset(this$static, plotState, actualAutoDatasetNr){
  var dataset, datasetId, datasetNr, tempDataset, tempDataset$iterator;
  datasetId = $getValue_0(plotState, 'data', null);
  if (datasetId == null) {
    actualAutoDatasetNr >= this$static.datasetList.array.length && (actualAutoDatasetNr = 0);
    $setDataSet(plotState, castTo($get_7(this$static.datasetList, actualAutoDatasetNr++), 166));
  }
   else {
    dataset = null;
    if ($equals_6(datasetId.substr(0, 1), '#')) {
      datasetNr = datasetId.substr(1);
      for (tempDataset$iterator = new ArrayList$1(this$static.datasetList); tempDataset$iterator.i < tempDataset$iterator.this$01.array.length;) {
        tempDataset = castTo($next_3(tempDataset$iterator), 166);
        $equals_6(datasetNr, valueOf_10(tempDataset.nr)) && (dataset = tempDataset);
      }
    }
     else {
      for (tempDataset$iterator = new ArrayList$1(this$static.datasetList); tempDataset$iterator.i < tempDataset$iterator.this$01.array.length;) {
        tempDataset = castTo($next_3(tempDataset$iterator), 166);
        $equals_6(datasetId, tempDataset.id_0) && (dataset = tempDataset);
      }
    }
    if (dataset) {
      plotState.dataset = dataset;
    }
     else {
      throw toJs(new ParserException_0('data', datasetId, $getStringValue(plotState.values, 'data') != null?castTo($getStringValue(plotState.values, 'data'), 81).line_0:-1));
    }
  }
  return actualAutoDatasetNr;
}

function $addDatasetsToPlotStates(this$static){
  var actualAutoDatasetNr, plotState, plotState$iterator, subPlotState, subPlotState$iterator;
  if (this$static.datasetList.array.length == 0) {
    throw toJs(new ParserException('You must specify at least one dataset.'));
  }
  actualAutoDatasetNr = 0;
  for (plotState$iterator = new ArrayList$1(this$static.parserResult.plotStateList); plotState$iterator.i < plotState$iterator.this$01.array.length;) {
    plotState = castTo($next_3(plotState$iterator), 123);
    actualAutoDatasetNr = $addDataset(this$static, plotState, actualAutoDatasetNr);
    for (subPlotState$iterator = new ArrayList$1(plotState.subPlots); subPlotState$iterator.i < subPlotState$iterator.this$01.array.length;) {
      subPlotState = castTo($next_3(subPlotState$iterator), 123);
      $info_0(log_5, 'Add dataset for subplot');
      actualAutoDatasetNr = $addDataset(this$static, subPlotState, actualAutoDatasetNr);
    }
  }
}

function $analyseDatasets(this$static){
  var dataset, dataset$iterator;
  for (dataset$iterator = new ArrayList$1(this$static.datasetList); dataset$iterator.i < dataset$iterator.this$01.array.length;) {
    dataset = castTo($next_3(dataset$iterator), 166);
    $separateTitleRowColFromContent(dataset);
  }
}

function $copyHashMap(inputHashMap){
  var entry, entry$iterator, returnHashMap;
  returnHashMap = new HashMap;
  for (entry$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(inputHashMap)).this$01); entry$iterator.hasNext;) {
    entry = $next_1(entry$iterator);
    $putStringValue(returnHashMap, castToString(entry.getKey()), castTo(entry.getValue_0(), 81));
  }
  return returnHashMap;
}

function $createDatasetObject(this$static, args, inputIterator){
  var datasetId, ds, ds$iterator, lineNr, newDataset, nextLine;
  lineNr = inputIterator.i;
  datasetId = null;
  args.length > 1 && (datasetId = args[1]);
  newDataset = new DataSet(datasetId, this$static.datasetNr++, lineNr);
  while (inputIterator.i < inputIterator.this$01_0.size_1()) {
    nextLine = (checkCriticalElement(inputIterator.i < inputIterator.this$01_0.size_1()) , castToString(inputIterator.this$01_0.get_0(inputIterator.last = inputIterator.i++)));
    if ((new RegExp('^((//.*))$')).test(nextLine)) {
      continue;
    }
     else if ($trim(nextLine).length == 0) {
      break;
    }
     else {
      $addLine_0(newDataset, $split(nextLine, '([\t ]+)', 0));
    }
  }
  if (datasetId != null) {
    for (ds$iterator = new ArrayList$1(this$static.datasetList); ds$iterator.i < ds$iterator.this$01.array.length;) {
      ds = castTo($next_3(ds$iterator), 166);
      if ($equals_6(datasetId, ds.id_0)) {
        throw toJs(new ParserException('The dataset name "' + datasetId + '" (line: ' + lineNr + ') already exists'));
      }
    }
  }
  $add_13(this$static.datasetList, newDataset);
}

function $createKeyValueAssignment(this$static, line, lineNr){
  var split_0;
  split_0 = $split(line, '=', 0);
  split_0.length == 1 && (split_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, [split_0[0], '']));
  (new RegExp('^(grid.width)$')).test(split_0[0])?$addPlotGridValue(this$static.parserResult, split_0[0], new KeyValue(split_0[0], split_0[1], lineNr)):$putStringValue(this$static.tempPlotValuesCache, split_0[0], new KeyValue(split_0[0], split_0[1], lineNr));
}

function $createPlotStateObject(this$static, args, inputIterator){
  var i, lineNr, localCopyOfValuesCache, newPlotState, split_0;
  lineNr = inputIterator.i;
  localCopyOfValuesCache = $copyHashMap(this$static.tempPlotValuesCache);
  for (i = 1; i < args.length; i++) {
    split_0 = $split(args[i], '=', 0);
    split_0.length == 1 && (split_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, [split_0[0], '']));
    $putStringValue(localCopyOfValuesCache, split_0[0], new KeyValue(split_0[0], split_0[1], lineNr));
  }
  localCopyOfValuesCache.stringMap.backingMap.get('data') == null && $putStringValue(localCopyOfValuesCache, 'data', new KeyValue('data', 'auto', lineNr));
  newPlotState = new PlotState(lineNr, localCopyOfValuesCache);
  return newPlotState;
}

function $parse(this$static, source){
  var inputIterator, inputList, last, line, plotStates;
  inputList = new Arrays$ArrayList($split(source, '\n', -1));
  inputIterator = new AbstractList$ListIteratorImpl(inputList, 0);
  while (inputIterator.i < inputIterator.this$01_0.size_1()) {
    line = (checkCriticalElement(inputIterator.i < inputIterator.this$01_0.size_1()) , castToString(inputIterator.this$01_0.get_0(inputIterator.last = inputIterator.i++)));
    if (line.length == 0 || (new RegExp('^((//.*))$')).test(line))
    ;
    else if ((new RegExp('^(((plot ?)|(plot ((([(\\w)\\.]+)=([-(\\w)#\\.,]*)) )*(([(\\w)\\.]+)=([-(\\w)#\\.,]*)))))$')).test(line)) {
      $addPlotState(this$static.parserResult, $createPlotStateObject(this$static, $split(line, ' ', 0), inputIterator));
    }
     else if ((new RegExp('^((\\+((plot ?)|(plot ((([(\\w)\\.]+)=([-(\\w)#\\.,]*)) )*(([(\\w)\\.]+)=([-(\\w)#\\.,]*))))))$')).test(line)) {
      plotStates = this$static.parserResult.plotStateList;
      if (plotStates.array.length == 0) {
        $addPlotState(this$static.parserResult, $createPlotStateObject(this$static, $split(line, ' ', 0), inputIterator));
      }
       else {
        last = castTo($get_7(plotStates, plotStates.array.length - 1), 123);
        $addSubPlot(last, $createPlotStateObject(this$static, $split(line, ' ', 0), inputIterator));
      }
    }
     else if ((new RegExp('^(((data ?)|(data (\\w)+)))$')).test(line)) {
      $createDatasetObject(this$static, $split(line, ' ', 0), inputIterator);
    }
     else if ((new RegExp('^(((?!((//.*)))(([^=]+)|(.*([\t ]+).*))))$')).test(line)) {
      checkCriticalElement(inputIterator.i > 0);
      inputIterator.this$01.get_0(inputIterator.last = --inputIterator.i);
      $createDatasetObject(this$static, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['data']), inputIterator);
    }
     else if ((new RegExp('^((([(\\w)\\.]+)=([-(\\w)#\\.,]*)))$')).test(line)) {
      $createKeyValueAssignment(this$static, line, inputIterator.i);
    }
     else {
      throw toJs(new ParserException('Invalid line: ' + line + '(line: ' + inputIterator.i + ')'));
    }
  }
  $analyseDatasets(this$static);
  $addDatasetsToPlotStates(this$static);
  return this$static.parserResult;
}

function Parser(){
  $clinit_Parser();
  this.parserResult = new ParserResult;
  this.datasetList = new ArrayList;
  this.tempPlotValuesCache = new HashMap;
}

defineClass(926, 1, {}, Parser);
_.datasetNr = 1;
var log_5;
var Lcom_baselet_element_elementnew_plot_parser_Parser_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'Parser', 926);
function ParserException(message){
  RuntimeException_0.call(this, message);
}

function ParserException_0(key, value_0, line){
  ParserException.call(this, 'Invalid assignment: "' + key + '=' + value_0 + '" (line: ' + line + ')');
}

function ParserException_1(key, value_0, line, additionalInfo){
  ParserException.call(this, 'Invalid assignment: "' + key + '=' + value_0 + '" (line: ' + line + ') [' + additionalInfo + ']');
}

defineClass(60, 11, {60:1, 3:1, 14:1, 11:1, 17:1}, ParserException, ParserException_0, ParserException_1);
var Lcom_baselet_element_elementnew_plot_parser_ParserException_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'ParserException', 60);
function $addPlotGridValue(this$static, key, value_0){
  $putStringValue(this$static.plotGridValues, key, value_0);
}

function $addPlotState(this$static, plotState){
  $add_13(this$static.plotStateList, plotState);
}

function $toString_2(this$static){
  var e, e$iterator, plotState, plotState$iterator, sb;
  sb = new StringBuilder_1('\n-----------------------------\n');
  sb.string += '--------PARSER CONTENT-------\n';
  sb.string += '-----------------------------\n\n';
  sb.string += '##########PlotStates#########\n\n';
  for (plotState$iterator = new ArrayList$1(this$static.plotStateList); plotState$iterator.i < plotState$iterator.this$01.array.length;) {
    plotState = castTo($next_3(plotState$iterator), 123);
    $append_5($append_5(sb, $toString_3(plotState)), '\n');
  }
  sb.string += '#########PlotGridValues########\n\n';
  for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.plotGridValues)).this$01); e$iterator.hasNext;) {
    e = $next_1(e$iterator);
    $append_5($append_4($append_5($append_5((sb.string += '\t' , sb), castToString(e.getKey())), ' -> '), e.getValue_0()), '\n');
  }
  sb.string += '\n-----------------------------\n';
  sb.string += '-----------------------------\n';
  return sb.string;
}

function ParserResult(){
  this.plotStateList = new ArrayList;
  this.plotGridValues = new HashMap;
}

defineClass(925, 1, {}, ParserResult);
_.toString_0 = function toString_18(){
  return $toString_2(this);
}
;
var Lcom_baselet_element_elementnew_plot_parser_ParserResult_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'ParserResult', 925);
function $clinit_PlotConstants(){
  $clinit_PlotConstants = emptyMethod;
  DATA_INVERT_DEFAULT = ($clinit_Boolean() , false);
  PLOT_TILT_DEFAULT = false;
  COLORS_DEFAULT = unmodifiableList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['red', 'blue', 'green', 'orange', 'cyan', 'magenta', 'pink'])));
  AUTOCOMPLETION_LIST = unmodifiableList(new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_gui_AutocompletionText_2_classLit, 1), $intern_6, 16, 0, [new AutocompletionText('plot', 'draws the configured plot'), new AutocompletionText('data', 'marks everything until the next empty line as dataset'), new AutocompletionText('data=<name>', 'as data but with explicit name'), new AutocompletionText('grid.width=3', 'sets the amount of plots per line'), new AutocompletionText('data.invert=' + DATA_INVERT_DEFAULT, 'inverts the dataset'), new AutocompletionText('tilt=' + PLOT_TILT_DEFAULT, 'tilts the plot'), new AutocompletionText('pos.x=<integer>', 'places the next plot at specific horizontal grid position'), new AutocompletionText('pos.y=<integer>', 'places the next plot at specific vertical grid position'), new AutocompletionText('value.min=all', 'restrict the highest value shown in the plot'), new AutocompletionText('value.max=all', 'restrict the lowest value shown in the plot'), new AutocompletionText('colors=' + castToString(COLORS_DEFAULT.list.get_0(0)) + ',' + castToString(COLORS_DEFAULT.list.get_0(1)), 'sets a list of colors which will be cycled by the plot'), new AutocompletionText(($clinit_PlotConstants$PlotType() , 'type=' + $getValue(Bar)), 'sets the plot type to Bar plot'), new AutocompletionText('type=' + $getValue(Line_1), 'sets the plot type to Line plot'), new AutocompletionText('type=' + $getValue(Pie), 'sets the plot type to Pie plot'), new AutocompletionText('type=' + $getValue(Scatter), 'sets the plot type to Scatter plot'), new AutocompletionText(($clinit_PlotConstants$AxisShow() , $clinit_PlotConstants$AxisShow() , 'axis.value.show' + ('=' + Axis.value_0 + ',' + Line_0.value_0 + ',' + Marker.value_0 + ',' + Text_2.value_0)), 'a list of elements to show at the value axis'), new AutocompletionText((null , 'axis.desc.show' + ('=' + Axis.value_0 + ',' + Line_0.value_0 + ',' + Marker.value_0 + ',' + Text_2.value_0)), 'a list of elements to show at the description axis'), new AutocompletionText(($clinit_PlotConstants$AxisList() , 'axis.value.list=' + Relevant.value_0), 'restricts shown values to occurring ones')])));
}

function toStringList(input_0){
  $clinit_PlotConstants();
  var o, o$iterator, returnList;
  returnList = new ArrayList;
  for (o$iterator = new AbstractList$IteratorImpl(input_0); o$iterator.i < o$iterator.this$01_0.size_1();) {
    o = (checkCriticalElement(o$iterator.i < o$iterator.this$01_0.size_1()) , castTo(o$iterator.this$01_0.get_0(o$iterator.last = o$iterator.i++), 390));
    $add_13(returnList, o.getValue());
  }
  return returnList;
}

var AUTOCOMPLETION_LIST, COLORS_DEFAULT, DATA_INVERT_DEFAULT, PLOT_TILT_DEFAULT;
function $clinit_PlotConstants$AxisList(){
  $clinit_PlotConstants$AxisList = emptyMethod;
  Relevant = new PlotConstants$AxisList;
  Nothing = new PlotConstants$AxisList_0;
}

function PlotConstants$AxisList(){
  Enum.call(this, 'Relevant', 0);
  this.value_0 = (this.name_0 != null?this.name_0:'' + this.ordinal).toLowerCase();
}

function PlotConstants$AxisList_0(){
  Enum.call(this, 'Nothing', 1);
  this.value_0 = '';
}

function values_13(){
  $clinit_PlotConstants$AxisList();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit, 1), $intern_5, 134, 0, [Relevant, Nothing]);
}

defineClass(134, 8, {134:1, 390:1, 3:1, 9:1, 8:1}, PlotConstants$AxisList, PlotConstants$AxisList_0);
_.getValue = function getValue(){
  return this.value_0;
}
;
var Nothing, Relevant;
var Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisList_2_classLit = createForEnum('com.baselet.element.elementnew.plot.parser', 'PlotConstants/AxisList', 134, values_13);
function $clinit_PlotConstants$AxisShow(){
  $clinit_PlotConstants$AxisShow = emptyMethod;
  Axis = new PlotConstants$AxisShow('Axis', 0);
  Line_0 = new PlotConstants$AxisShow('Line', 1);
  Marker = new PlotConstants$AxisShow('Marker', 2);
  Text_2 = new PlotConstants$AxisShow('Text', 3);
  Nothing_0 = new PlotConstants$AxisShow_0;
}

function PlotConstants$AxisShow(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
  this.value_0 = (this.name_0 != null?this.name_0:'' + this.ordinal).toLowerCase();
}

function PlotConstants$AxisShow_0(){
  Enum.call(this, 'Nothing', 4);
  this.value_0 = '';
}

function values_14(){
  $clinit_PlotConstants$AxisShow();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit, 1), $intern_5, 88, 0, [Axis, Line_0, Marker, Text_2, Nothing_0]);
}

defineClass(88, 8, {88:1, 390:1, 3:1, 9:1, 8:1}, PlotConstants$AxisShow, PlotConstants$AxisShow_0);
_.getValue = function getValue_0(){
  return this.value_0;
}
;
var Axis, Line_0, Marker, Nothing_0, Text_2;
var Lcom_baselet_element_elementnew_plot_parser_PlotConstants$AxisShow_2_classLit = createForEnum('com.baselet.element.elementnew.plot.parser', 'PlotConstants/AxisShow', 88, values_14);
function $clinit_PlotConstants$PlotType(){
  $clinit_PlotConstants$PlotType = emptyMethod;
  Bar = new PlotConstants$PlotType('Bar', 0);
  Line_1 = new PlotConstants$PlotType('Line', 1);
  Pie = new PlotConstants$PlotType('Pie', 2);
  Scatter = new PlotConstants$PlotType('Scatter', 3);
}

function $getValue(this$static){
  return (this$static.name_0 != null?this$static.name_0:'' + this$static.ordinal).toLowerCase();
}

function PlotConstants$PlotType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_15(){
  $clinit_PlotConstants$PlotType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_elementnew_plot_parser_PlotConstants$PlotType_2_classLit, 1), $intern_5, 165, 0, [Bar, Line_1, Pie, Scatter]);
}

defineClass(165, 8, {390:1, 165:1, 3:1, 9:1, 8:1}, PlotConstants$PlotType);
_.getValue = function getValue_1(){
  return $getValue(this);
}
;
var Bar, Line_1, Pie, Scatter;
var Lcom_baselet_element_elementnew_plot_parser_PlotConstants$PlotType_2_classLit = createForEnum('com.baselet.element.elementnew.plot.parser', 'PlotConstants/PlotType', 165, values_15);
function $addSubPlot(this$static, plotState){
  $add_13(this$static.subPlots, plotState);
}

function $checkIfAllValuesUsed(this$static){
  var entry, keyValue, keyValue$iterator, outerIter, sb, unusedVariables;
  sb = new StringBuilder_1('');
  for (keyValue$iterator = (outerIter = (new AbstractMap$2(this$static.values)).this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter)); keyValue$iterator.val$outerIter2.hasNext_0();) {
    keyValue = (entry = castTo(keyValue$iterator.val$outerIter2.next_1(), 46) , castTo(entry.getValue_0(), 81));
    keyValue.used || $append_5($append_2($append_5($append_5($append_5($append_5((sb.string += '"' , sb), keyValue.key), '='), keyValue.value_0), '" (line '), keyValue.line_0), ') ');
  }
  unusedVariables = sb.string;
  if (unusedVariables.length != 0) {
    throw toJs(new ParserException('Invalid variables: ' + unusedVariables));
  }
}

function $containsKey(this$static, key){
  return $hasStringValue(this$static.values, key);
}

function $getLine(this$static, key){
  return $getStringValue(this$static.values, key) != null?castTo($getStringValue(this$static.values, key), 81).line_0:-1;
}

function $getValue_0(this$static, key, defaultValue){
  var keyValue;
  keyValue = castTo($getStringValue(this$static.values, key), 81);
  !!keyValue && (keyValue.used = true);
  return !keyValue || $equals_6(keyValue.value_0, 'auto')?defaultValue:keyValue.value_0;
}

function $getValueAsBoolean(this$static, key, defaultValue){
  var value_0;
  value_0 = $getValue_0(this$static, key, null);
  if (value_0 == null) {
    return defaultValue;
  }
   else if ($equals_6(value_0, 'true')) {
    return $clinit_Boolean() , true;
  }
   else if ($equals_6(value_0, 'false')) {
    return $clinit_Boolean() , false;
  }
   else {
    throw toJs(new ParserException_0(key, castTo($getStringValue(this$static.values, key), 81).value_0, castTo($getStringValue(this$static.values, key), 81).line_0));
  }
}

function $getValueAsInt(this$static, key){
  var value_0;
  try {
    value_0 = $getValue_0(this$static, key, null);
    return value_0 == null?null:valueOf_9(__parseAndValidateInt(value_0, 10));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      throw toJs(new ParserException_0(key, castTo($getStringValue(this$static.values, key), 81).value_0, castTo($getStringValue(this$static.values, key), 81).line_0));
    }
     else 
      throw toJs($e0);
  }
}

function $getValueList(this$static, key, defaultValue){
  var returnArray, value_0;
  value_0 = $getValue_0(this$static, key, null);
  value_0 == null?(returnArray = defaultValue):(returnArray = new Arrays$ArrayList($split(value_0, ',', 0)));
  return returnArray;
}

function $getValueListValidated(this$static, key, defaultValue, validValues, doubleValuesAllowed){
  var intAllowedAndValueIsInt, value_0, value$iterator, valueList;
  valueList = $getValueList(this$static, key, defaultValue);
  for (value$iterator = valueList.iterator(); value$iterator.hasNext_0();) {
    value_0 = castToString(value$iterator.next_1());
    intAllowedAndValueIsInt = doubleValuesAllowed && $isDoubleValue(value_0);
    if ($indexOf_2(validValues, value_0, 0) == -1 && !intAllowedAndValueIsInt) {
      throw toJs(new ParserException_0(key, value_0, $getStringValue(this$static.values, key) != null?castTo($getStringValue(this$static.values, key), 81).line_0:-1));
    }
  }
  return valueList;
}

function $getValueValidated(this$static, key, defaultValue, validValues){
  var value_0;
  value_0 = $getValue_0(this$static, key, defaultValue);
  if ($indexOf_2(validValues, value_0, 0) == -1) {
    throw toJs(new ParserException_0(key, value_0, $getStringValue(this$static.values, key) != null?castTo($getStringValue(this$static.values, key), 81).line_0:-1));
  }
  return value_0;
}

function $isDoubleValue(value_0){
  try {
    __parseAndValidateDouble(value_0);
    return true;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      return false;
    }
     else 
      throw toJs($e0);
  }
}

function $setDataSet(this$static, dataset){
  this$static.dataset = dataset;
}

function $toString_3(this$static){
  var entry, keyValue, keyValue$iterator, outerIter, sb, subPlot, subPlot$iterator;
  sb = new StringBuilder_1('');
  $append_5($append_2((sb.string += 'PlotState (' , sb), this$static.plotLineNr), ')\n');
  !!this$static.dataset && $append_5($append_2((sb.string += '\tdataset -> ' , sb), this$static.dataset.lineNr), '\n');
  for (keyValue$iterator = (outerIter = (new AbstractMap$2(this$static.values)).this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter)); keyValue$iterator.val$outerIter2.hasNext_0();) {
    keyValue = (entry = castTo(keyValue$iterator.val$outerIter2.next_1(), 46) , castTo(entry.getValue_0(), 81));
    $append_5($append_4((sb.string += '\t' , sb), keyValue), '\n');
  }
  if (this$static.subPlots.array.length != 0) {
    sb.string += '---Begin Subplots---\n';
    for (subPlot$iterator = new ArrayList$1(this$static.subPlots); subPlot$iterator.i < subPlot$iterator.this$01.array.length;) {
      subPlot = castTo($next_3(subPlot$iterator), 123);
      $append_5(sb, $toString_3(subPlot));
    }
    sb.string += '---End Subplots---\n';
  }
  return sb.string;
}

function PlotState(plotLineNr, values){
  this.subPlots = new ArrayList;
  this.plotLineNr = plotLineNr;
  this.values = values;
}

defineClass(123, 1, {123:1}, PlotState);
_.toString_0 = function toString_19(){
  return $toString_3(this);
}
;
_.plotLineNr = 0;
var Lcom_baselet_element_elementnew_plot_parser_PlotState_2_classLit = createForClass('com.baselet.element.elementnew.plot.parser', 'PlotState', 123);
function ActivityObject(){
  NewGridElement.call(this);
}

defineClass(745, 68, $intern_13, ActivityObject);
_.createSettings = function createSettings_1(){
  return new ActivityObject$1;
}
;
_.drawCommonContent = function drawCommonContent_1(state){
  $drawRectangle_1(state.drawer, 0, 0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).width_0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).height_0);
}
;
_.getId = function getId_1(){
  return $clinit_ElementId() , UMLObject;
}
;
var Lcom_baselet_element_elementnew_uml_ActivityObject_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'ActivityObject', 745);
function ActivityObject$1(){
  $clinit_Settings();
}

defineClass(746, 1064, {}, ActivityObject$1);
_.createFacets = function createFacets_1(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
var Lcom_baselet_element_elementnew_uml_ActivityObject$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'ActivityObject/1', 746);
function Actor(){
  NewGridElement.call(this);
  this.actorStickingPolygonGenerator = new Actor$1(this);
}

defineClass(730, 68, $intern_13, Actor);
_.createSettings = function createSettings_2(){
  return new SettingsAutoresize;
}
;
_.drawCommonContent = function drawCommonContent_2(state){
  var drawer;
  drawer = state.drawer;
  state.minimumWidth = $wnd.Math.max(state.minimumWidth, 42);
  $setTopMin(state.buffer, 70);
  drawActor(drawer, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 / 2 | 0, 0, 14);
  $setStickingPolygonGenerator(state, this.actorStickingPolygonGenerator);
}
;
_.getId = function getId_2(){
  return $clinit_ElementId() , UMLActor;
}
;
var Lcom_baselet_element_elementnew_uml_Actor_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Actor', 730);
function Actor$1(this$0){
  this.this$01 = this$0;
}

defineClass(731, 1, {}, Actor$1);
_.generateStickingBorder_0 = function generateStickingBorder_0(rect){
  var hCenter, left, p, right;
  hCenter = $getRealSize(this.this$01).width_0 / 2;
  left = ($clinit_SharedUtils() , realignTo(hCenter - 21, false, 10));
  right = realignTo(hCenter + 21, true, 10);
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addPoint(p, left, 0);
  $addPoint(p, right, 0);
  $addPoint(p, right, 70);
  $addPoint_0(p, left, 70);
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_Actor$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Actor/1', 731);
function Class(){
  NewGridElement.call(this);
}

defineClass(732, 68, $intern_13, Class);
_.createSettings = function createSettings_3(){
  return new Class$1;
}
;
_.drawCommonContent = function drawCommonContent_3(state){
}
;
_.getId = function getId_3(){
  return $clinit_ElementId() , UMLClass;
}
;
var Lcom_baselet_element_elementnew_uml_Class_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Class', 732);
defineClass(1065, $intern_16, {});
_.createFacets = function createFacets_2(){
  return MANUALRESIZE;
}
;
_.getElementStyle = function getElementStyle_0(){
  return $clinit_ElementStyle() , SIMPLE;
}
;
var Lcom_baselet_element_settings_SettingsManualResizeTop_2_classLit = createForClass('com.baselet.element.settings', 'SettingsManualResizeTop', 1065);
function Class$1(){
  $clinit_Settings();
}

defineClass(733, 1065, {}, Class$1);
_.createFacets = function createFacets_3(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_InnerClassFacet() , INSTANCE_18), ($clinit_SeparatorLineWithHalignChangeFacet() , INSTANCE_10), ($clinit_ActiveClassFacet() , INSTANCE_16), ($clinit_TemplateClassFacet() , INSTANCE_22)]));
}
;
var Lcom_baselet_element_elementnew_uml_Class$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Class/1', 733);
function Deployment(){
  NewGridElement.call(this);
}

defineClass(734, 68, $intern_13, Deployment);
_.createSettings = function createSettings_4(){
  return new Deployment$1;
}
;
_.drawCommonContent = function drawCommonContent_4(state){
  var currentTheme, drawer, h, oldStyle, p, pLine, styleAtDrawingCall, w;
  drawer = state.drawer;
  w = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0;
  h = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0;
  p = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 10), new PointDouble(10, 0), new PointDouble(w, 0), new PointDouble(w, h - 10), new PointDouble(w - 10, h)]));
  pLine = new PointDouble(w - 10, 10);
  oldStyle = $cloneFromMe(drawer.style_0);
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  $setForegroundColor(drawer, $getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
  oldStyle.backgroundColor_0 == $getColor(currentTheme, ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))?$setBackgroundColor(drawer, $darken($transparency($getColor_0(currentTheme, WHITE), ($clinit_ColorOwn$Transparency() , BACKGROUND).alpha_0), 80)):$setBackgroundColor(drawer, $darken(oldStyle.backgroundColor_0, 80));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [(checkCriticalElementIndex(0, p.array.length) , castTo(p.array[0], 5)), (checkCriticalElementIndex(1, p.array.length) , castTo(p.array[1], 5)), (checkCriticalElementIndex(2, p.array.length) , castTo(p.array[2], 5)), (checkCriticalElementIndex(3, p.array.length) , castTo(p.array[3], 5)), (checkCriticalElementIndex(4, p.array.length) , castTo(p.array[4], 5)), pLine, (checkCriticalElementIndex(0, p.array.length) , castTo(p.array[0], 5))]));
  drawer.style_0 = $cloneFromMe(oldStyle);
  $drawLines_0(drawer, castTo($toArray_2(p, initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, p.array.length, 0, 1)), 15));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [pLine, (checkCriticalElementIndex(2, p.array.length) , castTo(p.array[2], 5))]));
  styleAtDrawingCall = $cloneFromMe(drawer.style_0);
  $addDrawable(drawer, new DrawHandlerGwt$5(drawer, styleAtDrawingCall, 0, 10, w - 10, h - 10));
  $setTopMin(state.buffer, 10);
  state.buffer.right += 10;
}
;
_.getId = function getId_4(){
  return $clinit_ElementId() , UMLDeployment;
}
;
var Lcom_baselet_element_elementnew_uml_Deployment_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Deployment', 734);
function Deployment$1(){
  $clinit_Settings();
}

defineClass(735, 1065, {}, Deployment$1);
_.createFacets = function createFacets_4(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
var Lcom_baselet_element_elementnew_uml_Deployment$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Deployment/1', 735);
function Frame_0(){
  NewGridElement.call(this);
}

defineClass(736, 68, $intern_13, Frame_0);
_.createSettings = function createSettings_5(){
  return new Frame$1;
}
;
_.drawCommonContent = function drawCommonContent_5(state){
  var corner, drawer, heightOfTitle, line, line$iterator, line$iterator0, lowerLeftSpace, packageTitleResponse, printHeightIter, rightSpace, style, textDistanceToTop, top_0, width_0;
  drawer = state.drawer;
  $drawRectangle_1(drawer, 0, 0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0);
  packageTitleResponse = castTo($getFacetResponse(state, Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit, null), 133);
  if (packageTitleResponse) {
    top_0 = state.buffer.top_0;
    textDistanceToTop = 5 + top_0;
    heightOfTitle = 5 + textDistanceToTop;
    width_0 = 0;
    for (line$iterator0 = new ArrayList$1(packageTitleResponse.lines); line$iterator0.i < line$iterator0.this$01.array.length;) {
      line = castToString($next_3(line$iterator0));
      width_0 = $wnd.Math.max(width_0, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(line))).width_0);
      heightOfTitle += $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
    }
    corner = heightOfTitle * 0.4;
    rightSpace = corner * 1.5;
    lowerLeftSpace = $doubleValue_0($getXLimits(state, heightOfTitle).left_0);
    width_0 += rightSpace + lowerLeftSpace;
    style = $cloneFromMe(drawer.style_0);
    $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(width_0, top_0), new PointDouble(width_0, heightOfTitle - corner), new PointDouble(width_0 - corner, heightOfTitle), new PointDouble(lowerLeftSpace, heightOfTitle)]));
    drawer.style_0 = $cloneFromMe(style);
    $setTopMin(state.buffer, heightOfTitle);
    printHeightIter = textDistanceToTop;
    for (line$iterator = new ArrayList$1(packageTitleResponse.lines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      printHeightIter += $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
      $print_0(drawer, line, lowerLeftSpace + 5, printHeightIter, ($clinit_AlignHorizontal() , LEFT));
    }
  }
}
;
_.getId = function getId_5(){
  return $clinit_ElementId() , UMLFrame;
}
;
var Lcom_baselet_element_elementnew_uml_Frame_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Frame', 736);
function Frame$1(){
  $clinit_Settings();
}

defineClass(738, 1065, {}, Frame$1);
_.createFacets = function createFacets_5(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_TextBeforeFirstSeparatorCollectorFacet() , INSTANCE_11), ($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
var Lcom_baselet_element_elementnew_uml_Frame$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Frame/1', 738);
function Generic(){
  NewGridElement.call(this);
}

defineClass(739, 68, $intern_13, Generic);
_.createSettings = function createSettings_6(){
  return new Generic$1;
}
;
_.drawCommonContent = function drawCommonContent_6(state){
  var symbol;
  $drawRectangle_1(state.drawer, 0, 0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0);
  symbol = castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_specific_UpperRightSymbolFacet_2_classLit, null), 164);
  !!symbol && drawAndSetBuffer(state, symbol);
}
;
_.getId = function getId_6(){
  return $clinit_ElementId() , UMLGeneric;
}
;
var Lcom_baselet_element_elementnew_uml_Generic_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Generic', 739);
function Generic$1(){
  $clinit_Settings();
}

defineClass(741, 1065, {}, Generic$1);
_.createFacets = function createFacets_6(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_UpperRightSymbolFacet() , INSTANCE_23), ($clinit_SeparatorLineWithHalignChangeFacet() , INSTANCE_10)]));
}
;
var Lcom_baselet_element_elementnew_uml_Generic$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Generic/1', 741);
function Hierarchy(){
  NewGridElement.call(this);
}

defineClass(762, 68, $intern_13, Hierarchy);
_.createSettings = function createSettings_7(){
  return new Hierarchy$1;
}
;
_.drawCommonContent = function drawCommonContent_7(state){
  $drawRectangle_1(state.drawer, 0, 0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).width_0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).height_0);
}
;
_.getId = function getId_7(){
  return $clinit_ElementId() , UMLHierarchy;
}
;
var Lcom_baselet_element_elementnew_uml_Hierarchy_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Hierarchy', 762);
function Hierarchy$1(){
  $clinit_Settings();
}

defineClass(763, $intern_16, {}, Hierarchy$1);
_.createFacets = function createFacets_7(){
  return HIERARCHY;
}
;
_.getElementStyle = function getElementStyle_1(){
  return $clinit_ElementStyle() , SIMPLE;
}
;
_.getHAlign = function getHAlign_0(){
  return $clinit_AlignHorizontal() , LEFT;
}
;
var Lcom_baselet_element_elementnew_uml_Hierarchy$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Hierarchy/1', 763);
function Interface(){
  NewGridElement.call(this);
  this.interfacePolygonGenerator = new Interface$1(this);
}

defineClass(742, 68, $intern_13, Interface);
_.createSettings = function createSettings_8(){
  return new SettingsAutoresize;
}
;
_.drawCommonContent = function drawCommonContent_8(state){
  var circleRect, drawer, middlePos;
  drawer = state.drawer;
  $setTopMin(state.buffer, 30);
  circleRect = (middlePos = round_int((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 * 0.5 - 10) , new Rectangle_0(middlePos, 10, 20, 20));
  $drawCircle_0(drawer, circleRect.x_0 + 10, circleRect.y_0 + 10, 10);
  $setStickingPolygonGenerator(state, this.interfacePolygonGenerator);
}
;
_.getId = function getId_8(){
  return $clinit_ElementId() , UMLInterface;
}
;
var Lcom_baselet_element_elementnew_uml_Interface_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Interface', 742);
function Interface$1(this$0){
  this.this$01 = this$0;
}

defineClass(743, 1, {}, Interface$1);
_.generateStickingBorder_0 = function generateStickingBorder_1(rect){
  var middlePos, p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addRectangle_0(p, (middlePos = round_int($getRealSize(this.this$01).width_0 * 0.5 - 10) , new Rectangle_0(middlePos, 10, 20, 20)));
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_Interface$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Interface/1', 743);
function Note(){
  NewGridElement.call(this);
}

defineClass(744, 68, $intern_13, Note);
_.createSettings = function createSettings_9(){
  return new SettingsText;
}
;
_.drawCommonContent = function drawCommonContent_9(state){
  var drawer, h, w;
  drawer = state.drawer;
  w = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0;
  h = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0;
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(w - 12, 0), new PointDouble(w, 12), new PointDouble(w, h), new PointDouble(0, h), new PointDouble(0, 0)]));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(w - 12, 0), new PointDouble(w - 12, 12), new PointDouble(w, 12)]));
}
;
_.getId = function getId_9(){
  return $clinit_ElementId() , UMLNote;
}
;
var Lcom_baselet_element_elementnew_uml_Note_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Note', 744);
function Package(){
  NewGridElement.call(this);
}

defineClass(747, 68, $intern_13, Package);
_.createSettings = function createSettings_10(){
  return new Package$1;
}
;
_.drawCommonContent = function drawCommonContent_10(state){
  var drawer, height, line, line$iterator, packageHeight, packageTitle, packageWidth, points, txtHeight, width_0, packageTitleResponse, packageTitle_0;
  drawer = state.drawer;
  packageTitle = (packageTitleResponse = castTo($getFacetResponse(state, Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit, null), 133) , packageTitleResponse?(packageTitle_0 = packageTitleResponse.lines):(packageTitle_0 = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['']))) , packageTitle_0);
  packageHeight = 0;
  packageWidth = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 / 2.5;
  txtHeight = $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3;
  for (line$iterator = packageTitle.iterator(); line$iterator.hasNext_0();) {
    line = castToString(line$iterator.next_1());
    packageHeight += txtHeight;
    packageWidth = $wnd.Math.max(packageWidth, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(line))).width_0 + 10);
    drawer.layer = 0;
    $print_1(drawer, line, new PointDouble(5, packageHeight), ($clinit_AlignHorizontal() , LEFT));
    drawer.layer = 1;
  }
  packageHeight += 5;
  height = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0;
  width_0 = (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0;
  points = drawPackage(drawer, 0, 0, packageHeight, packageWidth, height, width_0);
  $setTopMin(state.buffer, packageHeight);
  $setStickingPolygonGenerator(state, new PointDoubleStickingPolygonGenerator(points));
}
;
_.getId = function getId_10(){
  return $clinit_ElementId() , UMLPackage;
}
;
var Lcom_baselet_element_elementnew_uml_Package_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Package', 747);
function Package$1(){
  $clinit_Settings();
}

defineClass(748, 1064, {}, Package$1);
_.createFacets = function createFacets_8(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_TextBeforeFirstSeparatorCollectorFacet() , INSTANCE_11), ($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
var Lcom_baselet_element_elementnew_uml_Package$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Package/1', 748);
function SequenceAllInOne(){
  NewGridElement.call(this);
}

defineClass(764, 68, $intern_13, SequenceAllInOne);
_.createSettings = function createSettings_11(){
  return new SequenceAllInOne$1;
}
;
_.drawCommonContent = function drawCommonContent_11(state){
}
;
_.getId = function getId_11(){
  return $clinit_ElementId() , UMLSequenceAllInOne;
}
;
var Lcom_baselet_element_elementnew_uml_SequenceAllInOne_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SequenceAllInOne', 764);
function SequenceAllInOne$1(){
  $clinit_Settings();
}

defineClass(765, $intern_16, {}, SequenceAllInOne$1);
_.createFacets = function createFacets_9(){
  return listOf(BASE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_FontSizeFacet() , INSTANCE_2), ($clinit_CustomDrawingFacet() , INSTANCE_15), ($clinit_SequenceAllInOneFacet() , INSTANCE_26)]));
}
;
_.getElementStyle = function getElementStyle_2(){
  return $clinit_ElementStyle() , AUTORESIZE;
}
;
_.getHAlign = function getHAlign_1(){
  return $clinit_AlignHorizontal() , LEFT;
}
;
var Lcom_baselet_element_elementnew_uml_SequenceAllInOne$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SequenceAllInOne/1', 765);
function SpecialState(){
  NewGridElement.call(this);
}

defineClass(749, 68, $intern_13, SpecialState);
_.createSettings = function createSettings_12(){
  return new SpecialState$1;
}
;
_.drawCommonContent = function drawCommonContent_12(state){
}
;
_.getId = function getId_12(){
  return $clinit_ElementId() , UMLSpecialState;
}
;
var Lcom_baselet_element_elementnew_uml_SpecialState_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SpecialState', 749);
function SpecialState$1(){
  $clinit_Settings();
}

defineClass(750, 1064, {}, SpecialState$1);
_.createFacets = function createFacets_10(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SpecialStateTypeFacet() , INSTANCE_19)]));
}
;
var Lcom_baselet_element_elementnew_uml_SpecialState$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SpecialState/1', 750);
function State(){
  NewGridElement.call(this);
}

defineClass(751, 68, $intern_13, State);
_.createSettings = function createSettings_13(){
  return new State$1;
}
;
_.drawCommonContent = function drawCommonContent_13(state){
}
;
_.getId = function getId_13(){
  return $clinit_ElementId() , UMLState;
}
;
var Lcom_baselet_element_elementnew_uml_State_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'State', 751);
function State$1(){
  $clinit_Settings();
}

defineClass(752, 1064, {}, State$1);
_.createFacets = function createFacets_11(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineWithHalignChangeFacet() , INSTANCE_10), ($clinit_StateTypeFacet() , INSTANCE_20), ($clinit_SubStateSymbolFacet() , INSTANCE_21)]));
}
;
var Lcom_baselet_element_elementnew_uml_State$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'State/1', 752);
function SyncBarHorizontal(){
  NewGridElement.call(this);
}

defineClass(753, 68, $intern_13, SyncBarHorizontal);
_.createSettings = function createSettings_14(){
  return new SettingsNoText;
}
;
_.drawCommonContent = function drawCommonContent_14(state){
  var drawer, s;
  drawer = state.drawer;
  drawer.style_0.lineWidth_0 == 1 && ($assertDoubleRange(5) , drawer.style_0.lineWidth_0 = 5 , undefined);
  s = new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0);
  $drawLine(drawer, 0, s.height_0 * 0.5, s.width_0, s.height_0 * 0.5);
  $setStickingPolygonGenerator(state, new SyncBarHorizontal$1(this, state));
}
;
_.getId = function getId_14(){
  return $clinit_ElementId() , UMLSyncBarHorizontal;
}
;
var Lcom_baselet_element_elementnew_uml_SyncBarHorizontal_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SyncBarHorizontal', 753);
function SyncBarHorizontal$1(this$0, val$state){
  this.this$01 = this$0;
  this.val$state2 = val$state;
}

defineClass(754, 1, {}, SyncBarHorizontal$1);
_.generateStickingBorder_0 = function generateStickingBorder_2(rect){
  var halfHeight, lt, p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  lt = this.val$state2.drawer.style_0.lineWidth_0;
  halfHeight = $getRealSize(this.this$01).height_0 * 0.5;
  $addRectangle_0(p, new Rectangle_1(0, halfHeight - lt * 0.5, $getRealSize(this.this$01).width_0, lt));
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_SyncBarHorizontal$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SyncBarHorizontal/1', 754);
function SyncBarVertical(){
  NewGridElement.call(this);
}

defineClass(755, 68, $intern_13, SyncBarVertical);
_.createSettings = function createSettings_15(){
  return new SettingsNoText;
}
;
_.drawCommonContent = function drawCommonContent_15(state){
  var drawer, s;
  drawer = state.drawer;
  drawer.style_0.lineWidth_0 == 1 && ($assertDoubleRange(5) , drawer.style_0.lineWidth_0 = 5 , undefined);
  s = new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0);
  $drawLine(drawer, s.width_0 * 0.5, 0, s.width_0 * 0.5, s.height_0);
  $setStickingPolygonGenerator(state, new SyncBarVertical$1(this, state));
}
;
_.getId = function getId_15(){
  return $clinit_ElementId() , UMLSyncBarVertical;
}
;
var Lcom_baselet_element_elementnew_uml_SyncBarVertical_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SyncBarVertical', 755);
function SyncBarVertical$1(this$0, val$state){
  this.this$01 = this$0;
  this.val$state2 = val$state;
}

defineClass(756, 1, {}, SyncBarVertical$1);
_.generateStickingBorder_0 = function generateStickingBorder_3(rect){
  var halfWidth, lt, p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  lt = this.val$state2.drawer.style_0.lineWidth_0;
  halfWidth = $getRealSize(this.this$01).width_0 * 0.5;
  $addRectangle_0(p, new Rectangle_1(halfWidth - lt * 0.5, 0, lt, $getRealSize(this.this$01).height_0));
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_SyncBarVertical$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'SyncBarVertical/1', 756);
function $xClock(this$static){
  return ((new Dimension($zoom(this$static, $copy_0(this$static.component.rect_0).width_0), $zoom(this$static, $copy_0(this$static.component.rect_0).height_0))).width_0 - 40) / 2 | 0;
}

function Timer(){
  NewGridElement.call(this);
  this.timerStickingPolygonGenerator = new Timer$1(this);
}

defineClass(757, 68, $intern_13, Timer);
_.createSettings = function createSettings_16(){
  return new SettingsAutoresize;
}
;
_.drawCommonContent = function drawCommonContent_16(state){
  var drawer;
  drawer = state.drawer;
  state.minimumWidth = $wnd.Math.max(state.minimumWidth, 40);
  $setTopMin(state.buffer, 40);
  $drawLines(drawer, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 - 40) / 2 | 0, 0), new PointDouble((((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 - 40) / 2 | 0) + 40, 40), new PointDouble(((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 - 40) / 2 | 0, 40), new PointDouble((((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 - 40) / 2 | 0) + 40, 0), new PointDouble(((new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0 - 40) / 2 | 0, 0)])));
  $setStickingPolygonGenerator(state, this.timerStickingPolygonGenerator);
}
;
_.getId = function getId_16(){
  return $clinit_ElementId() , UMLTimer;
}
;
var Lcom_baselet_element_elementnew_uml_Timer_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Timer', 757);
function Timer$1(this$0){
  this.this$01 = this$0;
}

defineClass(758, 1, {}, Timer$1);
_.generateStickingBorder_0 = function generateStickingBorder_4(rect){
  var p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addPoint(p, $xClock(this.this$01), 0);
  $addPoint(p, (($getRealSize(this.this$01).width_0 - 40) / 2 | 0) + 40, 40);
  $addPoint(p, $xClock(this.this$01), 40);
  $addPoint_0(p, (($getRealSize(this.this$01).width_0 - 40) / 2 | 0) + 40, 0);
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_Timer$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'Timer/1', 758);
function UseCase(){
  NewGridElement.call(this);
  this.stickingPolygonGenerator = new UseCase$1;
}

defineClass(759, 68, $intern_13, UseCase);
_.createSettings = function createSettings_17(){
  return new UseCase$2;
}
;
_.drawCommonContent = function drawCommonContent_17(state){
  var drawer;
  drawer = state.drawer;
  $drawEllipse_0(drawer, 0, 0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).width_0, (new Dimension($zoom(this, $copy_0(this.component.rect_0).width_0), $zoom(this, $copy_0(this.component.rect_0).height_0))).height_0);
  $setStickingPolygonGenerator(state, this.stickingPolygonGenerator);
}
;
_.getId = function getId_17(){
  return $clinit_ElementId() , UMLUseCase;
}
;
var Lcom_baselet_element_elementnew_uml_UseCase_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'UseCase', 759);
function UseCase$1(){
}

defineClass(760, 1, {}, UseCase$1);
_.generateStickingBorder_0 = function generateStickingBorder_5(rect){
  var p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addPoint(p, rect.width_0 / 4, 0);
  $addPoint(p, rect.width_0 * 3 / 4, 0);
  $addPoint(p, rect.width_0, rect.height_0 / 4);
  $addPoint(p, rect.width_0, rect.height_0 * 3 / 4);
  $addPoint(p, rect.width_0 * 3 / 4, rect.height_0);
  $addPoint(p, rect.width_0 / 4, rect.height_0);
  $addPoint(p, 0, rect.height_0 * 3 / 4);
  $addPoint_0(p, 0, round_int(rect.height_0 / 4));
  return p;
}
;
var Lcom_baselet_element_elementnew_uml_UseCase$1_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'UseCase/1', 760);
function UseCase$2(){
  $clinit_Settings();
}

defineClass(761, 1064, {}, UseCase$2);
_.createFacets = function createFacets_12(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
_.getXValues = function getXValues_0(y_0, height, width_0){
  return createForEllipse(y_0, height, width_0);
}
;
var Lcom_baselet_element_elementnew_uml_UseCase$2_2_classLit = createForClass('com.baselet.element.elementnew.uml', 'UseCase/2', 761);
function $reset(this$static){
  $setHorizontal(this$static, false, this$static.horizontalDefault);
  $setVertical(this$static, false, this$static.verticalDefault);
}

function $setHorizontal(this$static, setGlobal, horizontal){
  if (setGlobal) {
    this$static.horizontalGloballySet = true;
    this$static.horizontal = horizontal;
  }
   else 
    this$static.horizontalGloballySet || (this$static.horizontal = horizontal);
}

function $setVertical(this$static, setGlobal, vertical){
  if (setGlobal) {
    this$static.verticalGloballySet = true;
    this$static.vertical = vertical;
  }
   else 
    this$static.verticalGloballySet || (this$static.vertical = vertical);
}

function Alignment(settings){
  this.horizontalDefault = settings.getHAlign();
  this.verticalDefault = settings.getVAlign();
  this.horizontal = this.horizontalDefault;
  this.vertical = this.verticalDefault;
  this.horizontalGloballySet = false;
  this.verticalGloballySet = false;
}

defineClass(857, 1, {}, Alignment);
_.horizontalGloballySet = false;
_.verticalGloballySet = false;
var Lcom_baselet_element_facet_Alignment_2_classLit = createForClass('com.baselet.element.facet', 'Alignment', 857);
function $addToLeft(this$static, inc){
  this$static.left_0 += inc;
}

function $addToLeftAndRight(this$static, inc){
  this$static.left_0 += inc;
  this$static.right += inc;
}

function $addToRight(this$static, inc){
  this$static.right += inc;
}

function $setTopMin(this$static, newMin){
  this$static.top_0 = $wnd.Math.max(this$static.top_0, newMin);
}

function Buffer(){
}

defineClass(858, 1, {}, Buffer);
_.left_0 = 0;
_.right = 0;
_.top_0 = 0;
var Lcom_baselet_element_facet_Buffer_2_classLit = createForClass('com.baselet.element.facet', 'Buffer', 858);
function FirstRunFacet(){
  Facet.call(this);
}

defineClass(281, 19, $intern_15);
_.handleOnFirstRun = function handleOnFirstRun_0(){
  return true;
}
;
var Lcom_baselet_element_facet_FirstRunFacet_2_classLit = createForClass('com.baselet.element.facet', 'FirstRunFacet', 281);
function $extractValue(this$static, line){
  return $substring(line, (this$static.getKeyValue().key + '=').length);
}

function KeyValueFacet(){
  Facet.call(this);
}

defineClass(278, 19, $intern_15);
_.checkStart = function checkStart_0(line, state){
  return $startsWith(line, this.getKeyValue().key + '=');
}
;
_.handleLine = function handleLine_0(line, state){
  var e, errorMessage, value_0;
  value_0 = $substring(line, (this.getKeyValue().key + '=').length);
  try {
    this.handleValue(value_0, state);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      e = $e0;
      $debug_2(this.log_1, e);
      errorMessage = $getValueString(this.getKeyValue());
      instanceOf(e, 72) && (errorMessage = e.getMessage());
      throw toJs(new RuntimeException_0(($clinit_FormatLabels() , BOLD).value_0 + 'Invalid value:' + BOLD.value_0 + '\n' + (this.getKeyValue().key + '=') + value_0 + '\n' + errorMessage));
    }
     else 
      throw toJs($e0);
  }
}
;
var Lcom_baselet_element_facet_KeyValueFacet_2_classLit = createForClass('com.baselet.element.facet', 'KeyValueFacet', 278);
function FirstRunKeyValueFacet(){
  KeyValueFacet.call(this);
}

defineClass(86, 278, $intern_15);
_.handleOnFirstRun = function handleOnFirstRun_1(){
  return true;
}
;
var Lcom_baselet_element_facet_FirstRunKeyValueFacet_2_classLit = createForClass('com.baselet.element.facet', 'FirstRunKeyValueFacet', 86);
function $getValueString(this$static){
  var sb, vi, vi$iterator;
  sb = new StringBuilder;
  if (this$static.allValuesListed) {
    sb.string += 'Valid are: ';
    for (vi$iterator = this$static.valueInfos.iterator(); vi$iterator.hasNext_0();) {
      vi = castTo(vi$iterator.next_1(), 33);
      $append_1($append_5(sb, $toLowerCase(toString_36(vi.value_0), ($clinit_Locale() , ENGLISH))), 44);
    }
    $deleteCharAt(sb, sb.string.length - 1);
  }
   else {
    for (vi$iterator = this$static.valueInfos.iterator(); vi$iterator.hasNext_0();) {
      vi = castTo(vi$iterator.next_1(), 33);
      $append_5(sb, vi.info_0);
    }
  }
  return sb.string;
}

function KeyValueFacet$KeyValue(key, valueInfos){
  this.key = key;
  this.allValuesListed = true;
  this.valueInfos = valueInfos;
}

function KeyValueFacet$KeyValue_0(key, value_0, info){
  this.key = $toLowerCase(key, ($clinit_Locale() , ENGLISH));
  this.allValuesListed = false;
  this.valueInfos = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(value_0, info)]));
}

function KeyValueFacet$KeyValue_1(key, valueInfos){
  KeyValueFacet$KeyValue.call(this, key, new Arrays$ArrayList(valueInfos));
}

defineClass(69, 1, {}, KeyValueFacet$KeyValue, KeyValueFacet$KeyValue_0, KeyValueFacet$KeyValue_1);
_.allValuesListed = false;
var Lcom_baselet_element_facet_KeyValueFacet$KeyValue_2_classLit = createForClass('com.baselet.element.facet', 'KeyValueFacet/KeyValue', 69);
function KeyValueFacet$ValueInfo(value_0, info){
  KeyValueFacet$ValueInfo_0.call(this, value_0, info, null);
}

function KeyValueFacet$ValueInfo_0(value_0, info, base64Img){
  this.value_0 = value_0;
  this.info_0 = info;
  this.base64Img = base64Img;
}

defineClass(33, 1, {33:1}, KeyValueFacet$ValueInfo, KeyValueFacet$ValueInfo_0);
var Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit = createForClass('com.baselet.element.facet', 'KeyValueFacet/ValueInfo', 33);
function $getFacetResponse(this$static, facetClass, defaultValue){
  var mapValue;
  mapValue = $get_0(this$static.facetResponse, facetClass);
  if (mapValue == null) {
    return defaultValue;
  }
  return mapValue;
}

function $getOrInitFacetResponse(this$static, facetClass, defaultValue){
  var mapValue;
  mapValue = $getFacetResponse(this$static, facetClass, defaultValue);
  $put(this$static.facetResponse, facetClass, mapValue);
  return mapValue;
}

function $getXLimits(this$static, linePos){
  var xLimits;
  xLimits = this$static.settings.getXValues(linePos, this$static.gridElementSize.height_0, this$static.gridElementSize.width_0);
  $addLeft(xLimits, this$static.buffer.left_0);
  $subRight(xLimits, this$static.buffer.right);
  return xLimits;
}

function $getXLimitsForArea(this$static, bottomYPos, areaHeight, nanPriority){
  var xLimits, xLimitsBottom, xLimitsTop;
  xLimitsTop = $getXLimits(this$static, bottomYPos - areaHeight);
  xLimitsBottom = $getXLimits(this$static, bottomYPos);
  xLimits = $intersect(xLimitsTop, xLimitsBottom, nanPriority);
  return xLimits;
}

function $increaseTextPrintPosition(this$static, inc){
  this$static.textPrintPosition += inc;
}

function $resetValues(this$static, gridElementSize, totalTextBlockHeight, enableDrawing){
  this$static.alignment = new Alignment(this$static.settings);
  this$static.textPrintPosition = 0;
  this$static.minimumWidth = 0;
  this$static.buffer = new Buffer;
  this$static.gridElementSize = gridElementSize;
  this$static.elementStyle = this$static.settings.getElementStyle();
  this$static.stickingPolygonGenerator = ($clinit_SimpleStickingPolygonGenerator() , INSTANCE_28);
  this$static.totalTextBlockHeight = totalTextBlockHeight;
  $reset_0(this$static.facetResponse);
  $setEnableDrawing(this$static.drawer, enableDrawing);
}

function $setElementStyle(this$static, elementStyle){
  this$static.elementStyle = elementStyle;
}

function $setFacetResponse(this$static, facetClass, value_0){
  $put(this$static.facetResponse, facetClass, value_0);
}

function $setStickingPolygonGenerator(this$static, stickingPolygonGenerator){
  this$static.stickingPolygonGenerator = stickingPolygonGenerator;
}

function $updateMinimumSize(this$static, width_0, height){
  this$static.minimumWidth = $wnd.Math.max(this$static.minimumWidth, width_0);
  $setTopMin(this$static.buffer, height);
}

function $updateMinimumWidth(this$static, width_0){
  this$static.minimumWidth = $wnd.Math.max(this$static.minimumWidth, width_0);
}

function PropertiesParserState(settings, drawer){
  this.stickingPolygonGenerator = ($clinit_SimpleStickingPolygonGenerator() , INSTANCE_28);
  this.facetResponse = new HashMap;
  this.settings = settings;
  this.drawer = drawer;
}

defineClass(766, 1, {}, PropertiesParserState);
_.minimumWidth = 0;
_.textPrintPosition = 0;
_.totalTextBlockHeight = 0;
var Lcom_baselet_element_facet_PropertiesParserState_2_classLit = createForClass('com.baselet.element.facet', 'PropertiesParserState', 766);
function $compare(o1, o2){
  return $compareTo(o1.getPriority(), o2.getPriority());
}

function Settings$1(){
}

defineClass(728, 1, {}, Settings$1);
_.compare = function compare_0(o1, o2){
  return $compare(castTo(o1, 19), castTo(o2, 19));
}
;
_.equals_0 = function equals_12(other){
  return this === other;
}
;
var Lcom_baselet_element_facet_Settings$1_2_classLit = createForClass('com.baselet.element.facet', 'Settings/1', 728);
function $clinit_BackgroundColorFacet(){
  $clinit_BackgroundColorFacet = emptyMethod;
  INSTANCE = new BackgroundColorFacet;
}

function BackgroundColorFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(893, 86, $intern_15, BackgroundColorFacet);
_.getKeyValue = function getKeyValue(){
  return new KeyValueFacet$KeyValue_0('bg', 'red', 'background color string (green,...) or code (#3c7a00,...)');
}
;
_.handleValue = function handleValue(value_0, state){
  $setBackgroundColorAndKeepTransparency(state.drawer, value_0);
}
;
var INSTANCE;
var Lcom_baselet_element_facet_common_BackgroundColorFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'BackgroundColorFacet', 893);
function $clinit_CommentFacet(){
  $clinit_CommentFacet = emptyMethod;
  INSTANCE_0 = new CommentFacet;
}

function CommentFacet(){
  FirstRunFacet.call(this);
}

defineClass(897, 281, $intern_15, CommentFacet);
_.checkStart = function checkStart_1(line, state){
  return $equals_6(line.substr(0, 2), '//');
}
;
_.getPriority = function getPriority_0(){
  return $clinit_Priority() , HIGHEST;
}
;
_.handleLine = function handleLine_1(line, state){
}
;
var INSTANCE_0;
var Lcom_baselet_element_facet_common_CommentFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'CommentFacet', 897);
function $clinit_ElementStyleFacet(){
  $clinit_ElementStyleFacet = emptyMethod;
  NORESIZE_VALUE = new KeyValueFacet$ValueInfo(($clinit_ElementStyle() , NORESIZE), 'disable manual resizing');
  WORDWRAP_VALUE = new KeyValueFacet$ValueInfo(WORDWRAP, 'wrap lines at the end of the line');
  AUTORESIZE_VALUE = new KeyValueFacet$ValueInfo(AUTORESIZE, 'resizes element as text grows');
  INSTANCE_1 = new ElementStyleFacet(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [AUTORESIZE_VALUE, WORDWRAP_VALUE, NORESIZE_VALUE]));
  INSTANCE_AUTORESIZEONLY = new ElementStyleFacet(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [AUTORESIZE_VALUE]));
}

function ElementStyleFacet(valueInfo){
  FirstRunKeyValueFacet.call(this);
  this.valueInfo = valueInfo;
}

defineClass(357, 86, $intern_15, ElementStyleFacet);
_.getKeyValue = function getKeyValue_0(){
  return new KeyValueFacet$KeyValue_1('style', this.valueInfo);
}
;
_.handleValue = function handleValue_0(value_0, state){
  $setElementStyle(state, valueOf_3($toUpperCase(value_0, ($clinit_Locale() , ENGLISH))));
}
;
var AUTORESIZE_VALUE, INSTANCE_1, INSTANCE_AUTORESIZEONLY, NORESIZE_VALUE, WORDWRAP_VALUE;
var Lcom_baselet_element_facet_common_ElementStyleFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'ElementStyleFacet', 357);
function $clinit_FontSizeFacet(){
  $clinit_FontSizeFacet = emptyMethod;
  INSTANCE_2 = new FontSizeFacet;
}

function FontSizeFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(901, 86, $intern_15, FontSizeFacet);
_.getKeyValue = function getKeyValue_1(){
  return new KeyValueFacet$KeyValue_0('fontsize', '12', 'font size as decimal number (12.5, 10.3,...)');
}
;
_.handleValue = function handleValue_1(value_0, state){
  try {
    $setFontSize(state.drawer, $doubleValue_0(__parseAndValidateDouble(value_0)));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      throw toJs(new StyleException('value must be a decimal number'));
    }
     else 
      throw toJs($e0);
  }
}
;
var INSTANCE_2;
var Lcom_baselet_element_facet_common_FontSizeFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'FontSizeFacet', 901);
function $clinit_ForegroundColorFacet(){
  $clinit_ForegroundColorFacet = emptyMethod;
  INSTANCE_3 = new ForegroundColorFacet;
}

function ForegroundColorFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(895, 86, $intern_15, ForegroundColorFacet);
_.getKeyValue = function getKeyValue_2(){
  return new KeyValueFacet$KeyValue_0('fg', 'red', 'foreground color string (green,...) or code (#3c7a00,...)');
}
;
_.handleValue = function handleValue_2(value_0, state){
  $setForegroundColor_0(state.drawer, value_0);
}
;
var INSTANCE_3;
var Lcom_baselet_element_facet_common_ForegroundColorFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'ForegroundColorFacet', 895);
function $clinit_GroupFacet(){
  $clinit_GroupFacet = emptyMethod;
  INSTANCE_4 = new GroupFacet;
}

function GroupFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(709, 86, $intern_15, GroupFacet);
_.getKeyValue = function getKeyValue_3(){
  return new KeyValueFacet$KeyValue_0('group', '1', 'grouped elements are selected at once');
}
;
_.handleValue = function handleValue_3(value_0, state){
  try {
    $setFacetResponse(state, Lcom_baselet_element_facet_common_GroupFacet_2_classLit, valueOf_9(__parseAndValidateInt(value_0, 10)));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      throw toJs(new StyleException('value must be a positive or negative integer'));
    }
     else 
      throw toJs($e0);
  }
}
;
var INSTANCE_4;
var Lcom_baselet_element_facet_common_GroupFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'GroupFacet', 709);
function $clinit_HorizontalAlignFacet(){
  $clinit_HorizontalAlignFacet = emptyMethod;
  INSTANCE_5 = new HorizontalAlignFacet;
}

function HorizontalAlignFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(904, 86, $intern_15, HorizontalAlignFacet);
_.getKeyValue = function getKeyValue_4(){
  return new KeyValueFacet$KeyValue_1('halign', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_AlignHorizontal() , LEFT), 'horizontal text alignment'), new KeyValueFacet$ValueInfo(CENTER, 'horizontal text alignment'), new KeyValueFacet$ValueInfo(RIGHT, 'horizontal text alignment')]));
}
;
_.handleValue = function handleValue_4(value_0, state){
  $setHorizontal(state.alignment, true, valueOf_0($toUpperCase(value_0, ($clinit_Locale() , ENGLISH))));
}
;
var INSTANCE_5;
var Lcom_baselet_element_facet_common_HorizontalAlignFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'HorizontalAlignFacet', 904);
function $clinit_LayerFacet(){
  $clinit_LayerFacet = emptyMethod;
  INSTANCE_6 = new LayerFacet;
  DEFAULT_VALUE = valueOf_9(0);
  DEFAULT_VALUE_RELATION = valueOf_9(1);
}

function LayerFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(708, 86, $intern_15, LayerFacet);
_.getKeyValue = function getKeyValue_5(){
  return new KeyValueFacet$KeyValue_0('layer', '' + DEFAULT_VALUE.value_0, 'higher layers are shown on top of lowers. (-5, 0(=default), 3,...)');
}
;
_.handleValue = function handleValue_5(value_0, state){
  try {
    $setFacetResponse(state, Lcom_baselet_element_facet_common_LayerFacet_2_classLit, valueOf_9(__parseAndValidateInt(value_0, 10)));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      throw toJs(new StyleException('value must be a positive or negative integer'));
    }
     else 
      throw toJs($e0);
  }
}
;
var DEFAULT_VALUE, DEFAULT_VALUE_RELATION, INSTANCE_6;
var Lcom_baselet_element_facet_common_LayerFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'LayerFacet', 708);
function $clinit_LineTypeFacet(){
  $clinit_LineTypeFacet = emptyMethod;
  INSTANCE_7 = new LineTypeFacet;
}

function LineTypeFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(898, 86, $intern_15, LineTypeFacet);
_.getKeyValue = function getKeyValue_6(){
  var lt, lt$iterator, lts;
  lts = new ArrayList;
  for (lt$iterator = new Collections$UnmodifiableCollectionIterator(($clinit_LineType() , LT_LIST).coll.iterator()); lt$iterator.it.hasNext_0();) {
    lt = castTo(lt$iterator.it.next_1(), 90);
    $add_13(lts, new KeyValueFacet$ValueInfo(lt.value_0, (lt.name_0 != null?lt.name_0:'' + lt.ordinal).toLowerCase() + ' lines'));
  }
  return new KeyValueFacet$KeyValue('lt', lts);
}
;
_.handleValue = function handleValue_6(value_0, state){
  var lt, s, s$iterator;
  lt = null;
  for (s$iterator = new Collections$UnmodifiableCollectionIterator(($clinit_LineType() , LT_LIST).coll.iterator()); s$iterator.it.hasNext_0();) {
    s = castTo(s$iterator.it.next_1(), 90);
    $equals_6(s.value_0, value_0) && (lt = s);
  }
  if (!lt) {
    throw toJs(new RuntimeException);
  }
  $setLineType(state.drawer, lt);
}
;
var INSTANCE_7;
var Lcom_baselet_element_facet_common_LineTypeFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'LineTypeFacet', 898);
function $clinit_LineWidthFacet(){
  $clinit_LineWidthFacet = emptyMethod;
  INSTANCE_8 = new LineWidthFacet;
}

function LineWidthFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(896, 86, $intern_15, LineWidthFacet);
_.getKeyValue = function getKeyValue_7(){
  return new KeyValueFacet$KeyValue_0('lw', '1.0', 'linewidth as decimal number (1.5, 2, ...)');
}
;
_.handleValue = function handleValue_7(value_0, state){
  $setLineWidth(state.drawer, (new Float(value_0)).value_0);
}
;
var INSTANCE_8;
var Lcom_baselet_element_facet_common_LineWidthFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'LineWidthFacet', 896);
function $clinit_SeparatorLineFacet(){
  $clinit_SeparatorLineFacet = emptyMethod;
  INSTANCE_9 = new SeparatorLineFacet;
}

function $handleLine(this$static, line, state){
  var drawer, linePos, ltBefore, ltForLine, xPos;
  drawer = state.drawer;
  ltBefore = drawer.style_0.lineType;
  ltForLine = castTo($getStringValue(this$static.variants, line), 90);
  !!ltForLine && $setLineType_0(drawer.style_0, ltForLine);
  drawer.layer = 0;
  linePos = state.textPrintPosition + state.buffer.top_0 - $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 2.5;
  xPos = $getXLimits(state, linePos);
  $drawLine(drawer, $doubleValue_0(xPos.left_0) + 0.5, linePos, $doubleValue_0(xPos.right) - 1, linePos);
  state.textPrintPosition += 5;
  drawer.layer = 1;
  $setLineType_0(drawer.style_0, ltBefore);
}

function SeparatorLineFacet(){
  $clinit_SeparatorLineFacet();
  var lt, lt$iterator;
  Facet.call(this);
  this.variants = new HashMap;
  $put(this.variants, '-', null);
  for (lt$iterator = new Collections$UnmodifiableCollectionIterator(($clinit_LineType() , LT_LIST).coll.iterator()); lt$iterator.it.hasNext_0();) {
    lt = castTo(lt$iterator.it.next_1(), 90);
    $putStringValue(this.variants, '-' + lt.value_0, lt);
  }
}

defineClass(358, 19, $intern_15, SeparatorLineFacet);
_.checkStart = function checkStart_2(line, state){
  return $hasStringValue(this.variants, line);
}
;
_.handleLine = function handleLine_2(line, state){
  $handleLine(this, line, state);
}
;
var INSTANCE_9;
var Lcom_baselet_element_facet_common_SeparatorLineFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'SeparatorLineFacet', 358);
function $clinit_SeparatorLineWithHalignChangeFacet(){
  $clinit_SeparatorLineWithHalignChangeFacet = emptyMethod;
  $clinit_SeparatorLineFacet();
  INSTANCE_10 = new SeparatorLineWithHalignChangeFacet;
}

function SeparatorLineWithHalignChangeFacet(){
  SeparatorLineFacet.call(this);
}

defineClass(935, 358, $intern_15, SeparatorLineWithHalignChangeFacet);
_.handleLine = function handleLine_3(line, state){
  $setHorizontal(state.alignment, false, ($clinit_AlignHorizontal() , LEFT));
  $handleLine(this, line, state);
}
;
var INSTANCE_10;
var Lcom_baselet_element_facet_common_SeparatorLineWithHalignChangeFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'SeparatorLineWithHalignChangeFacet', 935);
function $clinit_TextBeforeFirstSeparatorCollectorFacet(){
  $clinit_TextBeforeFirstSeparatorCollectorFacet = emptyMethod;
  INSTANCE_11 = new TextBeforeFirstSeparatorCollectorFacet;
}

function TextBeforeFirstSeparatorCollectorFacet(){
  FirstRunFacet.call(this);
}

defineClass(737, 281, $intern_15, TextBeforeFirstSeparatorCollectorFacet);
_.checkStart = function checkStart_3(line, state){
  return !castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit, new TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse), 133).firstSepFound;
}
;
_.getPriority = function getPriority_1(){
  return $clinit_Priority() , LOW;
}
;
_.handleLine = function handleLine_4(line, state){
  if ($equals_6(line, '--')) {
    castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit, new TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse), 133).firstSepFound = true;
    return;
  }
   else {
    $add_13(castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit, new TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse), 133).lines, line);
  }
}
;
var INSTANCE_11;
var Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'TextBeforeFirstSeparatorCollectorFacet', 737);
function TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse(){
  this.lines = new ArrayList;
}

defineClass(133, 1, {133:1}, TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse);
_.firstSepFound = false;
var Lcom_baselet_element_facet_common_TextBeforeFirstSeparatorCollectorFacet$TextBeforeFirstSeparatorCollectorFacetResponse_2_classLit = createForClass('com.baselet.element.facet.common', 'TextBeforeFirstSeparatorCollectorFacet/TextBeforeFirstSeparatorCollectorFacetResponse', 133);
function $clinit_TextPrintFacet(){
  $clinit_TextPrintFacet = emptyMethod;
  INSTANCE_12 = new TextPrintFacet;
}

function TextPrintFacet(){
  Facet.call(this);
}

function calcTopDisplacementToFitLine(firstLine, state, drawer){
  var accumulator, addedSpacePerIteration, availableWidthSpace, displacement, maxLoops, previousWidthSpace, textHeight, wordwrap;
  displacement = state.textPrintPosition + state.buffer.top_0;
  wordwrap = state.elementStyle == ($clinit_ElementStyle() , WORDWRAP);
  if (!wordwrap) {
    textHeight = $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
    addedSpacePerIteration = textHeight / 2;
    availableWidthSpace = $getSpace($getXLimitsForArea(state, displacement, textHeight, true)) - 2;
    accumulator = displacement;
    maxLoops = $intern_19;
    while (accumulator < state.gridElementSize.height_0 && !checkifStringFitsNoWordwrap(firstLine, availableWidthSpace, drawer)) {
      if (maxLoops-- < 0) {
        throw toJs(new RuntimeException_0('Endless loop during calculation of top displacement'));
      }
      accumulator += addedSpacePerIteration;
      previousWidthSpace = availableWidthSpace;
      availableWidthSpace = $getSpace($getXLimitsForArea(state, accumulator, textHeight, true)) - 2;
      availableWidthSpace > previousWidthSpace && (displacement = accumulator);
    }
  }
  return displacement;
}

function printLine(line, drawer, state){
  var hAlign, spaceNotUsedForText, x_0, xLimitsForText;
  xLimitsForText = $getXLimitsForArea(state, state.textPrintPosition + state.buffer.top_0, $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0, false);
  spaceNotUsedForText = state.gridElementSize.width_0 - ($doubleValue_0(xLimitsForText.right) - $doubleValue_0(xLimitsForText.left_0));
  (checkCriticalNotNull(spaceNotUsedForText) , spaceNotUsedForText === NaN) || $updateMinimumWidth(state, (checkCriticalNotNull(spaceNotUsedForText) , spaceNotUsedForText) + $textDimensionHelper(drawer, line).width_0);
  hAlign = state.alignment.horizontal;
  $print(drawer, line, (hAlign == ($clinit_AlignHorizontal() , LEFT)?(x_0 = $doubleValue_0(xLimitsForText.left_0) + 5):hAlign == CENTER?(x_0 = ($doubleValue_0(xLimitsForText.right) - $doubleValue_0(xLimitsForText.left_0)) / 2 + $doubleValue_0(xLimitsForText.left_0)):(x_0 = $doubleValue_0(xLimitsForText.right) - 5) , x_0), state.textPrintPosition + state.buffer.top_0, hAlign);
  $increaseTextPrintPosition(state, $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3);
}

function printLineWithWordWrap(line, drawer, state){
  var currentSpaceForText, lineIndex, spaceForText, wrappedLine;
  spaceForText = $getSpace($getXLimitsForArea(state, state.textPrintPosition + state.buffer.top_0, $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0, false)) - 10;
  wrappedLine = ($clinit_TextSplitter() , splitStringAndHeightAlgorithm(line, spaceForText, drawer).wrappedLines);
  lineIndex = 0;
  while (state.textPrintPosition + state.buffer.top_0 < state.gridElementSize.height_0 && lineIndex < wrappedLine.length) {
    currentSpaceForText = $getSpace($getXLimitsForArea(state, state.textPrintPosition + state.buffer.top_0, $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0, false)) - 10;
    if ($wnd.Math.abs(currentSpaceForText - spaceForText) >= 1.0E-7) {
      line = $trim($substring(line, $indexOf_0(line, wrappedLine[lineIndex - 1].stringWithoutMarkup) + wrappedLine[lineIndex - 1].stringWithoutMarkup.length));
      wrappedLine = splitStringAndHeightAlgorithm(line, spaceForText, drawer).wrappedLines;
      lineIndex = 0;
    }
    printLine(wrappedLine[lineIndex++], drawer, state);
  }
}

function setupAtFirstLine(line, drawer, state){
  var isFirstPrintedLine, returnVal;
  isFirstPrintedLine = $booleanValue(castToBoolean($getFacetResponse(state, Lcom_baselet_element_facet_common_TextPrintFacet_2_classLit, ($clinit_Boolean() , true))));
  if (isFirstPrintedLine) {
    $setTopMin(state.buffer, (returnVal = $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 , state.elementStyle == ($clinit_ElementStyle() , AUTORESIZE)?(returnVal += 10 + state.buffer.top_0):state.alignment.vertical == ($clinit_AlignVertical() , TOP)?(returnVal += 5 + state.buffer.top_0):state.alignment.vertical == CENTER_0?(returnVal += (state.gridElementSize.height_0 - state.totalTextBlockHeight) / 2 + state.buffer.top_0 / 2):(returnVal += state.gridElementSize.height_0 - state.totalTextBlockHeight - $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 / 4) , returnVal));
    $setTopMin(state.buffer, calcTopDisplacementToFitLine(line, state, drawer));
    $setFacetResponse(state, Lcom_baselet_element_facet_common_TextPrintFacet_2_classLit, false);
  }
}

defineClass(900, 19, $intern_15, TextPrintFacet);
_.checkStart = function checkStart_4(line, state){
  return true;
}
;
_.getPriority = function getPriority_2(){
  return $clinit_Priority() , LOWEST;
}
;
_.handleLine = function handleLine_5(line, state){
  var drawer;
  drawer = state.drawer;
  drawer.layer = 0;
  setupAtFirstLine(line, drawer, state);
  state.elementStyle == ($clinit_ElementStyle() , WORDWRAP) && $trim(line).length != 0?printLineWithWordWrap(line, drawer, state):printLine(analyzeFormatLabels(replaceNotEscaped(line)), drawer, state);
  drawer.layer = 1;
}
;
_.parsingFinished = function parsingFinished_0(state, handledLines){
  var heightDiff;
  if (state.elementStyle == ($clinit_ElementStyle() , AUTORESIZE)) {
    heightDiff = -$textDimensionHelper(state.drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
    heightDiff = heightDiff + $textDimensionHelper(state.drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 / 2;
    state.textPrintPosition += heightDiff;
    $updateMinimumWidth(state, state.minimumWidth + 10);
  }
}
;
var INSTANCE_12;
var Lcom_baselet_element_facet_common_TextPrintFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'TextPrintFacet', 900);
function $clinit_TransparencyFacet(){
  $clinit_TransparencyFacet = emptyMethod;
  INSTANCE_13 = new TransparencyFacet;
}

function TransparencyFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(894, 86, $intern_15, TransparencyFacet);
_.getKeyValue = function getKeyValue_8(){
  return new KeyValueFacet$KeyValue_0('transparency', '0', 'background color transparency in percent');
}
;
_.handleValue = function handleValue_8(value_0, state){
  var bgColor, colorTransparencyValue, valInt;
  try {
    valInt = __parseAndValidateInt(value_0, 10);
    if (valInt < 0 || valInt > 100) {
      throw toJs(new NumberFormatException);
    }
    colorTransparencyValue = 255 - valInt * 2.55;
    bgColor = state.drawer.style_0.backgroundColor_0;
    $setBackgroundColor(state.drawer, $transparency(bgColor, round_int(colorTransparencyValue)));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      throw toJs(new StyleException('The value must be between 0 and 100'));
    }
     else 
      throw toJs($e0);
  }
}
;
var INSTANCE_13;
var Lcom_baselet_element_facet_common_TransparencyFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'TransparencyFacet', 894);
function $clinit_VerticalAlignFacet(){
  $clinit_VerticalAlignFacet = emptyMethod;
  INSTANCE_14 = new VerticalAlignFacet;
}

function VerticalAlignFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(903, 86, $intern_15, VerticalAlignFacet);
_.getKeyValue = function getKeyValue_9(){
  return new KeyValueFacet$KeyValue_1('valign', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_AlignVertical() , TOP), 'vertical text alignment'), new KeyValueFacet$ValueInfo(CENTER_0, 'vertical text alignment'), new KeyValueFacet$ValueInfo(BOTTOM, 'vertical text alignment')]));
}
;
_.handleValue = function handleValue_9(value_0, state){
  $setVertical(state.alignment, true, valueOf_1($toUpperCase(value_0, ($clinit_Locale() , ENGLISH))));
}
;
var INSTANCE_14;
var Lcom_baselet_element_facet_common_VerticalAlignFacet_2_classLit = createForClass('com.baselet.element.facet.common', 'VerticalAlignFacet', 903);
function $clinit_CustomDrawingFacet(){
  $clinit_CustomDrawingFacet = emptyMethod;
  INSTANCE_15 = new CustomDrawingFacet;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit) , Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit.typeName));
}

function CustomDrawingFacet(){
  Facet.call(this);
}

defineClass(899, 19, $intern_15, CustomDrawingFacet);
_.checkStart = function checkStart_5(line, state){
  var objIsActive;
  objIsActive = $getFacetResponse(state, Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit, ($clinit_Boolean() , false));
  return instanceOfBoolean(objIsActive) && $booleanValue(castToBoolean(objIsActive)) || $equals_6('customelement=', line);
}
;
_.getPriority = function getPriority_3(){
  return $clinit_Priority() , HIGHEST;
}
;
_.handleLine = function handleLine_6(line, state){
  var objIsActive;
  if ($equals_6('customelement=', line)) {
    objIsActive = $getFacetResponse(state, Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit, ($clinit_Boolean() , false));
    if (instanceOfBoolean(objIsActive) && $booleanValue(castToBoolean(objIsActive))) {
      throw toJs(new RuntimeException_0(($clinit_FormatLabels() , BOLD).value_0 + 'Invalid value: ' + BOLD.value_0 + 'customelement=' + '\nDuplicate command. This command may only occur once.'));
    }
    $setFacetResponse(state, Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit, true);
  }
   else {
    $clinit_CustomDrawingParser();
    $parse_0(new CustomDrawingParserImpl_0(line, state.gridElementSize.width_0, state.gridElementSize.height_0, state.drawer));
  }
}
;
var INSTANCE_15;
var Lcom_baselet_element_facet_customdrawings_CustomDrawingFacet_2_classLit = createForClass('com.baselet.element.facet.customdrawings', 'CustomDrawingFacet', 899);
function $clinit_CustomDrawingParserConstants(){
  $clinit_CustomDrawingParserConstants = emptyMethod;
  tokenImage_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['<EOF>', '" "', '"\\r"', '"\\t"', '<token of kind 4>', '"width"', '"height"', '"true"', '"false"', '"left"', '"right"', '"center"', '"fg="', '"bg="', '"lt="', '"lw="', '"transparency="', '<UNSIGNED_DOUBLE_CONSTANT>', '<DIGIT>', '<COLOR_OWN_NAME>', '<COLOR_OWN_HEX>', '<HEX>', '<SIMPLE_STRING>', '"drawLine("', '","', '")"', '"drawRectangle("', '"drawRectangleRound("', '"drawCircle("', '"drawEllipse("', '"drawArc("', '"drawText("', '"-"', '"."', '".."', '"="', '":"', '"::"', '"+"', '"*"', '"/"', '"("']);
}

var tokenImage_0;
function $clinit_CustomDrawingParser(){
  $clinit_CustomDrawingParser = emptyMethod;
  log_6 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser_2_classLit) , Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser_2_classLit.typeName));
  jj_la1_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [-58720256, -58720256, 53248, 53248, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_21, $intern_22, 1572864, 0, 384, 3584, 0, 0, 0, 0, 131168]);
  jj_la1_1 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 65, 65, 384, 384, 513]);
}

function $ColorOwn(this$static){
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 19:
      {
        $jj_consume_token(this$static, 19);
        break;
      }

    case 20:
      {
        $jj_consume_token(this$static, 20);
        break;
      }

    default:this$static.jj_la1[15] = this$static.jj_gen;
      $jj_consume_token(this$static, -1);
      throw toJs(new ParseException);
  }
  return this$static.token.image;
}

function $bg(this$static, inner){
  var newColor;
  $jj_consume_token(this$static, 13);
  newColor = $ColorOwn(this$static);
  return new CustomDrawingParser$9(this$static, inner, newColor);
}

function $booleanConstant(this$static){
  var value_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 8:
      {
        $jj_consume_token(this$static, 8);
        value_0 = false;
        break;
      }

    case 7:
      {
        $jj_consume_token(this$static, 7);
        value_0 = true;
        break;
      }

    default:this$static.jj_la1[17] = this$static.jj_gen;
      $jj_consume_token(this$static, -1);
      throw toJs(new ParseException);
  }
  return value_0;
}

function $doubleProduct(this$static){
  var v1, v2;
  v1 = $doubleValue(this$static);
  label_9: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 39:
      case 40:
        {
          break;
        }

      default:this$static.jj_la1[21] = this$static.jj_gen;
        break label_9;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 39:
        {
          $jj_consume_token(this$static, 39);
          v2 = $doubleValue(this$static);
          v1 = v1 * v2;
          break;
        }

      case 40:
        {
          $jj_consume_token(this$static, 40);
          v2 = $doubleValue(this$static);
          v1 = v1 / v2;
          break;
        }

      default:this$static.jj_la1[22] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  return v1;
}

function $doubleTerm(this$static){
  var v1, v2;
  v1 = $doubleProduct(this$static);
  label_8: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 32:
      case 38:
        {
          break;
        }

      default:this$static.jj_la1[19] = this$static.jj_gen;
        break label_8;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 38:
        {
          $jj_consume_token(this$static, 38);
          v2 = $doubleProduct(this$static);
          v1 = v1 + v2;
          break;
        }

      case 32:
        {
          $jj_consume_token(this$static, 32);
          v2 = $doubleProduct(this$static);
          v1 = v1 - v2;
          break;
        }

      default:this$static.jj_la1[20] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  return v1;
}

function $doubleValue(this$static){
  var value_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 5:
      {
        $jj_consume_token(this$static, 5);
        value_0 = this$static.width_0;
        break;
      }

    case 6:
      {
        $jj_consume_token(this$static, 6);
        value_0 = this$static.height_0;
        break;
      }

    case 32:
      {
        $jj_consume_token(this$static, 32);
        value_0 = $unsignedDoubleConstant(this$static);
        value_0 = -value_0;
        break;
      }

    case 17:
      {
        value_0 = $unsignedDoubleConstant(this$static);
        break;
      }

    case 41:
      {
        $jj_consume_token(this$static, 41);
        value_0 = $doubleTerm(this$static);
        $jj_consume_token(this$static, 25);
        break;
      }

    default:this$static.jj_la1[23] = this$static.jj_gen;
      $jj_consume_token(this$static, -1);
      throw toJs(new ParseException);
  }
  return value_0;
}

function $drawArc(this$static){
  var callStack, extent, height, open_0, start_0, width_0, x_0, y_0;
  $jj_consume_token(this$static, 30);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  width_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  height = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  start_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  extent = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  open_0 = $booleanConstant(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$6(this$static, x_0, y_0, width_0, height, start_0, extent, open_0);
  label_6: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        {
          break;
        }

      default:this$static.jj_la1[12] = this$static.jj_gen;
        break label_6;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 13:
        {
          callStack = $bg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      case 16:
        {
          callStack = $transparency_0(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[13] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawCircle(this$static){
  var callStack, radius, x_0, y_0;
  $jj_consume_token(this$static, 28);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  radius = $doubleTerm(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$4(this$static, x_0, y_0, radius);
  label_4: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        {
          break;
        }

      default:this$static.jj_la1[8] = this$static.jj_gen;
        break label_4;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 13:
        {
          callStack = $bg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      case 16:
        {
          callStack = $transparency_0(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[9] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawEllipse(this$static){
  var callStack, height, width_0, x_0, y_0;
  $jj_consume_token(this$static, 29);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  width_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  height = $doubleTerm(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$5(this$static, x_0, y_0, width_0, height);
  label_5: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        {
          break;
        }

      default:this$static.jj_la1[10] = this$static.jj_gen;
        break label_5;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 13:
        {
          callStack = $bg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      case 16:
        {
          callStack = $transparency_0(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[11] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawLine_0(this$static){
  var callStack, x1, x2, y1, y2;
  $jj_consume_token(this$static, 23);
  x1 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y1 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  x2 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y2 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$1(this$static, x1, y1, x2, y2);
  label_1: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 14:
      case 15:
        {
          break;
        }

      default:this$static.jj_la1[2] = this$static.jj_gen;
        break label_1;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[3] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawRectangle_0(this$static){
  var callStack, height, width_0, x_0, y_0;
  $jj_consume_token(this$static, 26);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  width_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  height = $doubleTerm(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$2(this$static, x_0, y_0, width_0, height);
  label_2: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        {
          break;
        }

      default:this$static.jj_la1[4] = this$static.jj_gen;
        break label_2;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 13:
        {
          callStack = $bg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      case 16:
        {
          callStack = $transparency_0(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[5] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawRectangleRound(this$static){
  var callStack, height, radius, width_0, x_0, y_0;
  $jj_consume_token(this$static, 27);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  width_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  height = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  radius = $doubleTerm(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$3(this$static, x_0, y_0, width_0, height, radius);
  label_3: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        {
          break;
        }

      default:this$static.jj_la1[6] = this$static.jj_gen;
        break label_3;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          callStack = $fg(this$static, callStack);
          break;
        }

      case 13:
        {
          callStack = $bg(this$static, callStack);
          break;
        }

      case 14:
        {
          callStack = $lt(this$static, callStack);
          break;
        }

      case 15:
        {
          callStack = $lw(this$static, callStack);
          break;
        }

      case 16:
        {
          callStack = $transparency_0(this$static, callStack);
          break;
        }

      default:this$static.jj_la1[7] = this$static.jj_gen;
        $jj_consume_token(this$static, -1);
        throw toJs(new ParseException);
    }
  }
  callStack.run();
}

function $drawText(this$static){
  var alignment, callStack, text_0, x_0, y_0;
  $jj_consume_token(this$static, 31);
  text_0 = ($jj_consume_token(this$static, 22) , $replace_0($replace_0($substring_0(this$static.token.image, 1, this$static.token.image.length - 1), '\\"', '"'), '\\\\', '\\'));
  $jj_consume_token(this$static, 24);
  x_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  y_0 = $doubleTerm(this$static);
  $jj_consume_token(this$static, 24);
  alignment = $horizontalAlignment(this$static);
  $jj_consume_token(this$static, 25);
  callStack = new CustomDrawingParser$7(this$static, text_0, x_0, y_0, alignment);
  label_7: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 12:
        {
          break;
        }

      default:this$static.jj_la1[14] = this$static.jj_gen;
        break label_7;
    }
    callStack = $fg(this$static, callStack);
  }
  callStack.run();
}

function $fg(this$static, inner){
  var newColor;
  $jj_consume_token(this$static, 12);
  newColor = $ColorOwn(this$static);
  return new CustomDrawingParser$8(this$static, inner, newColor);
}

function $generateParseException(this$static){
  var exptokseq, i, i0, i1, j, la1tokens, lastArg;
  this$static.jj_expentries.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  la1tokens = initUnidimensionalArray(Z_classLit, $intern_23, 32, 42, 16, 1);
  if (this$static.jj_kind >= 0) {
    la1tokens[this$static.jj_kind] = true;
    this$static.jj_kind = -1;
  }
  for (i0 = 0; i0 < 24; i0++) {
    if (this$static.jj_la1[i0] == this$static.jj_gen) {
      for (j = 0; j < 32; j++) {
        (jj_la1_0[i0] & 1 << j) != 0 && (la1tokens[j] = true);
        (jj_la1_1[i0] & 1 << j) != 0 && (la1tokens[32 + j] = true);
      }
    }
  }
  for (i1 = 0; i1 < 42; i1++) {
    if (la1tokens[i1]) {
      this$static.jj_expentry = initUnidimensionalArray(I_classLit, $intern_20, 32, 1, 15, 1);
      this$static.jj_expentry[0] = i1;
      $add_13(this$static.jj_expentries, this$static.jj_expentry);
    }
  }
  exptokseq = initUnidimensionalArray(I_classLit, $intern_3, 47, this$static.jj_expentries.array.length, 0, 2);
  for (i = 0; i < this$static.jj_expentries.array.length; i++) {
    exptokseq[i] = castTo($get_7(this$static.jj_expentries, i), 47);
  }
  return new ParseException_0(this$static.token, exptokseq, (lastArg = ($clinit_CustomDrawingParserConstants() , tokenImage_0) , !this$static.token_source?null:($clinit_CustomDrawingParserTokenManager() , lexStateNames)[0] , lastArg));
}

function $horizontalAlignment(this$static){
  var alignment;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 9:
      {
        $jj_consume_token(this$static, 9);
        alignment = ($clinit_AlignHorizontal() , LEFT);
        break;
      }

    case 11:
      {
        $jj_consume_token(this$static, 11);
        alignment = ($clinit_AlignHorizontal() , CENTER);
        break;
      }

    case 10:
      {
        $jj_consume_token(this$static, 10);
        alignment = ($clinit_AlignHorizontal() , RIGHT);
        break;
      }

    default:this$static.jj_la1[18] = this$static.jj_gen;
      $jj_consume_token(this$static, -1);
      throw toJs(new ParseException);
  }
  return alignment;
}

function $jj_consume_token(this$static, kind){
  var oldToken;
  (oldToken = this$static.token).next_0?(this$static.token = this$static.token.next_0):(this$static.token = this$static.token.next_0 = $getNextToken(this$static.token_source));
  this$static.jj_ntk = -1;
  if (this$static.token.kind == kind) {
    ++this$static.jj_gen;
    return this$static.token;
  }
  this$static.token = oldToken;
  this$static.jj_kind = kind;
  throw toJs($generateParseException(this$static));
}

function $lineType(this$static){
  var value_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 32:
      {
        $jj_consume_token(this$static, 32);
        value_0 = ($clinit_LineType() , SOLID);
        break;
      }

    case 33:
      {
        $jj_consume_token(this$static, 33);
        value_0 = ($clinit_LineType() , DASHED);
        break;
      }

    case 34:
      {
        $jj_consume_token(this$static, 34);
        value_0 = ($clinit_LineType() , DOTTED);
        break;
      }

    case 35:
      {
        $jj_consume_token(this$static, 35);
        value_0 = ($clinit_LineType() , DOUBLE);
        break;
      }

    case 36:
      {
        $jj_consume_token(this$static, 36);
        value_0 = ($clinit_LineType() , DOUBLE_DASHED);
        break;
      }

    case 37:
      {
        $jj_consume_token(this$static, 37);
        value_0 = ($clinit_LineType() , DOUBLE_DOTTED);
        break;
      }

    default:this$static.jj_la1[16] = this$static.jj_gen;
      $jj_consume_token(this$static, -1);
      throw toJs(new ParseException);
  }
  return value_0;
}

function $lt(this$static, inner){
  var newLineType;
  $jj_consume_token(this$static, 14);
  newLineType = $lineType(this$static);
  return new CustomDrawingParser$10(this$static, inner, newLineType);
}

function $lw(this$static, inner){
  var newLineWidth;
  $jj_consume_token(this$static, 15);
  newLineWidth = $unsignedDoubleConstant(this$static);
  return new CustomDrawingParser$11(this$static, inner, newLineWidth);
}

function $start(this$static){
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 23:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      {
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 23:
            {
              $drawLine_0(this$static);
              break;
            }

          case 26:
            {
              $drawRectangle_0(this$static);
              break;
            }

          case 27:
            {
              $drawRectangleRound(this$static);
              break;
            }

          case 28:
            {
              $drawCircle(this$static);
              break;
            }

          case 29:
            {
              $drawEllipse(this$static);
              break;
            }

          case 30:
            {
              $drawArc(this$static);
              break;
            }

          case 31:
            {
              $drawText(this$static);
              break;
            }

          default:this$static.jj_la1[0] = this$static.jj_gen;
            $jj_consume_token(this$static, -1);
            throw toJs(new ParseException);
        }
        break;
      }

    default:this$static.jj_la1[1] = this$static.jj_gen;
  }
  $jj_consume_token(this$static, 0);
}

function $transparency_0(this$static, inner){
  var transparencyVal;
  $jj_consume_token(this$static, 16);
  transparencyVal = $unsignedDoubleConstant(this$static);
  if (transparencyVal < 0 || transparencyVal > 100) {
    throw toJs(new CustomDrawingParserRuntimeException_1);
  }
  return new CustomDrawingParser$12(this$static, inner, transparencyVal);
}

function $unsignedDoubleConstant(this$static){
  var e, value_0;
  $jj_consume_token(this$static, 17);
  try {
    value_0 = __parseAndValidateDouble(this$static.token.image);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      e = $e0;
      $error_2(log_6, "Fatal Error: The string '" + this$static.token.image + "' couldn't be parsed as double, but the grammar should ensure that the string is parsable.", e);
      throw toJs(castTo($initCause(new ParseException_1("Fatal Error: The string '" + this$static.token.image + "' couldn't be parsed as double, but the grammar should ensure that the string is parsable."), e), 75));
    }
     else 
      throw toJs($e0);
  }
  return value_0;
}

function CustomDrawingParser(stream){
  var i;
  this.jj_la1 = initUnidimensionalArray(I_classLit, $intern_20, 32, 24, 15, 1);
  this.jj_expentries = new ArrayList;
  this.jj_input_stream = new JavaCharStream(stream);
  this.token_source = new CustomDrawingParserTokenManager(this.jj_input_stream);
  this.token = new Token;
  this.jj_ntk = -1;
  this.jj_gen = 0;
  for (i = 0; i < 24; i++)
    this.jj_la1[i] = -1;
}

defineClass(947, 1, {});
_.jj_gen = 0;
_.jj_kind = -1;
_.jj_ntk = 0;
var jj_la1_0, jj_la1_1, log_6;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser', 947);
function $parse_0(this$static){
  var e;
  try {
    $start(this$static);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 75)) {
      e = $e0;
      throw toJs(new CustomDrawingParserRuntimeException(e));
    }
     else if (instanceOf($e0, 243)) {
      e = $e0;
      throw toJs(new CustomDrawingParserRuntimeException_0(e));
    }
     else 
      throw toJs($e0);
  }
}

function CustomDrawingParserImpl(stream, width_0, height, drawHandler){
  CustomDrawingParser.call(this, stream);
  this.width_0 = width_0;
  this.height_0 = height;
  this.drawHandler = drawHandler;
}

function CustomDrawingParserImpl_0(dsl, width_0, height, drawHandler){
  $clinit_CustomDrawingParser();
  CustomDrawingParserImpl.call(this, new StringProvider(dsl), width_0, height, drawHandler);
}

defineClass(361, 947, {}, CustomDrawingParserImpl_0);
_.height_0 = 0;
_.width_0 = 0;
var Lcom_baselet_element_facet_customdrawings_CustomDrawingParserImpl_2_classLit = createForClass('com.baselet.element.facet.customdrawings', 'CustomDrawingParserImpl', 361);
function CustomDrawingParserRuntimeException(e){
  CustomDrawingParserRuntimeException_2.call(this, $substring_0(e.detailMessage, 0, e.detailMessage.length - 1), e);
}

function CustomDrawingParserRuntimeException_0(e){
  CustomDrawingParserRuntimeException_2.call(this, $substring_0(e.detailMessage, 0, e.detailMessage.length - 1), e);
}

function CustomDrawingParserRuntimeException_1(){
  RuntimeException_0.call(this, 'The transparency value must be between 0 and 100');
}

function CustomDrawingParserRuntimeException_2(message, cause){
  RuntimeException_1.call(this, message, cause);
}

defineClass(216, 11, $intern_11, CustomDrawingParserRuntimeException, CustomDrawingParserRuntimeException_0, CustomDrawingParserRuntimeException_1);
var Lcom_baselet_element_facet_customdrawings_CustomDrawingParserRuntimeException_2_classLit = createForClass('com.baselet.element.facet.customdrawings', 'CustomDrawingParserRuntimeException', 216);
function CustomDrawingParser$RecRunnable(inner){
  this.inner = inner;
}

defineClass(107, 1, {});
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$RecRunnable_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/RecRunnable', 107);
function CustomDrawingParser$1(this$0_1, val$x1, val$y1, val$x2, val$y2){
  this.this$02 = this$0_1;
  this.val$x14 = val$x1;
  this.val$y16 = val$y1;
  this.val$x28 = val$x2;
  this.val$y210 = val$y2;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(948, 107, {}, CustomDrawingParser$1);
_.run = function run(){
  $drawLine(this.this$02.drawHandler, this.val$x14, this.val$y16, this.val$x28, this.val$y210);
}
;
_.val$x14 = 0;
_.val$x28 = 0;
_.val$y16 = 0;
_.val$y210 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$1_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/1', 948);
function CustomDrawingParser$10(this$0_1, $anonymous0, val$newLineType){
  this.this$02 = this$0_1;
  this.val$newLineType4 = val$newLineType;
  CustomDrawingParser$RecRunnable.call(this, $anonymous0);
}

defineClass(957, 107, {}, CustomDrawingParser$10);
_.run = function run_0(){
  var oldLineType;
  oldLineType = this.this$02.drawHandler.style_0.lineType;
  $setLineType(this.this$02.drawHandler, this.val$newLineType4);
  !!this.inner && this.inner.run();
  $setLineType(this.this$02.drawHandler, oldLineType);
}
;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$10_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/10', 957);
function CustomDrawingParser$11(this$0_1, $anonymous0, val$newLineWidth){
  this.this$02 = this$0_1;
  this.val$newLineWidth4 = val$newLineWidth;
  CustomDrawingParser$RecRunnable.call(this, $anonymous0);
}

defineClass(958, 107, {}, CustomDrawingParser$11);
_.run = function run_1(){
  var oldLineWidth;
  oldLineWidth = this.this$02.drawHandler.style_0.lineWidth_0;
  $setLineWidth(this.this$02.drawHandler, this.val$newLineWidth4);
  !!this.inner && this.inner.run();
  $setLineWidth(this.this$02.drawHandler, oldLineWidth);
}
;
_.val$newLineWidth4 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$11_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/11', 958);
function CustomDrawingParser$12(this$0_1, $anonymous0, val$transparencyVal){
  this.this$02 = this$0_1;
  this.val$transparencyVal4 = val$transparencyVal;
  CustomDrawingParser$RecRunnable.call(this, $anonymous0);
}

defineClass(959, 107, {}, CustomDrawingParser$12);
_.run = function run_2(){
  var bgColor, colorTransparencyValue, oldColor;
  oldColor = this.this$02.drawHandler.style_0.backgroundColor_0;
  colorTransparencyValue = 255 - this.val$transparencyVal4 * 2.55;
  bgColor = this.this$02.drawHandler.style_0.backgroundColor_0;
  $setBackgroundColor(this.this$02.drawHandler, $transparency(bgColor, round_int(colorTransparencyValue)));
  !!this.inner && this.inner.run();
  $setBackgroundColor(this.this$02.drawHandler, oldColor);
}
;
_.val$transparencyVal4 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$12_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/12', 959);
function CustomDrawingParser$2(this$0_1, val$x, val$y, val$width, val$height){
  this.this$02 = this$0_1;
  this.val$x4 = val$x;
  this.val$y6 = val$y;
  this.val$width8 = val$width;
  this.val$height10 = val$height;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(949, 107, {}, CustomDrawingParser$2);
_.run = function run_3(){
  $drawRectangle_1(this.this$02.drawHandler, this.val$x4, this.val$y6, this.val$width8, this.val$height10);
}
;
_.val$height10 = 0;
_.val$width8 = 0;
_.val$x4 = 0;
_.val$y6 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$2_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/2', 949);
function CustomDrawingParser$3(this$0_1, val$x, val$y, val$width, val$height, val$radius){
  this.this$02 = this$0_1;
  this.val$x4 = val$x;
  this.val$y6 = val$y;
  this.val$width8 = val$width;
  this.val$height10 = val$height;
  this.val$radius12 = val$radius;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(950, 107, {}, CustomDrawingParser$3);
_.run = function run_4(){
  $drawRectangleRound_0(this.this$02.drawHandler, this.val$x4, this.val$y6, this.val$width8, this.val$height10, this.val$radius12);
}
;
_.val$height10 = 0;
_.val$radius12 = 0;
_.val$width8 = 0;
_.val$x4 = 0;
_.val$y6 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$3_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/3', 950);
function CustomDrawingParser$4(this$0_1, val$x, val$y, val$radius){
  this.this$02 = this$0_1;
  this.val$x4 = val$x;
  this.val$y6 = val$y;
  this.val$radius8 = val$radius;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(951, 107, {}, CustomDrawingParser$4);
_.run = function run_5(){
  $drawCircle_0(this.this$02.drawHandler, this.val$x4, this.val$y6, this.val$radius8);
}
;
_.val$radius8 = 0;
_.val$x4 = 0;
_.val$y6 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$4_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/4', 951);
function CustomDrawingParser$5(this$0_1, val$x, val$y, val$width, val$height){
  this.this$02 = this$0_1;
  this.val$x4 = val$x;
  this.val$y6 = val$y;
  this.val$width8 = val$width;
  this.val$height10 = val$height;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(952, 107, {}, CustomDrawingParser$5);
_.run = function run_6(){
  $drawEllipse_0(this.this$02.drawHandler, this.val$x4, this.val$y6, this.val$width8, this.val$height10);
}
;
_.val$height10 = 0;
_.val$width8 = 0;
_.val$x4 = 0;
_.val$y6 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$5_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/5', 952);
function CustomDrawingParser$6(this$0_1, val$x, val$y, val$width, val$height, val$start, val$extent, val$open){
  this.this$02 = this$0_1;
  this.val$x4 = val$x;
  this.val$y6 = val$y;
  this.val$width8 = val$width;
  this.val$height10 = val$height;
  this.val$start12 = val$start;
  this.val$extent14 = val$extent;
  this.val$open16 = val$open;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(953, 107, {}, CustomDrawingParser$6);
_.run = function run_7(){
  $drawArc_0(this.this$02.drawHandler, this.val$x4, this.val$y6, this.val$width8, this.val$height10, this.val$start12, this.val$extent14, this.val$open16);
}
;
_.val$extent14 = 0;
_.val$height10 = 0;
_.val$open16 = false;
_.val$start12 = 0;
_.val$width8 = 0;
_.val$x4 = 0;
_.val$y6 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$6_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/6', 953);
function CustomDrawingParser$7(this$0_1, val$text, val$x, val$y, val$alignment){
  this.this$02 = this$0_1;
  this.val$text4 = val$text;
  this.val$x5 = val$x;
  this.val$y7 = val$y;
  this.val$alignment9 = val$alignment;
  CustomDrawingParser$RecRunnable.call(this, null);
}

defineClass(954, 107, {}, CustomDrawingParser$7);
_.run = function run_8(){
  $print_0(this.this$02.drawHandler, this.val$text4, this.val$x5, this.val$y7, this.val$alignment9);
}
;
_.val$x5 = 0;
_.val$y7 = 0;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$7_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/7', 954);
function CustomDrawingParser$8(this$0_1, $anonymous0, val$newColor){
  this.this$02 = this$0_1;
  this.val$newColor4 = val$newColor;
  CustomDrawingParser$RecRunnable.call(this, $anonymous0);
}

defineClass(955, 107, {}, CustomDrawingParser$8);
_.run = function run_9(){
  var oldColor;
  oldColor = this.this$02.drawHandler.style_0.foregroundColor;
  $setForegroundColor_0(this.this$02.drawHandler, this.val$newColor4);
  !!this.inner && this.inner.run();
  $setForegroundColor(this.this$02.drawHandler, oldColor);
}
;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$8_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/8', 955);
function CustomDrawingParser$9(this$0_1, $anonymous0, val$newColor){
  this.this$02 = this$0_1;
  this.val$newColor4 = val$newColor;
  CustomDrawingParser$RecRunnable.call(this, $anonymous0);
}

defineClass(956, 107, {}, CustomDrawingParser$9);
_.run = function run_10(){
  var oldColor;
  oldColor = this.this$02.drawHandler.style_0.backgroundColor_0;
  $setBackgroundColorAndKeepTransparency(this.this$02.drawHandler, this.val$newColor4);
  !!this.inner && this.inner.run();
  $setBackgroundColor(this.this$02.drawHandler, oldColor);
}
;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParser$9_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParser/9', 956);
function $clinit_CustomDrawingParserTokenManager(){
  $clinit_CustomDrawingParserTokenManager = emptyMethod;
  jjbitVec0 = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [-2, -1, -1, -1]);
  jjbitVec2 = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [0, 0, -1, -1]);
  jjnextStates = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [18, 19, 21, 1, 2, 4]);
  jjstrLiteralImages = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['', null, null, null, null, 'width', 'height', 'true', 'false', 'left', 'right', 'center', 'fg=', 'bg=', 'lt=', 'lw=', 'transparency=', null, null, null, null, null, null, 'drawLine(', ',', ')', 'drawRectangle(', 'drawRectangleRound(', 'drawCircle(', 'drawEllipse(', 'drawArc(', 'drawText(', '-', '.', '..', '=', ':', '::', '+', '*', '/', '(']);
  lexStateNames = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['DEFAULT']);
  jjtoToken = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [4398044151777]);
}

function $ReInitRounds(this$static){
  var i;
  this$static.jjround = -2147483647;
  for (i = 22; i-- > 0;)
    this$static.jjrounds[i] = $intern_12;
}

function $getNextToken(this$static){
  var EOFSeen, curPos, error_after, error_column, error_line, matchedToken;
  EOFLoop: for (;;) {
    try {
      this$static.curChar = $BeginToken(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 14)) {
        this$static.jjmatchedKind = 0;
        this$static.jjmatchedPos = -1;
        matchedToken = $jjFillToken(this$static);
        return matchedToken;
      }
       else 
        throw toJs($e0);
    }
    try {
      $backup(this$static.input_stream, 0);
      while (this$static.curChar <= 32 && neq(and_0(4294976000, shl_0(1, this$static.curChar)), 0))
        this$static.curChar = $BeginToken(this$static.input_stream);
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 13)) {
        continue EOFLoop;
      }
       else 
        throw toJs($e1);
    }
    this$static.jjmatchedKind = $intern_0;
    this$static.jjmatchedPos = 0;
    curPos = $jjMoveStringLiteralDfa0_0(this$static);
    if (this$static.jjmatchedKind != $intern_0) {
      this$static.jjmatchedPos + 1 < curPos && $backup(this$static.input_stream, curPos - this$static.jjmatchedPos - 1);
      if (neq(and_0(jjtoToken[this$static.jjmatchedKind >> 6], shl_0(1, this$static.jjmatchedKind & 63)), 0)) {
        matchedToken = $jjFillToken(this$static);
        return matchedToken;
      }
       else {
        continue EOFLoop;
      }
    }
    error_line = $getEndLine(this$static.input_stream);
    error_column = $getEndColumn(this$static.input_stream);
    error_after = null;
    EOFSeen = false;
    try {
      $readChar(this$static.input_stream);
      $backup(this$static.input_stream, 1);
    }
     catch ($e2) {
      $e2 = toJava($e2);
      if (instanceOf($e2, 13)) {
        EOFSeen = true;
        error_after = curPos <= 1?'':$GetImage(this$static.input_stream);
        if (this$static.curChar == 10 || this$static.curChar == 13) {
          ++error_line;
          error_column = 0;
        }
         else 
          ++error_column;
      }
       else 
        throw toJs($e2);
    }
    if (!EOFSeen) {
      $backup(this$static.input_stream, 1);
      error_after = curPos <= 1?'':$GetImage(this$static.input_stream);
    }
    throw toJs(new TokenMgrException_0(EOFSeen, error_line, error_column, error_after, this$static.curChar));
  }
}

function $jjAddStates(this$static, start_0, end){
  do {
    this$static.jjstateSet[this$static.jjnewStateCnt++] = jjnextStates[start_0];
  }
   while (start_0++ != end);
}

function $jjCheckNAdd(this$static, state){
  if (this$static.jjrounds[state] != this$static.jjround) {
    this$static.jjstateSet[this$static.jjnewStateCnt++] = state;
    this$static.jjrounds[state] = this$static.jjround;
  }
}

function $jjCheckNAddStates(this$static, start_0, end){
  do {
    $jjCheckNAdd(this$static, jjnextStates[start_0]);
  }
   while (start_0++ != end);
}

function $jjFillToken(this$static){
  var beginColumn, beginLine, curTokenImage, im, t;
  im = jjstrLiteralImages[this$static.jjmatchedKind];
  curTokenImage = im == null?$GetImage(this$static.input_stream):im;
  beginLine = $getBeginLine(this$static.input_stream);
  beginColumn = $getBeginColumn(this$static.input_stream);
  $getEndLine(this$static.input_stream);
  $getEndColumn(this$static.input_stream);
  t = new Token_0(this$static.jjmatchedKind, curTokenImage);
  t.beginLine = beginLine;
  t.beginColumn = beginColumn;
  return t;
}

function $jjMoveNfa_0(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 22;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 5:
            if (neq(and_0($intern_24, l), 0)) {
              kind > 17 && (kind = 17);
              $jjCheckNAdd(this$static, 6);
              $jjCheckNAdd(this$static, 7);
            }
             else 
              this$static.curChar == 34?$jjCheckNAddStates(this$static, 0, 2):this$static.curChar == 35?(this$static.jjstateSet[this$static.jjnewStateCnt++] = 11):this$static.curChar == 47 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 0);
            break;
          case 0:
            if (this$static.curChar != 47)
              break;
            kind > 4 && (kind = 4);
            {
              $jjCheckNAddStates(this$static, 3, 5);
            }

            break;
          case 1:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 4 && (kind = 4);
            {
              $jjCheckNAddStates(this$static, 3, 5);
            }

            break;
          case 2:
            neq(and_0(9216, l), 0) && kind > 4 && (kind = 4);
            break;
          case 3:
            this$static.curChar == 10 && kind > 4 && (kind = 4);
            break;
          case 4:
            this$static.curChar == 13 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 3);
            break;
          case 6:
            if (eq(and_0($intern_24, l), 0))
              break;
            kind > 17 && (kind = 17);
            {
              $jjCheckNAdd(this$static, 6);
              $jjCheckNAdd(this$static, 7);
            }

            break;
          case 7:
            this$static.curChar == 46 && $jjCheckNAdd(this$static, 8);
            break;
          case 8:
            if (eq(and_0($intern_24, l), 0))
              break;
            kind > 17 && (kind = 17);
            {
              $jjCheckNAdd(this$static, 8);
            }

            break;
          case 10:
            this$static.curChar == 35 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 11);
            break;
          case 11:
            neq(and_0($intern_24, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 12);
            break;
          case 12:
            neq(and_0($intern_24, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 13);
            break;
          case 13:
            neq(and_0($intern_24, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 14);
            break;
          case 14:
            neq(and_0($intern_24, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 15);
            break;
          case 15:
            neq(and_0($intern_24, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 16);
            break;
          case 16:
            neq(and_0($intern_24, l), 0) && kind > 20 && (kind = 20);
            break;
          case 17:
          case 20:
            this$static.curChar == 34 && $jjCheckNAddStates(this$static, 0, 2);
            break;
          case 18:
            neq(and_0(-17179878401, l), 0) && $jjCheckNAddStates(this$static, 0, 2);
            break;
          case 21:
            this$static.curChar == 34 && kind > 22 && (kind = 22);
        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 5:
          case 9:
            if (eq(and_0($intern_26, l), 0))
              break;
            kind > 19 && (kind = 19);
            {
              $jjCheckNAdd(this$static, 9);
            }

            break;
          case 1:
            kind > 4 && (kind = 4);
            {
              $jjAddStates(this$static, 3, 5);
            }

            break;
          case 11:
            neq(and_0($intern_27, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 12);
            break;
          case 12:
            neq(and_0($intern_27, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 13);
            break;
          case 13:
            neq(and_0($intern_27, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 14);
            break;
          case 14:
            neq(and_0($intern_27, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 15);
            break;
          case 15:
            neq(and_0($intern_27, l), 0) && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 16);
            break;
          case 16:
            neq(and_0($intern_27, l), 0) && kind > 20 && (kind = 20);
            break;
          case 18:
            neq(and_0($intern_28, l), 0) && $jjCheckNAddStates(this$static, 0, 2);
            break;
          case 19:
            this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 20);
            break;
          case 20:
            this$static.curChar == 92 && $jjCheckNAddStates(this$static, 0, 2);
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 1:
            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 4 && (kind = 4);
            {
              $jjAddStates(this$static, 3, 5);
            }

            break;
          case 18:
            jjCanMove_0(hiByte, i1, i2, l1, l2) && $jjAddStates(this$static, 0, 2);
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 22 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveStringLiteralDfa0_0(this$static){
  switch (this$static.curChar) {
    case 40:
      return $jjStopAtPos(this$static, 0, 41);
    case 41:
      return $jjStopAtPos(this$static, 0, 25);
    case 42:
      return $jjStopAtPos(this$static, 0, 39);
    case 43:
      return $jjStopAtPos(this$static, 0, 38);
    case 44:
      return $jjStopAtPos(this$static, 0, 24);
    case 45:
      return $jjStopAtPos(this$static, 0, 32);
    case 46:
      this$static.jjmatchedKind = 33;
      return $jjMoveStringLiteralDfa1_0(this$static, 17179869184);
    case 47:
      return $jjStartNfaWithStates_0(this$static, 0, 40, 0);
    case 58:
      this$static.jjmatchedKind = 36;
      return $jjMoveStringLiteralDfa1_0(this$static, $intern_29);
    case 61:
      return $jjStopAtPos(this$static, 0, 35);
    case 98:
      return $jjMoveStringLiteralDfa1_0(this$static, 8192);
    case 99:
      return $jjMoveStringLiteralDfa1_0(this$static, $intern_30);
    case 100:
      return $jjMoveStringLiteralDfa1_0(this$static, 4236247040);
    case 102:
      return $jjMoveStringLiteralDfa1_0(this$static, 4352);
    case 104:
      return $jjMoveStringLiteralDfa1_0(this$static, 64);
    case 108:
      return $jjMoveStringLiteralDfa1_0(this$static, 49664);
    case 114:
      return $jjMoveStringLiteralDfa1_0(this$static, 1024);
    case 116:
      return $jjMoveStringLiteralDfa1_0(this$static, 65664);
    case 119:
      return $jjMoveStringLiteralDfa1_0(this$static, 32);
    default:return $jjMoveNfa_0(this$static, 5, 0);
  }
}

function $jjMoveStringLiteralDfa10_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 8, old0), 9);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 9, active0);
      return 10;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 40:
      if (neq(and_0(active0, $intern_31), 0))
        return $jjStopAtPos(this$static, 10, 28);
      break;
    case 99:
      return $jjMoveStringLiteralDfa11_0(this$static, active0, $intern_32);
    case 101:
      return $jjMoveStringLiteralDfa11_0(this$static, active0, $intern_33);
    case 103:
      return $jjMoveStringLiteralDfa11_0(this$static, active0, $intern_34);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 9, active0), 10);
}

function $jjMoveStringLiteralDfa11_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 9, old0), 10);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 10, active0);
      return 11;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 40:
      if (neq(and_0(active0, $intern_33), 0))
        return $jjStopAtPos(this$static, 11, 29);
      break;
    case 108:
      return $jjMoveStringLiteralDfa12_0(this$static, active0, $intern_34);
    case 121:
      return $jjMoveStringLiteralDfa12_0(this$static, active0, $intern_32);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 10, active0), 11);
}

function $jjMoveStringLiteralDfa12_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 10, old0), 11);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 11, active0);
      return 12;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_32), 0))
        return $jjStopAtPos(this$static, 12, 16);
      break;
    case 101:
      return $jjMoveStringLiteralDfa13_0(this$static, active0, $intern_34);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 11, active0), 12);
}

function $jjMoveStringLiteralDfa13_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 11, old0), 12);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 12, active0);
      return 13;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 40:
      if (neq(and_0(active0, $intern_35), 0))
        return $jjStopAtPos(this$static, 13, 26);
      break;
    case 82:
      return $jjMoveStringLiteralDfa14_0(this$static, active0, $intern_36);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 12, active0), 13);
}

function $jjMoveStringLiteralDfa14_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 12, old0), 13);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 13, active0);
      return 14;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 111) {
    return $jjMoveStringLiteralDfa15_0(this$static, active0, $intern_36);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 13, active0), 14);
}

function $jjMoveStringLiteralDfa15_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 13, old0), 14);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 14, active0);
      return 15;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 117) {
    return $jjMoveStringLiteralDfa16_0(this$static, active0, $intern_36);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 14, active0), 15);
}

function $jjMoveStringLiteralDfa16_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 14, old0), 15);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 15, active0);
      return 16;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 110) {
    return $jjMoveStringLiteralDfa17_0(this$static, active0, $intern_36);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 15, active0), 16);
}

function $jjMoveStringLiteralDfa17_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 15, old0), 16);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 16, active0);
      return 17;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 100) {
    return $jjMoveStringLiteralDfa18_0(this$static, active0, $intern_36);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 16, active0), 17);
}

function $jjMoveStringLiteralDfa18_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 16, old0), 17);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 17, active0);
      return 18;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 40) {
    if (neq(and_0(active0, $intern_36), 0))
      return $jjStopAtPos(this$static, 18, 27);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 17, active0), 18);
}

function $jjMoveStringLiteralDfa1_0(this$static, active0){
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 0, active0);
      return 1;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 46:
      if (neq(and_0(active0, 17179869184), 0))
        return $jjStopAtPos(this$static, 1, 34);
      break;
    case 58:
      if (neq(and_0(active0, $intern_29), 0))
        return $jjStopAtPos(this$static, 1, 37);
      break;
    case 97:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, 256);
    case 101:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, 2624);
    case 103:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, 12288);
    case 105:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, 1056);
    case 114:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, 4236312704);
    case 116:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, $intern_37);
    case 119:
      return $jjMoveStringLiteralDfa2_0(this$static, active0, $intern_38);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 0, active0), 1);
}

function $jjMoveStringLiteralDfa2_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 0, old0), 1);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 1, active0);
      return 2;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_22), 0))
        return $jjStopAtPos(this$static, 2, 12);
      else if (neq(and_0(active0, 8192), 0))
        return $jjStopAtPos(this$static, 2, 13);
      else if (neq(and_0(active0, $intern_37), 0))
        return $jjStopAtPos(this$static, 2, 14);
      else if (neq(and_0(active0, $intern_38), 0))
        return $jjStopAtPos(this$static, 2, 15);
      break;
    case 97:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, $intern_39);
    case 100:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 32);
    case 102:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 512);
    case 103:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 1024);
    case 105:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 64);
    case 108:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 256);
    case 110:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, $intern_30);
    case 117:
      return $jjMoveStringLiteralDfa3_0(this$static, active0, 128);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 1, active0), 2);
}

function $jjMoveStringLiteralDfa3_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 1, old0), 2);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 2, active0);
      return 3;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 101:
      if (neq(and_0(active0, 128), 0))
        return $jjStartNfaWithStates_0(this$static, 3, 7, 9);
      break;
    case 103:
      return $jjMoveStringLiteralDfa4_0(this$static, active0, 64);
    case 104:
      return $jjMoveStringLiteralDfa4_0(this$static, active0, 1024);
    case 110:
      return $jjMoveStringLiteralDfa4_0(this$static, active0, $intern_32);
    case 115:
      return $jjMoveStringLiteralDfa4_0(this$static, active0, 256);
    case 116:
      if (neq(and_0(active0, 512), 0))
        return $jjStartNfaWithStates_0(this$static, 3, 9, 9);
      return $jjMoveStringLiteralDfa4_0(this$static, active0, 2080);
    case 119:
      return $jjMoveStringLiteralDfa4_0(this$static, active0, 4236247040);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 2, active0), 3);
}

function $jjMoveStringLiteralDfa4_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 2, old0), 3);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 3, active0);
      return 4;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 65:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_40);
    case 67:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_31);
    case 69:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_33);
    case 76:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_41);
    case 82:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_34);
    case 84:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_42);
    case 101:
      if (neq(and_0(active0, 256), 0))
        return $jjStartNfaWithStates_0(this$static, 4, 8, 9);
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_30);
    case 104:
      if (neq(and_0(active0, 32), 0))
        return $jjStartNfaWithStates_0(this$static, 4, 5, 9);
      return $jjMoveStringLiteralDfa5_0(this$static, active0, 64);
    case 115:
      return $jjMoveStringLiteralDfa5_0(this$static, active0, $intern_32);
    case 116:
      if (neq(and_0(active0, 1024), 0))
        return $jjStartNfaWithStates_0(this$static, 4, 10, 9);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 3, active0), 4);
}

function $jjMoveStringLiteralDfa5_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 3, old0), 4);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 4, active0);
      return 5;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 101:
      return $jjMoveStringLiteralDfa6_0(this$static, active0, 2348810240);
    case 105:
      return $jjMoveStringLiteralDfa6_0(this$static, active0, 276824064);
    case 108:
      return $jjMoveStringLiteralDfa6_0(this$static, active0, $intern_33);
    case 112:
      return $jjMoveStringLiteralDfa6_0(this$static, active0, $intern_32);
    case 114:
      if (neq(and_0(active0, $intern_30), 0))
        return $jjStartNfaWithStates_0(this$static, 5, 11, 9);
      return $jjMoveStringLiteralDfa6_0(this$static, active0, $intern_40);
    case 116:
      if (neq(and_0(active0, 64), 0))
        return $jjStartNfaWithStates_0(this$static, 5, 6, 9);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 4, active0), 5);
}

function $jjMoveStringLiteralDfa6_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 4, old0), 5);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 5, active0);
      return 6;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 97:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, $intern_32);
    case 99:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, 1275068416);
    case 108:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, $intern_33);
    case 110:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, $intern_41);
    case 114:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, $intern_31);
    case 120:
      return $jjMoveStringLiteralDfa7_0(this$static, active0, $intern_42);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 5, active0), 6);
}

function $jjMoveStringLiteralDfa7_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 5, old0), 6);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 6, active0);
      return 7;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 40:
      if (neq(and_0(active0, $intern_40), 0))
        return $jjStopAtPos(this$static, 7, 30);
      break;
    case 99:
      return $jjMoveStringLiteralDfa8_0(this$static, active0, $intern_31);
    case 101:
      return $jjMoveStringLiteralDfa8_0(this$static, active0, $intern_41);
    case 105:
      return $jjMoveStringLiteralDfa8_0(this$static, active0, $intern_33);
    case 114:
      return $jjMoveStringLiteralDfa8_0(this$static, active0, $intern_32);
    case 116:
      return $jjMoveStringLiteralDfa8_0(this$static, active0, 2348810240);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 6, active0), 7);
}

function $jjMoveStringLiteralDfa8_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 6, old0), 7);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 7, active0);
      return 8;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 40:
      if (neq(and_0(active0, $intern_41), 0))
        return $jjStopAtPos(this$static, 8, 23);
      else if (neq(and_0(active0, $intern_42), 0))
        return $jjStopAtPos(this$static, 8, 31);
      break;
    case 97:
      return $jjMoveStringLiteralDfa9_0(this$static, active0, $intern_34);
    case 101:
      return $jjMoveStringLiteralDfa9_0(this$static, active0, $intern_32);
    case 108:
      return $jjMoveStringLiteralDfa9_0(this$static, active0, $intern_31);
    case 112:
      return $jjMoveStringLiteralDfa9_0(this$static, active0, $intern_33);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 7, active0), 8);
}

function $jjMoveStringLiteralDfa9_0(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 7, old0), 8);
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_0(this$static, 8, active0);
      return 9;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 101:
      return $jjMoveStringLiteralDfa10_0(this$static, active0, $intern_31);
    case 110:
      return $jjMoveStringLiteralDfa10_0(this$static, active0, 201392128);
    case 115:
      return $jjMoveStringLiteralDfa10_0(this$static, active0, $intern_33);
  }
  return $jjMoveNfa_0(this$static, $jjStopStringLiteralDfa_0(this$static, 8, active0), 9);
}

function $jjStartNfaWithStates_0(this$static, pos, kind, state){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = pos;
  try {
    this$static.curChar = $readChar(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return pos + 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_0(this$static, state, pos + 1);
}

function $jjStopAtPos(this$static, pos, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = pos;
  return pos + 1;
}

function $jjStopStringLiteralDfa_0(this$static, pos, active0){
  switch (pos) {
    case 0:
      if (neq(and_0(active0, $intern_43), 0))
        return 0;
      if (neq(and_0(active0, 4236378080), 0)) {
        this$static.jjmatchedKind = 19;
        return 9;
      }

      return -1;
    case 1:
      if (neq(and_0(active0, 4236378080), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 1;
        return 9;
      }

      return -1;
    case 2:
      if (neq(and_0(active0, 4236316640), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 2;
        return 9;
      }

      return -1;
    case 3:
      if (neq(and_0(active0, 4236316000), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 3;
        return 9;
      }

      if (neq(and_0(active0, 640), 0))
        return 9;
      return -1;
    case 4:
      if (neq(and_0(active0, 4236314688), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 4;
        return 9;
      }

      if (neq(and_0(active0, 1312), 0))
        return 9;
      return -1;
    case 5:
      if (neq(and_0(active0, $intern_39), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 5;
        return 9;
      }

      if (neq(and_0(active0, 2112), 0))
        return 9;
      return -1;
    case 6:
      if (neq(and_0(active0, $intern_39), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 6;
        return 9;
      }

      return -1;
    case 7:
      if (neq(and_0(active0, 3162570752), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 7;
        return 9;
      }

      return -1;
    case 8:
      if (neq(and_0(active0, 1006698496), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 8;
        return 9;
      }

      return -1;
    case 9:
      if (neq(and_0(active0, 1006698496), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 9;
        return 9;
      }

      return -1;
    case 10:
      if (neq(and_0(active0, 738263040), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 10;
        return 9;
      }

      return -1;
    case 11:
      if (neq(and_0(active0, 201392128), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 11;
        return 9;
      }

      return -1;
    case 12:
      if (neq(and_0(active0, $intern_34), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 12;
        return 9;
      }

      return -1;
    case 13:
      if (neq(and_0(active0, $intern_36), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 13;
        return 9;
      }

      return -1;
    case 14:
      if (neq(and_0(active0, $intern_36), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 14;
        return 9;
      }

      return -1;
    case 15:
      if (neq(and_0(active0, $intern_36), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 15;
        return 9;
      }

      return -1;
    case 16:
      if (neq(and_0(active0, $intern_36), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 16;
        return 9;
      }

      return -1;
    case 17:
      if (neq(and_0(active0, $intern_36), 0)) {
        this$static.jjmatchedKind = 19;
        this$static.jjmatchedPos = 17;
        return 9;
      }

      return -1;
    default:return -1;
  }
}

function CustomDrawingParserTokenManager(stream){
  $clinit_CustomDrawingParserTokenManager();
  $clinit_System();
  this.jjrounds = initUnidimensionalArray(I_classLit, $intern_20, 32, 22, 15, 1);
  this.jjstateSet = initUnidimensionalArray(I_classLit, $intern_20, 32, 44, 15, 1);
  this.input_stream = stream;
}

function jjCanMove_0(hiByte, i1, i2, l1, l2){
  switch (hiByte) {
    case 0:
      return neq(and_0(jjbitVec2[i2], l2), 0);
    default:if (neq(and_0(jjbitVec0[i1], l1), 0))
        return true;
      return false;
  }
}

defineClass(980, 1, {}, CustomDrawingParserTokenManager);
_.curChar = 0;
_.jjmatchedKind = 0;
_.jjmatchedPos = 0;
_.jjnewStateCnt = 0;
_.jjround = 0;
var jjbitVec0, jjbitVec2, jjnextStates, jjstrLiteralImages, jjtoToken, lexStateNames;
var Lcom_baselet_element_facet_customdrawings_gen_CustomDrawingParserTokenManager_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'CustomDrawingParserTokenManager', 980);
function $AdjustBuffSize(this$static){
  if (this$static.available == this$static.bufsize) {
    if (this$static.tokenBegin > $intern_30) {
      this$static.bufpos = 0;
      this$static.available = this$static.tokenBegin;
    }
     else 
      $ExpandBuff(this$static, false);
  }
   else 
    this$static.available > this$static.tokenBegin?(this$static.available = this$static.bufsize):this$static.tokenBegin - this$static.available < $intern_30?$ExpandBuff(this$static, true):(this$static.available = this$static.tokenBegin);
}

function $BeginToken(this$static){
  if (this$static.inBuf > 0) {
    --this$static.inBuf;
    ++this$static.bufpos == this$static.bufsize && (this$static.bufpos = 0);
    this$static.tokenBegin = this$static.bufpos;
    return this$static.buffer[this$static.bufpos];
  }
  this$static.tokenBegin = 0;
  this$static.bufpos = -1;
  return $readChar(this$static);
}

function $ExpandBuff(this$static, wrapAround){
  var newbufcolumn, newbuffer, newbufline, t;
  newbuffer = initUnidimensionalArray(C_classLit, $intern_23, 32, this$static.bufsize + $intern_30, 15, 1);
  newbufline = initUnidimensionalArray(I_classLit, $intern_20, 32, this$static.bufsize + $intern_30, 15, 1);
  newbufcolumn = initUnidimensionalArray(I_classLit, $intern_20, 32, this$static.bufsize + $intern_30, 15, 1);
  try {
    if (wrapAround) {
      arraycopy(this$static.buffer, this$static.tokenBegin, newbuffer, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.buffer, 0, newbuffer, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.buffer = newbuffer;
      arraycopy(this$static.bufline, this$static.tokenBegin, newbufline, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.bufline, 0, newbufline, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.bufline = newbufline;
      arraycopy(this$static.bufcolumn, this$static.tokenBegin, newbufcolumn, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.bufcolumn, 0, newbufcolumn, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.bufcolumn = newbufcolumn;
      this$static.bufpos += this$static.bufsize - this$static.tokenBegin;
    }
     else {
      arraycopy(this$static.buffer, this$static.tokenBegin, newbuffer, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.buffer = newbuffer;
      arraycopy(this$static.bufline, this$static.tokenBegin, newbufline, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.bufline = newbufline;
      arraycopy(this$static.bufcolumn, this$static.tokenBegin, newbufcolumn, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.bufcolumn = newbufcolumn;
      this$static.bufpos -= this$static.tokenBegin;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      t = $e0;
      throw toJs(new RuntimeException_0(t.getMessage()));
    }
     else 
      throw toJs($e0);
  }
  this$static.available = this$static.bufsize += $intern_30;
  this$static.tokenBegin = 0;
}

function $FillBuff(this$static){
  var e, i;
  this$static.maxNextCharInd == $intern_22 && (this$static.maxNextCharInd = this$static.nextCharInd = 0);
  try {
    if ((i = $read(this$static.inputStream, this$static.nextCharBuf, this$static.maxNextCharInd, $intern_22 - this$static.maxNextCharInd)) == -1) {
      this$static.inputStream._string = null;
      throw toJs(new IOException);
    }
     else 
      this$static.maxNextCharInd += i;
    return;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      e = $e0;
      if (this$static.bufpos != 0) {
        --this$static.bufpos;
        this$static.inBuf += 0;
        (this$static.bufpos -= 0) < 0 && (this$static.bufpos += this$static.bufsize);
      }
       else {
        this$static.bufline[this$static.bufpos] = this$static.line_0;
        this$static.bufcolumn[this$static.bufpos] = this$static.column;
      }
      throw toJs(e);
    }
     else 
      throw toJs($e0);
  }
}

function $GetImage(this$static){
  return this$static.bufpos >= this$static.tokenBegin?valueOf_12(this$static.buffer, this$static.tokenBegin, this$static.bufpos - this$static.tokenBegin + 1):valueOf_12(this$static.buffer, this$static.tokenBegin, this$static.bufsize - this$static.tokenBegin) + valueOf_12(this$static.buffer, 0, this$static.bufpos + 1);
}

function $UpdateLineColumn(this$static, c){
  ++this$static.column;
  if (this$static.prevCharIsLF) {
    this$static.prevCharIsLF = false;
    this$static.line_0 += this$static.column = 1;
  }
   else if (this$static.prevCharIsCR) {
    this$static.prevCharIsCR = false;
    c == 10?(this$static.prevCharIsLF = true):(this$static.line_0 += this$static.column = 1);
  }
  switch (c) {
    case 13:
      this$static.prevCharIsCR = true;
      break;
    case 10:
      this$static.prevCharIsLF = true;
      break;
    case 9:
      --this$static.column;
      this$static.column += this$static.tabSize - this$static.column % this$static.tabSize;
  }
  this$static.bufline[this$static.bufpos] = this$static.line_0;
  this$static.bufcolumn[this$static.bufpos] = this$static.column;
}

function $backup(this$static, amount){
  this$static.inBuf += amount;
  (this$static.bufpos -= amount) < 0 && (this$static.bufpos += this$static.bufsize);
}

function $getBeginColumn(this$static){
  return this$static.bufcolumn[this$static.tokenBegin];
}

function $getBeginLine(this$static){
  return this$static.bufline[this$static.tokenBegin];
}

function $getEndColumn(this$static){
  return this$static.bufcolumn[this$static.bufpos];
}

function $getEndLine(this$static){
  return this$static.bufline[this$static.bufpos];
}

function $readChar(this$static){
  var backSlashCnt, c;
  if (this$static.inBuf > 0) {
    --this$static.inBuf;
    ++this$static.bufpos == this$static.bufsize && (this$static.bufpos = 0);
    return this$static.buffer[this$static.bufpos];
  }
  ++this$static.bufpos == this$static.available && $AdjustBuffSize(this$static);
  if ((this$static.buffer[this$static.bufpos] = c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) == 92) {
    $UpdateLineColumn(this$static, c);
    backSlashCnt = 1;
    for (;;) {
      ++this$static.bufpos == this$static.available && $AdjustBuffSize(this$static);
      try {
        if ((this$static.buffer[this$static.bufpos] = c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) != 92) {
          $UpdateLineColumn(this$static, c);
          if (c == 117 && (backSlashCnt & 1) == 1) {
            --this$static.bufpos < 0 && (this$static.bufpos = this$static.bufsize - 1);
            break;
          }
          this$static.inBuf += backSlashCnt;
          (this$static.bufpos -= backSlashCnt) < 0 && (this$static.bufpos += this$static.bufsize);
          return 92;
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 13)) {
          backSlashCnt > 1 && (this$static.inBuf += backSlashCnt - 1 , (this$static.bufpos -= backSlashCnt - 1) < 0 && (this$static.bufpos += this$static.bufsize));
          return 92;
        }
         else 
          throw toJs($e0);
      }
      $UpdateLineColumn(this$static, c);
      ++backSlashCnt;
    }
    try {
      while ((c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) == 117)
        ++this$static.column;
      this$static.buffer[this$static.bufpos] = c = (hexval(c) << 12 | hexval((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) << 8 | hexval((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) << 4 | hexval((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff(this$static) , this$static.nextCharBuf[this$static.nextCharInd]))) & $intern_44;
      this$static.column += 4;
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 13)) {
        throw toJs(new RuntimeException_0('Invalid escape character at line ' + this$static.line_0 + ' column ' + this$static.column + '.'));
      }
       else 
        throw toJs($e1);
    }
    if (backSlashCnt == 1)
      return c;
    else {
      this$static.inBuf += backSlashCnt - 1;
      (this$static.bufpos -= backSlashCnt - 1) < 0 && (this$static.bufpos += this$static.bufsize);
      return 92;
    }
  }
   else {
    $UpdateLineColumn(this$static, c);
    return c;
  }
}

function JavaCharStream(dstream){
  this.inputStream = dstream;
  this.line_0 = 1;
  this.column = 0;
  this.available = this.bufsize = $intern_22;
  this.buffer = initUnidimensionalArray(C_classLit, $intern_23, 32, $intern_22, 15, 1);
  this.bufline = initUnidimensionalArray(I_classLit, $intern_20, 32, $intern_22, 15, 1);
  this.bufcolumn = initUnidimensionalArray(I_classLit, $intern_20, 32, $intern_22, 15, 1);
  this.nextCharBuf = initUnidimensionalArray(C_classLit, $intern_23, 32, $intern_22, 15, 1);
}

function hexval(c){
  switch (c) {
    case 48:
      return 0;
    case 49:
      return 1;
    case 50:
      return 2;
    case 51:
      return 3;
    case 52:
      return 4;
    case 53:
      return 5;
    case 54:
      return 6;
    case 55:
      return 7;
    case 56:
      return 8;
    case 57:
      return 9;
    case 97:
    case 65:
      return 10;
    case 98:
    case 66:
      return 11;
    case 99:
    case 67:
      return 12;
    case 100:
    case 68:
      return 13;
    case 101:
    case 69:
      return 14;
    case 102:
    case 70:
      return 15;
  }
  throw toJs(new IOException);
}

defineClass(371, 1, {}, JavaCharStream);
_.available = 0;
_.bufpos = -1;
_.bufsize = 0;
_.column = 0;
_.inBuf = 0;
_.line_0 = 1;
_.maxNextCharInd = 0;
_.nextCharInd = -1;
_.prevCharIsCR = false;
_.prevCharIsLF = false;
_.tabSize = 1;
_.tokenBegin = 0;
var Lcom_baselet_element_facet_customdrawings_gen_JavaCharStream_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'JavaCharStream', 371);
function ParseException(){
  Exception_0.call(this);
}

function ParseException_0(currentTokenVal, expectedTokenSequencesVal, tokenImageVal){
  Exception_1.call(this, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
}

function ParseException_1(message){
  Exception_1.call(this, message);
}

function add_escapes(str){
  var ch_0, i, number, retval, s;
  retval = new StringBuffer;
  for (i = 0; i < str.length; i++) {
    switch (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i)) {
      case 8:
        retval.string += '\\b';
        continue;
      case 9:
        retval.string += '\\t';
        continue;
      case 10:
        retval.string += '\\n';
        continue;
      case 12:
        retval.string += '\\f';
        continue;
      case 13:
        retval.string += '\\r';
        continue;
      case 34:
        retval.string += '\\"';
        continue;
      case 39:
        retval.string += "\\'";
        continue;
      case 92:
        retval.string += '\\\\';
        continue;
      default:if ((ch_0 = (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i))) < 32 || ch_0 > 126) {
          s = (number = ch_0 , '0000' + number.toString(16));
          $append_0(retval, '\\u' + $substring_0(s, s.length - 4, s.length));
        }
         else {
          retval.string += String.fromCharCode(ch_0);
        }

        continue;
    }
  }
  return retval.string;
}

function initialise(currentToken, expectedTokenSequences, tokenImage){
  var entry, entryIterator, escapedTokenText, expected, i, i0, j, maxSize, numExpectedTokens, option, option$iterator, sb, sortedOptions, tok, tokenText;
  sb = new StringBuilder;
  expected = new StringBuffer;
  maxSize = 0;
  sortedOptions = new TreeSet;
  for (i0 = 0; i0 < expectedTokenSequences.length; i0++) {
    maxSize < expectedTokenSequences[i0].length && (maxSize = expectedTokenSequences[i0].length);
    for (j = 0; j < expectedTokenSequences[i0].length; j++) {
      $add_18(sortedOptions, tokenImage[expectedTokenSequences[i0][j]]);
    }
  }
  for (option$iterator = (entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(sortedOptions.map_0)).map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator)); $hasNext(option$iterator.val$entryIterator2.iter);) {
    option = (entry = $next_6(option$iterator.val$entryIterator2) , castToString(entry.getKey()));
    $append_0($append_0((expected.string += '    ' , expected), option), EOL);
  }
  sb.string += 'Encountered unexpected token:';
  tok = currentToken.next_0;
  for (i = 0; i < maxSize; i++) {
    tokenText = tok.image;
    escapedTokenText = add_escapes(tokenText);
    i != 0 && (sb.string += ' ' , sb);
    if (tok.kind == 0) {
      sb.string += '' + tokenImage[0];
      break;
    }
    sb.string += ' "';
    sb.string += '' + escapedTokenText;
    sb.string += '"';
    $append_5(sb, ' ' + tokenImage[tok.kind]);
    tok = tok.next_0;
  }
  $append_5($append_5($append_5(sb, EOL), '    '), 'at line ' + currentToken.next_0.beginLine + ', column ' + currentToken.next_0.beginColumn);
  $append_5((sb.string += '.' , sb), EOL);
  if (expectedTokenSequences.length == 0)
  ;
  else {
    numExpectedTokens = expectedTokenSequences.length;
    $append_5($append_5(sb, EOL), 'Was expecting' + (numExpectedTokens == 1?':':' one of:') + EOL + EOL);
    $append_5(sb, expected.string);
  }
  return sb.string;
}

defineClass(75, 14, {75:1, 3:1, 14:1, 17:1}, ParseException, ParseException_0, ParseException_1);
var EOL = '\n';
var Lcom_baselet_element_facet_customdrawings_gen_ParseException_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'ParseException', 75);
function $read(this$static, cbuf, off, len){
  var numBytesInBuffer, numBytesToRead, numCharsOutstandingInString;
  numCharsOutstandingInString = this$static._size - this$static._position;
  if (numCharsOutstandingInString == 0) {
    return -1;
  }
  numBytesInBuffer = cbuf.length;
  numBytesToRead = numBytesInBuffer - off;
  numBytesToRead = numBytesToRead > len?len:numBytesToRead;
  numBytesToRead > numCharsOutstandingInString && (numBytesToRead = numCharsOutstandingInString);
  $getChars(this$static._string, this$static._position, this$static._position + numBytesToRead, cbuf, off);
  this$static._position += numBytesToRead;
  return numBytesToRead;
}

function StringProvider(string){
  this._string = string;
  this._size = string.length;
}

defineClass(969, 1, {}, StringProvider);
_._position = 0;
_._size = 0;
var Lcom_baselet_element_facet_customdrawings_gen_StringProvider_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'StringProvider', 969);
function Token(){
}

function Token_0(kind, image){
  this.kind = kind;
  this.image = image;
}

defineClass(368, 1, $intern_23, Token, Token_0);
_.toString_0 = function toString_20(){
  return this.image;
}
;
_.beginColumn = 0;
_.beginLine = 0;
_.kind = 0;
var Lcom_baselet_element_facet_customdrawings_gen_Token_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'Token', 368);
function TokenMgrException(message){
  RuntimeException_0.call(this, message);
}

function TokenMgrException_0(EOFSeen, errorLine, errorColumn, errorAfter, curChar){
  var curChar1;
  TokenMgrException.call(this, (curChar1 = curChar & $intern_44 , 'Lexical error at line ' + errorLine + ', column ' + errorColumn + '.  Encountered: ' + (EOFSeen?'<EOF> ':'"' + addEscapes(String.fromCharCode(curChar1)) + '"' + ' (' + curChar + '), ') + 'after : "' + addEscapes(errorAfter) + '"'));
}

function addEscapes(str){
  var ch_0, i, number, retval, s;
  retval = new StringBuffer;
  for (i = 0; i < str.length; i++) {
    switch (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i)) {
      case 8:
        retval.string += '\\b';
        continue;
      case 9:
        retval.string += '\\t';
        continue;
      case 10:
        retval.string += '\\n';
        continue;
      case 12:
        retval.string += '\\f';
        continue;
      case 13:
        retval.string += '\\r';
        continue;
      case 34:
        retval.string += '\\"';
        continue;
      case 39:
        retval.string += "\\'";
        continue;
      case 92:
        retval.string += '\\\\';
        continue;
      default:if ((ch_0 = (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i))) < 32 || ch_0 > 126) {
          s = (number = ch_0 , '0000' + number.toString(16));
          $append_0(retval, '\\u' + $substring_0(s, s.length - 4, s.length));
        }
         else {
          retval.string += String.fromCharCode(ch_0);
        }

        continue;
    }
  }
  return retval.string;
}

defineClass(243, 11, {243:1, 3:1, 14:1, 11:1, 17:1}, TokenMgrException_0);
_.getMessage = function getMessage_0(){
  return this.detailMessage;
}
;
var Lcom_baselet_element_facet_customdrawings_gen_TokenMgrException_2_classLit = createForClass('com.baselet.element.facet.customdrawings.gen', 'TokenMgrException', 243);
function $clinit_ActiveClassFacet(){
  $clinit_ActiveClassFacet = emptyMethod;
  INSTANCE_16 = new ActiveClassFacet;
}

function ActiveClassFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(936, 86, $intern_15, ActiveClassFacet);
_.getKeyValue = function getKeyValue_10(){
  return new KeyValueFacet$KeyValue_1('type', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_ActiveClassFacet$ClassTypeEnum() , ACTCLASS), 'make class active (double left/right border)')]));
}
;
_.getPriority = function getPriority_4(){
  return $clinit_Priority() , LOW;
}
;
_.handleValue = function handleValue_10(value_0, state){
}
;
_.parsingFinished = function parsingFinished_1(state, handledLines){
  var drawer, xLimits;
  if (!handledLines.isEmpty()) {
    valueOf_4($toUpperCase($extractValue(this, castToString(handledLines.get_0(0))), ($clinit_Locale() , ENGLISH)));
    $addToLeftAndRight(state.buffer, 6);
    xLimits = $getXLimits(state, state.textPrintPosition + state.buffer.top_0);
    drawer = state.drawer;
    $drawLine(drawer, $doubleValue_0(xLimits.left_0), state.buffer.top_0, $doubleValue_0(xLimits.left_0), state.gridElementSize.height_0);
    $drawLine(drawer, $doubleValue_0(xLimits.right), state.buffer.top_0, $doubleValue_0(xLimits.right), state.gridElementSize.height_0);
  }
}
;
var INSTANCE_16;
var Lcom_baselet_element_facet_specific_ActiveClassFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'ActiveClassFacet', 936);
function $clinit_ActiveClassFacet$ClassTypeEnum(){
  $clinit_ActiveClassFacet$ClassTypeEnum = emptyMethod;
  ACTCLASS = new ActiveClassFacet$ClassTypeEnum;
}

function ActiveClassFacet$ClassTypeEnum(){
  Enum.call(this, 'ACTCLASS', 0);
}

function valueOf_4(name_0){
  $clinit_ActiveClassFacet$ClassTypeEnum();
  return valueOf(($clinit_ActiveClassFacet$ClassTypeEnum$Map() , $MAP_4), name_0);
}

function values_16(){
  $clinit_ActiveClassFacet$ClassTypeEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_ActiveClassFacet$ClassTypeEnum_2_classLit, 1), $intern_5, 240, 0, [ACTCLASS]);
}

defineClass(240, 8, {240:1, 3:1, 9:1, 8:1}, ActiveClassFacet$ClassTypeEnum);
var ACTCLASS;
var Lcom_baselet_element_facet_specific_ActiveClassFacet$ClassTypeEnum_2_classLit = createForEnum('com.baselet.element.facet.specific', 'ActiveClassFacet/ClassTypeEnum', 240, values_16);
function $clinit_ActiveClassFacet$ClassTypeEnum$Map(){
  $clinit_ActiveClassFacet$ClassTypeEnum$Map = emptyMethod;
  $MAP_4 = createValueOfMap(($clinit_ActiveClassFacet$ClassTypeEnum() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_ActiveClassFacet$ClassTypeEnum_2_classLit, 1), $intern_5, 240, 0, [ACTCLASS])));
}

var $MAP_4;
function $clinit_HierarchyFacet(){
  $clinit_HierarchyFacet = emptyMethod;
  INSTANCE_17 = new HierarchyFacet;
}

function $updateElementSize(state, lowerRightPoint, textPos, widthAddon, heightAddon){
  $updateMinimumSize(state, $doubleValue_0(textPos.x_0) + widthAddon, $doubleValue_0(lowerRightPoint.y_0) + heightAddon);
}

function HierarchyFacet(){
  Facet.call(this);
}

function drawLinesAndUpperLeftSymbol(lowerRightPoint, drawer, cache, lineWithoutTabs, tabCount, arrow){
  var lowerLeft, lowerRight, p1, p2, p3, ref, upper;
  if (tabCount != 0) {
    try {
      ref = castTo($get_7(cache.points, tabCount - 1), 288);
      p1 = new PointDouble($doubleValue_0(lowerRightPoint.x_0), $doubleValue_0(lowerRightPoint.y_0));
      p2 = new PointDouble($doubleValue_0(ref.p.x_0), $doubleValue_0(lowerRightPoint.y_0));
      p3 = new PointDouble($doubleValue_0(ref.p.x_0), $doubleValue_0(ref.p.y_0));
      $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [p1, p2, p3]));
      if (!ref.hasSymbol) {
        ref.hasSymbol = true;
        if (arrow) {
          upper = new PointDouble($doubleValue_0(ref.p.x_0), $doubleValue_0(ref.p.y_0) - 12);
          lowerLeft = new PointDouble($doubleValue_0(ref.p.x_0) - 6, $doubleValue_0(ref.p.y_0));
          lowerRight = new PointDouble($doubleValue_0(ref.p.x_0) + 6, $doubleValue_0(ref.p.y_0));
          $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [upper, lowerLeft, lowerRight, upper]));
        }
         else {
          $drawCircle_0(drawer, $doubleValue_0(ref.p.x_0), $doubleValue_0(ref.p.y_0) - 5, 5);
          $drawLine(drawer, $doubleValue_0(ref.p.x_0), $doubleValue_0(ref.p.y_0) - 10 + 2, $doubleValue_0(ref.p.x_0), $doubleValue_0(ref.p.y_0) - 2);
          $drawLine(drawer, $doubleValue_0(ref.p.x_0) - 5 + 2, $doubleValue_0(ref.p.y_0) - 5, $doubleValue_0(ref.p.x_0) + 5 - 2, $doubleValue_0(ref.p.y_0) - 5);
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 66)) {
        throw toJs(new RuntimeException_0('Too many tabs in line nr.' + (cache.lineNr + 1) + ': ' + lineWithoutTabs));
      }
       else 
        throw toJs($e0);
    }
  }
}

defineClass(905, 19, $intern_15, HierarchyFacet);
_.checkStart = function checkStart_6(line, state){
  return true;
}
;
_.handleLine = function handleLine_7(line, state){
  var actorHCenter, actorVTop, bgBefore, cache, drawer, lineWithoutTabs, lowerRightPoint, styleAtDrawingCall, tabCount, textPos, type_0, type$array, type$index, type$max, upperLeftPoint, xPos, yPos;
  if (line.length == 0) {
    return;
  }
  cache = castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_specific_HierarchyFacet_2_classLit, new HierarchyFacet$Cache), 289);
  for (type$array = ($clinit_HierarchyFacet$HierarchyType() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_HierarchyFacet$HierarchyType_2_classLit, 1), $intern_5, 190, 0, [Actor_0, Package_0, WorkProcess])) , type$index = 0 , type$max = type$array.length; type$index < type$max; ++type$index) {
    type_0 = type$array[type$index];
    if ($equals_6(line, 'type=' + type_0)) {
      cache.type_0 = type_0;
      return;
    }
  }
  drawer = state.drawer;
  drawer.layer = 0;
  bgBefore = drawer.style_0.backgroundColor_0;
  $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
  lineWithoutTabs = $replace_0(line, '\t', '');
  tabCount = line.length - lineWithoutTabs.length;
  upperLeftPoint = null;
  if (cache.type_0 == Actor_0) {
    actorHCenter = 20 + 50 * tabCount;
    actorVTop = 10 + cache.lineNr * 10 * 6;
    drawActor(drawer, actorHCenter, actorVTop, 10);
    upperLeftPoint = new PointDouble(actorHCenter, actorVTop + 55 + 12);
    lowerRightPoint = new PointDouble(actorHCenter - 20, actorVTop + 25);
    drawLinesAndUpperLeftSymbol(lowerRightPoint, drawer, cache, lineWithoutTabs, tabCount, true);
    textPos = new PointDouble(actorHCenter + 20, actorVTop + 30);
    $print_1(drawer, lineWithoutTabs, textPos, ($clinit_AlignHorizontal() , LEFT));
    $updateElementSize(state, lowerRightPoint, textPos, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(lineWithoutTabs))).width_0, 50);
  }
   else if (cache.type_0 == Package_0) {
    xPos = 10 + tabCount * 30 * 1.4;
    yPos = 10 + cache.lineNr * 20 * 1.6;
    drawPackage(drawer, xPos, yPos, 5, 10, 20, 30);
    upperLeftPoint = new PointDouble(xPos + 9, yPos + 20 + 10);
    lowerRightPoint = new PointDouble(xPos, yPos + 10);
    drawLinesAndUpperLeftSymbol(lowerRightPoint, drawer, cache, lineWithoutTabs, tabCount, false);
    textPos = new PointDouble(xPos + 34.5, yPos + 16);
    $print_1(drawer, lineWithoutTabs, textPos, ($clinit_AlignHorizontal() , LEFT));
    $updateElementSize(state, lowerRightPoint, textPos, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(lineWithoutTabs))).width_0, 30);
  }
   else if (cache.type_0 == WorkProcess) {
    xPos = 10 + tabCount * 140;
    yPos = 10 + cache.lineNr * 40 * 1.2;
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, xPos, yPos, 140, 40));
    upperLeftPoint = new PointDouble(xPos + 70, yPos + 40 + 12);
    lowerRightPoint = new PointDouble(xPos, yPos + 20);
    drawLinesAndUpperLeftSymbol(lowerRightPoint, drawer, cache, lineWithoutTabs, tabCount, true);
    textPos = new PointDouble(xPos + 70, yPos + 20 + $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(lineWithoutTabs))).height_0 / 2);
    $print_1(drawer, lineWithoutTabs, textPos, ($clinit_AlignHorizontal() , CENTER));
    $updateMinimumSize(state, $doubleValue_0(textPos.x_0) + 70, $doubleValue_0(lowerRightPoint.y_0) + 40);
  }
  tabCount == 0 && (cache.points.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1));
  while (cache.points.array.length > tabCount) {
    $remove_12(cache.points, cache.points.array.length - 1);
  }
  $add_13(cache.points, new HierarchyFacet$ReferencePoint(upperLeftPoint));
  ++cache.lineNr;
  drawer.layer = 1;
  !bgBefore?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, bgBefore);
}
;
var INSTANCE_17;
var Lcom_baselet_element_facet_specific_HierarchyFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'HierarchyFacet', 905);
function HierarchyFacet$Cache(){
  this.type_0 = ($clinit_HierarchyFacet$HierarchyType() , Actor_0);
  this.points = new ArrayList;
}

defineClass(289, 1, {289:1}, HierarchyFacet$Cache);
_.lineNr = 0;
var Lcom_baselet_element_facet_specific_HierarchyFacet$Cache_2_classLit = createForClass('com.baselet.element.facet.specific', 'HierarchyFacet/Cache', 289);
function $clinit_HierarchyFacet$HierarchyType(){
  $clinit_HierarchyFacet$HierarchyType = emptyMethod;
  Actor_0 = new HierarchyFacet$HierarchyType('Actor', 0);
  Package_0 = new HierarchyFacet$HierarchyType('Package', 1);
  WorkProcess = new HierarchyFacet$HierarchyType('WorkProcess', 2);
}

function HierarchyFacet$HierarchyType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_17(){
  $clinit_HierarchyFacet$HierarchyType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_HierarchyFacet$HierarchyType_2_classLit, 1), $intern_5, 190, 0, [Actor_0, Package_0, WorkProcess]);
}

defineClass(190, 8, {190:1, 3:1, 9:1, 8:1}, HierarchyFacet$HierarchyType);
var Actor_0, Package_0, WorkProcess;
var Lcom_baselet_element_facet_specific_HierarchyFacet$HierarchyType_2_classLit = createForEnum('com.baselet.element.facet.specific', 'HierarchyFacet/HierarchyType', 190, values_17);
function HierarchyFacet$ReferencePoint(p){
  this.p = p;
}

defineClass(288, 1, {288:1}, HierarchyFacet$ReferencePoint);
_.hasSymbol = false;
var Lcom_baselet_element_facet_specific_HierarchyFacet$ReferencePoint_2_classLit = createForClass('com.baselet.element.facet.specific', 'HierarchyFacet/ReferencePoint', 288);
function $clinit_InnerClassFacet(){
  $clinit_InnerClassFacet = emptyMethod;
  INSTANCE_18 = new InnerClassFacet;
}

function InnerClassFacet(){
  Facet.call(this);
}

defineClass(934, 19, $intern_15, InnerClassFacet);
_.checkStart = function checkStart_7(line, state){
  return $equals_6(line, '{innerclass') || $equals_6(line, 'innerclass}');
}
;
_.handleLine = function handleLine_8(line, state){
  var alignment, drawer, height, innerClassStartPoints, oldColor, previousClassSettings, settings, start_0, xLimit;
  innerClassStartPoints = castTo($getOrInitFacetResponse(state, Lcom_baselet_element_facet_specific_InnerClassFacet_2_classLit, new Stack), 299);
  drawer = state.drawer;
  if ($equals_6(line, '{innerclass')) {
    settings = new InnerClassFacet$ClassSettings(state.alignment.horizontal, state.alignment.vertical, state.textPrintPosition + state.buffer.top_0 - $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0);
    $add_13(innerClassStartPoints.arrayList, settings);
    $addToLeftAndRight(state.buffer, 5);
    state.textPrintPosition += 4;
    $reset(state.alignment);
  }
   else if ($equals_6(line, 'innerclass}')) {
    previousClassSettings = castTo($pop_0(innerClassStartPoints), 292);
    start_0 = previousClassSettings.start_0;
    height = state.textPrintPosition + state.buffer.top_0 - $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 - start_0;
    xLimit = $getXLimits(state, height);
    oldColor = drawer.style_0.backgroundColor_0;
    $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    $drawRectangle_1(drawer, $doubleValue_0(xLimit.left_0), start_0, $doubleValue_0(xLimit.right) - $doubleValue_0(xLimit.left_0), height);
    !oldColor?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, oldColor);
    state.textPrintPosition += 4;
    $addToLeftAndRight(state.buffer, -5);
    alignment = state.alignment;
    $setHorizontal(alignment, false, previousClassSettings.hAlign);
    $setVertical(alignment, false, previousClassSettings.vAlign);
  }
}
;
var INSTANCE_18;
var Lcom_baselet_element_facet_specific_InnerClassFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'InnerClassFacet', 934);
function InnerClassFacet$ClassSettings(hAlign, vAlign, startpoint){
  this.hAlign = hAlign;
  this.vAlign = vAlign;
  this.start_0 = startpoint;
}

defineClass(292, 1, {292:1}, InnerClassFacet$ClassSettings);
_.start_0 = 0;
var Lcom_baselet_element_facet_specific_InnerClassFacet$ClassSettings_2_classLit = createForClass('com.baselet.element.facet.specific', 'InnerClassFacet/ClassSettings', 292);
function $clinit_SpecialStateTypeFacet(){
  $clinit_SpecialStateTypeFacet = emptyMethod;
  INSTANCE_19 = new SpecialStateTypeFacet;
}

function $drawBlackEllipse(drawer, width_0, height, xY){
  var currentTheme, oldBg, styleAtDrawingCall;
  oldBg = drawer.style_0.backgroundColor_0;
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  drawer.style_0.backgroundColor_0 == $getColor(currentTheme, ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))?$setBackgroundColor(drawer, $transparency($getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , BLACK)), ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0)):$setBackgroundColor(drawer, $transparency(drawer.style_0.backgroundColor_0, ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0));
  styleAtDrawingCall = $cloneFromMe(drawer.style_0);
  $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, xY, xY, width_0, height));
  !oldBg?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), DEFAULT_BACKGROUND)):$setBackgroundColor_0(drawer.style_0, oldBg);
}

function $drawDecision(drawer, w, h){
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0.5 + w / 2, 1), new PointDouble(w, 0.5 + h / 2), new PointDouble(0.5 + w / 2, h), new PointDouble(1, 0.5 + h / 2), new PointDouble(0.5 + w / 2, 1)]));
}

function SpecialStateTypeFacet(){
  KeyValueFacet.call(this);
}

defineClass(938, 278, $intern_15, SpecialStateTypeFacet);
_.getKeyValue = function getKeyValue_11(){
  return new KeyValueFacet$KeyValue_1('type', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_SpecialStateTypeFacet$StateTypeEnum() , INITIAL), 'an initial state'), new KeyValueFacet$ValueInfo(FINAL, 'a final state for the activity'), new KeyValueFacet$ValueInfo(FLOW_FINAL, 'a final state for a flow'), new KeyValueFacet$ValueInfo(HISTORY_SHALLOW, 'a shallow history state'), new KeyValueFacet$ValueInfo(HISTORY_DEEP, 'a deep history state'), new KeyValueFacet$ValueInfo(TERMINATION, 'a termination state'), new KeyValueFacet$ValueInfo(DECISION, 'a decision')]));
}
;
_.handleValue = function handleValue_11(value_0, state){
  var drawer, ellipseDistance, h, lowerXVal, lowerY, oldFg, s, styleAtDrawingCall, text_0, type_0, upperXVal, upperY, w, x_0, y_0;
  drawer = state.drawer;
  type_0 = valueOf_5($toUpperCase(value_0, ($clinit_Locale() , ENGLISH)));
  s = state.gridElementSize;
  w = s.width_0 - 1;
  h = s.height_0 - 1;
  if (type_0 == ($clinit_SpecialStateTypeFacet$StateTypeEnum() , INITIAL)) {
    $drawBlackEllipse(drawer, w - 1, h - 1, 1);
  }
   else if (type_0 == FINAL) {
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, 0, 0, w, h));
    oldFg = drawer.style_0.foregroundColor;
    $setForegroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    ellipseDistance = $wnd.Math.max(w - 1, h - 1) / 5.5;
    $drawBlackEllipse(drawer, w - ellipseDistance * 2, h - ellipseDistance * 2, ellipseDistance);
    !oldFg?$setForegroundColor_1(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND))):$setForegroundColor_1(drawer.style_0, oldFg);
  }
   else if (type_0 == FLOW_FINAL) {
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, 0, 0, w, h));
    upperY = h / 6;
    lowerY = h - upperY;
    upperXVal = createForEllipse(upperY, h, w);
    lowerXVal = createForEllipse(lowerY, h, w);
    $drawLine(drawer, $doubleValue_0(upperXVal.left_0), upperY, $doubleValue_0(lowerXVal.right), lowerY);
    $drawLine(drawer, $doubleValue_0(lowerXVal.left_0), lowerY, $doubleValue_0(upperXVal.right), upperY);
  }
   else if (type_0 == HISTORY_SHALLOW || type_0 == HISTORY_DEEP) {
    type_0 == HISTORY_SHALLOW?(text_0 = '*H*'):(text_0 = '*H**');
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, 0, 0, w, h));
    x_0 = (w - $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(text_0))).width_0) / 2;
    y_0 = (h + $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(text_0))).height_0) / 2;
    $print_1(drawer, text_0, new PointDouble(x_0, y_0), ($clinit_AlignHorizontal() , LEFT));
  }
   else if (type_0 == TERMINATION) {
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(w, h)]));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(w, 0), new PointDouble(0, h)]));
  }
   else 
    type_0 == DECISION && $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0.5 + w / 2, 1), new PointDouble(w, 0.5 + h / 2), new PointDouble(0.5 + w / 2, h), new PointDouble(1, 0.5 + h / 2), new PointDouble(0.5 + w / 2, 1)]));
}
;
_.parsingFinished = function parsingFinished_2(state, handledLines){
  var s;
  if (handledLines.isEmpty()) {
    s = state.gridElementSize;
    $drawDecision(state.drawer, s.width_0 - 1, s.height_0 - 1);
  }
}
;
var INSTANCE_19;
var Lcom_baselet_element_facet_specific_SpecialStateTypeFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'SpecialStateTypeFacet', 938);
function $clinit_SpecialStateTypeFacet$StateTypeEnum(){
  $clinit_SpecialStateTypeFacet$StateTypeEnum = emptyMethod;
  INITIAL = new SpecialStateTypeFacet$StateTypeEnum('INITIAL', 0);
  FINAL = new SpecialStateTypeFacet$StateTypeEnum('FINAL', 1);
  FLOW_FINAL = new SpecialStateTypeFacet$StateTypeEnum('FLOW_FINAL', 2);
  TERMINATION = new SpecialStateTypeFacet$StateTypeEnum('TERMINATION', 3);
  DECISION = new SpecialStateTypeFacet$StateTypeEnum('DECISION', 4);
  HISTORY_SHALLOW = new SpecialStateTypeFacet$StateTypeEnum('HISTORY_SHALLOW', 5);
  HISTORY_DEEP = new SpecialStateTypeFacet$StateTypeEnum('HISTORY_DEEP', 6);
}

function SpecialStateTypeFacet$StateTypeEnum(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_5(name_0){
  $clinit_SpecialStateTypeFacet$StateTypeEnum();
  return valueOf(($clinit_SpecialStateTypeFacet$StateTypeEnum$Map() , $MAP_5), name_0);
}

function values_18(){
  $clinit_SpecialStateTypeFacet$StateTypeEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_SpecialStateTypeFacet$StateTypeEnum_2_classLit, 1), $intern_5, 124, 0, [INITIAL, FINAL, FLOW_FINAL, TERMINATION, DECISION, HISTORY_SHALLOW, HISTORY_DEEP]);
}

defineClass(124, 8, {124:1, 3:1, 9:1, 8:1}, SpecialStateTypeFacet$StateTypeEnum);
var DECISION, FINAL, FLOW_FINAL, HISTORY_DEEP, HISTORY_SHALLOW, INITIAL, TERMINATION;
var Lcom_baselet_element_facet_specific_SpecialStateTypeFacet$StateTypeEnum_2_classLit = createForEnum('com.baselet.element.facet.specific', 'SpecialStateTypeFacet/StateTypeEnum', 124, values_18);
function $clinit_SpecialStateTypeFacet$StateTypeEnum$Map(){
  $clinit_SpecialStateTypeFacet$StateTypeEnum$Map = emptyMethod;
  $MAP_5 = createValueOfMap(($clinit_SpecialStateTypeFacet$StateTypeEnum() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_SpecialStateTypeFacet$StateTypeEnum_2_classLit, 1), $intern_5, 124, 0, [INITIAL, FINAL, FLOW_FINAL, TERMINATION, DECISION, HISTORY_SHALLOW, HISTORY_DEEP])));
}

var $MAP_5;
function $clinit_StateTypeFacet(){
  $clinit_StateTypeFacet = emptyMethod;
  INSTANCE_20 = new StateTypeFacet;
}

function $drawActionState(drawer, s){
  var radius;
  radius = $wnd.Math.min(20, $wnd.Math.min(s.width_0, s.height_0) / 5 | 0);
  $drawRectangleRound_0(drawer, 0, 0, s.width_0, s.height_0, radius);
}

function StateTypeFacet(){
  FirstRunKeyValueFacet.call(this);
}

defineClass(939, 86, $intern_15, StateTypeFacet);
_.getKeyValue = function getKeyValue_12(){
  return new KeyValueFacet$KeyValue_1('type', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_StateTypeFacet$ActionTypeEnum() , STATE), 'a default state'), new KeyValueFacet$ValueInfo(SENDER, 'an action which sends a signal'), new KeyValueFacet$ValueInfo(RECEIVER, 'an action which receives a signal')]));
}
;
_.handleValue = function handleValue_12(value_0, state){
}
;
_.parsingFinished = function parsingFinished_3(state, handledLines){
  var drawer, radius, s, type_0;
  if (handledLines.isEmpty()) {
    $drawActionState(state.drawer, state.gridElementSize);
  }
   else if (handledLines.size_1() == 1) {
    drawer = state.drawer;
    type_0 = valueOf_6($extractValue(this, $toUpperCase(castToString(handledLines.get_0(0)), ($clinit_Locale() , ENGLISH))));
    s = state.gridElementSize;
    if (type_0 == ($clinit_StateTypeFacet$ActionTypeEnum() , STATE)) {
      radius = $wnd.Math.min(20, $wnd.Math.min(s.width_0, s.height_0) / 5 | 0);
      $drawRectangleRound_0(drawer, 0, 0, s.width_0, s.height_0, radius);
    }
     else if (type_0 == SENDER) {
      $drawLines(drawer, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(s.width_0 - s.width_0 / 5, 0), new PointDouble(s.width_0, s.height_0 / 2), new PointDouble(s.width_0 - s.width_0 / 5, s.height_0), new PointDouble(0, s.height_0), new PointDouble(0, 0)])));
    }
     else if (type_0 == RECEIVER) {
      $addToLeft(state.buffer, s.width_0 / 5);
      $drawLines(drawer, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(s.width_0, 0), new PointDouble(s.width_0, s.height_0), new PointDouble(0, s.height_0), new PointDouble(s.width_0 / 5, s.height_0 / 2), new PointDouble(0, 0)])));
    }
  }
}
;
var INSTANCE_20;
var Lcom_baselet_element_facet_specific_StateTypeFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'StateTypeFacet', 939);
function $clinit_StateTypeFacet$ActionTypeEnum(){
  $clinit_StateTypeFacet$ActionTypeEnum = emptyMethod;
  STATE = new StateTypeFacet$ActionTypeEnum('STATE', 0);
  SENDER = new StateTypeFacet$ActionTypeEnum('SENDER', 1);
  RECEIVER = new StateTypeFacet$ActionTypeEnum('RECEIVER', 2);
}

function StateTypeFacet$ActionTypeEnum(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_6(name_0){
  $clinit_StateTypeFacet$ActionTypeEnum();
  return valueOf(($clinit_StateTypeFacet$ActionTypeEnum$Map() , $MAP_6), name_0);
}

function values_19(){
  $clinit_StateTypeFacet$ActionTypeEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_StateTypeFacet$ActionTypeEnum_2_classLit, 1), $intern_5, 193, 0, [STATE, SENDER, RECEIVER]);
}

defineClass(193, 8, {193:1, 3:1, 9:1, 8:1}, StateTypeFacet$ActionTypeEnum);
var RECEIVER, SENDER, STATE;
var Lcom_baselet_element_facet_specific_StateTypeFacet$ActionTypeEnum_2_classLit = createForEnum('com.baselet.element.facet.specific', 'StateTypeFacet/ActionTypeEnum', 193, values_19);
function $clinit_StateTypeFacet$ActionTypeEnum$Map(){
  $clinit_StateTypeFacet$ActionTypeEnum$Map = emptyMethod;
  $MAP_6 = createValueOfMap(($clinit_StateTypeFacet$ActionTypeEnum() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_StateTypeFacet$ActionTypeEnum_2_classLit, 1), $intern_5, 193, 0, [STATE, SENDER, RECEIVER])));
}

var $MAP_6;
function $clinit_SubStateSymbolFacet(){
  $clinit_SubStateSymbolFacet = emptyMethod;
  INSTANCE_21 = new SubStateSymbolFacet;
}

function SubStateSymbolFacet(){
  KeyValueFacet.call(this);
}

defineClass(940, 278, $intern_15, SubStateSymbolFacet);
_.getKeyValue = function getKeyValue_13(){
  return new KeyValueFacet$KeyValue_1('symbol', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_SubStateSymbolFacet$SubStateSymbolEnum() , SUBSTATE), 'draw a substate symbol in the lower right corner')]));
}
;
_.handleValue = function handleValue_13(value_0, state){
  var cH, cR, cW, drawer, h, prevBackgroundColor, styleAtDrawingCall, styleAtDrawingCall0, symbol, w;
  drawer = state.drawer;
  drawer.layer = 0;
  prevBackgroundColor = drawer.style_0.backgroundColor_0;
  $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
  symbol = valueOf_7($toUpperCase(value_0, ($clinit_Locale() , ENGLISH)));
  w = state.gridElementSize.width_0;
  h = state.gridElementSize.height_0;
  if (symbol == ($clinit_SubStateSymbolFacet$SubStateSymbolEnum() , SUBSTATE)) {
    cW = drawer.style_0.fontSize * 1.6;
    cH = cW * 0.4;
    cR = cW * 0.15;
    styleAtDrawingCall0 = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$6(drawer, styleAtDrawingCall0, w - 15 - cW, h - 5 - cH, cW, cH, cR));
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$6(drawer, styleAtDrawingCall, w - 15 - cW - cW - cH, h - 5 - cH, cW, cH, cR));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(w - 15 - cW - cH, h - 5 - cH / 2), new PointDouble(w - 15 - cW, h - 5 - cH / 2)]));
    drawer.layer = 1;
    !prevBackgroundColor?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, prevBackgroundColor);
  }
}
;
var INSTANCE_21;
var Lcom_baselet_element_facet_specific_SubStateSymbolFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'SubStateSymbolFacet', 940);
function $clinit_SubStateSymbolFacet$SubStateSymbolEnum(){
  $clinit_SubStateSymbolFacet$SubStateSymbolEnum = emptyMethod;
  SUBSTATE = new SubStateSymbolFacet$SubStateSymbolEnum;
}

function SubStateSymbolFacet$SubStateSymbolEnum(){
  Enum.call(this, 'SUBSTATE', 0);
}

function valueOf_7(name_0){
  $clinit_SubStateSymbolFacet$SubStateSymbolEnum();
  return valueOf(($clinit_SubStateSymbolFacet$SubStateSymbolEnum$Map() , $MAP_7), name_0);
}

function values_20(){
  $clinit_SubStateSymbolFacet$SubStateSymbolEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_SubStateSymbolFacet$SubStateSymbolEnum_2_classLit, 1), $intern_5, 241, 0, [SUBSTATE]);
}

defineClass(241, 8, {241:1, 3:1, 9:1, 8:1}, SubStateSymbolFacet$SubStateSymbolEnum);
var SUBSTATE;
var Lcom_baselet_element_facet_specific_SubStateSymbolFacet$SubStateSymbolEnum_2_classLit = createForEnum('com.baselet.element.facet.specific', 'SubStateSymbolFacet/SubStateSymbolEnum', 241, values_20);
function $clinit_SubStateSymbolFacet$SubStateSymbolEnum$Map(){
  $clinit_SubStateSymbolFacet$SubStateSymbolEnum$Map = emptyMethod;
  $MAP_7 = createValueOfMap(($clinit_SubStateSymbolFacet$SubStateSymbolEnum() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_SubStateSymbolFacet$SubStateSymbolEnum_2_classLit, 1), $intern_5, 241, 0, [SUBSTATE])));
}

var $MAP_7;
function $clinit_TemplateClassFacet(){
  $clinit_TemplateClassFacet = emptyMethod;
  INSTANCE_22 = new TemplateClassFacet;
}

function TemplateClassFacet(){
  FirstRunKeyValueFacet.call(this);
}

function drawTemplateClass(templateClassText, drawer, state, height, width_0){
  var classTopEnd, classWidth, p, start_0, style, tR, transparentColor, templateHeight, templateWidth;
  transparentColor = $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT));
  tR = (templateHeight = $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3 + 3 , templateWidth = $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(templateClassText))).width_0 + 12 , new Rectangle_1(width_0 - templateWidth, 0, templateWidth, templateHeight));
  classTopEnd = round_0(tR.height_0 / 2);
  classWidth = width_0 - round_0(tR.width_0 / 2);
  start_0 = new PointDouble(0, classTopEnd);
  p = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble(tR.x_0, classTopEnd), new PointDouble(tR.x_0, 0), new PointDouble(width_0, 0), new PointDouble(width_0, tR.height_0), new PointDouble(classWidth, tR.height_0), new PointDouble(classWidth, height), new PointDouble(0, height), start_0]));
  $setTopMin(state.buffer, tR.height_0);
  $addToRight(state.buffer, width_0 - classWidth);
  style = $cloneFromMe(drawer.style_0);
  !transparentColor?$setForegroundColor_1(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_FOREGROUND))):$setForegroundColor_1(drawer.style_0, transparentColor);
  $drawLines_0(drawer, castTo($toArray_2(p, initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, p.array.length, 0, 1)), 15));
  drawer.style_0 = $cloneFromMe(style);
  $setLineType(drawer, ($clinit_LineType() , DASHED));
  !transparentColor?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, transparentColor);
  $drawRectangle_1(drawer, tR.x_0, tR.y_0, tR.width_0, tR.height_0);
  drawer.style_0 = $cloneFromMe(style);
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [(checkCriticalElementIndex(1, p.array.length) , castTo(p.array[1], 5)), (checkCriticalElementIndex(0, p.array.length) , castTo(p.array[0], 5)), (checkCriticalElementIndex(7, p.array.length) , castTo(p.array[7], 5)), (checkCriticalElementIndex(6, p.array.length) , castTo(p.array[6], 5)), (checkCriticalElementIndex(5, p.array.length) , castTo(p.array[5], 5))]));
  $print_0(drawer, templateClassText, width_0 - 5, tR.height_0 - 3, ($clinit_AlignHorizontal() , RIGHT));
  return p;
}

function round_0(val){
  return $clinit_SharedUtils() , realignTo(val, true, 10);
}

defineClass(937, 86, $intern_15, TemplateClassFacet);
_.getKeyValue = function getKeyValue_14(){
  return new KeyValueFacet$KeyValue_1('template', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo('text', 'print template rectangle on top right corner')]));
}
;
_.handleValue = function handleValue_14(value_0, state){
}
;
_.parsingFinished = function parsingFinished_4(state, handledLines){
  var drawer, height, points, styleAtDrawingCall, width_0;
  drawer = state.drawer;
  height = state.gridElementSize.height_0;
  width_0 = state.gridElementSize.width_0;
  if (handledLines.isEmpty()) {
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$5(drawer, styleAtDrawingCall, 0, 0, width_0, height));
    $setStickingPolygonGenerator(state, ($clinit_SimpleStickingPolygonGenerator() , INSTANCE_28));
  }
   else if (handledLines.size_1() == 1) {
    points = drawTemplateClass($extractValue(this, castToString(handledLines.get_0(0))), drawer, state, height, width_0);
    $setStickingPolygonGenerator(state, new PointDoubleStickingPolygonGenerator(points));
  }
   else {
    throw toJs(new StyleException('Only one class template is allowed'));
  }
}
;
var INSTANCE_22;
var Lcom_baselet_element_facet_specific_TemplateClassFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'TemplateClassFacet', 937);
function $clinit_UpperRightSymbolFacet(){
  $clinit_UpperRightSymbolFacet = emptyMethod;
  INSTANCE_23 = new UpperRightSymbolFacet;
}

function UpperRightSymbolFacet(){
  FirstRunKeyValueFacet.call(this);
}

function drawAndSetBuffer(state, symbol){
  $clinit_UpperRightSymbolFacet();
  var cH, cW, corner, drawer, eW, fs, nonPartHeight, p, partHeight, partWidth, prevBackgroundColor, px, styleAtDrawingCall, styleAtDrawingCall0;
  drawer = state.drawer;
  prevBackgroundColor = drawer.style_0.backgroundColor_0;
  $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
  eW = state.gridElementSize.width_0;
  fs = drawer.style_0.fontSize;
  if (symbol == ($clinit_UpperRightSymbolFacet$UpperRightSymbolEnum() , USECASE)) {
    cW = fs * 2.5;
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$3(drawer, styleAtDrawingCall, eW - cW - 5, 5, cW, fs));
    $setTopMin(state.buffer, 5);
  }
   else if (symbol == ARTIFACT) {
    cW = fs * 1.5;
    cH = fs * 1.8;
    corner = fs * 0.5;
    p = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(eW - cW - 5, 5), new PointDouble(eW - 5 - corner, 5), new PointDouble(eW - 5, 5 + corner), new PointDouble(eW - 5, 5 + cH), new PointDouble(eW - cW - 5, 5 + cH)]));
    px = new PointDouble(eW - 5 - corner, 5 + corner);
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [(checkCriticalElementIndex(0, p.array.length) , castTo(p.array[0], 5)), (checkCriticalElementIndex(1, p.array.length) , castTo(p.array[1], 5)), (checkCriticalElementIndex(2, p.array.length) , castTo(p.array[2], 5)), (checkCriticalElementIndex(3, p.array.length) , castTo(p.array[3], 5)), (checkCriticalElementIndex(4, p.array.length) , castTo(p.array[4], 5)), (checkCriticalElementIndex(0, p.array.length) , castTo(p.array[0], 5))]));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [(checkCriticalElementIndex(1, p.array.length) , castTo(p.array[1], 5)), px, (checkCriticalElementIndex(2, p.array.length) , castTo(p.array[2], 5))]));
    $setTopMin(state.buffer, 5 + fs * 0.3);
  }
   else if (symbol == COMPONENT) {
    partHeight = fs * 0.4;
    nonPartHeight = fs * 0.3;
    partWidth = partHeight * 2;
    cH = partHeight * 2 + nonPartHeight * 3;
    cW = cH * 0.8;
    styleAtDrawingCall0 = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$5(drawer, styleAtDrawingCall0, eW - cW - partWidth / 2 - 5, 5 + nonPartHeight, partWidth, partHeight));
    styleAtDrawingCall = $cloneFromMe(drawer.style_0);
    $addDrawable(drawer, new DrawHandlerGwt$5(drawer, styleAtDrawingCall, eW - cW - partWidth / 2 - 5, 5 + partHeight + nonPartHeight * 2, partWidth, partHeight));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(eW - cW - 5, 5 + partHeight + nonPartHeight), new PointDouble(eW - cW - 5, 5 + partHeight + nonPartHeight * 2)]));
    $drawLines(drawer, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(eW - cW - 5, 5 + nonPartHeight), new PointDouble(eW - cW - 5, 5), new PointDouble(eW - 5, 5), new PointDouble(eW - 5, 5 + cH), new PointDouble(eW - cW - 5, 5 + cH), new PointDouble(eW - cW - 5, 5 + cH - nonPartHeight)])));
    $setTopMin(state.buffer, 5 + fs * 0.3);
  }
  !prevBackgroundColor?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, prevBackgroundColor);
}

defineClass(740, 86, $intern_15, UpperRightSymbolFacet);
_.getKeyValue = function getKeyValue_15(){
  return new KeyValueFacet$KeyValue_1('symbol', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo(($clinit_UpperRightSymbolFacet$UpperRightSymbolEnum() , USECASE), 'draw a use case symbol'), new KeyValueFacet$ValueInfo(ARTIFACT, 'draw an artifact symbol'), new KeyValueFacet$ValueInfo(COMPONENT, 'draw a component symbol')]));
}
;
_.handleValue = function handleValue_15(value_0, state){
  var symbol;
  symbol = valueOf_8($toUpperCase(value_0, ($clinit_Locale() , ENGLISH)));
  $put(state.facetResponse, Lcom_baselet_element_facet_specific_UpperRightSymbolFacet_2_classLit, symbol);
}
;
var INSTANCE_23;
var Lcom_baselet_element_facet_specific_UpperRightSymbolFacet_2_classLit = createForClass('com.baselet.element.facet.specific', 'UpperRightSymbolFacet', 740);
function $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum(){
  $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum = emptyMethod;
  USECASE = new UpperRightSymbolFacet$UpperRightSymbolEnum('USECASE', 0);
  ARTIFACT = new UpperRightSymbolFacet$UpperRightSymbolEnum('ARTIFACT', 1);
  COMPONENT = new UpperRightSymbolFacet$UpperRightSymbolEnum('COMPONENT', 2);
}

function UpperRightSymbolFacet$UpperRightSymbolEnum(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function valueOf_8(name_0){
  $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum();
  return valueOf(($clinit_UpperRightSymbolFacet$UpperRightSymbolEnum$Map() , $MAP_8), name_0);
}

function values_21(){
  $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_UpperRightSymbolFacet$UpperRightSymbolEnum_2_classLit, 1), $intern_5, 164, 0, [USECASE, ARTIFACT, COMPONENT]);
}

defineClass(164, 8, {164:1, 3:1, 9:1, 8:1}, UpperRightSymbolFacet$UpperRightSymbolEnum);
var ARTIFACT, COMPONENT, USECASE;
var Lcom_baselet_element_facet_specific_UpperRightSymbolFacet$UpperRightSymbolEnum_2_classLit = createForEnum('com.baselet.element.facet.specific', 'UpperRightSymbolFacet/UpperRightSymbolEnum', 164, values_21);
function $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum$Map(){
  $clinit_UpperRightSymbolFacet$UpperRightSymbolEnum$Map = emptyMethod;
  $MAP_8 = createValueOfMap(($clinit_UpperRightSymbolFacet$UpperRightSymbolEnum() , stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_specific_UpperRightSymbolFacet$UpperRightSymbolEnum_2_classLit, 1), $intern_5, 164, 0, [USECASE, ARTIFACT, COMPONENT])));
}

var $MAP_8;
function $movePoints(this$static, changedStickPoints){
  var updatedChangedList;
  updatedChangedList = $movePointAndResizeRectangle_0(this$static.relationPoints, changedStickPoints);
  $updateModelFromText(this$static);
  return updatedChangedList;
}

function $setRectangle(this$static, bounds){
  $setBoundsRect(this$static.component, bounds);
}

function Relation_0(){
  NewGridElement.call(this);
}

defineClass(236, 68, $intern_45, Relation_0);
_.getGridSize = function getGridSize_0(){
  return 10;
}
;
_.getRealRectangle = function getRealRectangle_0(){
  return new Rectangle_0($copy_0(this.component.rect_0).x_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).y_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0);
}
;
_.getRectangle = function getRectangle_0(){
  return $copy_0(this.component.rect_0);
}
;
_.setRectangle = function setRectangle_0(bounds){
  $setRectangle(this, bounds);
}
;
_.createSettings = function createSettings_18(){
  return new Relation$1(this);
}
;
_.drag = function drag_0(resizeDirection, diffX, diffY, mousePosBeforeDragRelative, isShiftKeyDown, firstDrag, stickables, undoable){
  var oldRect, returnSelection;
  $toAdditionalAttributesString(this.relationPoints.points);
  oldRect = $copy_0(this.component.rect_0);
  returnSelection = $getSelectionAndMovePointsIfNecessary(this.relationPoints, new Point(mousePosBeforeDragRelative.x_0 * 10 / 10 | 0, mousePosBeforeDragRelative.y_0 * 10 / 10 | 0), valueOf_9(diffX * 10 / 10 | 0), valueOf_9(diffY * 10 / 10 | 0), firstDrag);
  returnSelection == 1 && $setLocation_0(this, $copy_0(this.component.rect_0).x_0 + diffX, $copy_0(this.component.rect_0).y_0 + diffY);
  returnSelection != 3 && $updateModelFromText(this);
  undoable && $add_0(this.undoStack, new UndoInformation($copy_0(this.component.rect_0), oldRect, (new HashMap , $toAdditionalAttributesString(this.relationPoints.points) , 10)));
}
;
_.drawCommonContent = function drawCommonContent_18(state){
  $setStickingPolygonGenerator(state, ($clinit_NoStickingPolygonGenerator() , INSTANCE_27));
}
;
_.drawError = function drawError_0(drawer, errorText){
  $drawError(this, drawer, $replace_0($replace_0(errorText, '>>', '\\>>'), '<<', '\\<<'));
  $clinit_RelationLineTypeFacet();
  drawLineAndArrows(drawer, this.relationPoints, new RelationLineTypeFacet$Match('', ($clinit_LineType() , SOLID)), new RelationLineTypeFacet$Match('', null), new RelationLineTypeFacet$Match('', null));
}
;
_.getAdditionalAttributes = function getAdditionalAttributes_0(){
  return $toAdditionalAttributesString(this.relationPoints.points);
}
;
_.getId = function getId_18(){
  return $clinit_ElementId() , Relation;
}
;
_.getLayer = function getLayer_0(){
  return castTo($getFacetResponse(this.state, Lcom_baselet_element_facet_common_LayerFacet_2_classLit, ($clinit_LayerFacet() , DEFAULT_VALUE_RELATION)), 48);
}
;
_.resetAndDrawMetaDrawerContent = function resetAndDrawMetaDrawerContent_0(drawer){
  var currentTheme;
  currentTheme = ($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0);
  drawer.drawablesBackground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  drawer.drawablesForeground.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  $setBackgroundColor(drawer, $getColor(currentTheme, ($clinit_Theme$ColorStyle() , SELECTION_BG)));
  if (($clinit_SharedConfig() , $clinit_SharedConfig() , instance_0).dev_mode) {
    $setForegroundColor(drawer, $getColor_0(currentTheme, ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    $drawRectangle_1(drawer, 0, 0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).width_0, (new Dimension($copy_0(this.component.rect_0).width_0 * 10 / this.getGridSize() | 0, $copy_0(this.component.rect_0).height_0 * 10 / this.getGridSize() | 0)).height_0);
    $setBackgroundColor(drawer, $transparency($getColor_0(currentTheme, GREEN), ($clinit_ColorOwn$Transparency() , BACKGROUND).alpha_0));
    $drawSelectionSpace(this.relationPoints, drawer);
  }
  $setForegroundColor(drawer, $getColor(currentTheme, SELECTION_FG));
  $drawCirclesAndDragBox(this.relationPoints, drawer);
}
;
_.setAdditionalAttributes = function setAdditionalAttributes_0(additionalAttributes){
  var i, pointList, split_0;
  pointList = new RelationPointList;
  split_0 = $split(additionalAttributes, ';', 0);
  for (i = 0; i < split_0.length; i += 2) {
    $add_1(pointList, $doubleValue_0(__parseAndValidateDouble(split_0[i])), $doubleValue_0(__parseAndValidateDouble(split_0[i + 1])));
  }
  this.relationPoints = new RelationPointHandler(this, pointList);
  $resizeRectAndReposPoints(this.relationPoints);
}
;
var Lcom_baselet_element_relation_Relation_2_classLit = createForClass('com.baselet.element.relation', 'Relation', 236);
defineClass(212, $intern_16, {212:1});
_.createFacets = function createFacets_13(){
  return RELATION;
}
;
_.getElementStyle = function getElementStyle_3(){
  return $clinit_ElementStyle() , NORESIZE;
}
;
var Lcom_baselet_element_relation_facet_SettingsRelation_2_classLit = createForClass('com.baselet.element.relation.facet', 'SettingsRelation', 212);
function Relation$1(this$0){
  $clinit_Settings();
  this.this$01 = this$0;
}

defineClass(213, 212, {213:1, 212:1}, Relation$1);
var Lcom_baselet_element_relation_Relation$1_2_classLit = createForClass('com.baselet.element.relation', 'Relation/1', 213);
function $clinit_ArrowEnd(){
  $clinit_ArrowEnd = emptyMethod;
  BOX = new ArrowEnd$1;
  SINGLE_PIPE = new ArrowEnd$2;
  DOUBLE_PIPE = new ArrowEnd$3;
  SMALL_CIRCLE = new ArrowEnd$4;
  LEFT_BOX = new ArrowEnd$5;
  LEFT_NORMAL = new ArrowEnd$6;
  LEFT_MEASURE_NORMAL = new ArrowEnd$7;
  LEFT_INVERTED = new ArrowEnd$8;
  LEFT_ZERO_TO_MANY = new ArrowEnd$9;
  LEFT_ONE_TO_MANY = new ArrowEnd$10;
  LEFT_CLOSED = new ArrowEnd$11;
  LEFT_FILLED_CLOSED = new ArrowEnd$12;
  LEFT_DIAMOND = new ArrowEnd$13;
  LEFT_FILLED_DIAMOND = new ArrowEnd$14;
  LEFT_INTERFACE_OPEN = new ArrowEnd$15;
  RIGHT_BOX = new ArrowEnd$16;
  RIGHT_NORMAL = new ArrowEnd$17;
  RIGHT_MEASURE_NORMAL = new ArrowEnd$18;
  RIGHT_INVERTED = new ArrowEnd$19;
  RIGHT_ZERO_TO_MANY = new ArrowEnd$20;
  RIGHT_ONE_TO_MANY = new ArrowEnd$21;
  RIGHT_CLOSED = new ArrowEnd$22;
  RIGHT_FILLED_CLOSED = new ArrowEnd$23;
  RIGHT_DIAMOND = new ArrowEnd$24;
  RIGHT_FILLED_DIAMOND = new ArrowEnd$25;
  RIGHT_INTERFACE_OPEN = new ArrowEnd$26;
  CIRCLE_CROSS = new ArrowEnd$27;
  CIRCLE = new ArrowEnd$28;
  DIAGONAL_CROSS = new ArrowEnd$29;
}

function ArrowEnd(regexValue){
  this.regexValue = regexValue;
}

defineClass(22, 1, $intern_46);
_.getRegexValue = function getRegexValue_0(){
  return this.regexValue;
}
;
var BOX, CIRCLE, CIRCLE_CROSS, DIAGONAL_CROSS, DOUBLE_PIPE, LEFT_BOX, LEFT_CLOSED, LEFT_DIAMOND, LEFT_FILLED_CLOSED, LEFT_FILLED_DIAMOND, LEFT_INTERFACE_OPEN, LEFT_INVERTED, LEFT_MEASURE_NORMAL, LEFT_NORMAL, LEFT_ONE_TO_MANY, LEFT_ZERO_TO_MANY, RIGHT_BOX, RIGHT_CLOSED, RIGHT_DIAMOND, RIGHT_FILLED_CLOSED, RIGHT_FILLED_DIAMOND, RIGHT_INTERFACE_OPEN, RIGHT_INVERTED, RIGHT_MEASURE_NORMAL, RIGHT_NORMAL, RIGHT_ONE_TO_MANY, RIGHT_ZERO_TO_MANY, SINGLE_PIPE, SMALL_CIRCLE;
var Lcom_baselet_element_relation_facet_ArrowEnd_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd', 22);
function ArrowEnd$1(){
  ArrowEnd.call(this, '\\[[^\\]]*\\]');
}

defineClass(859, 22, $intern_46, ArrowEnd$1);
_.print_1 = function print_0(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var textWithoutBox;
  textWithoutBox = $substring_0(matchedText, 1, matchedText.length - 1);
  drawBoxArrow(drawer, lineToDraw, drawOnLineStart, textWithoutBox, resizableObject);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$1_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/1', 859);
function ArrowEnd$10(){
  ArrowEnd.call(this, '>\\|');
}

defineClass(868, 22, $intern_46, ArrowEnd$10);
_.print_1 = function print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 3, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$10_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/10', 868);
function ArrowEnd$11(){
  ArrowEnd.call(this, '<<');
}

defineClass(869, 22, $intern_46, ArrowEnd$11);
_.print_1 = function print_2(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 1, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$11_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/11', 869);
function ArrowEnd$12(){
  ArrowEnd.call(this, '<<<');
}

defineClass(870, 22, $intern_46, ArrowEnd$12);
_.print_1 = function print_3(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 1, true, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$12_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/12', 870);
function ArrowEnd$13(){
  ArrowEnd.call(this, '<<<<');
}

defineClass(871, 22, $intern_46, ArrowEnd$13);
_.print_1 = function print_4(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 2, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$13_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/13', 871);
function ArrowEnd$14(){
  ArrowEnd.call(this, '<<<<<');
}

defineClass(872, 22, $intern_46, ArrowEnd$14);
_.print_1 = function print_5(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 2, true, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$14_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/14', 872);
function ArrowEnd$15(){
  ArrowEnd.call(this, '\\)');
}

defineClass(873, 22, $intern_46, ArrowEnd$15);
_.print_1 = function print_6(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawCircle_0(drawer, lineToDraw, drawOnLineStart, resizableObject, ($clinit_Direction() , LEFT_0));
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$15_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/15', 873);
function ArrowEnd$16(){
  ArrowEnd.call(this, '>\\[[^\\]]*\\]');
}

defineClass(874, 22, $intern_46, ArrowEnd$16);
_.print_1 = function print_7(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var intersection, r, textWithoutBox;
  textWithoutBox = $substring_0(matchedText, 2, matchedText.length - 1);
  r = drawBoxArrow(drawer, lineToDraw, drawOnLineStart, textWithoutBox, resizableObject);
  intersection = castTo($get_7(getIntersectionPoints(lineToDraw, r), 0), 5);
  drawArrowToLine(intersection, drawer, lineToDraw, drawOnLineStart, 0, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$16_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/16', 874);
function ArrowEnd$17(){
  ArrowEnd.call(this, '>');
}

defineClass(875, 22, $intern_46, ArrowEnd$17);
_.print_1 = function print_8(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$17_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/17', 875);
function ArrowEnd$18(){
  ArrowEnd.call(this, '>\\|');
}

defineClass(876, 22, $intern_46, ArrowEnd$18);
_.print_1 = function print_9(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 3, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$18_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/18', 876);
function ArrowEnd$19(){
  ArrowEnd.call(this, '<');
}

defineClass(877, 22, $intern_46, ArrowEnd$19);
_.print_1 = function print_10(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$19_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/19', 877);
function ArrowEnd$2(){
  ArrowEnd.call(this, '\\|');
}

defineClass(860, 22, $intern_46, ArrowEnd$2);
_.print_1 = function print_11(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 4, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$2_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/2', 860);
function ArrowEnd$20(){
  ArrowEnd.call(this, 'o<');
}

defineClass(878, 22, $intern_46, ArrowEnd$20);
_.print_1 = function print_12(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var point;
  point = drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 20):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 20);
  drawCircle(point, 5, drawer, lineToDraw, drawOnLineStart, resizableObject, null, false);
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$20_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/20', 878);
function ArrowEnd$21(){
  ArrowEnd.call(this, '\\|<');
}

defineClass(879, 22, $intern_46, ArrowEnd$21);
_.print_1 = function print_13(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 3, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$21_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/21', 879);
function ArrowEnd$22(){
  ArrowEnd.call(this, '>>');
}

defineClass(880, 22, $intern_46, ArrowEnd$22);
_.print_1 = function print_14(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 1, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$22_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/22', 880);
function ArrowEnd$23(){
  ArrowEnd.call(this, '>>>');
}

defineClass(881, 22, $intern_46, ArrowEnd$23);
_.print_1 = function print_15(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 1, true, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$23_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/23', 881);
function ArrowEnd$24(){
  ArrowEnd.call(this, '>>>>');
}

defineClass(882, 22, $intern_46, ArrowEnd$24);
_.print_1 = function print_16(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 2, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$24_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/24', 882);
function ArrowEnd$25(){
  ArrowEnd.call(this, '>>>>>');
}

defineClass(883, 22, $intern_46, ArrowEnd$25);
_.print_1 = function print_17(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 2, true, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$25_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/25', 883);
function ArrowEnd$26(){
  ArrowEnd.call(this, '\\(');
}

defineClass(884, 22, $intern_46, ArrowEnd$26);
_.print_1 = function print_18(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawCircle_0(drawer, lineToDraw, drawOnLineStart, resizableObject, ($clinit_Direction() , RIGHT_0));
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$26_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/26', 884);
function ArrowEnd$27(){
  ArrowEnd.call(this, '\\(\\+\\)');
}

defineClass(885, 22, $intern_46, ArrowEnd$27);
_.print_1 = function print_19(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawCircle(drawOnLineStart?lineToDraw.start_0:lineToDraw.end, 10, drawer, lineToDraw, drawOnLineStart, resizableObject, null, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$27_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/27', 885);
function ArrowEnd$28(){
  ArrowEnd.call(this, '\\(\\)');
}

defineClass(886, 22, $intern_46, ArrowEnd$28);
_.print_1 = function print_20(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawCircle(drawOnLineStart?lineToDraw.start_0:lineToDraw.end, 10, drawer, lineToDraw, drawOnLineStart, resizableObject, null, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$28_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/28', 886);
function ArrowEnd$29(){
  ArrowEnd.call(this, 'x');
}

defineClass(887, 22, $intern_46, ArrowEnd$29);
_.print_1 = function print_21(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var p;
  p = drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 13):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 13);
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [calcPoint(p, $getAngleOfSlope(lineToDraw) + 45, 9), calcPoint(p, $getAngleOfSlope(lineToDraw) - 135, 9)]));
  $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [calcPoint(p, $getAngleOfSlope(lineToDraw) - 45, 9), calcPoint(p, $getAngleOfSlope(lineToDraw) + 135, 9)]));
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$29_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/29', 887);
function ArrowEnd$3(){
  ArrowEnd.call(this, '\\|\\|');
}

defineClass(861, 22, $intern_46, ArrowEnd$3);
_.print_1 = function print_22(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 5, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$3_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/3', 861);
function ArrowEnd$4(){
  ArrowEnd.call(this, 'o');
}

defineClass(862, 22, $intern_46, ArrowEnd$4);
_.print_1 = function print_23(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var point;
  point = drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 20):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 20);
  drawCircle(point, 5, drawer, lineToDraw, drawOnLineStart, resizableObject, null, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$4_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/4', 862);
function ArrowEnd$5(){
  ArrowEnd.call(this, '\\[[^\\]]*\\]<');
}

defineClass(863, 22, $intern_46, ArrowEnd$5);
_.print_1 = function print_24(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var intersection, r, textWithoutBox;
  textWithoutBox = $substring_0(matchedText, 1, matchedText.length - 2);
  r = drawBoxArrow(drawer, lineToDraw, drawOnLineStart, textWithoutBox, resizableObject);
  intersection = castTo($get_7(getIntersectionPoints(lineToDraw, r), 0), 5);
  drawArrowToLine(intersection, drawer, lineToDraw, drawOnLineStart, 0, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$5_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/5', 863);
function ArrowEnd$6(){
  ArrowEnd.call(this, '<');
}

defineClass(864, 22, $intern_46, ArrowEnd$6);
_.print_1 = function print_25(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$6_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/6', 864);
function ArrowEnd$7(){
  ArrowEnd.call(this, '\\|<');
}

defineClass(865, 22, $intern_46, ArrowEnd$7);
_.print_1 = function print_26(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 3, false, false);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$7_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/7', 865);
function ArrowEnd$8(){
  ArrowEnd.call(this, '>');
}

defineClass(866, 22, $intern_46, ArrowEnd$8);
_.print_1 = function print_27(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$8_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/8', 866);
function ArrowEnd$9(){
  ArrowEnd.call(this, '>o');
}

defineClass(867, 22, $intern_46, ArrowEnd$9);
_.print_1 = function print_28(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  var point;
  point = drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 20):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 20);
  drawCircle(point, 5, drawer, lineToDraw, drawOnLineStart, resizableObject, null, false);
  drawArrowToLine(drawOnLineStart?getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 0.5):getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 0.5), drawer, lineToDraw, drawOnLineStart, 0, false, true);
}
;
_.print_0 = function(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject){
  this.print_1(drawer, lineToDraw, drawOnLineStart, matchedText, resizableObject);
}
;
var Lcom_baselet_element_relation_facet_ArrowEnd$9_2_classLit = createForClass('com.baselet.element.relation.facet', 'ArrowEnd/9', 867);
function $clinit_LineDescriptionFacet(){
  $clinit_LineDescriptionFacet = emptyMethod;
  INSTANCE_24 = new LineDescriptionFacet;
}

function $addIndex(relationPoints, index_0, usedIndexes, rect){
  $setTextBox(relationPoints.points, index_0, rect);
  $add_14(usedIndexes, valueOf_9(index_0));
}

function $applyDisplacements(displacements, enumVal, pointText){
  var displacement;
  displacement = castTo(displacements.get_1(enumVal.key), 45);
  !!displacement && (pointText = new PointDouble($doubleValue_0(pointText.x_0) + displacement.x_0, $doubleValue_0(pointText.y_0) + displacement.y_0));
  return pointText;
}

function $increaseTextSpaceRectangleForLine(textSpaceRect, drawer, line, pointText){
  var newSpaceRect;
  newSpaceRect = new Rectangle_1(pointText.x_0, $doubleValue_0(pointText.y_0) - $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(line))).width_0, $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0);
  textSpaceRect = mergeToLeft(textSpaceRect, newSpaceRect);
  return textSpaceRect;
}

function $printEndDescriptions(displacements, relationPoints, drawer, usedIndexes, otherLines){
  var enumVal, i, line, line$iterator, pointText, splitAtLineEndChar, subline, text_0, textSpace;
  for (line$iterator = new ArrayList$1(otherLines); line$iterator.i < line$iterator.this$01.array.length;) {
    line = castToString($next_3(line$iterator));
    enumVal = forString(line);
    text_0 = $substring(line, line.indexOf('=') + 1);
    if (text_0.length != 0) {
      textSpace = null;
      splitAtLineEndChar = splitAtLineEndChar_0(text_0);
      for (i = 0; i < splitAtLineEndChar.length; i++) {
        subline = splitAtLineEndChar[i];
        pointText = calcPosOfLineDescriptionText(drawer, subline, i, splitAtLineEndChar.length, relationPoints, enumVal);
        pointText = $applyDisplacements(displacements, enumVal, pointText);
        $print_1(drawer, subline, pointText, ($clinit_AlignHorizontal() , LEFT));
        textSpace = $increaseTextSpaceRectangleForLine(textSpace, drawer, subline, pointText);
      }
      $addIndex(relationPoints, enumVal.index_0, usedIndexes, textSpace);
    }
  }
}

function $printMiddleDescription(relationPoints, drawer, usedIndexes, middleLines){
  var halfMiddleBlockHeight, i, line, pointText, textSpace;
  halfMiddleBlockHeight = middleLines.array.length * ($textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3) / 2;
  textSpace = null;
  for (i = 0; i < middleLines.array.length; i++) {
    line = replaceArrowsWithUtf8Characters((checkCriticalElementIndex(i, middleLines.array.length) , castToString(middleLines.array[i])));
    pointText = calcPosOfMiddleText(drawer, line, $getMiddleLine(relationPoints.points), i, halfMiddleBlockHeight);
    $print_1(drawer, line, pointText, ($clinit_AlignHorizontal() , LEFT));
    textSpace = $increaseTextSpaceRectangleForLine(textSpace, drawer, line, pointText);
  }
  !!textSpace && $addIndex(relationPoints, ($clinit_LineDescriptionEnum() , MESSAGE_MIDDLE).index_0, usedIndexes, textSpace);
}

function LineDescriptionFacet(){
  FirstRunFacet.call(this);
}

defineClass(902, 281, $intern_15, LineDescriptionFacet);
_.checkStart = function checkStart_8(line, state){
  return !$equals_6(line.substr(0, 3), 'lt=');
}
;
_.getPriority = function getPriority_5(){
  return $clinit_Priority() , LOWEST;
}
;
_.handleLine = function handleLine_9(line, state){
}
;
_.parsingFinished = function parsingFinished_5(state, handledLines){
  var displacements, drawer, line, line$iterator, middleLines, otherLines, relationPoints, usedIndexes;
  displacements = castTo($getOrInitFacetResponse(state, Lcom_baselet_element_relation_facet_LineDescriptionPositionFacet_2_classLit, new HashMap), 82);
  relationPoints = castTo(castTo(state.settings, 212), 213).this$01.relationPoints;
  drawer = state.drawer;
  usedIndexes = new HashSet;
  middleLines = new ArrayList;
  otherLines = new ArrayList;
  for (line$iterator = handledLines.iterator(); line$iterator.hasNext_0();) {
    line = castToString(line$iterator.next_1());
    forString(line) == ($clinit_LineDescriptionEnum() , MESSAGE_MIDDLE)?(middleLines.array[middleLines.array.length] = line , true):(otherLines.array[otherLines.array.length] = line , true);
  }
  $printMiddleDescription(relationPoints, drawer, usedIndexes, middleLines);
  $printEndDescriptions(displacements, relationPoints, drawer, usedIndexes, otherLines);
  $resetTextBoxIndexesExcept(relationPoints, usedIndexes);
  $resizeRectAndReposPoints(relationPoints);
}
;
var INSTANCE_24;
var Lcom_baselet_element_relation_facet_LineDescriptionFacet_2_classLit = createForClass('com.baselet.element.relation.facet', 'LineDescriptionFacet', 902);
function $clinit_LineDescriptionPositionFacet(){
  $clinit_LineDescriptionPositionFacet = emptyMethod;
  INSTANCE_MESSAGE_START = new LineDescriptionPositionFacet(($clinit_LineDescriptionEnum() , MESSAGE_START));
  INSTANCE_MESSAGE_END = new LineDescriptionPositionFacet(MESSAGE_END);
  INSTANCE_ROLE_START = new LineDescriptionPositionFacet(ROLE_START);
  INSTANCE_ROLE_END = new LineDescriptionPositionFacet(ROLE_END);
}

function LineDescriptionPositionFacet(lineDesc){
  FirstRunKeyValueFacet.call(this);
  this.lineDesc = lineDesc;
}

defineClass(238, 86, $intern_15, LineDescriptionPositionFacet);
_.getKeyValue = function getKeyValue_16(){
  return new KeyValueFacet$KeyValue_0(this.lineDesc.key + 'pos', '-5,7', 'comma separated integers as displacement of ' + this.lineDesc + ' text (first=horizontal, second=vertical)');
}
;
_.handleValue = function handleValue_16(value_0, state){
  var displacements, e, split_0, x_0, y_0;
  try {
    displacements = castTo($getOrInitFacetResponse(state, Lcom_baselet_element_relation_facet_LineDescriptionPositionFacet_2_classLit, new HashMap), 82);
    split_0 = $split(value_0, ',', 0);
    x_0 = __parseAndValidateInt(split_0[0], 10);
    y_0 = __parseAndValidateInt(split_0[1], 10);
    if ($wnd.Math.abs(x_0) > 200 || $wnd.Math.abs(y_0) > 200) {
      throw toJs(new StyleException('max allowed positive or negative displacement value is 200'));
    }
    displacements.put(this.lineDesc.key, new Point(x_0, y_0));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      e = $e0;
      if (instanceOf(e, 72)) {
        throw toJs(castTo(e, 72));
      }
      throw toJs(new StyleException('value must be <integer>,<integer>'));
    }
     else 
      throw toJs($e0);
  }
}
;
var INSTANCE_MESSAGE_END, INSTANCE_MESSAGE_START, INSTANCE_ROLE_END, INSTANCE_ROLE_START;
var Lcom_baselet_element_relation_facet_LineDescriptionPositionFacet_2_classLit = createForClass('com.baselet.element.relation.facet', 'LineDescriptionPositionFacet', 238);
function calcPosOfLineDescriptionText(drawer, text_0, lineNr, totalLines, relationPoints, enumVal){
  var line, lineDirection, pointText, previousLinesBlock, printOnStart, textWidth, totalBlock;
  textWidth = calcWidth(drawer, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, [text_0]));
  totalBlock = totalLines * $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0;
  previousLinesBlock = lineNr * $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0;
  printOnStart = enumVal.start_0;
  line = (checkCriticalNotNull(printOnStart) , printOnStart)?$getFirstLine(relationPoints.points):$getLastLine(relationPoints.points);
  pointText = $getPointOnLineWithDistanceFrom(line, (checkCriticalNotNull(printOnStart) , printOnStart));
  lineDirection = $getDirectionOfLine(line, (checkCriticalNotNull(printOnStart) , printOnStart));
  lineDirection == ($clinit_Direction() , RIGHT_0)?(pointText = new PointDouble($doubleValue_0(pointText.x_0) - textWidth - 5, $doubleValue_0(pointText.y_0) + $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + previousLinesBlock + 1)):lineDirection == LEFT_0?(pointText = new PointDouble($doubleValue_0(pointText.x_0) + 4, $doubleValue_0(pointText.y_0) + $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + previousLinesBlock + 1)):lineDirection == UP?(pointText = new PointDouble($doubleValue_0(pointText.x_0) + 4, $doubleValue_0(pointText.y_0) + $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + previousLinesBlock + 1)):lineDirection == DOWN && (pointText = new PointDouble($doubleValue_0(pointText.x_0) + 4, $doubleValue_0(pointText.y_0) + $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 - totalBlock + previousLinesBlock - 1));
  (enumVal == ($clinit_LineDescriptionEnum() , ROLE_START) || enumVal == ROLE_END) && (lineDirection == UP?(pointText = new PointDouble($doubleValue_0(pointText.x_0), $doubleValue_0(pointText.y_0) + ($textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3))):lineDirection == DOWN?(pointText = new PointDouble($doubleValue_0(pointText.x_0), $doubleValue_0(pointText.y_0) - ($textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3))):(pointText = new PointDouble($doubleValue_0(pointText.x_0), $doubleValue_0(pointText.y_0) - totalLines * $textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 - 5)));
  return pointText;
}

function calcPosOfMiddleText(drawer, text_0, line, currentLineNr, halfMiddleBlockHeight){
  var center, horizontalLine, previousLinesUsedSpace, textWidth, textX, textY;
  textWidth = calcWidth(drawer, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, [text_0]));
  horizontalLine = $isHorizontal($getDirectionOfLine(line, true));
  center = new PointDouble(($doubleValue_0(line.start_0.x_0) + $doubleValue_0(line.end.x_0)) / 2, ($doubleValue_0(line.start_0.y_0) + $doubleValue_0(line.end.y_0)) / 2);
  previousLinesUsedSpace = currentLineNr * ($textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 + 3);
  if (horizontalLine) {
    textX = $doubleValue_0(center.x_0) - textWidth / 2;
    textY = $doubleValue_0(center.y_0) + previousLinesUsedSpace - 4;
  }
   else {
    textX = $doubleValue_0(center.x_0) + 4;
    textY = $doubleValue_0(center.y_0) + previousLinesUsedSpace - halfMiddleBlockHeight + ($textDimensionHelper(drawer, new StringStyle((null , EMPTY_SET), 'Hy')).height_0 + 3);
  }
  return new PointDouble(textX, textY);
}

function calcWidth(drawer, text_0){
  var line, line$index, line$max, maxWidth;
  maxWidth = 0;
  for (line$index = 0 , line$max = text_0.length; line$index < line$max; ++line$index) {
    line = text_0[line$index];
    maxWidth = $wnd.Math.max(maxWidth, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(line))).width_0);
  }
  return maxWidth;
}

function replaceArrowsWithUtf8Characters(text_0){
  var suffixlength, suffixlength0, suffixlength1;
  $equals_6(text_0.substr(0, 2), '< ') && (text_0 = '\u25C4' + text_0.substr(1));
  suffixlength0 = ' >'.length;
  $equals_6(text_0.substr(text_0.length - suffixlength0, suffixlength0), ' >')?(text_0 = $substring_0(text_0, 0, text_0.length - 1) + '\u25BA'):(suffixlength1 = ' ^'.length , $equals_6(text_0.substr(text_0.length - suffixlength1, suffixlength1), ' ^')?(text_0 = $substring_0(text_0, 0, text_0.length - 1) + '\u25B2'):(suffixlength = ' v'.length , $equals_6(text_0.substr(text_0.length - suffixlength, suffixlength), ' v') && (text_0 = $substring_0(text_0, 0, text_0.length - 1) + '\u25BC')));
  return text_0;
}

function $clinit_RelationLineTypeFacet(){
  $clinit_RelationLineTypeFacet = emptyMethod;
  INSTANCE_25 = new RelationLineTypeFacet;
  SHARED_ARROW_STRINGS_BEFORE = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_facet_ArrowEnd_2_classLit, 1), $intern_6, 22, 0, [($clinit_ArrowEnd() , CIRCLE_CROSS), CIRCLE, DIAGONAL_CROSS]));
  SHARED_ARROW_STRINGS_AFTER = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_facet_ArrowEnd_2_classLit, 1), $intern_6, 22, 0, [DOUBLE_PIPE, SINGLE_PIPE, SMALL_CIRCLE, BOX]));
  LEFT_ARROW_STRINGS = mergeLists(SHARED_ARROW_STRINGS_BEFORE, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_facet_ArrowEnd_2_classLit, 1), $intern_6, 22, 0, [LEFT_BOX, LEFT_FILLED_DIAMOND, LEFT_DIAMOND, LEFT_FILLED_CLOSED, LEFT_CLOSED, LEFT_NORMAL, LEFT_ZERO_TO_MANY, LEFT_ONE_TO_MANY, LEFT_INVERTED, LEFT_INTERFACE_OPEN, LEFT_MEASURE_NORMAL])), SHARED_ARROW_STRINGS_AFTER);
  RIGHT_ARROW_STRINGS = mergeLists(SHARED_ARROW_STRINGS_BEFORE, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_facet_ArrowEnd_2_classLit, 1), $intern_6, 22, 0, [RIGHT_BOX, RIGHT_FILLED_DIAMOND, RIGHT_DIAMOND, RIGHT_FILLED_CLOSED, RIGHT_CLOSED, RIGHT_MEASURE_NORMAL, RIGHT_NORMAL, RIGHT_ZERO_TO_MANY, RIGHT_ONE_TO_MANY, RIGHT_INVERTED, RIGHT_INTERFACE_OPEN])), SHARED_ARROW_STRINGS_AFTER);
  LINE_TYPES = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_enums_LineType_2_classLit, 1), $intern_5, 90, 0, [($clinit_LineType() , SOLID), DOTTED, DASHED]));
}

function $extractPart(valueHolderList, remaining){
  var newRemainingValue, regex, removedPart, valueHolder, valueHolder$iterator;
  for (valueHolder$iterator = valueHolderList.iterator(); valueHolder$iterator.hasNext_0();) {
    valueHolder = castTo(valueHolder$iterator.next_1(), 53);
    regex = '^' + valueHolder.getRegexValue();
    newRemainingValue = $replaceFirst(remaining.value_0, regex, '');
    if (!$equals_6(remaining.value_0, newRemainingValue)) {
      removedPart = $substring_0(remaining.value_0, 0, remaining.value_0.length - newRemainingValue.length);
      remaining.value_0 = newRemainingValue;
      return new RelationLineTypeFacet$Match(removedPart, valueHolder);
    }
  }
  return new RelationLineTypeFacet$Match('', null);
}

function $listToString(valueHolderList){
  var r, r$iterator, sb, simpleRegex;
  sb = new StringBuilder;
  for (r$iterator = valueHolderList.iterator(); r$iterator.hasNext_0();) {
    r = castTo(r$iterator.next_1(), 53);
    simpleRegex = $replaceAll($replace_0(r.getRegexValue(), '\\[[^\\]]*\\]', '[text]'), '\\\\', '');
    $append_1((sb.string += '' + simpleRegex , sb), 44);
  }
  $setLength(sb, sb.string.length - 1);
  return sb.string;
}

function RelationLineTypeFacet(){
  FirstRunKeyValueFacet.call(this);
  this.log_0 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_relation_facet_RelationLineTypeFacet_2_classLit) , Lcom_baselet_element_relation_facet_RelationLineTypeFacet_2_classLit.typeName));
}

function drawLineAndArrows(drawer, relationPoints, lineType, leftArrow, rightArrow){
  var oldBgColor;
  $clinit_RelationLineTypeFacet();
  drawLineBetweenPoints(drawer, relationPoints, castTo(lineType.type_0, 90), !!leftArrow.type_0, !!rightArrow.type_0);
  oldBgColor = drawer.style_0.backgroundColor_0;
  $setBackgroundColor(drawer, $transparency(oldBgColor, ($clinit_ColorOwn$Transparency() , FOREGROUND).alpha_0));
  print_29(drawer, relationPoints, leftArrow, $getFirstLine(relationPoints.points), true);
  print_29(drawer, relationPoints, rightArrow, $getLastLine(relationPoints.points), false);
  !oldBgColor?$setBackgroundColor_0(drawer.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, oldBgColor);
  $resizeRectAndReposPoints(relationPoints);
}

function drawLineBetweenPoints(drawer, relationPoints, lineType, shortLeftLine, shortRightLine){
  var oldLt;
  oldLt = drawer.style_0.lineType;
  $setLineType_0(drawer.style_0, lineType);
  $drawLinesBetweenPoints(relationPoints, drawer, shortLeftLine, shortRightLine);
  $setLineType_0(drawer.style_0, oldLt);
}

function print_29(drawer, relationPoints, match_0, line, drawOnLineStart){
  $resetPointMinSize(relationPoints, castTo(drawOnLineStart?line.start_0:line.end, 98).index_0.value_0);
  !!match_0.type_0 && castTo(match_0.type_0, 22).print_0(drawer, line, drawOnLineStart, match_0.text_0, relationPoints);
}

defineClass(848, 86, $intern_15, RelationLineTypeFacet);
_.getKeyValue = function getKeyValue_17(){
  return new KeyValueFacet$KeyValue_1('lt', stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_KeyValueFacet$ValueInfo_2_classLit, 1), $intern_6, 33, 0, [new KeyValueFacet$ValueInfo_0('<-', 'left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAq0lEQVR42mL8z4AAX3gYyAdMCOabUsUf1DDpR4fqld0cFJjE8P////////+eL2Oy/z9FAGLSdgOV5b//U27SaQeR7u///1Ns0u0Inor3/ykHDLcZqAP+M/x/HuJw/T813PT////1Ks2/KTeJiYGBIeD8S8MTVPDf//////8/rpHzmQpuYmBgsLgsbLiFKm76////bZuQ55SncQiYrvCaApMYkUuVDwIUeA4wABeKjdP2NRIjAAAAAElFTkSuQmCC'), new KeyValueFacet$ValueInfo_0('|<-', 'left measure-arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQffBxQPHSyED19AAAAAp0lEQVQ4y2P8z/ifAQa+8DCQD5gQzDelij+oYdKPDtUruzkoMInhP8P//////54vY7L/P0UAYtJ2A5Xlv/9TbtJpB5Hu7///U25SBE/F+/+UA4bbDNQB/xn/M4a8ma5BFbMY/q9Xaf5Nue+YGBgYAs6/NDxBFTf9////uEbOZyq4iYGBweKysOEWqrjp////t21CnlOexiFgusJrCkxiRC5VPghQ4DkAWvhD8uO+gNEAAAAA'), new KeyValueFacet$ValueInfo_0('<.', 'left arrow with dashed line', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAsUlEQVR42mL8z4AAX3gYyAdMCOabUsUf1DDpR4fqld0cFJjE8P////////+eL2Oy/z9FAGLSdgOV5b//U27SaQeR7u///1Ns0u0Inor3/ykHDLdhAVb///////Xkcur/M/x/HuJw/T813PT////1Ks2/KTeJiYGBIeD8S8MTDBQDiIHHNXI+U8FNDAwMFpeFDbdQxU3///+/bRPynPI0DgHTFV5TYBIjcqnyQYACzwEGAD/RpzQKsM6sAAAAAElFTkSuQmCC'), new KeyValueFacet$ValueInfo_0('<..', 'left arrow with dotted line', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAArElEQVR42mL8z4AAX3gYyAdMCOabUsUf1DDpR4fqld0cFJjE8P////////+eL2Oy/z9FAGLSdgOV5b//U27SaQeR7u///1Ns0u0Inor3/ykHDLcZGB7X1/+nHDH8fx7icP0/Ndz0////9SrNvyk3iYmBgSHg/EvDEwwUA4iBxzVyPlPBTQwMDBaXhQ23UMVN////v20T8pzyNA4B0xVeU2ASI3Kp8kGAAs8BBgAP7rtyPzvx8QAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('<<-', 'closed left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAArElEQVR42mL8z4AAd1QYyAdMCOabUlUGapj0o0P1CgNF4P////////89X8Zk/38ohzwA0bzdQGX57/+Um3TaQaT7O8JYsk26HcFT8R7ZgeSadJuB4TGcQ0l4M/x/HuJw/T813PT////1Ks2/KTeJiYGBIeD8S8MTDBQDiIHHNXI+U8FNDAwMFpeFDbdQ5iRGeITdSZRY858qOVjlsDPDG6q4iYGB4YMABSYBBgB/rAWtC0QJWQAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('<<<-', 'filled closed left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAmklEQVR42mL8z4AAd1QYyAdMCOabCFUGSsB/KPhewsYI55ADoJp/z+JjQjKWfJO2y7KgOJBck04bs6J5lTyTbgeyMDFQw6TbDNQB/xn+P/cUZaaKm/7//79eVpJKJv3/nCUpRrFJjJDcciKB9cYfBob/lOcWiyvB0taUBTkj3Bl3Ev8d+0+NfPf////pDK8pDycI+CBAgZMAAwDOwWE1BFRLXwAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('<<<<-', 'diamond left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAA3UlEQVR42mL8z4AAPzgYyAdMCOabUs7EO1Qw6UeH6pXVDLoUmPX/////////ni9jsv////+3EzgSbv8nC0BM2m6gsvw3RIBssxj+//9/2kGk+ztCiEyzGP7fjuCpeI8qSJZZDLcZGB5jCl8nPbwZ/j8PcbiObtBhg5jH5ITTepXm38hi92MsDpMZd59zdI7DRb43K8z+TXYq+H9cI+czhLVao+Q9Benp///f9Sqb////f93F5fr//xSZ9P//bZuQ6zkam///p9ik//+nMxR8J9ug/4zIpcobEQpKFcAAdWYW1hzT7fsAAAAASUVORK5CYII='), new KeyValueFacet$ValueInfo_0('<<<<<-', 'filled diamond left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEkAAAAQCAAAAAB/mQ0/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAyUlEQVR42mL8z4AAPzgYyAdMCOabCE6NSxQY9R8KvpewMTIwMJrc+E8mgJr0exYf1HVM3rcpMWm7LAuShwNvk2vSaWNWFA+zskTdJsek24EsTOiBx8GaQLJZDLcZqAP+M/x/7inKjC7MLx39mJxwWi8riWIOs7bJYTLj7nOWpBjCIHWp2b/JT0/H1XWg6UBCruQ9JSnz/+96eWsGBgZBVafrZKZxRngOvpP47wX7734fivPd////pzMUfP9PNmBELlXeiFCQoAADAGzWnc70WHTSAAAAAElFTkSuQmCC'), new KeyValueFacet$ValueInfo_0('()-', 'circle left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEoAAAAXCAAAAACJq4aEAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAA/0lEQVR42mL8z0AtwARjXKi15WRkNS09QalRNzwD2Zvf//88WTzV9Qq5Zv3//////90S/b//Q8Fkic3/yQIM/////79b5TiS0GWFzWQbdV3iOIrYZYnL5Brl0Y8mONmFTKPOK/xGF9U5ToZRTAwMa5NZ0OMifi15ieGADYaozQEyjGL8z8D5ngNd9Afvb7KMYsSSdxjJSKAsDAwcPzBdxfKbrLAywcx2FwzIC3aHIxiiRxzIy4NUTFcGGlPQjJ8iYUFmyUDFPIheMqiQXzL8/79bhFrl1f//1z0Umvd////9eLeOy2XyTPoPT+oX1h4484PFwCHYgtzymJF6NQ5gAGG56ureP9K3AAAAAElFTkSuQmCC'), new KeyValueFacet$ValueInfo_0('(+)-', 'circle left arrow with plus symbol', 'iVBORw0KGgoAAAANSUhEUgAAAEoAAAAXCAAAAACJq4aEAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAABD0lEQVR42mL8z0AtwARjXKi15WRkNS09QalRNzwD2Zvf//88WTzV9Qq5Zv3//////90S/b//Q8Fkic3/yQIM/////79b5TiS0GWFzWQbdV3iOIrYZYnL5Brl0Y/sxP///092IdOo8wq/0Yz6r3OcDKOYGBjWJrOgx0X8WvISwwEbDFGbA2QYxfifgfM9B4IDAT94f5NlFON/BgYGRqSUhsolOoGyMDBw/OCA6EdyFctvssLKBDPbXTAgL9gdjmCIHnEgLw9SMV0ZaExBM36KhAWZJQMV8yB6yaBCfsnw//9uEWqVV///X/dQaN7//f/34906LpfJM+k/PFVeWHvgzA8WA4dgC3LLY0bq1TiAAQAcj+vskkcbaQAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('x-', 'diagonally crossed left arrow', 'iVBORw0KGgoAAAANSUhEUgAAAEoAAAAXCAAAAACJq4aEAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAf0lEQVR42uzUwQ3AIAgFUHQCjq7gnB3J3uhOsgG9WErTS4vcWk6GxBejX5JAVGX4CsWmyVMU11V7W/VZMoqw3VbvSikVvJKhhuGWLCWEbUK6UEK4+CWBqI8jkiHoVCYMoXcV94JxuYpLey/nfirdQ6UjDIxmMqAnDukfyI9rHwBCzBVSiqTGJwAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('[txt]-', 'box end with text', 'iVBORw0KGgoAAAANSUhEUgAAAEoAAAAXCAAAAACJq4aEAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAzUlEQVR42mL8z0AtwMLAiF3iPxlGYdfESLqrmKjmv1GjyDDqOQM6g2TA+J/xPwMDAwPPF6gAlMFIVrpiYGBguPB1jwibFsONX/++7nFiosiDhxhWfrN5+drx+yGGlf8gziIVwD3I+J+h/uoXtyKYz8jwIJJR//T4jzJQYBRSuNx6++AGRanhP8P//////2f4/Vd3xSrd3/8ZfkP4/0kGMKNsOFNC//8PLP1vw3mdTKNgYcXwB5osoAwKgh1TfJhkZxYcZS8jOUZRrcoBDABbMrpBXVzS8wAAAABJRU5ErkJggg=='), new KeyValueFacet$ValueInfo_0('[txt]<-', 'box end with text and arrow pointing to it', 'iVBORw0KGgoAAAANSUhEUgAAAEoAAAAXCAAAAACJq4aEAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAABPklEQVR42qyVv0sDMRTHX6SDpQ4KDg4OCicUpKDgJDc4OStU8A+40UkouHVwEZw6dXRUXBwcHG5wEgsOh2Cp2KVT/VVRsGAhHB8HSe/AGy7HvS0v5JNvXr55UUheURCVPEEGVPIiZa9qIrfzpUEN80INaoujXFCjo6UHfzKlLISkEAB9Mr92TdowqL5J9CPU1YpzqrFGlUyiZPJ3G7PHP2CNCsQP2tC5D8QPAWR36uATMqAa4t3MvLzNtRriaaBrbysUChERhdTbw819+RuKqg6aZVuYmDKHy+vm6kC4cA611QFjvnr66D3G9tgKXldbmVTpsHJ2XtGIjnx1W977tjeDW/R2YLuGW+yMUei6c2mNYlyXmCqg61afbVFJDweA5sJ7OpQxw7/WF2W/ptNVPQXKoiGrnBpyQXL7cn4HACsYkiEdOFqWAAAAAElFTkSuQmCC')]));
}
;
_.handleValue = function handleValue_17(value_0, state){
}
;
_.parsingFinished = function parsingFinished_6(state, handledLines){
  var leftArrow, lineType, relationPoints, remaining, rightArrow, value_0;
  if (handledLines.isEmpty()) {
    drawLineAndArrows(state.drawer, castTo(castTo(state.settings, 212), 213).this$01.relationPoints, new RelationLineTypeFacet$Match('', ($clinit_LineType() , SOLID)), new RelationLineTypeFacet$Match('', null), new RelationLineTypeFacet$Match('', null));
  }
   else if (handledLines.size_1() == 1) {
    relationPoints = castTo(castTo(state.settings, 212), 213).this$01.relationPoints;
    value_0 = $extractValue(this, castToString(handledLines.get_0(0)));
    remaining = new RelationLineTypeFacet$Remaining(value_0);
    leftArrow = $extractPart(LEFT_ARROW_STRINGS, remaining);
    lineType = $extractPart(LINE_TYPES, remaining);
    if (!leftArrow.type_0 && !lineType.type_0) {
      throw toJs(new StyleException('left arrow must be one of the following or empty:\n' + $listToString(LEFT_ARROW_STRINGS)));
    }
    if (!lineType.type_0) {
      throw toJs(new StyleException('lineType must be specified. One of: ' + $listToString(LINE_TYPES)));
    }
    rightArrow = $extractPart(RIGHT_ARROW_STRINGS, remaining);
    if (!rightArrow.type_0 && remaining.value_0.length != 0) {
      throw toJs(new StyleException('right arrow must be one of the following or empty:\n' + $listToString(RIGHT_ARROW_STRINGS)));
    }
    if (remaining.value_0.length != 0) {
      throw toJs(new StyleException('Unknown part after rightArrow: ' + remaining));
    }
    $debug_1(this.log_0, 'Split Relation ' + value_0 + ' into following parts: ' + (!leftArrow.type_0?'':leftArrow.type_0.getRegexValue()) + ' | ' + (!lineType.type_0?'':lineType.type_0.getRegexValue()) + ' | ' + (!rightArrow.type_0?'':rightArrow.type_0.getRegexValue()));
    drawLineAndArrows(state.drawer, relationPoints, lineType, leftArrow, rightArrow);
    $resizeRectAndReposPoints(relationPoints);
  }
   else {
    throw toJs(new StyleException('Only one lineType allowed'));
  }
}
;
var INSTANCE_25, LEFT_ARROW_STRINGS, LINE_TYPES, RIGHT_ARROW_STRINGS, SHARED_ARROW_STRINGS_AFTER, SHARED_ARROW_STRINGS_BEFORE;
var Lcom_baselet_element_relation_facet_RelationLineTypeFacet_2_classLit = createForClass('com.baselet.element.relation.facet', 'RelationLineTypeFacet', 848);
function RelationLineTypeFacet$Match(matchedText, matchedObject){
  this.text_0 = matchedText;
  this.type_0 = matchedObject;
}

defineClass(144, 1, {}, RelationLineTypeFacet$Match);
var Lcom_baselet_element_relation_facet_RelationLineTypeFacet$Match_2_classLit = createForClass('com.baselet.element.relation.facet', 'RelationLineTypeFacet/Match', 144);
function RelationLineTypeFacet$Remaining(value_0){
  this.value_0 = value_0;
}

defineClass(849, 1, {}, RelationLineTypeFacet$Remaining);
_.toString_0 = function toString_21(){
  return this.value_0;
}
;
var Lcom_baselet_element_relation_facet_RelationLineTypeFacet$Remaining_2_classLit = createForClass('com.baselet.element.relation.facet', 'RelationLineTypeFacet/Remaining', 849);
function $clinit_LineDescriptionEnum(){
  $clinit_LineDescriptionEnum = emptyMethod;
  MESSAGE_START = new LineDescriptionEnum('MESSAGE_START', 0, 'm1', 1, ($clinit_Boolean() , true));
  MESSAGE_END = new LineDescriptionEnum('MESSAGE_END', 1, 'm2', 2, false);
  ROLE_START = new LineDescriptionEnum('ROLE_START', 2, 'r1', 3, true);
  ROLE_END = new LineDescriptionEnum('ROLE_END', 3, 'r2', 4, false);
  MESSAGE_MIDDLE = new LineDescriptionEnum('MESSAGE_MIDDLE', 4, '', 5, null);
}

function LineDescriptionEnum(enum$name, enum$ordinal, key, index_0, start_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.key = key;
  this.index_0 = index_0;
  this.start_0 = start_0;
}

function forString(line){
  $clinit_LineDescriptionEnum();
  var ld, ld$array, ld$index, ld$max;
  for (ld$array = stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_helper_LineDescriptionEnum_2_classLit, 1), $intern_5, 147, 0, [MESSAGE_START, MESSAGE_END, ROLE_START, ROLE_END, MESSAGE_MIDDLE]) , ld$index = 0 , ld$max = ld$array.length; ld$index < ld$max; ++ld$index) {
    ld = ld$array[ld$index];
    if ($startsWith(line, ld.key + '=')) {
      return ld;
    }
  }
  return MESSAGE_MIDDLE;
}

function values_23(){
  $clinit_LineDescriptionEnum();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_relation_helper_LineDescriptionEnum_2_classLit, 1), $intern_5, 147, 0, [MESSAGE_START, MESSAGE_END, ROLE_START, ROLE_END, MESSAGE_MIDDLE]);
}

defineClass(147, 8, {147:1, 3:1, 9:1, 8:1}, LineDescriptionEnum);
_.index_0 = 0;
var MESSAGE_END, MESSAGE_MIDDLE, MESSAGE_START, ROLE_END, ROLE_START;
var Lcom_baselet_element_relation_helper_LineDescriptionEnum_2_classLit = createForEnum('com.baselet.element.relation.helper', 'LineDescriptionEnum', 147, values_23);
function calcPoint(point, angleTotal, length_0){
  var x_0, y_0;
  x_0 = $doubleValue_0(point.x_0) + length_0 * $wnd.Math.cos(angleTotal * $intern_47);
  y_0 = $doubleValue_0(point.y_0) + length_0 * $wnd.Math.sin(angleTotal * $intern_47);
  return new PointDouble(x_0, y_0);
}

function drawArrowToLine(point, drawer, line, drawOnStart, arrowEndType, fillBody, invertArrow){
  var arrowAngle, bgColor, lengthDiamond, m1, m2, p, p1, p2, pDiamond, points;
  if (invertArrow) {
    point = drawOnStart?getPointOnLineWithDistanceFromStart(line.start_0, line.end, 13):getPointOnLineWithDistanceFromStart(line.end, line.start_0, 13);
    drawOnStart = !drawOnStart;
  }
  arrowAngle = drawOnStart?150:30;
  p1 = calcPoint(point, $getAngleOfSlope(line) - arrowAngle, 13);
  p2 = calcPoint(point, $getAngleOfSlope(line) + arrowAngle, 13);
  points = new ArrayList;
  if (arrowEndType == 3 || arrowEndType == 4 || arrowEndType == 5) {
    m1 = calcPoint(point, $getAngleOfSlope(line) + 90, 10);
    m2 = calcPoint(point, $getAngleOfSlope(line) - 90, 10);
    points.array[points.array.length] = m1;
    points.array[points.array.length] = m2;
    points.array[points.array.length] = point;
  }
  if (arrowEndType == 5) {
    p = drawOnStart?getPointOnLineWithDistanceFromStart(line.end, line.start_0, 19.5):getPointOnLineWithDistanceFromStart(line.start_0, line.end, 19.5);
    m1 = calcPoint(p, $getAngleOfSlope(line) + 90, 10);
    m2 = calcPoint(p, $getAngleOfSlope(line) - 90, 10);
    points.array[points.array.length] = p;
    points.array[points.array.length] = m1;
    points.array[points.array.length] = m2;
    points.array[points.array.length] = p;
    points.array[points.array.length] = point;
  }
  if (arrowEndType != 4 && arrowEndType != 5) {
    points.array[points.array.length] = p1;
    points.array[points.array.length] = point;
    points.array[points.array.length] = p2;
    if (arrowEndType == 1) {
      points.array[points.array.length] = p1;
    }
     else if (arrowEndType == 2) {
      lengthDiamond = getDistanceBetweenLineAndPoint($doubleValue_0(p1.x_0), $doubleValue_0(p1.y_0), $doubleValue_0(p2.x_0), $doubleValue_0(p2.y_0), $doubleValue_0(point.x_0), $doubleValue_0(point.y_0)) * 2;
      pDiamond = drawOnStart?getPointOnLineWithDistanceFromStart(line.start_0, line.end, lengthDiamond):getPointOnLineWithDistanceFromStart(line.end, line.start_0, lengthDiamond);
      points.array[points.array.length] = pDiamond;
      points.array[points.array.length] = p1;
    }
  }
  if (fillBody) {
    bgColor = drawer.style_0.backgroundColor_0;
    $setBackgroundColor(drawer, drawer.style_0.foregroundColor);
    $drawLines_0(drawer, castTo($toArray_1(points, initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, points.array.length, 0, 1)), 15));
    !bgColor?$setBackgroundColor_0(drawer.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, bgColor);
  }
   else {
    $drawLines_0(drawer, castTo($toArray_1(points, initUnidimensionalArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, $intern_8, 5, points.array.length, 0, 1)), 15));
  }
}

function drawBoxArrow(drawer, line, drawOnStart, matchedText, resizableObject){
  var oldBgColor, oldFontsize, point, r, start_0, width_0;
  oldFontsize = drawer.style_0.fontSize;
  $assertDoubleRange(12);
  drawer.style_0.fontSize = 12;
  width_0 = $wnd.Math.max(20, $textDimensionHelper(drawer, analyzeFormatLabels(replaceNotEscaped(matchedText))).width_0 + 10);
  point = castTo(drawOnStart?line.start_0:line.end, 98);
  r = new Rectangle_1($doubleValue_0(point.x_0) - width_0 / 2, $doubleValue_0(point.y_0) - 10, width_0, 20);
  $drawRectangle_1(drawer, r.x_0, r.y_0, r.width_0, r.height_0);
  oldBgColor = drawer.style_0.backgroundColor_0;
  $setBackgroundColor(drawer, drawer.style_0.foregroundColor);
  if ($equals_6(matchedText, '^')) {
    start_0 = new PointDouble($doubleValue_0(point.x_0), $doubleValue_0(point.y_0) - 4);
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble($doubleValue_0(point.x_0) + 4, $doubleValue_0(point.y_0) + 4), new PointDouble($doubleValue_0(point.x_0) - 4, $doubleValue_0(point.y_0) + 4), start_0]));
  }
   else if ($equals_6(matchedText, '<')) {
    start_0 = new PointDouble($doubleValue_0(point.x_0) - 4, $doubleValue_0(point.y_0));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble($doubleValue_0(point.x_0) + 4, $doubleValue_0(point.y_0) - 4), new PointDouble($doubleValue_0(point.x_0) + 4, $doubleValue_0(point.y_0) + 4), start_0]));
  }
   else if ($equals_6(matchedText, '>')) {
    start_0 = new PointDouble($doubleValue_0(point.x_0) + 4, $doubleValue_0(point.y_0));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble($doubleValue_0(point.x_0) - 4, $doubleValue_0(point.y_0) - 4), new PointDouble($doubleValue_0(point.x_0) - 4, $doubleValue_0(point.y_0) + 4), start_0]));
  }
   else if ($equals_6(matchedText, 'v')) {
    start_0 = new PointDouble($doubleValue_0(point.x_0) - 4, $doubleValue_0(point.y_0) - 4);
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [start_0, new PointDouble($doubleValue_0(point.x_0) + 4, $doubleValue_0(point.y_0) - 4), new PointDouble($doubleValue_0(point.x_0), $doubleValue_0(point.y_0) + 4), start_0]));
  }
   else if ($equals_6(matchedText, '=')) {
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble($doubleValue_0(point.x_0) - 6, $doubleValue_0(point.y_0) - 2), new PointDouble($doubleValue_0(point.x_0) + 6, $doubleValue_0(point.y_0) - 2), new PointDouble($doubleValue_0(point.x_0), $doubleValue_0(point.y_0) - 6)]));
    $drawLines_0(drawer, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble($doubleValue_0(point.x_0) + 6, $doubleValue_0(point.y_0) + 2), new PointDouble($doubleValue_0(point.x_0) - 6, $doubleValue_0(point.y_0) + 2), new PointDouble($doubleValue_0(point.x_0), $doubleValue_0(point.y_0) + 6)]));
  }
   else {
    $print_1(drawer, matchedText, new PointDouble($doubleValue_0(point.x_0) - width_0 / 2 + 5, $doubleValue_0(point.y_0) + $textDimensionHelper(drawer, new StringStyle(($clinit_Collections() , $clinit_Collections() , EMPTY_SET), 'Hy')).height_0 / 2), ($clinit_AlignHorizontal() , LEFT));
    $setPointMinSize(resizableObject, point.index_0.value_0, new Rectangle_1(-width_0 / 2, -10, width_0, 20));
  }
  $assertDoubleRange(oldFontsize);
  $setFontSize_0(drawer.style_0, oldFontsize);
  !oldBgColor?$setBackgroundColor_0(drawer.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, oldBgColor);
  return r;
}

function drawCircle(point, circleRadius, drawer, line, drawOnStart, resizableObject, openDirection, drawCross){
  var bg, directionOfCircle, pointIndex;
  if (!openDirection) {
    $drawCircle_0(drawer, $doubleValue_0(point.x_0), $doubleValue_0(point.y_0), circleRadius);
  }
   else if (instanceOf(point, 98) && (openDirection == ($clinit_Direction() , LEFT_0) || openDirection == RIGHT_0)) {
    pointIndex = castTo(point, 98);
    bg = drawer.style_0.backgroundColor_0;
    $setBackgroundColor(drawer, $getColor_0(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$PredefinedColors() , TRANSPARENT)));
    directionOfCircle = $getDirectionOfLine(line, drawOnStart);
    if (directionOfCircle == ($clinit_Direction() , RIGHT_0)) {
      $drawArc_0(drawer, $doubleValue_0(point.x_0), $doubleValue_0(point.y_0) - circleRadius / 2, circleRadius, circleRadius, 90, 180, true);
      $setPointMinSize(resizableObject, pointIndex.index_0.value_0, new Rectangle_1(-circleRadius / 4, -circleRadius / 2, circleRadius * 0.75, circleRadius));
    }
     else if (directionOfCircle == DOWN) {
      $drawArc_0(drawer, $doubleValue_0(point.x_0) - circleRadius / 2, $doubleValue_0(point.y_0), circleRadius, circleRadius, 0, 180, true);
      $setPointMinSize(resizableObject, pointIndex.index_0.value_0, new Rectangle_1(-circleRadius / 2, -circleRadius / 4, circleRadius, circleRadius * 0.75));
    }
     else if (directionOfCircle == LEFT_0) {
      $drawArc_0(drawer, $doubleValue_0(point.x_0) - circleRadius, $doubleValue_0(point.y_0) - circleRadius / 2, circleRadius, circleRadius, -90, 180, true);
      $setPointMinSize(resizableObject, pointIndex.index_0.value_0, new Rectangle_1(-circleRadius / 2, -circleRadius / 2, circleRadius * 0.75, circleRadius));
    }
     else {
      $drawArc_0(drawer, $doubleValue_0(point.x_0) - circleRadius / 2, $doubleValue_0(point.y_0) - circleRadius, circleRadius, circleRadius, -180, 180, true);
      $setPointMinSize(resizableObject, pointIndex.index_0.value_0, new Rectangle_1(-circleRadius / 2, -circleRadius / 2, circleRadius, circleRadius * 0.75));
    }
    !bg?$setBackgroundColor_0(drawer.style_0, $getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawer.style_0, bg);
  }
  if (drawCross) {
    $drawLine(drawer, $doubleValue_0(point.x_0) - 5, $doubleValue_0(point.y_0), $doubleValue_0(point.x_0) + 5, $doubleValue_0(point.y_0));
    $drawLine(drawer, $doubleValue_0(point.x_0), $doubleValue_0(point.y_0) - 5, $doubleValue_0(point.x_0), $doubleValue_0(point.y_0) + 5);
  }
}

function drawCircle_0(drawer, line, drawOnStart, resizableObject, openDirection){
  var circleRadius;
  circleRadius = !openDirection?10:30;
  drawCircle(drawOnStart?line.start_0:line.end, circleRadius, drawer, line, drawOnStart, resizableObject, openDirection, false);
}

function $clinit_RelationPoint(){
  $clinit_RelationPoint = emptyMethod;
  DEFAULT_SIZE = new Rectangle_0(-10, -10, 20, 20);
}

function RelationPoint(index_0, x_0, y_0){
  $clinit_RelationPoint();
  RelationPoint_0.call(this, index_0, x_0, y_0, DEFAULT_SIZE);
}

function RelationPoint_0(index_0, x_0, y_0, size_0){
  $clinit_RelationPoint();
  this.point = new PointDoubleIndexed(valueOf_9(index_0), x_0, y_0);
  this.size_0 = size_0;
}

defineClass(49, 1, {49:1}, RelationPoint, RelationPoint_0);
_.toString_0 = function toString_22(){
  return 'RelationPoint [point=' + this.point + ', size=' + this.size_0 + ']';
}
;
var DEFAULT_SIZE;
var Lcom_baselet_element_relation_helper_RelationPoint_2_classLit = createForClass('com.baselet.element.relation.helper', 'RelationPoint', 49);
function $drawCirclesAndDragBox(this$static, drawer){
  var p, p$iterator;
  for (p$iterator = new Collections$UnmodifiableCollectionIterator(unmodifiableList(this$static.points.points).coll.iterator()); p$iterator.it.hasNext_0();) {
    p = castTo(p$iterator.it.next_1(), 49);
    $drawCircle_0(drawer, $doubleValue_0(p.point.x_0), $doubleValue_0(p.point.y_0), 10);
  }
  $drawRectangle(drawer, $getDragBox(this$static.points));
}

function $drawLinesBetweenPoints(this$static, drawer, shortFirstLine, shortLastLine){
  var i, lineToDraw, lines, shortenedPoint, shortenedPoint0;
  lines = $getRelationPointLines(this$static.points);
  for (i = 0; i < lines.array.length; i++) {
    lineToDraw = (checkCriticalElementIndex(i, lines.array.length) , castTo(lines.array[i], 62));
    i == 0 && shortFirstLine?(lineToDraw = (shortenedPoint0 = getPointOnLineWithDistanceFromStart(lineToDraw.start_0, lineToDraw.end, 1) , new Line(shortenedPoint0, lineToDraw.end))):i == lines.array.length - 1 && shortLastLine && (lineToDraw = (shortenedPoint = getPointOnLineWithDistanceFromStart(lineToDraw.end, lineToDraw.start_0, 1) , new Line(lineToDraw.start_0, shortenedPoint)));
    $drawLine(drawer, $doubleValue_0(lineToDraw.start_0.x_0), $doubleValue_0(lineToDraw.start_0.y_0), $doubleValue_0(lineToDraw.end.x_0), $doubleValue_0(lineToDraw.end.y_0));
  }
}

function $drawSelectionSpace(this$static, drawer){
  var rp, rp$iterator;
  for (rp$iterator = new Collections$UnmodifiableCollectionIterator(unmodifiableList(this$static.points.points).coll.iterator()); rp$iterator.it.hasNext_0();) {
    rp = castTo(rp$iterator.it.next_1(), 49);
    $drawRectangle(drawer, new Rectangle_1($doubleValue_0(rp.point.x_0) + rp.size_0.x_0, $doubleValue_0(rp.point.y_0) + rp.size_0.y_0, rp.size_0.width_0, rp.size_0.height_0));
  }
}

function $getLineContaining(this$static, point){
  var distanceToPoint, line, line$iterator;
  for (line$iterator = new ArrayList$1($getRelationPointLines(this$static.points)); line$iterator.i < line$iterator.this$01.array.length;) {
    line = castTo($next_3(line$iterator), 62);
    distanceToPoint = $getDistanceToPoint(line, new PointDouble(point.x_0, point.y_0));
    if (distanceToPoint < 5) {
      return line;
    }
  }
  return null;
}

function $getSelectionAndMovePointsIfNecessary(this$static, point, diffX, diffY, firstDrag){
  var lineOnPoint, pointOverRelationPoint;
  if (!firstDrag && !!this$static.relationPointOfCurrentDrag) {
    this$static.relationPointOfCurrentDrag = $movePointAndResizeRectangle(this$static, this$static.relationPointOfCurrentDrag, diffX, diffY);
    return 0;
  }
  this$static.relationPointOfCurrentDrag = null;
  if ($contains_0($getDragBox(this$static.points), point)) {
    return 1;
  }
  pointOverRelationPoint = getRelationPointContaining(point, this$static.points);
  if (pointOverRelationPoint) {
    this$static.relationPointOfCurrentDrag = castTo($get_7($movePointAndResizeRectangle_0(this$static, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_sticking_PointChange_2_classLit, 1), $intern_6, 143, 0, [new PointChange(pointOverRelationPoint.index_0, diffX.value_0, diffY.value_0)]))), 0), 98);
    return 0;
  }
  lineOnPoint = $getLineContaining(this$static, point);
  if (lineOnPoint) {
    this$static.relationPointOfCurrentDrag = $addPointOnLine(this$static.points, lineOnPoint, realignToGridRoundToNearest(point.x_0), realignToGridRoundToNearest(point.y_0));
    this$static.relationPointOfCurrentDrag = $movePointAndResizeRectangle(this$static, this$static.relationPointOfCurrentDrag, diffX, diffY);
    return 2;
  }
  return 3;
}

function $movePointAndResizeRectangle(this$static, point, diffX, diffY){
  return castTo($get_7($movePointAndResizeRectangle_0(this$static, new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_sticking_PointChange_2_classLit, 1), $intern_6, 143, 0, [new PointChange(point.index_0, diffX.value_0, diffY.value_0)]))), 0), 98);
}

function $movePointAndResizeRectangle_0(this$static, changedPoints){
  var c, c$iterator, updatedChangedPoint;
  $applyPointChange(this$static.points, changedPoints);
  $resizeRectAndReposPoints(this$static);
  updatedChangedPoint = new ArrayList;
  for (c$iterator = changedPoints.iterator(); c$iterator.hasNext_0();) {
    c = castTo(c$iterator.next_1(), 143);
    $add_13(updatedChangedPoint, $get(this$static.points, c.index_0.value_0));
  }
  return updatedChangedPoint;
}

function $resetPointMinSize(this$static, index_0){
  $setSize_0(this$static.points, index_0, ($clinit_RelationPoint() , DEFAULT_SIZE));
}

function $resetTextBoxIndexesExcept(this$static, excludedList){
  var entry, index_0, index$iterator, outerIter, unusedTextBoxIndexes;
  unusedTextBoxIndexes = new HashSet_0(new AbstractMap$1(this$static.points.textBoxSpaces));
  $removeAll_0(unusedTextBoxIndexes, excludedList);
  for (index$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$1(unusedTextBoxIndexes.map_0)).this$01)).this$01) , new AbstractMap$1$1(outerIter)); index$iterator.val$outerIter2.hasNext;) {
    index_0 = (entry = $next_1(index$iterator.val$outerIter2) , castTo(entry.getKey(), 48));
    $removeTextBox(this$static.points, index_0.value_0);
  }
}

function $resizeRectAndReposPoints(this$static){
  var newRect;
  newRect = calculateRelationRectangleBasedOnPoints($getUpperLeftCorner($copy_0(this$static.relation.component.rect_0)), this$static.points);
  $setRectangle(this$static.relation, newRect);
  $moveRelationPointsAndTextSpacesByToUpperLeftCorner(this$static.points);
}

function $setPointMinSize(this$static, index_0, size_0){
  size_0 = realignToGrid(size_0, true);
  $setSize_0(this$static.points, index_0, size_0);
}

function RelationPointHandler(relation, points){
  this.points = new RelationPointList;
  this.relation = relation;
  this.points = points;
}

defineClass(846, 1, {}, RelationPointHandler);
_.toString_0 = function toString_23(){
  return 'Relationpoints: ' + listToString(',', this.points.points);
}
;
_.relationPointOfCurrentDrag = null;
var Lcom_baselet_element_relation_helper_RelationPointHandler_2_classLit = createForClass('com.baselet.element.relation.helper', 'RelationPointHandler', 846);
function calculateRelationRectangleBasedOnPoints(upperLeftCorner, relationPoints){
  var newSize;
  newSize = $createRectangleContainingAllPointsAndTextSpace(relationPoints);
  if (!newSize) {
    throw toJs(new RuntimeException_0('This relation has no points: ' + relationPoints));
  }
  $setBounds(newSize, newSize.x_0 * 10 / 10 | 0, newSize.y_0 * 10 / 10 | 0, newSize.width_0 * 10 / 10 | 0, newSize.height_0 * 10 / 10 | 0);
  $setLocation(newSize, realignTo(newSize.x_0, false, 10), realignTo(newSize.y_0, false, 10));
  $setSize(newSize, realignTo(newSize.width_0, true, 10) + 10, realignTo(newSize.height_0, true, 10) + 10);
  $move_0(newSize, $intValue(upperLeftCorner.x_0), $intValue(upperLeftCorner.y_0));
  return newSize;
}

function getRelationPointContaining(point, points){
  var relationPoint, relationPoint$iterator;
  for (relationPoint$iterator = new Collections$UnmodifiableCollectionIterator(unmodifiableList(points.points).coll.iterator()); relationPoint$iterator.it.hasNext_0();) {
    relationPoint = castTo(relationPoint$iterator.it.next_1(), 49);
    if ($contains_0(new Rectangle_1($doubleValue_0(relationPoint.point.x_0) + relationPoint.size_0.x_0, $doubleValue_0(relationPoint.point.y_0) + relationPoint.size_0.y_0, relationPoint.size_0.width_0, relationPoint.size_0.height_0), point)) {
      return relationPoint.point;
    }
  }
  return null;
}

function $add_1(this$static, x_0, y_0){
  $add_13(this$static.points, new RelationPoint(this$static.points.array.length, x_0, y_0));
}

function $addPointOnLine(this$static, line, x_0, y_0){
  var endOfLine, iter, newPoint, point;
  newPoint = null;
  endOfLine = line.start_0;
  for (iter = new AbstractList$ListIteratorImpl(this$static.points, 0); iter.i < iter.this$01_0.size_1();) {
    point = (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , castTo(iter.this$01_0.get_0(iter.last = iter.i++), 49)).point;
    if ($equals_3(point, endOfLine)) {
      newPoint = new RelationPoint(iter.i, x_0, y_0);
      $add_11(iter, newPoint);
    }
  }
  $rebuildpointIndexes(this$static);
  if (!newPoint) {
    throw toJs(new RuntimeException_0('Point ' + endOfLine + ' not found in list ' + this$static.points));
  }
  return newPoint.point;
}

function $applyPointChange(this$static, changes){
  var change, change$iterator, iter, p, pt;
  for (iter = new AbstractList$ListIteratorImpl(this$static.points, 0); iter.i < iter.this$01_0.size_1();) {
    p = (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , castTo(iter.this$01_0.get_0(iter.last = iter.i++), 49));
    pt = p.point;
    for (change$iterator = changes.iterator(); change$iterator.hasNext_0();) {
      change = castTo(change$iterator.next_1(), 143);
      $equals_5(pt.index_0, change.index_0) && $set_3(iter, new RelationPoint_0(pt.index_0.value_0, $doubleValue_0(pt.x_0) + change.diffX, $doubleValue_0(pt.y_0) + change.diffY, p.size_0));
    }
  }
}

function $createRectangleContainingAllPointsAndTextSpace(this$static){
  var entry, outerIter, p, p$iterator, rectangleContainingAllPointsAndTextSpace, textSpace, textSpace$iterator;
  rectangleContainingAllPointsAndTextSpace = null;
  for (p$iterator = new ArrayList$1(this$static.points); p$iterator.i < p$iterator.this$01.array.length;) {
    p = castTo($next_3(p$iterator), 49);
    rectangleContainingAllPointsAndTextSpace = mergeToLeft(rectangleContainingAllPointsAndTextSpace, new Rectangle_1($doubleValue_0(p.point.x_0) + p.size_0.x_0, $doubleValue_0(p.point.y_0) + p.size_0.y_0, p.size_0.width_0, p.size_0.height_0));
  }
  for (textSpace$iterator = (outerIter = (new AbstractMap$2(this$static.textBoxSpaces)).this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter)); textSpace$iterator.val$outerIter2.hasNext_0();) {
    textSpace = (entry = castTo(textSpace$iterator.val$outerIter2.next_1(), 46) , castTo(entry.getValue_0(), 40));
    rectangleContainingAllPointsAndTextSpace = mergeToLeft(rectangleContainingAllPointsAndTextSpace, textSpace);
  }
  return rectangleContainingAllPointsAndTextSpace;
}

function $get(this$static, index_0){
  return castTo($get_7(this$static.points, index_0), 49).point;
}

function $getDragBox(this$static){
  var center, rectangle;
  center = $getCenter($getMiddleLine(this$static));
  rectangle = new Rectangle_1($doubleValue_0(center.x_0) - 6, $doubleValue_0(center.y_0) - 6, 12, 12);
  return rectangle;
}

function $getFirstLine(this$static){
  return new Line(castTo($get_7(this$static.points, 0), 49).point, castTo($get_7(this$static.points, 1), 49).point);
}

function $getLastLine(this$static){
  return new Line(castTo($get_7(this$static.points, this$static.points.array.length - 2), 49).point, castTo($get_7(this$static.points, this$static.points.array.length - 1), 49).point);
}

function $getMiddleLine(this$static){
  var begin, end;
  begin = castTo($get_7(this$static.points, this$static.points.array.length / 2 | 0), 49).point;
  end = castTo($get_7(this$static.points, (this$static.points.array.length / 2 | 0) - 1), 49).point;
  return new Line(begin, end);
}

function $getRelationPointLines(this$static){
  var i, lines;
  lines = new ArrayList;
  for (i = 1; i < this$static.points.array.length; i++) {
    $add_13(lines, new Line(castTo($get_7(this$static.points, i - 1), 49).point, castTo($get_7(this$static.points, i), 49).point));
  }
  return lines;
}

function $getStickablePoints(this$static){
  return new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_sticking_PointDoubleIndexed_2_classLit, 1), $intern_8, 98, 0, [castTo($get_7(this$static.points, 0), 49).point, castTo($get_7(this$static.points, this$static.points.array.length - 1), 49).point]));
}

function $moveRelationPointsAndTextSpacesBy(this$static, displacementX, displacementY){
  var iter, old, p, textSpace, textSpace$iterator;
  for (iter = new AbstractList$ListIteratorImpl(this$static.points, 0); iter.i < iter.this$01_0.size_1();) {
    p = (checkCriticalElement(iter.i < iter.this$01_0.size_1()) , castTo(iter.this$01_0.get_0(iter.last = iter.i++), 49));
    $set_3(iter, new RelationPoint_0(p.point.index_0.value_0, $doubleValue_0(p.point.x_0) + displacementX, $doubleValue_0(p.point.y_0) + displacementY, p.size_0));
  }
  for (textSpace$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.textBoxSpaces)).this$01); textSpace$iterator.hasNext;) {
    textSpace = $next_1(textSpace$iterator);
    old = castTo(textSpace.getValue_0(), 40);
    textSpace.setValue(new Rectangle_0(old.x_0 + displacementX, old.y_0 + displacementY, old.width_0, old.height_0));
  }
}

function $moveRelationPointsAndTextSpacesByToUpperLeftCorner(this$static){
  var displacementX, displacementY, rect;
  rect = $createRectangleContainingAllPointsAndTextSpace(this$static);
  displacementX = ($clinit_SharedUtils() , realignTo(rect.x_0, false, 10));
  displacementY = realignTo(rect.y_0, false, 10);
  $moveRelationPointsAndTextSpacesBy(this$static, -displacementX, -displacementY);
}

function $rebuildpointIndexes(this$static){
  var i, rebuiltList;
  rebuiltList = new ArrayList;
  for (i = 0; i < this$static.points.array.length; i++) {
    $add_13(rebuiltList, new RelationPoint(i, $doubleValue_0(castTo($get_7(this$static.points, i), 49).point.x_0), $doubleValue_0(castTo($get_7(this$static.points, i), 49).point.y_0)));
  }
  this$static.points.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  $addAll_1(this$static.points, rebuiltList);
}

function $removeTextBox(this$static, index_0){
  $remove_2(this$static.textBoxSpaces, valueOf_9(index_0));
}

function $setSize_0(this$static, index_0, size_0){
  var p, p$iterator;
  for (p$iterator = new ArrayList$1(this$static.points); p$iterator.i < p$iterator.this$01.array.length;) {
    p = castTo($next_3(p$iterator), 49);
    if (p.point.index_0.value_0 == index_0) {
      p.size_0 = size_0;
      return;
    }
  }
  throw toJs(new RuntimeException_0('Unknown Point Index ' + index_0));
}

function $setTextBox(this$static, index_0, rect){
  var realignedRect;
  realignedRect = realignToGrid(rect, true);
  $put(this$static.textBoxSpaces, valueOf_9(index_0), realignedRect);
}

function $toAdditionalAttributesString(this$static){
  var p, p$iterator, sb;
  sb = new StringBuilder_1('');
  for (p$iterator = new ArrayList$1(this$static.points); p$iterator.i < p$iterator.this$01.array.length;) {
    p = castTo($next_3(p$iterator), 49);
    $append_5($append_4($append_5($append_4(sb, p.point.x_0), ';'), p.point.y_0), ';');
  }
  sb.string.length > 0 && $setLength(sb, sb.string.length - 1);
  return sb.string;
}

function RelationPointList(){
  this.points = new ArrayList;
  this.textBoxSpaces = new HashMap;
}

defineClass(352, 1, {}, RelationPointList);
_.toString_0 = function toString_24(){
  return 'Relationpoints: ' + listToString(',', this.points);
}
;
var Lcom_baselet_element_relation_helper_RelationPointList_2_classLit = createForClass('com.baselet.element.relation.helper', 'RelationPointList', 352);
function $addOperand(this$static, startTick, endTick){
  if (this$static.operands.size_0 == 0 && this$static.startTick != startTick) {
    throw toJs(new IllegalArgumentException_0('The start tick of the first operand must be equal to the start tick of the combined fragment'));
  }
  $add_15(this$static.operands, new CombinedFragment$Operand(startTick, endTick));
}

function $drawOperandLines(this$static, drawHandler, drawingInfo){
  var op, operandIter;
  operandIter = $listIterator(this$static.operands, 0);
  operandIter.currentNode != operandIter.this$01.tail && $next_5(operandIter);
  $setLineType(drawHandler, ($clinit_LineType() , DASHED));
  while (operandIter.currentNode != operandIter.this$01.tail) {
    op = castTo($next_5(operandIter), 114);
    $drawLine(drawHandler, $getHorizontalStart(drawingInfo.horizontalDrawingInfo, this$static), $getVerticalStart(drawingInfo, op.startTick) - drawingInfo.verticalDrawingInfo.tickVerticalPadding / 2, $getHorizontalEnd(drawingInfo.horizontalDrawingInfo, this$static), $getVerticalStart(drawingInfo, op.startTick) - drawingInfo.verticalDrawingInfo.tickVerticalPadding / 2);
  }
  $setLineType(drawHandler, SOLID);
}

function $getEndTick(this$static){
  if (this$static.operands.size_0 == 0) {
    return this$static.startTick;
  }
  return castTo($getLast(this$static.operands), 114).endTick;
}

function $getLastLifeline(this$static){
  return this$static.coveredLifelines[this$static.coveredLifelines.length - 1];
}

function CombinedFragment(coveredLifelines, startTick, operator){
  this.coveredLifelines = castTo(copyOf_0(coveredLifelines, coveredLifelines.length), 152);
  this.startTick = startTick;
  this.operatorLines = $split(operator, '\n', 0);
  this.operands = new LinkedList;
}

defineClass(995, 1, $intern_48, CombinedFragment);
_.draw = function draw(drawHandler, drawingInfo){
  var constraintBottomY, constraintTopY, currentlyActiveExecSpec, endOfHeadX, headerSize, ll, ll$array, ll$array0, ll$index, ll$index0, ll$max, ll$max0, llCenter, rectangle, slopeNotPermittedAreas, textHeight;
  $drawOperandLines(this, drawHandler, drawingInfo);
  rectangle = stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble($getHorizontalStart(drawingInfo.horizontalDrawingInfo, this), $getVerticalStart_2(drawingInfo.verticalDrawingInfo, this)), new PointDouble($getHorizontalEnd(drawingInfo.horizontalDrawingInfo, this), $getVerticalStart_2(drawingInfo.verticalDrawingInfo, this)), new PointDouble($getHorizontalEnd(drawingInfo.horizontalDrawingInfo, this), $getVerticalEnd_1(drawingInfo.verticalDrawingInfo, this)), new PointDouble($getHorizontalStart(drawingInfo.horizontalDrawingInfo, this), $getVerticalEnd_1(drawingInfo.verticalDrawingInfo, this)), null]);
  rectangle[4] = rectangle[0];
  $drawLines_0(drawHandler, rectangle);
  slopeNotPermittedAreas = new ArrayList_0(this.coveredLifelines.length);
  for (ll$array0 = this.coveredLifelines , ll$index0 = 0 , ll$max0 = ll$array0.length; ll$index0 < ll$max0; ++ll$index0) {
    ll = ll$array0[ll$index0];
    if (($getCurrentlyActiveExecutionSpecifications(ll, this.startTick) > 0?10:0) > 0) {
      llCenter = $getHDrawingInfo_0(drawingInfo.horizontalDrawingInfo, ll).getHorizontalCenter();
      $add_13(slopeNotPermittedAreas, new Line1D(llCenter - ($getCurrentlyActiveExecutionSpecifications(ll, this.startTick) > 0?10:0), llCenter + (currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(ll, this.startTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10)));
    }
  }
  headerSize = draw_6(drawHandler, this.operatorLines, $getWidth(drawingInfo.horizontalDrawingInfo, this), rectangle[0], slopeNotPermittedAreas);
  endOfHeadX = $getHorizontalStart(drawingInfo.horizontalDrawingInfo, this) + $doubleValue_0(headerSize.x_0);
  for (ll$array = this.coveredLifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    if ($getHDrawingInfo_0(drawingInfo.horizontalDrawingInfo, ll).getHorizontalCenter() - ($getCurrentlyActiveExecutionSpecifications(ll, this.startTick) > 0?10:0) <= endOfHeadX) {
      $addInterruptedArea(new DrawingInfoImpl$LifelineDrawingInfoProxy(drawingInfo, ll), new Line1D($doubleValue_0(rectangle[0].y_0), $doubleValue_0(rectangle[0].y_0) + $doubleValue_0(headerSize.y_0)));
    }
     else {
      break;
    }
  }
  if (this.operands.size_0 > 0 && (castTo($getFirst(this.operands), 114) , false)) {
    castTo($getFirst(this.operands), 114);
    constraintTopY = $getVerticalStart_2(drawingInfo.verticalDrawingInfo, this) + $doubleValue_0(headerSize.y_0) + 5;
    constraintBottomY = $getVerticalEnd(drawingInfo, this.startTick);
    textHeight = getSplitStringHeight(null.$_nullField, $getHDrawingInfo(drawingInfo, null.$_nullField).getSymmetricWidth(this.startTick), drawHandler);
    textHeight += 4;
    constraintTopY += (constraintBottomY - constraintTopY - textHeight) / 2;
    drawText(drawHandler, null.$_nullField, $getHDrawingInfo(drawingInfo, null.$_nullField).getSymmetricHorizontalStart(this.startTick), constraintTopY, $getHDrawingInfo(drawingInfo, null.$_nullField).getSymmetricWidth(this.startTick), textHeight, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
    $addInterruptedArea(new DrawingInfoImpl$LifelineDrawingInfoProxy(drawingInfo, null.$_nullField), new Line1D(constraintTopY, constraintTopY + textHeight));
  }
}
;
_.getEveryAdditionalYHeight = function getEveryAdditionalYHeight(drawHandler, hInfo, defaultTickHeight){
  var headerHeight, ret;
  ret = new HashMap;
  headerHeight = getHeight(drawHandler, this.operatorLines, $getHDrawingInfo_0(hInfo, this.coveredLifelines[this.coveredLifelines.length - 1]).getHorizontalEnd() - $doubleValue_0(castToDouble($get_0(hInfo.containerRightPadding, this))) - ($getHDrawingInfo_0(hInfo, this.coveredLifelines[0]).getHorizontalStart() + $doubleValue_0(castToDouble($get_0(hInfo.containerLeftPadding, this)))));
  headerHeight -= 7;
  if (this.operands.size_0 > 0 && (castTo($getFirst(this.operands), 114) , false)) {
    headerHeight += 5;
    headerHeight += getSplitStringHeight(castTo($getFirst(this.operands), 114).constraint.$_nullField, $getHDrawingInfo_0(hInfo, castTo($getFirst(this.operands), 114).constraint.$_nullField).getSymmetricWidth(this.startTick), drawHandler);
    headerHeight += 4;
  }
  headerHeight > defaultTickHeight && $put(ret, valueOf_9(this.startTick), headerHeight - defaultTickHeight);
  return ret;
}
;
_.getFirstLifeline = function getFirstLifeline(){
  return this.coveredLifelines[0];
}
;
_.getLastLifeline = function getLastLifeline(){
  return $getLastLifeline(this);
}
;
_.getOverallMinWidth = function getOverallMinWidth(drawHandler, lifelineHorizontalPadding){
  var constraintMinWidth, currentlyActiveExecSpec, minWidth;
  minWidth = getMinimumWidth(drawHandler, this.operatorLines);
  if (this.operands.size_0 > 0 && (castTo($getFirst(this.operands), 114) , false)) {
    constraintMinWidth = castTo($getFirst(this.operands), 114).constraint.$_nullMethod() * this.coveredLifelines.length + (this.coveredLifelines.length - 1) * lifelineHorizontalPadding;
    minWidth = $wnd.Math.max(minWidth, constraintMinWidth);
  }
  return minWidth + ($getCurrentlyActiveExecutionSpecifications(this.coveredLifelines[this.coveredLifelines.length - 1], this.startTick) > 0?10:0) + (currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.coveredLifelines[this.coveredLifelines.length - 1], this.startTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10);
}
;
_.getPaddingInformation = function getPaddingInformation(){
  return new LifelineSpanningTickSpanningOccurrence$ContainerPadding(this);
}
;
_.startTick = 0;
var Lcom_baselet_element_sequence_1aio_facet_CombinedFragment_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'CombinedFragment', 995);
function CombinedFragment$Operand(startTick, endTick){
  this.startTick = startTick;
  this.endTick = endTick;
  this.constraint = null;
}

defineClass(114, 1, {114:1}, CombinedFragment$Operand);
_.endTick = 0;
_.startTick = 0;
var Lcom_baselet_element_sequence_1aio_facet_CombinedFragment$Operand_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'CombinedFragment/Operand', 114);
function Continuation(tick, text_0, coveredLifelines){
  this.tick = tick;
  this.textLines = $split(text_0, '\n', 0);
  this.coveredLifelines = castTo(copyOf_0(coveredLifelines, coveredLifelines.length), 152);
}

defineClass(994, 1, $intern_48, Continuation);
_.draw = function draw_0(drawHandler, drawingInfo){
  var height, leftX, ll, ll$array, ll$index, ll$max, styleAtDrawingCall, styleAtDrawingCall0, topY, width_0;
  width_0 = $getSymmetricWidth(drawingInfo, this.coveredLifelines[0], this.coveredLifelines[this.coveredLifelines.length - 1], this.tick);
  height = getSplitStringHeight(this.textLines, width_0 - 40, drawHandler) + 10;
  topY = $getVerticalStart(drawingInfo, this.tick);
  topY += ($getTickHeight(drawingInfo, this.tick) - height) / 2;
  leftX = $getHDrawingInfo(drawingInfo, this.coveredLifelines[0]).getSymmetricHorizontalStart(this.tick);
  styleAtDrawingCall0 = $cloneFromMe(drawHandler.style_0);
  $addDrawable(drawHandler, new DrawHandlerGwt$1(drawHandler, styleAtDrawingCall0, leftX, 40, topY, height, true, 90, 180));
  width_0 = width_0 - 40;
  styleAtDrawingCall = $cloneFromMe(drawHandler.style_0);
  $addDrawable(drawHandler, new DrawHandlerGwt$1(drawHandler, styleAtDrawingCall, leftX + width_0, 40, topY, height, true, 270, 180));
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(leftX + 20, topY), new PointDouble(leftX + width_0 + 20, topY)]));
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(leftX + 20, topY + height), new PointDouble(leftX + width_0 + 20, topY + height)]));
  drawText(drawHandler, this.textLines, leftX + 20, topY, width_0, height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  for (ll$array = this.coveredLifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    $addInterruptedArea(new DrawingInfoImpl$LifelineDrawingInfoProxy(drawingInfo, ll), new Line1D(topY, topY + height));
  }
}
;
_.getEveryAdditionalYHeight = function getEveryAdditionalYHeight_0(drawHandler, hInfo, defaultTickHeight){
  var neededHeight, ret;
  ret = new HashMap;
  neededHeight = getSplitStringHeight(this.textLines, $getSymmetricWidth_1(hInfo, this.coveredLifelines[0], this.coveredLifelines[this.coveredLifelines.length - 1], this.tick) - 40, drawHandler) + 10;
  neededHeight > defaultTickHeight && $put(ret, valueOf_9(this.tick), neededHeight - defaultTickHeight);
  return ret;
}
;
_.getFirstLifeline = function getFirstLifeline_0(){
  return this.coveredLifelines[0];
}
;
_.getLastLifeline = function getLastLifeline_0(){
  return this.coveredLifelines[this.coveredLifelines.length - 1];
}
;
_.getOverallMinWidth = function getOverallMinWidth_0(drawHandler, lifelineHorizontalPadding){
  return getTextMinWidth_0(this.textLines, drawHandler) + 40;
}
;
_.getPaddingInformation = function getPaddingInformation_0(){
  return null;
}
;
_.tick = 0;
var Lcom_baselet_element_sequence_1aio_facet_Continuation_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Continuation', 994);
function Coregion(lifeline, tick, start_0){
  this.correspondingLifeline = lifeline;
  this.tick = tick;
  this.start_0 = start_0;
}

defineClass(991, 1, $intern_49, Coregion);
_.draw_0 = function draw_1(drawHandler, topLeft, size_0){
  var currentlyActiveExecSpec, currentlyActiveExecSpec0, currentlyActiveExecSpec1, currentlyActiveExecSpec2, currentlyActiveExecSpec3, topLeftCoregion;
  topLeftCoregion = new PointDouble($doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) / 2 - (currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , ((currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10) * 2 + 20) / 2), $doubleValue_0(topLeft.y_0) + $doubleValue_0(size_0.y_0) / 2 - 5);
  this.start_0?$drawLine(drawHandler, $doubleValue_0(topLeftCoregion.x_0), $doubleValue_0(topLeftCoregion.y_0), $doubleValue_0(topLeftCoregion.x_0) + (currentlyActiveExecSpec1 = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , (currentlyActiveExecSpec1 == 0?0:(currentlyActiveExecSpec1 - 1) * 12 + 10) * 2 + 20), $doubleValue_0(topLeftCoregion.y_0)):$drawLine(drawHandler, $doubleValue_0(topLeftCoregion.x_0), $doubleValue_0(topLeftCoregion.y_0) + 10, $doubleValue_0(topLeftCoregion.x_0) + (currentlyActiveExecSpec2 = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , (currentlyActiveExecSpec2 == 0?0:(currentlyActiveExecSpec2 - 1) * 12 + 10) * 2 + 20), $doubleValue_0(topLeftCoregion.y_0) + 10);
  $drawLine(drawHandler, $doubleValue_0(topLeftCoregion.x_0), $doubleValue_0(topLeftCoregion.y_0), $doubleValue_0(topLeftCoregion.x_0), $doubleValue_0(topLeftCoregion.y_0) + 10);
  $drawLine(drawHandler, $doubleValue_0(topLeftCoregion.x_0) + (currentlyActiveExecSpec3 = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , (currentlyActiveExecSpec3 == 0?0:(currentlyActiveExecSpec3 - 1) * 12 + 10) * 2 + 20), $doubleValue_0(topLeftCoregion.y_0), $doubleValue_0(topLeftCoregion.x_0) + (currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , (currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10) * 2 + 20), $doubleValue_0(topLeftCoregion.y_0) + 10);
  return null;
}
;
_.getAdditionalYHeight = function getAdditionalYHeight(drawHandler, size_0){
  return 10 - $doubleValue_0(size_0.y_0);
}
;
_.getMinWidth = function getMinWidth(drawHandler){
  var currentlyActiveExecSpec;
  return currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.correspondingLifeline, this.tick) , (currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10) * 2 + 20;
}
;
_.start_0 = false;
_.tick = 0;
var Lcom_baselet_element_sequence_1aio_facet_Coregion_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Coregion', 991);
function $getHDrawingInfo(this$static, lifeline){
  return $getHDrawingInfo_0(this$static.horizontalDrawingInfo, lifeline);
}

function $getInterruptedAreas(this$static, lifelineIndex){
  return this$static.interruptedAreas[lifelineIndex];
}

function $getSymmetricWidth(this$static, ll1, ll2, tick){
  return $getSymmetricWidth_1(this$static.horizontalDrawingInfo, ll1, ll2, tick);
}

function $getTickHeight(this$static, tick){
  return $getTickHeight_1(this$static.verticalDrawingInfo, tick);
}

function $getVerticalCenter(this$static, tick){
  return $getVerticalCenter_1(this$static.verticalDrawingInfo, tick);
}

function $getVerticalEnd(this$static, tick){
  return $getVerticalEnd_0(this$static.verticalDrawingInfo, tick);
}

function $getVerticalStart(this$static, tick){
  return $getVerticalStart_1(this$static.verticalDrawingInfo, tick);
}

function DrawingInfoImpl(horizontalDrawingInfo, verticalDrawingInfo, lifelineCount){
  var i;
  this.horizontalDrawingInfo = horizontalDrawingInfo;
  this.interruptedAreas = initUnidimensionalArray(Lcom_baselet_control_basics_SortedMergedLine1DList_2_classLit, $intern_6, 300, lifelineCount, 0, 1);
  for (i = 0; i < this.interruptedAreas.length; i++) {
    this.interruptedAreas[i] = new SortedMergedLine1DList;
  }
  this.verticalDrawingInfo = verticalDrawingInfo;
}

defineClass(977, 1, {}, DrawingInfoImpl);
_.getDiagramHorizontalEnd = function getDiagramHorizontalEnd(){
  return $getDiagramHorizontalEnd(this.horizontalDrawingInfo);
}
;
_.getDiagramHorizontalStart = function getDiagramHorizontalStart(){
  return this.horizontalDrawingInfo.diagramStart;
}
;
_.getHDrawingInfo = function getHDrawingInfo(lifeline){
  return $getHDrawingInfo(this, lifeline);
}
;
var Lcom_baselet_element_sequence_1aio_facet_DrawingInfoImpl_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'DrawingInfoImpl', 977);
var Lcom_baselet_element_sequence_1aio_facet_LifelineHorizontalDrawingInfo_2_classLit = createForInterface('com.baselet.element.sequence_aio.facet', 'LifelineHorizontalDrawingInfo');
function $addInterruptedArea(this$static, llInterruption){
  $add($getInterruptedAreas(this$static.this$01, this$static.lifeline.index_0), llInterruption);
}

function $getSymmetricHorizontalStart(this$static, tick){
  return $getHDrawingInfo(this$static.this$01, this$static.lifeline).getSymmetricHorizontalStart(tick);
}

function $getSymmetricWidth_0(this$static, tick){
  return $getHDrawingInfo(this$static.this$01, this$static.lifeline).getSymmetricWidth(tick);
}

function $getTickHeight_0(this$static, tick){
  return $getTickHeight_1(this$static.this$01.verticalDrawingInfo, tick);
}

function $getVerticalCenter_0(this$static, tick){
  return $getVerticalCenter_1(this$static.this$01.verticalDrawingInfo, tick);
}

function $getVerticalStart_0(this$static, tick){
  return $getVerticalStart_1(this$static.this$01.verticalDrawingInfo, tick);
}

function DrawingInfoImpl$LifelineDrawingInfoProxy(this$0, lifeline){
  this.this$01 = this$0;
  this.lifeline = lifeline;
}

defineClass(218, 1, {1011:1}, DrawingInfoImpl$LifelineDrawingInfoProxy);
_.getHorizontalCenter = function getHorizontalCenter(){
  return $getHDrawingInfo(this.this$01, this.lifeline).getHorizontalCenter();
}
;
_.getHorizontalEnd = function getHorizontalEnd(){
  return $getHDrawingInfo(this.this$01, this.lifeline).getHorizontalEnd();
}
;
_.getHorizontalStart = function getHorizontalStart(){
  return $getHDrawingInfo(this.this$01, this.lifeline).getHorizontalStart();
}
;
_.getSymmetricHorizontalEnd = function getSymmetricHorizontalEnd(tick){
  return $getHDrawingInfo(this.this$01, this.lifeline).getSymmetricHorizontalEnd(tick);
}
;
_.getSymmetricHorizontalStart = function getSymmetricHorizontalStart(tick){
  return $getSymmetricHorizontalStart(this, tick);
}
;
_.getSymmetricWidth = function getSymmetricWidth(tick){
  return $getSymmetricWidth_0(this, tick);
}
;
_.getWidth = function getWidth(){
  return $getHDrawingInfo(this.this$01, this.lifeline).getWidth();
}
;
var Lcom_baselet_element_sequence_1aio_facet_DrawingInfoImpl$LifelineDrawingInfoProxy_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'DrawingInfoImpl/LifelineDrawingInfoProxy', 218);
function $enclosesTick(this$static, tick){
  return this$static.startTick <= tick && tick <= this$static.endTick;
}

function ExecutionSpecification(startTick, endTick){
  this.startTick = startTick;
  this.endTick = endTick;
}

defineClass(105, 1, {105:1}, ExecutionSpecification);
_.endTick = 0;
_.startTick = 0;
var Lcom_baselet_element_sequence_1aio_facet_ExecutionSpecification_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'ExecutionSpecification', 105);
function $clinit_Message(){
  $clinit_Message = emptyMethod;
  log_7 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sequence_1aio_facet_Message_2_classLit) , Lcom_baselet_element_sequence_1aio_facet_Message_2_classLit.typeName));
}

function $drawNormalMessage(this$static, drawHandler, send, receive, arrowEndType, fillArrow, drawingInfo){
  var hAlignment, height, line, topLeftX;
  line = new Line(send, receive);
  $drawLine(drawHandler, $doubleValue_0(line.start_0.x_0), $doubleValue_0(line.start_0.y_0), $doubleValue_0(line.end.x_0), $doubleValue_0(line.end.y_0));
  $setLineType(drawHandler, ($clinit_LineType() , SOLID));
  drawArrowToLine(receive, drawHandler, line, false, arrowEndType, fillArrow, false);
  height = $doubleValue_0(send.y_0) - $getVerticalStart(drawingInfo, this$static.sendTick);
  if (this$static.from == (this$static.from.index_0 < this$static.to.index_0?this$static.from:this$static.to)) {
    topLeftX = $doubleValue_0(send.x_0);
    hAlignment = ($clinit_AlignHorizontal() , LEFT);
  }
   else {
    topLeftX = $doubleValue_0(receive.x_0);
    hAlignment = ($clinit_AlignHorizontal() , RIGHT);
  }
  this$static.duration == 0 && (hAlignment = ($clinit_AlignHorizontal() , CENTER));
  topLeftX += 16;
  drawText(drawHandler, this$static.textLines, topLeftX, $doubleValue_0(send.y_0) - height, $wnd.Math.abs($doubleValue_0(send.x_0) - $doubleValue_0(receive.x_0)) - 32, height, hAlignment, ($clinit_AlignVertical() , BOTTOM));
}

function $getEveryAdditionalYHeightNormalMessage(this$static, drawHandler, hInfo, defaultTickHeight, ret){
  var additionalHeight, maxTextWidth;
  maxTextWidth = $wnd.Math.abs(this$static.getSendX(hInfo) - this$static.getReceiveX(hInfo));
  maxTextWidth -= 32;
  additionalHeight = getSplitStringHeight(this$static.textLines, maxTextWidth, drawHandler);
  additionalHeight -= defaultTickHeight / 2;
  additionalHeight *= 2;
  additionalHeight > 0 && $put(ret, valueOf_9(this$static.sendTick), additionalHeight);
}

function $getReceiveX(this$static, hDrawingInfo){
  var currentlyActiveExecSpec, currentlyActiveExecSpec0, llHDrawingInfo, receiveX;
  llHDrawingInfo = hDrawingInfo.getHDrawingInfo(this$static.to);
  receiveX = llHDrawingInfo.getHorizontalCenter();
  receiveX += this$static.from == this$static.to?(currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this$static.to, this$static.sendTick + this$static.duration) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10):(this$static.from.index_0 < this$static.to.index_0?this$static.from:this$static.to) == this$static.from?-($getCurrentlyActiveExecutionSpecifications(this$static.to, this$static.sendTick + this$static.duration) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this$static.to, this$static.sendTick + this$static.duration) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10);
  !this$static.to.createdOnStart && !!this$static.to.created && this$static.sendTick + this$static.duration == this$static.to.created.value_0 && ((this$static.from.index_0 < this$static.to.index_0?this$static.from:this$static.to) == this$static.to?(receiveX = llHDrawingInfo.getSymmetricHorizontalEnd(this$static.sendTick + this$static.duration)):(receiveX = llHDrawingInfo.getSymmetricHorizontalStart(this$static.sendTick + this$static.duration)));
  return receiveX;
}

function Message(from, to, duration, sendTick, text_0, arrowType, lineType){
  $clinit_Message();
  this.from = from;
  this.to = to;
  this.duration = duration;
  this.sendTick = sendTick;
  this.textLines = $split(text_0, '\n', 0);
  this.arrowType = arrowType;
  this.lineType = lineType;
}

defineClass(375, 1, $intern_48, Message);
_.draw = function draw_2(drawHandler, drawingInfo){
  var arrowEndType, fillArrow, oldLt, receive, send;
  send = new PointDouble(this.getSendX(drawingInfo), $getVerticalCenter(drawingInfo, this.sendTick));
  receive = new PointDouble(this.getReceiveX(drawingInfo), $getVerticalCenter(drawingInfo, this.sendTick + this.duration));
  arrowEndType = 0;
  fillArrow = false;
  switch (this.arrowType.ordinal) {
    case 0:
      arrowEndType = 0;
      fillArrow = false;
      break;
    case 1:
      arrowEndType = 1;
      fillArrow = true;
      break;
    default:$error_1(log_7, "Encountered unhandled enumeration value '" + this.arrowType + "'.");
  }
  oldLt = drawHandler.style_0.lineType;
  $setLineType(drawHandler, this.lineType);
  this.from == this.to?this.drawSelfMessage(drawHandler, send, receive, arrowEndType, fillArrow, drawingInfo):$drawNormalMessage(this, drawHandler, send, receive, arrowEndType, fillArrow, drawingInfo);
  $setLineType_0(drawHandler.style_0, oldLt);
}
;
_.drawSelfMessage = function drawSelfMessage(drawHandler, send, receive, arrowEndType, fillArrow, hInfo){
  var lifelineXEnd, msgLine, rightBorderX;
  rightBorderX = $wnd.Math.max($doubleValue_0(send.x_0), $doubleValue_0(receive.x_0)) + 20;
  msgLine = stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [send, new PointDouble(rightBorderX, $doubleValue_0(send.y_0)), new PointDouble(rightBorderX, $doubleValue_0(receive.y_0)), receive]);
  $drawLines_0(drawHandler, msgLine);
  $setLineType(drawHandler, ($clinit_LineType() , SOLID));
  drawArrowToLine(receive, drawHandler, new Line(msgLine[2], msgLine[3]), false, arrowEndType, fillArrow, false);
  rightBorderX += 5;
  lifelineXEnd = $wnd.Math.min($getHDrawingInfo(hInfo, this.to).getSymmetricHorizontalEnd(this.sendTick), $getHDrawingInfo(hInfo, this.to).getSymmetricHorizontalEnd(this.sendTick + this.duration));
  drawText(drawHandler, this.textLines, rightBorderX, $doubleValue_0(send.y_0), lifelineXEnd - rightBorderX, $doubleValue_0(receive.y_0) - $doubleValue_0(send.y_0), ($clinit_AlignHorizontal() , LEFT), ($clinit_AlignVertical() , CENTER_0));
}
;
_.getEveryAdditionalYHeight = function getEveryAdditionalYHeight_1(drawHandler, hInfo, defaultTickHeight){
  var ret;
  ret = new HashMap;
  this.from == this.to?this.getEveryAdditionalYHeightSelfMessage(drawHandler, hInfo, defaultTickHeight, ret):$getEveryAdditionalYHeightNormalMessage(this, drawHandler, hInfo, defaultTickHeight, ret);
  return ret;
}
;
_.getEveryAdditionalYHeightSelfMessage = function getEveryAdditionalYHeightSelfMessage(drawHandler, hInfo, defaultTickHeight, ret){
  var additionalHeight, currentlyActiveExecSpec, currentlyActiveExecSpec0, executionSpecWidth, i, maxTextWidth;
  executionSpecWidth = $wnd.Math.max((currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10), (currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10));
  maxTextWidth = $wnd.Math.min($getHDrawingInfo_0(hInfo, this.to).getSymmetricWidth(this.sendTick), $getHDrawingInfo_0(hInfo, this.to).getSymmetricWidth(this.sendTick + this.duration)) / 2;
  maxTextWidth = maxTextWidth - (executionSpecWidth + 20 + 5);
  additionalHeight = getSplitStringHeight(this.textLines, maxTextWidth, drawHandler) - this.duration * defaultTickHeight;
  if (additionalHeight > 0) {
    for (i = this.sendTick + 1; i < this.sendTick + this.duration; i++) {
      $put(ret, valueOf_9(i), additionalHeight / this.duration);
    }
    $put(ret, valueOf_9(this.sendTick), additionalHeight / this.duration);
    $put(ret, valueOf_9(this.sendTick + this.duration), additionalHeight / this.duration);
  }
}
;
_.getFirstLifeline = function getFirstLifeline_1(){
  return this.from.index_0 < this.to.index_0?this.from:this.to;
}
;
_.getLastLifeline = function getLastLifeline_1(){
  return this.from.index_0 > this.to.index_0?this.from:this.to;
}
;
_.getOverallMinWidth = function getOverallMinWidth_1(drawHandler, lifelineHorizontalPadding){
  var currentlyActiveExecSpec, currentlyActiveExecSpec0, executionSpecWidth, executionSpecWidth_0, currentlyActiveExecSpec0_0, currentlyActiveExecSpec1, currentlyActiveExecSpec2, currentlyActiveExecSpec_0, neededWidth, affectedLifelineCount;
  return this.from == this.to?(executionSpecWidth = $wnd.Math.max((currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10), (currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10)) , (executionSpecWidth + 20 + 5 + getTextMinWidth_0(this.textLines, drawHandler)) * 2):(executionSpecWidth_0 = $wnd.Math.abs(this.from == this.to?(currentlyActiveExecSpec0_0 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec0_0 == 0?0:(currentlyActiveExecSpec0_0 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?(currentlyActiveExecSpec1 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec1 == 0?0:(currentlyActiveExecSpec1 - 1) * 12 + 10):-($getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) > 0?10:0)) + $wnd.Math.abs(this.from == this.to?(currentlyActiveExecSpec2 = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec2 == 0?0:(currentlyActiveExecSpec2 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?-($getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) > 0?10:0):(currentlyActiveExecSpec_0 = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec_0 == 0?0:(currentlyActiveExecSpec_0 - 1) * 12 + 10)) , neededWidth = executionSpecWidth_0 + getTextMinWidth_0(this.textLines, drawHandler) + 32 , affectedLifelineCount = (this.from.index_0 > this.to.index_0?this.from:this.to).index_0 - (this.from.index_0 < this.to.index_0?this.from:this.to).index_0 + 1 , !this.to.createdOnStart && !!this.to.created && this.to.created.value_0 == this.sendTick + this.duration?(2 * affectedLifelineCount * neededWidth - 3 * (affectedLifelineCount - 1) * lifelineHorizontalPadding) / (2 * affectedLifelineCount - 3):neededWidth / (affectedLifelineCount - 1) * affectedLifelineCount - lifelineHorizontalPadding);
}
;
_.getPaddingInformation = function getPaddingInformation_1(){
  return null;
}
;
_.getReceiveX = function getReceiveX(hDrawingInfo){
  return $getReceiveX(this, hDrawingInfo);
}
;
_.getSendX = function getSendX(hDrawingInfo){
  var currentlyActiveExecSpec0, currentlyActiveExecSpec;
  return hDrawingInfo.getHDrawingInfo(this.from).getHorizontalCenter() + (this.from == this.to?(currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10):-($getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) > 0?10:0));
}
;
_.duration = 0;
_.sendTick = 0;
var log_7;
var Lcom_baselet_element_sequence_1aio_facet_Message_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Message', 375);
function $receiveOccurrenceSpecification(this$static){
  if (!this$static.sendGate) {
    throw toJs(new IllegalStateException_0('This GateMessage was created with an receiver gate, and a gate has no associated occurrence specification.'));
  }
  return new Message$MessageReceiveEndpoint(this$static);
}

function $sendOccurrenceSpecification(this$static){
  if (this$static.sendGate) {
    throw toJs(new IllegalStateException_0('This GateMessage was created with an sender gate, and a gate has no associated occurrence specification.'));
  }
  return new Message$MessageSendEndpoint(this$static);
}

function GateMessage(from, to, sendTick, text_0, arrowType, lineType, sendGate, dockToLeftBorder){
  Message.call(this, from, to, 0, sendTick, text_0, arrowType, lineType);
  this.sendGate = sendGate;
  this.dockToLeftBorder = dockToLeftBorder;
}

function createReceiveGateMessage(sender, sendTick, text_0, arrowType, lineType, leftMostLifeline, rightMostLifeline){
  $clinit_Message();
  return $wnd.Math.abs(sender.index_0 - leftMostLifeline.index_0) < $wnd.Math.abs(sender.index_0 - rightMostLifeline.index_0)?new GateMessage(sender, leftMostLifeline, sendTick, text_0, arrowType, lineType, false, true):new GateMessage(sender, rightMostLifeline, sendTick, text_0, arrowType, lineType, false, false);
}

function createSendGateMessage(receiver, sendTick, text_0, arrowType, lineType, leftMostLifeline, rightMostLifeline){
  $clinit_Message();
  return $wnd.Math.abs(receiver.index_0 - leftMostLifeline.index_0) <= $wnd.Math.abs(receiver.index_0 - rightMostLifeline.index_0)?new GateMessage(leftMostLifeline, receiver, sendTick, text_0, arrowType, lineType, true, true):new GateMessage(rightMostLifeline, receiver, sendTick, text_0, arrowType, lineType, true, false);
}

defineClass(248, 375, $intern_48, GateMessage);
_.drawSelfMessage = function drawSelfMessage_0(drawHandler, send, receive, arrowEndType, fillArrow, hInfo){
  $drawNormalMessage(this, drawHandler, send, receive, arrowEndType, fillArrow, hInfo);
}
;
_.getEveryAdditionalYHeightSelfMessage = function getEveryAdditionalYHeightSelfMessage_0(drawHandler, hInfo, defaultTickHeight, ret){
  $getEveryAdditionalYHeightNormalMessage(this, drawHandler, hInfo, defaultTickHeight, ret);
}
;
_.getOverallMinWidth = function getOverallMinWidth_2(drawHandler, lifelineHorizontalPadding){
  var affectedLifelineCount, currentlyActiveExecSpec, currentlyActiveExecSpec0, currentlyActiveExecSpec1, currentlyActiveExecSpec2, executionSpecWidth, neededWidth, padding;
  executionSpecWidth = this.sendGate?$wnd.Math.abs(this.from == this.to?(currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?-($getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) > 0?10:0):(currentlyActiveExecSpec1 = $getCurrentlyActiveExecutionSpecifications(this.to, this.sendTick + this.duration) , currentlyActiveExecSpec1 == 0?0:(currentlyActiveExecSpec1 - 1) * 12 + 10)):$wnd.Math.abs(this.from == this.to?(currentlyActiveExecSpec2 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec2 == 0?0:(currentlyActiveExecSpec2 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10):-($getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) > 0?10:0));
  neededWidth = executionSpecWidth + getTextMinWidth_0(this.textLines, drawHandler) + 32;
  if (this.from == this.to) {
    return neededWidth * 2;
  }
   else {
    affectedLifelineCount = (this.from.index_0 > this.to.index_0?this.from:this.to).index_0 - (this.from.index_0 < this.to.index_0?this.from:this.to).index_0;
    padding = lifelineHorizontalPadding * affectedLifelineCount;
    return (neededWidth - padding) * (affectedLifelineCount + 1) / (affectedLifelineCount + 0.5);
  }
}
;
_.getReceiveX = function getReceiveX_0(hDrawingInfo){
  return this.sendGate?$getReceiveX(this, hDrawingInfo):this.dockToLeftBorder?hDrawingInfo.getDiagramHorizontalStart():hDrawingInfo.getDiagramHorizontalEnd();
}
;
_.getSendX = function getSendX_0(hDrawingInfo){
  var currentlyActiveExecSpec, currentlyActiveExecSpec0;
  return this.sendGate?this.dockToLeftBorder?hDrawingInfo.getDiagramHorizontalStart():hDrawingInfo.getDiagramHorizontalEnd():hDrawingInfo.getHDrawingInfo(this.from).getHorizontalCenter() + (this.from == this.to?(currentlyActiveExecSpec0 = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec0 == 0?0:(currentlyActiveExecSpec0 - 1) * 12 + 10):(this.from.index_0 < this.to.index_0?this.from:this.to) == this.from?(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10):-($getCurrentlyActiveExecutionSpecifications(this.from, this.sendTick) > 0?10:0));
}
;
_.dockToLeftBorder = false;
_.sendGate = false;
var Lcom_baselet_element_sequence_1aio_facet_GateMessage_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'GateMessage', 248);
function GeneralOrdering(earlierOccurrence, laterOccurrence, coveredLifelines){
  if (coveredLifelines.length < 2) {
    throw toJs(new IllegalArgumentException_0('A GeneralOrdering must affect two different lifelines.'));
  }
  this.coveredLifelines = castTo(copyOf_0(coveredLifelines, coveredLifelines.length), 152);
  this.earlierOccurrence = earlierOccurrence;
  this.laterOccurrence = laterOccurrence;
}

defineClass(380, 1, $intern_48, GeneralOrdering);
_.draw = function draw_3(drawHandler, drawingInfo){
  var line, oldLt;
  oldLt = drawHandler.style_0.lineType;
  $setLineType(drawHandler, ($clinit_LineType() , DASHED));
  line = new Line(this.earlierOccurrence.getPosition(drawingInfo), this.laterOccurrence.getPosition(drawingInfo));
  $drawLine(drawHandler, $doubleValue_0(line.start_0.x_0), $doubleValue_0(line.start_0.y_0), $doubleValue_0(line.end.x_0), $doubleValue_0(line.end.y_0));
  $setLineType_0(drawHandler.style_0, oldLt);
  drawArrowToLine(new PointDouble(($doubleValue_0(line.start_0.x_0) + $doubleValue_0(line.end.x_0)) / 2, ($doubleValue_0(line.start_0.y_0) + $doubleValue_0(line.end.y_0)) / 2), drawHandler, line, false, 0, false, false);
}
;
_.getEveryAdditionalYHeight = function getEveryAdditionalYHeight_2(drawHandler, hInfo, defaultTickHeight){
  return new HashMap;
}
;
_.getFirstLifeline = function getFirstLifeline_2(){
  return this.coveredLifelines[0];
}
;
_.getLastLifeline = function getLastLifeline_2(){
  return this.coveredLifelines[this.coveredLifelines.length - 1];
}
;
_.getOverallMinWidth = function getOverallMinWidth_3(drawHandler, lifelineHorizontalPadding){
  return 39;
}
;
_.getPaddingInformation = function getPaddingInformation_2(){
  return null;
}
;
var Lcom_baselet_element_sequence_1aio_facet_GeneralOrdering_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'GeneralOrdering', 380);
function $getDiagramHorizontalEnd(this$static){
  return this$static.diagramStart + this$static.diagramWidth;
}

function $getHDrawingInfo_0(this$static, lifeline){
  return this$static.horizontalDrawingInfos[lifeline.index_0];
}

function $getHorizontalEnd(this$static, container){
  return $getHDrawingInfo_0(this$static, container.coveredLifelines[container.coveredLifelines.length - 1]).getHorizontalEnd() - $doubleValue_0(castToDouble($get_0(this$static.containerRightPadding, container)));
}

function $getHorizontalStart(this$static, container){
  return $getHDrawingInfo_0(this$static, container.coveredLifelines[0]).getHorizontalStart() + $doubleValue_0(castToDouble($get_0(this$static.containerLeftPadding, container)));
}

function $getPaddings(this$static, lifelineId, left, lastTick, allPaddings){
  var cp, cp$iterator, endIter, lifelinePaddings, maxPadding, paddingInterval, paddingListEnd, paddingQueueStart, tick, value_0;
  lifelinePaddings = initUnidimensionalArray(D_classLit, $intern_50, 32, lastTick + 2, 15, 1);
  paddingQueueStart = new PriorityQueue(new LifelineSpanningTickSpanningOccurrence$ContainerPadding$2);
  paddingListEnd = new LinkedList;
  for (cp$iterator = $listIterator(allPaddings, 0); cp$iterator.currentNode != cp$iterator.this$01.tail;) {
    cp = castTo($next_5(cp$iterator), 95);
    left && cp.container.coveredLifelines[0].index_0 == lifelineId && cp.leftPadding > 0?(checkCriticalState_0($offer(paddingQueueStart, cp), 'Unable to add element to queue') , true):!left && $getLastLifeline(cp.container).index_0 == lifelineId && cp.rightPadding > 0 && (checkCriticalState_0($offer(paddingQueueStart, cp), 'Unable to add element to queue') , true);
  }
  maxPadding = 0;
  for (tick = 0; tick < lifelinePaddings.length; tick++) {
    while ((paddingQueueStart.heap.array.length == 0?null:$get_7(paddingQueueStart.heap, 0)) != null && castTo(paddingQueueStart.heap.array.length == 0?null:$get_7(paddingQueueStart.heap, 0), 95).container.startTick == tick) {
      $addLast(paddingListEnd, castTo((value_0 = paddingQueueStart.heap.array.length == 0?null:$get_7(paddingQueueStart.heap, 0) , value_0 != null && $removeAtIndex(paddingQueueStart, 0) , value_0), 95));
    }
    endIter = $listIterator(paddingListEnd, 0);
    while (endIter.currentNode != endIter.this$01.tail) {
      paddingInterval = castTo($next_5(endIter), 95);
      if (left) {
        $containsKey_0(this$static.containerLeftPadding, paddingInterval.container) || $put(this$static.containerLeftPadding, paddingInterval.container, lifelinePaddings[tick]);
        lifelinePaddings[tick] += paddingInterval.leftPadding;
      }
       else {
        $containsKey_0(this$static.containerRightPadding, paddingInterval.container) || $put(this$static.containerRightPadding, paddingInterval.container, lifelinePaddings[tick]);
        lifelinePaddings[tick] += paddingInterval.rightPadding;
      }
      $getEndTick(paddingInterval.container) == tick && $remove_20(endIter);
    }
    maxPadding = $wnd.Math.max(maxPadding, lifelinePaddings[tick]);
  }
  return new HorizontalDrawingInfoImpl$PaddingInfo(lifelinePaddings, maxPadding);
}

function $getSymmetricWidth_1(this$static, ll1, ll2, tick){
  return ll1.index_0 <= ll2.index_0?this$static.horizontalDrawingInfos[ll2.index_0].getSymmetricHorizontalEnd(tick) - this$static.horizontalDrawingInfos[ll1.index_0].getSymmetricHorizontalStart(tick):this$static.horizontalDrawingInfos[ll1.index_0].getSymmetricHorizontalEnd(tick) - this$static.horizontalDrawingInfos[ll2.index_0].getSymmetricHorizontalStart(tick);
}

function $getWidth(this$static, container){
  return $getHDrawingInfo_0(this$static, container.coveredLifelines[container.coveredLifelines.length - 1]).getHorizontalEnd() - $doubleValue_0(castToDouble($get_0(this$static.containerRightPadding, container))) - ($getHDrawingInfo_0(this$static, container.coveredLifelines[0]).getHorizontalStart() + $doubleValue_0(castToDouble($get_0(this$static.containerLeftPadding, container))));
}

function HorizontalDrawingInfoImpl(diagramMinWidth, lifelineWidth, lifelineCount, lastTick, paddings){
  var diagramWidth, i, i0, leftPaddings, lifelineHeadLeftStart, maxPadding, paddingInfo, rightPaddings;
  this.containerLeftPadding = new HashMap_0(round_int(paddings.size_0 / 0.7));
  this.containerRightPadding = new HashMap_0(round_int(paddings.size_0 / 0.7));
  this.horizontalDrawingInfos = initUnidimensionalArray(Lcom_baselet_element_sequence_1aio_facet_LifelineHorizontalDrawingInfo_2_classLit, $intern_6, 1011, lifelineCount, 0, 1);
  this.diagramStart = 0;
  maxPadding = 0;
  leftPaddings = initUnidimensionalArray(D_classLit, $intern_3, 151, lifelineCount, 0, 2);
  rightPaddings = initUnidimensionalArray(D_classLit, $intern_3, 151, lifelineCount, 0, 2);
  for (i0 = 0; i0 < lifelineCount; i0++) {
    paddingInfo = $getPaddings(this, i0, true, lastTick, paddings);
    leftPaddings[i0] = paddingInfo.paddings;
    maxPadding = $wnd.Math.max(maxPadding, paddingInfo.maxPadding);
    paddingInfo = $getPaddings(this, i0, false, lastTick, paddings);
    rightPaddings[i0] = paddingInfo.paddings;
    maxPadding = $wnd.Math.max(maxPadding, paddingInfo.maxPadding);
  }
  lifelineWidth += maxPadding * 2;
  diagramWidth = lifelineWidth * lifelineCount + 40 * (lifelineCount + 1);
  if (diagramWidth < diagramMinWidth) {
    diagramWidth = diagramMinWidth;
    lifelineCount > 0 && (lifelineWidth = (diagramMinWidth - 40 * (lifelineCount + 1)) / lifelineCount);
  }
  diagramWidth = ($clinit_SharedUtils() , realignTo(diagramWidth, true, 10));
  lifelineHeadLeftStart = (diagramWidth - (lifelineWidth * lifelineCount + 40 * (lifelineCount - 1))) / 2;
  this.diagramWidth = diagramWidth;
  for (i = 0; i < this.horizontalDrawingInfos.length; i++) {
    this.horizontalDrawingInfos[i] = new LifelineHorizontalDrawingInfoImpl(leftPaddings[i], rightPaddings[i], lifelineHeadLeftStart + (lifelineWidth + 40) * i, lifelineHeadLeftStart + (lifelineWidth + 40) * i + lifelineWidth);
  }
}

defineClass(974, 1, {}, HorizontalDrawingInfoImpl);
_.getDiagramHorizontalEnd = function getDiagramHorizontalEnd_0(){
  return $getDiagramHorizontalEnd(this);
}
;
_.getDiagramHorizontalStart = function getDiagramHorizontalStart_0(){
  return this.diagramStart;
}
;
_.getHDrawingInfo = function getHDrawingInfo_0(lifeline){
  return $getHDrawingInfo_0(this, lifeline);
}
;
_.diagramStart = 0;
_.diagramWidth = 0;
var Lcom_baselet_element_sequence_1aio_facet_HorizontalDrawingInfoImpl_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'HorizontalDrawingInfoImpl', 974);
function HorizontalDrawingInfoImpl$PaddingInfo(paddings, maxPadding){
  this.paddings = paddings;
  this.maxPadding = maxPadding;
}

defineClass(975, 1, {}, HorizontalDrawingInfoImpl$PaddingInfo);
_.maxPadding = 0;
var Lcom_baselet_element_sequence_1aio_facet_HorizontalDrawingInfoImpl$PaddingInfo_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'HorizontalDrawingInfoImpl/PaddingInfo', 975);
function $clinit_InteractionUse(){
  $clinit_InteractionUse = emptyMethod;
  HEADER_TEXT = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['ref']);
}

function InteractionUse(tick, text_0, coveredLifelines){
  $clinit_InteractionUse();
  this.tick = tick;
  this.textLines = $split(text_0, '\n', 0);
  this.coveredLifelines = castTo(copyOf_0(coveredLifelines, coveredLifelines.length), 152);
}

defineClass(993, 1, $intern_48, InteractionUse);
_.draw = function draw_4(drawHandler, drawingInfo){
  var height, ll, ll$array, ll$index, ll$max, pentagonSize, textWidth, topLeft, topY, width_0;
  width_0 = $getSymmetricWidth(drawingInfo, this.coveredLifelines[0], this.coveredLifelines[this.coveredLifelines.length - 1], this.tick);
  height = (textWidth = width_0 - 10 - getPentagonMinimumWidth(drawHandler, HEADER_TEXT) * 2 , $wnd.Math.max(getHeight(drawHandler, HEADER_TEXT, width_0) + 4, getSplitStringHeight(this.textLines, textWidth, drawHandler) + 10));
  topY = $getVerticalStart(drawingInfo, this.tick) + ($getTickHeight(drawingInfo, this.tick) - height) / 2;
  topLeft = new PointDouble($getHDrawingInfo(drawingInfo, this.coveredLifelines[0]).getSymmetricHorizontalStart(this.tick), topY);
  $drawRectangle_1(drawHandler, $doubleValue_0(topLeft.x_0), $doubleValue_0(topLeft.y_0), width_0, height);
  pentagonSize = draw_6(drawHandler, HEADER_TEXT, width_0, topLeft, ($clinit_Collections() , $clinit_Collections() , EMPTY_LIST));
  drawText(drawHandler, this.textLines, $doubleValue_0(topLeft.x_0) + $doubleValue_0(pentagonSize.x_0) + 5, $doubleValue_0(topLeft.y_0), width_0 - ($doubleValue_0(pentagonSize.x_0) + 5) * 2, height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  for (ll$array = this.coveredLifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    $addInterruptedArea(new DrawingInfoImpl$LifelineDrawingInfoProxy(drawingInfo, ll), new Line1D($doubleValue_0(topLeft.y_0), $doubleValue_0(topLeft.y_0) + height));
  }
}
;
_.getEveryAdditionalYHeight = function getEveryAdditionalYHeight_3(drawHandler, hInfo, defaultTickHeight){
  var ret, textWidth, textWidth0, width_0;
  ret = new HashMap;
  width_0 = $getSymmetricWidth_1(hInfo, this.coveredLifelines[0], this.coveredLifelines[this.coveredLifelines.length - 1], this.tick);
  textWidth0 = width_0 - 10 - getPentagonMinimumWidth(drawHandler, HEADER_TEXT) * 2;
  $wnd.Math.max(getHeight(drawHandler, HEADER_TEXT, width_0) + 4, getSplitStringHeight(this.textLines, textWidth0, drawHandler) + 10) > defaultTickHeight && $put(ret, valueOf_9(this.tick), (textWidth = width_0 - 10 - getPentagonMinimumWidth(drawHandler, HEADER_TEXT) * 2 , $wnd.Math.max(getHeight(drawHandler, HEADER_TEXT, width_0) + 4, getSplitStringHeight(this.textLines, textWidth, drawHandler) + 10) - defaultTickHeight));
  return ret;
}
;
_.getFirstLifeline = function getFirstLifeline_3(){
  return this.coveredLifelines[0];
}
;
_.getLastLifeline = function getLastLifeline_3(){
  return this.coveredLifelines[this.coveredLifelines.length - 1];
}
;
_.getOverallMinWidth = function getOverallMinWidth_4(drawHandler, lifelineHorizontalPadding){
  return getPentagonMinimumWidth(drawHandler, HEADER_TEXT) * 2 + 10 + getTextMinWidth_0(this.textLines, drawHandler);
}
;
_.getPaddingInformation = function getPaddingInformation_3(){
  return null;
}
;
_.tick = 0;
var HEADER_TEXT;
var Lcom_baselet_element_sequence_1aio_facet_InteractionUse_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'InteractionUse', 993);
function $clinit_Lifeline(){
  $clinit_Lifeline = emptyMethod;
  ACTOR_SIZE = new PointDouble(30, 50);
  log_8 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sequence_1aio_facet_Lifeline_2_classLit) , Lcom_baselet_element_sequence_1aio_facet_Lifeline_2_classLit.typeName));
}

function $addExecutionSpecification(this$static, execSpec){
  var i;
  i = 0;
  for (; i < this$static.activeAreas.array.length && castTo($get_7(this$static.activeAreas, i), 105).startTick < execSpec.startTick; i++)
  ;
  $add_12(this$static.activeAreas, i, execSpec);
}

function $addLifelineOccurrenceAtTick(this$static, occurrence, tick){
  if (!this$static.createdOnStart) {
    if (!this$static.created || this$static.created.value_0 >= tick.value_0) {
      throw toJs(new SequenceDiagramCheckedException('The lifeline can not contain occurrences before it is created.'));
    }
  }
  if ($containsKey_1(this$static.lifeline, tick)) {
    throw toJs(new SequenceDiagramCheckedException('The lifeline already contains an occurence at the tick ' + tick));
  }
  $put_0(this$static.lifeline, tick, occurrence);
}

function $draw(this$static, drawHandler, drawingInfo, lifelineLastTick){
  var e, e$iterator, llInterruption, sizeOccurence, tick, topLeftOccurence;
  this$static.createdOnStart?$drawHead(this$static, drawHandler, $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getHorizontalStart(), drawingInfo.this$01.verticalDrawingInfo.startingHeadTopY, $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getWidth(), drawingInfo.this$01.verticalDrawingInfo.startingHeadHeight):!!this$static.created && $drawHead(this$static, drawHandler, $getSymmetricHorizontalStart(drawingInfo, this$static.created.value_0), $getVerticalStart_0(drawingInfo, this$static.created.value_0), $getSymmetricWidth_0(drawingInfo, this$static.created.value_0), $getTickHeight_0(drawingInfo, this$static.created.value_0));
  if (this$static.createdOnStart || !!this$static.created) {
    for (e$iterator = new LinkedHashMap$EntrySet$EntryIterator(new LinkedHashMap$EntrySet(this$static.lifeline)); e$iterator.next_0 != e$iterator.this$11.this$01.head_0;) {
      e = $next_4(e$iterator);
      tick = castTo(e.key, 48).value_0;
      topLeftOccurence = new PointDouble($getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getSymmetricHorizontalStart(tick), $getVerticalStart_1(drawingInfo.this$01.verticalDrawingInfo, tick));
      sizeOccurence = new PointDouble($getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getSymmetricWidth(tick), $getTickHeight_1(drawingInfo.this$01.verticalDrawingInfo, tick));
      llInterruption = castTo(e.value_0, 223).draw_0(drawHandler, topLeftOccurence, sizeOccurence);
      !!llInterruption && $add($getInterruptedAreas(drawingInfo.this$01, drawingInfo.lifeline.index_0), llInterruption);
    }
    $drawLifeline(this$static, drawHandler, drawingInfo, lifelineLastTick);
  }
}

function $drawHead(this$static, drawHandler, x_0, y_0, width_0, height){
  var styleAtDrawingCall;
  if (this$static.headType == ($clinit_Lifeline$LifelineHeadType() , STANDARD) || this$static.headType == ACTIVE_CLASS) {
    styleAtDrawingCall = $cloneFromMe(drawHandler.style_0);
    $addDrawable(drawHandler, new DrawHandlerGwt$5(drawHandler, styleAtDrawingCall, x_0, y_0, width_0, height));
    if (this$static.headType == ACTIVE_CLASS) {
      $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(x_0 + 10, y_0), new PointDouble(x_0 + 10, y_0 + height)]));
      $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(x_0 + width_0 - 10, y_0), new PointDouble(x_0 + width_0 - 10, y_0 + height)]));
      x_0 += 10;
      width_0 -= 20;
    }
    x_0 += 5;
    width_0 -= 10;
    y_0 += 5;
    height -= 10;
    drawText(drawHandler, this$static.text_0, x_0, y_0, width_0, height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  }
   else if (this$static.headType == ACTOR) {
    drawActor(drawHandler, round_int(x_0 + width_0 / 2), round_int(y_0), 10);
    y_0 += $doubleValue_0(ACTOR_SIZE.y_0);
    height -= $doubleValue_0(ACTOR_SIZE.y_0);
    drawText(drawHandler, this$static.text_0, x_0, y_0, width_0, height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , BOTTOM));
  }
   else {
    $error_1(log_8, "Encountered unhandled enumeration value '" + this$static.headType + "'.");
  }
}

function $drawLifeline(this$static, drawHandler, drawingInfo, lifelineLastTick){
  var active, centerX, centerY, currentActiveCount, currentStartTick, endInc, endTick, execSpec, execSpecIter, interruptedAreasIter, llBottomY, llTopY, oldLt, startInc;
  currentStartTick = 0;
  startInc = false;
  active = new LinkedList;
  this$static.createdOnStart || (currentStartTick = this$static.created.value_0 + 1);
  execSpecIter = new AbstractList$ListIteratorImpl(this$static.activeAreas, 0);
  interruptedAreasIter = new AbstractList$ListIteratorImpl($getInterruptedAreas(drawingInfo.this$01, drawingInfo.lifeline.index_0).list, 0);
  oldLt = drawHandler.style_0.lineType;
  if (this$static.execSpecFromStart && execSpecIter.i < execSpecIter.this$01_0.size_1()) {
    execSpec = (checkCriticalElement(execSpecIter.i < execSpecIter.this$01_0.size_1()) , castTo(execSpecIter.this$01_0.get_0(execSpecIter.last = execSpecIter.i++), 105));
    if (execSpec.startTick == currentStartTick - 1) {
      $addNode(active, execSpec, active.header, active.header.next_0);
      startInc = true;
    }
     else {
      checkCriticalElement(execSpecIter.i > 0);
      execSpecIter.this$01.get_0(execSpecIter.last = --execSpecIter.i);
    }
  }
  llTopY = $getVerticalStart_1(drawingInfo.this$01.verticalDrawingInfo, currentStartTick) - drawingInfo.this$01.verticalDrawingInfo.tickVerticalPadding;
  while (active.size_0 > 0 || execSpecIter.i < execSpecIter.this$01_0.size_1()) {
    currentActiveCount = active.size_0;
    if (active.size_0 > 0 && execSpecIter.i < execSpecIter.this$01_0.size_1()) {
      execSpec = (checkCriticalElement(execSpecIter.i < execSpecIter.this$01_0.size_1()) , castTo(execSpecIter.this$01_0.get_0(execSpecIter.last = execSpecIter.i++), 105));
      if ((checkCriticalElement(active.size_0 != 0) , castTo(active.header.next_0.value_0, 105)).endTick < execSpec.startTick) {
        checkCriticalElement(execSpecIter.i > 0);
        execSpecIter.this$01.get_0(execSpecIter.last = --execSpecIter.i);
        endInc = false;
        endTick = (checkCriticalElement(active.size_0 != 0) , castTo($removeNode(active, active.header.next_0), 105)).endTick;
      }
       else {
        endInc = true;
        endTick = execSpec.startTick;
        $addNode(active, execSpec, active.header, active.header.next_0);
      }
    }
     else if (active.size_0 > 0) {
      endInc = false;
      endTick = (checkCriticalElement(active.size_0 != 0) , castTo($removeNode(active, active.header.next_0), 105)).endTick;
    }
     else {
      execSpec = (checkCriticalElement(execSpecIter.i < execSpecIter.this$01_0.size_1()) , castTo(execSpecIter.this$01_0.get_0(execSpecIter.last = execSpecIter.i++), 105));
      endInc = true;
      endTick = execSpec.startTick;
      $addNode(active, execSpec, active.header, active.header.next_0);
    }
    llBottomY = $getVerticalCenter_1(drawingInfo.this$01.verticalDrawingInfo, endTick);
    $drawLifelinePart(drawHandler, $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getHorizontalCenter(), llTopY, startInc, llBottomY, endInc, currentActiveCount, interruptedAreasIter);
    currentStartTick = endTick;
    llTopY = llBottomY;
    startInc = endInc;
  }
  if (!this$static.destroyed) {
    $drawLifelinePart(drawHandler, $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getHorizontalCenter(), llTopY, false, $getVerticalEnd_0(drawingInfo.this$01.verticalDrawingInfo, lifelineLastTick), false, 0, interruptedAreasIter);
  }
   else {
    $setLineType(drawHandler, ($clinit_LineType() , SOLID));
    centerX = $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getHorizontalCenter();
    centerY = $getVerticalCenter_0(drawingInfo, this$static.destroyed.value_0);
    $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(centerX - 10, centerY - 10), new PointDouble(centerX + 10, centerY + 10)]));
    $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(centerX + 10, centerY - 10), new PointDouble(centerX - 10, centerY + 10)]));
    this$static.destroyed.value_0 > currentStartTick && $drawLifelinePart(drawHandler, $getHDrawingInfo(drawingInfo.this$01, drawingInfo.lifeline).getHorizontalCenter(), llTopY, false, $getVerticalCenter_0(drawingInfo, this$static.destroyed.value_0), false, 0, interruptedAreasIter);
  }
  $setLineType_0(drawHandler.style_0, oldLt);
}

function $drawLifelinePart(drawHandler, centerX, startY, activeCountIncStart, endY, activeCountIncEnd, activeCount, interruptedAreas){
  var area, currentEndY, currentStartY, drawEnd, drawHead, drawingFinished, i, lineX, nextStartY;
  nextStartY = startY;
  drawHead = true;
  if (interruptedAreas.i < interruptedAreas.this$01_0.size_1()) {
    area = (checkCriticalElement(interruptedAreas.i < interruptedAreas.this$01_0.size_1()) , castTo(interruptedAreas.this$01_0.get_0(interruptedAreas.last = interruptedAreas.i++), 70));
    if ($doubleValue_0(area.low) <= startY && startY <= $doubleValue_0(area.high)) {
      drawHead = false;
      nextStartY = $doubleValue_0(area.high);
    }
     else {
      checkCriticalElement(interruptedAreas.i > 0);
      interruptedAreas.this$01.get_0(interruptedAreas.last = --interruptedAreas.i);
    }
  }
  drawingFinished = false;
  drawEnd = false;
  while (!drawingFinished) {
    currentStartY = nextStartY;
    if (interruptedAreas.i < interruptedAreas.this$01_0.size_1()) {
      area = (checkCriticalElement(interruptedAreas.i < interruptedAreas.this$01_0.size_1()) , castTo(interruptedAreas.this$01_0.get_0(interruptedAreas.last = interruptedAreas.i++), 70));
      if ($doubleValue_0(area.low) < endY) {
        currentEndY = $doubleValue_0(area.low);
        nextStartY = $doubleValue_0(area.high);
        if ($doubleValue_0(area.high) > endY) {
          drawingFinished = true;
          checkCriticalElement(interruptedAreas.i > 0);
          interruptedAreas.this$01.get_0(interruptedAreas.last = --interruptedAreas.i);
        }
      }
       else {
        checkCriticalElement(interruptedAreas.i > 0);
        interruptedAreas.this$01.get_0(interruptedAreas.last = --interruptedAreas.i);
        drawingFinished = true;
        drawEnd = true;
        currentEndY = endY;
      }
    }
     else {
      drawingFinished = true;
      drawEnd = true;
      currentEndY = endY;
    }
    if (activeCount == 0) {
      $setLineType(drawHandler, ($clinit_LineType() , DASHED));
      $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(centerX, currentStartY), new PointDouble(centerX, currentEndY)]));
    }
     else {
      $setLineType(drawHandler, ($clinit_LineType() , SOLID));
      lineX = centerX - 10;
      $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(lineX, currentStartY), new PointDouble(lineX, currentEndY)]));
      for (i = 0; i < activeCount - 1; i++) {
        lineX += 12;
        $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(lineX, currentStartY), new PointDouble(lineX, currentEndY)]));
      }
      lineX += 20;
      $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(lineX, currentStartY), new PointDouble(lineX, currentEndY)]));
      drawHead && activeCountIncStart && $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(lineX - 20, currentStartY), new PointDouble(lineX, currentStartY)]));
      drawEnd && !activeCountIncEnd && $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(lineX - 20, currentEndY), new PointDouble(lineX, currentEndY)]));
    }
    drawHead = false;
  }
}

function $getAdditionalYHeights(this$static, drawHandler, drawingInfo){
  var additionalY, e, e$iterator, headAdditionalHeight, ret, size_0;
  ret = new HashMap;
  for (e$iterator = new LinkedHashMap$EntrySet$EntryIterator(new LinkedHashMap$EntrySet(this$static.lifeline)); e$iterator.next_0 != e$iterator.this$11.this$01.head_0;) {
    e = $next_4(e$iterator);
    size_0 = new PointDouble(drawingInfo.getSymmetricWidth(castTo(e.key, 48).value_0), 20);
    additionalY = castTo(e.value_0, 223).getAdditionalYHeight(drawHandler, size_0);
    additionalY > 0 && $put(ret, castTo(e.key, 48), additionalY);
  }
  if (!this$static.createdOnStart && !!this$static.created) {
    headAdditionalHeight = $getHeadMinHeight(this$static, drawHandler, drawingInfo.getSymmetricWidth(this$static.created.value_0)) - 20;
    headAdditionalHeight > 0 && ($containsKey_0(ret, this$static.created)?$put(ret, this$static.created, $wnd.Math.max($doubleValue_0(castToDouble($get_0(ret, this$static.created))), headAdditionalHeight)):$put(ret, this$static.created, headAdditionalHeight));
  }
  return ret;
}

function $getCurrentlyActiveExecutionSpecifications(this$static, tick){
  var currentlyActiveExecSpec, i;
  currentlyActiveExecSpec = 0;
  for (i = 0; i < this$static.activeAreas.array.length && tick >= castTo($get_7(this$static.activeAreas, i), 105).startTick; i++) {
    $enclosesTick(castTo($get_7(this$static.activeAreas, i), 105), tick) && ++currentlyActiveExecSpec;
  }
  return currentlyActiveExecSpec;
}

function $getHeadMinHeight(this$static, drawHandler, width_0){
  var minHeight;
  if (this$static.headType == ($clinit_Lifeline$LifelineHeadType() , STANDARD) || this$static.headType == ACTIVE_CLASS) {
    width_0 -= 10;
    this$static.headType == ACTIVE_CLASS && (width_0 -= 20);
  }
  minHeight = getSplitStringHeight(this$static.text_0, width_0, drawHandler);
  this$static.headType == ACTOR?(minHeight += $doubleValue_0(ACTOR_SIZE.y_0)):this$static.headType == ACTIVE_CLASS || this$static.headType == STANDARD?(minHeight += 10):$error_1(log_8, "Encountered unhandled enumeration value '" + this$static.headType + "'.");
  return minHeight;
}

function $getMinWidth(this$static, drawHandler){
  var activeArea, activeArea$iterator, entry, llOccurrence, llOccurrence$iterator, maxSimultaneousExecSpec, minWidth, outerIter, minWidth_0;
  minWidth = 20;
  for (llOccurrence$iterator = (outerIter = (new AbstractMap$2(this$static.lifeline)).this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter)); llOccurrence$iterator.val$outerIter2.hasNext_0();) {
    llOccurrence = (entry = castTo(llOccurrence$iterator.val$outerIter2.next_1(), 46) , castTo(entry.getValue_0(), 223));
    minWidth = $wnd.Math.max(minWidth, llOccurrence.getMinWidth(drawHandler));
  }
  if (this$static.activeAreas.array.length == 1) {
    minWidth = $wnd.Math.max(minWidth, 20);
  }
   else if (this$static.activeAreas.array.length > 1) {
    maxSimultaneousExecSpec = 0;
    for (activeArea$iterator = new ArrayList$1(this$static.activeAreas); activeArea$iterator.i < activeArea$iterator.this$01.array.length;) {
      activeArea = castTo($next_3(activeArea$iterator), 105);
      maxSimultaneousExecSpec = $wnd.Math.max(maxSimultaneousExecSpec, $getCurrentlyActiveExecutionSpecifications(this$static, activeArea.startTick));
    }
    minWidth = $wnd.Math.max(minWidth, (maxSimultaneousExecSpec - 1) * 12 * 2 + 20);
  }
  minWidth = $wnd.Math.max(minWidth, (minWidth_0 = $doubleValue_0(ACTOR_SIZE.x_0) , minWidth_0 = $wnd.Math.max(minWidth_0, getTextMinWidth_0(this$static.text_0, drawHandler)) , this$static.headType == ($clinit_Lifeline$LifelineHeadType() , STANDARD)?(minWidth_0 = minWidth_0 + 10):this$static.headType == ACTIVE_CLASS && (minWidth_0 = minWidth_0 + 10 + 20) , minWidth_0));
  return minWidth;
}

function $setCreated(this$static, created){
  this$static.created = created;
}

function $setDestroyed(this$static, destroyed){
  this$static.destroyed = destroyed;
}

function Lifeline(text_0, index_0, headType, createdOnStart, execSpecFromStart){
  $clinit_Lifeline();
  this.text_0 = $split(text_0, '\n', 0);
  this.index_0 = index_0;
  this.headType = headType;
  this.createdOnStart = createdOnStart;
  this.created = null;
  this.destroyed = null;
  this.execSpecFromStart = execSpecFromStart;
  this.lifeline = new LinkedHashMap;
  this.activeAreas = new ArrayList;
}

defineClass(194, 1, {194:1}, Lifeline);
_.createdOnStart = false;
_.execSpecFromStart = false;
_.index_0 = 0;
var ACTOR_SIZE, log_8;
var Lcom_baselet_element_sequence_1aio_facet_Lifeline_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Lifeline', 194);
function $clinit_Lifeline$LifelineHeadType(){
  $clinit_Lifeline$LifelineHeadType = emptyMethod;
  STANDARD = new Lifeline$LifelineHeadType('STANDARD', 0);
  ACTIVE_CLASS = new Lifeline$LifelineHeadType('ACTIVE_CLASS', 1);
  ACTOR = new Lifeline$LifelineHeadType('ACTOR', 2);
}

function Lifeline$LifelineHeadType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_24(){
  $clinit_Lifeline$LifelineHeadType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_sequence_1aio_facet_Lifeline$LifelineHeadType_2_classLit, 1), $intern_5, 217, 0, [STANDARD, ACTIVE_CLASS, ACTOR]);
}

defineClass(217, 8, {217:1, 3:1, 9:1, 8:1}, Lifeline$LifelineHeadType);
var ACTIVE_CLASS, ACTOR, STANDARD;
var Lcom_baselet_element_sequence_1aio_facet_Lifeline$LifelineHeadType_2_classLit = createForEnum('com.baselet.element.sequence_aio.facet', 'Lifeline/LifelineHeadType', 217, values_24);
function LifelineHorizontalDrawingInfoImpl(leftPaddings, rightPaddings, startX, endX){
  this.leftPaddings = copyOf(leftPaddings, leftPaddings.length);
  this.rightPaddings = copyOf(rightPaddings, rightPaddings.length);
  this.startX = startX;
  this.endX = endX;
}

defineClass(982, 1, {1011:1}, LifelineHorizontalDrawingInfoImpl);
_.getHorizontalCenter = function getHorizontalCenter_0(){
  return (this.startX + this.endX) / 2;
}
;
_.getHorizontalEnd = function getHorizontalEnd_0(){
  return this.endX;
}
;
_.getHorizontalStart = function getHorizontalStart_0(){
  return this.startX;
}
;
_.getSymmetricHorizontalEnd = function getSymmetricHorizontalEnd_0(tick){
  return this.endX - $wnd.Math.max(this.leftPaddings[tick], this.rightPaddings[tick]);
}
;
_.getSymmetricHorizontalStart = function getSymmetricHorizontalStart_0(tick){
  return this.startX + $wnd.Math.max(this.leftPaddings[tick], this.rightPaddings[tick]);
}
;
_.getSymmetricWidth = function getSymmetricWidth_0(tick){
  return this.endX - this.startX - $wnd.Math.max(this.leftPaddings[tick], this.rightPaddings[tick]) * 2;
}
;
_.getWidth = function getWidth_0(){
  return this.endX - this.startX;
}
;
_.endX = 0;
_.startX = 0;
var Lcom_baselet_element_sequence_1aio_facet_LifelineHorizontalDrawingInfoImpl_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'LifelineHorizontalDrawingInfoImpl', 982);
function LifelineSpanningTickSpanningOccurrence$ContainerPadding(container){
  this.container = container;
  this.leftPadding = 7;
  this.rightPadding = 7;
  this.topPadding = 7;
  this.bottomPadding = 7;
}

defineClass(95, 1, {95:1}, LifelineSpanningTickSpanningOccurrence$ContainerPadding);
_.bottomPadding = 0;
_.leftPadding = 0;
_.rightPadding = 0;
_.topPadding = 0;
var Lcom_baselet_element_sequence_1aio_facet_LifelineSpanningTickSpanningOccurrence$ContainerPadding_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'LifelineSpanningTickSpanningOccurrence/ContainerPadding', 95);
function $compare_0(o1, o2){
  var ret;
  ret = o1.container.startTick - o2.container.startTick;
  return ret == 0?o1.container.coveredLifelines[0].index_0 - o2.container.coveredLifelines[0].index_0:ret;
}

function $compare_1(o1, o2){
  return $compare_0(castTo(o1, 95), castTo(o2, 95));
}

function LifelineSpanningTickSpanningOccurrence$ContainerPadding$2(){
}

defineClass(370, 1, {}, LifelineSpanningTickSpanningOccurrence$ContainerPadding$2);
_.compare = function compare_1(o1, o2){
  return $compare_1(o1, o2);
}
;
_.equals_0 = function equals_13(other){
  return this === other;
}
;
var Lcom_baselet_element_sequence_1aio_facet_LifelineSpanningTickSpanningOccurrence$ContainerPadding$2_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'LifelineSpanningTickSpanningOccurrence/ContainerPadding/2', 370);
function $clinit_LostOrFoundMessage(){
  $clinit_LostOrFoundMessage = emptyMethod;
  log_9 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sequence_1aio_facet_LostOrFoundMessage_2_classLit) , Lcom_baselet_element_sequence_1aio_facet_LostOrFoundMessage_2_classLit.typeName));
  LIFELINE_TEXT_PADDING = $wnd.Math.max(13, 20) + 3;
}

function $getCenterXOffset(this$static){
  var currentlyActiveExecSpec;
  return this$static.found?-($getCurrentlyActiveExecutionSpecifications(this$static.lifeline, this$static.sendTick) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this$static.lifeline, this$static.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10);
}

function $receiveOccurrenceSpecification_0(this$static){
  if (!this$static.found) {
    throw toJs(new IllegalStateException_0('A lost message has no receive occurrence specification.'));
  }
  return new LostOrFoundMessage$LostOrFoundOccurrenceSpecification(this$static);
}

function $sendOccurrenceSpecification_0(this$static){
  if (this$static.found) {
    throw toJs(new IllegalStateException_0('A found message has no send occurrence specification.'));
  }
  return new LostOrFoundMessage$LostOrFoundOccurrenceSpecification(this$static);
}

function LostOrFoundMessage(lifeline, found, sendTick, text_0, arrowType, lineType){
  $clinit_LostOrFoundMessage();
  this.lifeline = lifeline;
  this.found = found;
  this.sendTick = sendTick;
  this.textLines = $split(text_0, '\n', 0);
  this.arrowType = arrowType;
  this.lineType = lineType;
}

defineClass(378, 1, $intern_49, LostOrFoundMessage);
_.draw_0 = function draw_5(drawHandler, topLeft, size_0){
  var arrowEndType, arrowPoint, centerY, currentlyActiveExecSpec, fillArrow, line, lineXEnd, lineXStart, oldBg, oldLt;
  arrowEndType = 0;
  fillArrow = false;
  switch (this.arrowType.ordinal) {
    case 0:
      arrowEndType = 0;
      fillArrow = false;
      break;
    case 1:
      arrowEndType = 1;
      fillArrow = true;
      break;
    default:$error_1(log_9, "Encountered unhandled enumeration value '" + this.arrowType + "'.");
  }
  oldLt = drawHandler.style_0.lineType;
  $setLineType(drawHandler, this.lineType);
  centerY = $doubleValue_0(topLeft.y_0) + $doubleValue_0(size_0.y_0) / 2;
  oldBg = drawHandler.style_0.backgroundColor_0;
  $setBackgroundColor(drawHandler, drawHandler.style_0.foregroundColor);
  if (this.found) {
    $drawCircle_0(drawHandler, $doubleValue_0(topLeft.x_0) + 10, centerY, 10);
    lineXStart = $doubleValue_0(topLeft.x_0) + 20;
    lineXEnd = $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) / 2 + (this.found?-($getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10));
  }
   else {
    $drawCircle_0(drawHandler, $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) - 10, $doubleValue_0(topLeft.y_0) + $doubleValue_0(size_0.y_0) / 2, 10);
    lineXStart = $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) / 2 + (this.found?-($getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10));
    lineXEnd = $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) - 20;
  }
  !oldBg?$setBackgroundColor_0(drawHandler.style_0, $getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_BACKGROUND))):$setBackgroundColor_0(drawHandler.style_0, oldBg);
  drawText(drawHandler, this.textLines, lineXStart, $doubleValue_0(topLeft.y_0), lineXEnd - lineXStart, $doubleValue_0(size_0.y_0) / 2, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , BOTTOM));
  arrowPoint = new PointDouble(lineXEnd, centerY);
  line = new Line(new PointDouble(lineXStart, centerY), arrowPoint);
  $drawLine(drawHandler, $doubleValue_0(line.start_0.x_0), $doubleValue_0(line.start_0.y_0), $doubleValue_0(line.end.x_0), $doubleValue_0(line.end.y_0));
  drawArrowToLine(arrowPoint, drawHandler, line, false, arrowEndType, fillArrow, false);
  $setLineType_0(drawHandler.style_0, oldLt);
  return null;
}
;
_.getAdditionalYHeight = function getAdditionalYHeight_0(drawHandler, size_0){
  var currentlyActiveExecSpec;
  return getSplitStringHeight(this.textLines, $doubleValue_0(size_0.x_0) / 2 - LIFELINE_TEXT_PADDING * 2 - $wnd.Math.abs(this.found?-($getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10)), drawHandler) * 2 - $doubleValue_0(size_0.y_0);
}
;
_.getMinWidth = function getMinWidth_0(drawHandler){
  var currentlyActiveExecSpec;
  return (getTextMinWidth_0(this.textLines, drawHandler) + LIFELINE_TEXT_PADDING * 2 + $wnd.Math.abs(this.found?-($getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) > 0?10:0):(currentlyActiveExecSpec = $getCurrentlyActiveExecutionSpecifications(this.lifeline, this.sendTick) , currentlyActiveExecSpec == 0?0:(currentlyActiveExecSpec - 1) * 12 + 10))) * 2;
}
;
_.found = false;
_.sendTick = 0;
var LIFELINE_TEXT_PADDING = 0, log_9;
var Lcom_baselet_element_sequence_1aio_facet_LostOrFoundMessage_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'LostOrFoundMessage', 378);
function LostOrFoundMessage$LostOrFoundOccurrenceSpecification(this$0){
  this.this$01 = this$0;
}

defineClass(379, 1, {391:1}, LostOrFoundMessage$LostOrFoundOccurrenceSpecification);
_.getPosition = function getPosition(drawingInfo){
  return new PointDouble($getHDrawingInfo(drawingInfo, this.this$01.lifeline).getHorizontalCenter() + $getCenterXOffset(this.this$01), $getVerticalCenter(drawingInfo, this.this$01.sendTick));
}
;
var Lcom_baselet_element_sequence_1aio_facet_LostOrFoundMessage$LostOrFoundOccurrenceSpecification_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'LostOrFoundMessage/LostOrFoundOccurrenceSpecification', 379);
function $clinit_Message$ArrowType(){
  $clinit_Message$ArrowType = emptyMethod;
  OPEN = new Message$ArrowType('OPEN', 0);
  FILLED = new Message$ArrowType('FILLED', 1);
}

function Message$ArrowType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_25(){
  $clinit_Message$ArrowType();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_sequence_1aio_facet_Message$ArrowType_2_classLit, 1), $intern_5, 247, 0, [OPEN, FILLED]);
}

defineClass(247, 8, {247:1, 3:1, 9:1, 8:1}, Message$ArrowType);
var FILLED, OPEN;
var Lcom_baselet_element_sequence_1aio_facet_Message$ArrowType_2_classLit = createForEnum('com.baselet.element.sequence_aio.facet', 'Message/ArrowType', 247, values_25);
function Message$MessageReceiveEndpoint(this$0){
  this.this$01 = this$0;
}

defineClass(377, 1, {391:1}, Message$MessageReceiveEndpoint);
_.getPosition = function getPosition_0(drawingInfo){
  return new PointDouble(this.this$01.getReceiveX(drawingInfo), $getVerticalCenter(drawingInfo, this.this$01.sendTick + this.this$01.duration));
}
;
var Lcom_baselet_element_sequence_1aio_facet_Message$MessageReceiveEndpoint_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Message/MessageReceiveEndpoint', 377);
function Message$MessageSendEndpoint(this$0){
  this.this$01 = this$0;
}

defineClass(376, 1, {391:1}, Message$MessageSendEndpoint);
_.getPosition = function getPosition_1(drawingInfo){
  return new PointDouble(this.this$01.getSendX(drawingInfo), $getVerticalCenter(drawingInfo, this.this$01.sendTick));
}
;
var Lcom_baselet_element_sequence_1aio_facet_Message$MessageSendEndpoint_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'Message/MessageSendEndpoint', 376);
function draw_6(drawHandler, textLines, width_0, topLeft, slopeNotPermittedAreas){
  var height, l, l$index, l$index0, l$max, l$max0, line, line$iterator, oldLt, slopeEndX, slopeStartX, splitIsNecessary, textWidth;
  splitIsNecessary = false;
  textWidth = width_0 - 70;
  for (l$index0 = 0 , l$max0 = textLines.length; l$index0 < l$max0; ++l$index0) {
    l = textLines[l$index0];
    if (($clinit_TextSplitter() , splitStringAndHeightAlgorithm(l, textWidth, drawHandler).wrappedLines).length > 1) {
      splitIsNecessary = true;
      break;
    }
  }
  height = getSplitStringHeight(textLines, width_0 - 70, drawHandler) + 6;
  if (!splitIsNecessary) {
    textWidth = 0;
    for (l$index = 0 , l$max = textLines.length; l$index < l$max; ++l$index) {
      l = textLines[l$index];
      textWidth = $wnd.Math.max(textWidth, $textDimensionHelper(drawHandler, analyzeFormatLabels(replaceNotEscaped(l))).width_0);
    }
    textWidth += $textDimensionHelper(drawHandler, analyzeFormatLabels(replaceNotEscaped('n'))).width_0;
  }
  drawText(drawHandler, textLines, $doubleValue_0(topLeft.x_0) + 5, $doubleValue_0(topLeft.y_0), textWidth, height, ($clinit_AlignHorizontal() , LEFT), ($clinit_AlignVertical() , CENTER_0));
  oldLt = drawHandler.style_0.lineType;
  $setLineType(drawHandler, ($clinit_LineType() , SOLID));
  slopeStartX = $doubleValue_0(topLeft.x_0) + textWidth + 10;
  slopeEndX = slopeStartX + 20;
  for (line$iterator = slopeNotPermittedAreas.iterator(); line$iterator.hasNext_0();) {
    line = castTo(line$iterator.next_1(), 70);
    if ($doubleValue_0(line.low) > slopeEndX) {
      break;
    }
     else if ($isIntersecting(line, new Line1D(slopeStartX, slopeEndX))) {
      slopeStartX = $doubleValue_0(line.high);
      slopeEndX = slopeStartX + 20;
      break;
    }
  }
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble($doubleValue_0(topLeft.x_0), $doubleValue_0(topLeft.y_0) + height), new PointDouble(slopeStartX, $doubleValue_0(topLeft.y_0) + height), new PointDouble(slopeEndX, $doubleValue_0(topLeft.y_0) + height * 0.6), new PointDouble(slopeEndX, $doubleValue_0(topLeft.y_0))]));
  $setLineType_0(drawHandler.style_0, oldLt);
  return new PointDouble(slopeEndX - $doubleValue_0(topLeft.x_0), height);
}

function getHeight(drawHandler, textLines, width_0){
  return getSplitStringHeight(textLines, width_0 - 70, drawHandler) + 6;
}

function getMinimumWidth(drawHandler, textLines){
  return getTextMinWidth_0(textLines, drawHandler) + 70;
}

function getPentagonMinimumWidth(drawHandler, textLines){
  return getTextMinWidth_0(textLines, drawHandler) + 70 - 40;
}

function $clinit_SequenceAllInOneFacet(){
  $clinit_SequenceAllInOneFacet = emptyMethod;
  INSTANCE_26 = new SequenceAllInOneFacet;
}

function SequenceAllInOneFacet(){
  Facet.call(this);
}

defineClass(941, 19, $intern_15, SequenceAllInOneFacet);
_.checkStart = function checkStart_9(line, state){
  return true;
}
;
_.handleLine = function handleLine_10(line, state){
}
;
_.parsingFinished = function parsingFinished_7(state, handledLines){
  var drawer, e, size_0, str, str$iterator, strBuilder;
  drawer = state.drawer;
  strBuilder = new StringBuilder;
  for (str$iterator = handledLines.iterator(); str$iterator.hasNext_0();) {
    str = castToString(str$iterator.next_1());
    strBuilder.string += '' + str;
    strBuilder.string += '\n';
  }
  try {
    size_0 = $draw_0($generateDiagram($start_0(new SequenceAllInOneParser_0(strBuilder.string))), drawer);
    $updateMinimumSize(state, size_0.width_0, size_0.height_0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 55)) {
      e = $e0;
      throw toJs(new SequenceDiagramException_1(e));
    }
     else if (instanceOf($e0, 244)) {
      e = $e0;
      throw toJs(new SequenceDiagramException_1(e));
    }
     else 
      throw toJs($e0);
  }
}
;
var INSTANCE_26;
var Lcom_baselet_element_sequence_1aio_facet_SequenceAllInOneFacet_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceAllInOneFacet', 941);
function $convert(value_0){
  return $clinit_SharedUtils() , realignTo(value_0, true, 10);
}

function $addLifelineSpanningTickSpanningOccurrence(this$static, occurrence){
  $add_15(this$static.spanningLifelineOccurrences, occurrence);
}

function $addLiveline(this$static, headText, headType, createdOnStart, execSpecFromStart){
  this$static.lifelines = castTo(copyOf_0(this$static.lifelines, this$static.lifelines.length + 1), 152);
  setCheck(this$static.lifelines, this$static.lifelines.length - 1, new Lifeline(headText, this$static.lifelines.length - 1, headType, createdOnStart, execSpecFromStart));
  return this$static.lifelines[this$static.lifelines.length - 1];
}

function $calculateAddiontalHeights(this$static, drawHandler, hDrawingInfo){
  var addiontalHeight, e, e$iterator, ll, ll$array, ll$index, ll$max, llstso, llstso$iterator;
  addiontalHeight = initUnidimensionalArray(D_classLit, $intern_50, 32, this$static.lastTick + 1, 15, 1);
  for (ll$array = this$static.lifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet($getAdditionalYHeights(ll, drawHandler, hDrawingInfo.horizontalDrawingInfos[ll.index_0]))).this$01); e$iterator.hasNext;) {
      e = $next_1(e$iterator);
      addiontalHeight[castTo(e.getKey(), 48).value_0] = $wnd.Math.max(addiontalHeight[castTo(e.getKey(), 48).value_0], $doubleValue_0(castToDouble(e.getValue_0())));
    }
  }
  for (llstso$iterator = $listIterator(this$static.spanningLifelineOccurrences, 0); llstso$iterator.currentNode != llstso$iterator.this$01.tail;) {
    llstso = castTo($next_5(llstso$iterator), 153);
    for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(llstso.getEveryAdditionalYHeight(drawHandler, hDrawingInfo, 20))).this$01); e$iterator.hasNext;) {
      e = $next_1(e$iterator);
      addiontalHeight[castTo(e.getKey(), 48).value_0] = $wnd.Math.max(addiontalHeight[castTo(e.getKey(), 48).value_0], $doubleValue_0(castToDouble(e.getValue_0())));
    }
  }
  return addiontalHeight;
}

function $draw_0(this$static, drawHandler){
  var allPaddings, bottomY, descHeight, diagramMinWidth, diagramWidth, drawingInfo, headerHeight, horizontalDrawingInfo, lifelineHeadHeight, lifelineHeadTop, lifelineWidth, ll, ll$array, ll$index, ll$max, llstso, llstso$iterator, lstso, lstso$iterator, verticalInfo;
  lifelineWidth = $wnd.Math.max($getLifelineWidth(this$static, drawHandler), 100);
  diagramMinWidth = $wnd.Math.max(100, getTextMinWidth_0(this$static.descLines, drawHandler) + 20);
  diagramMinWidth = $wnd.Math.max(diagramMinWidth, getMinimumWidth(drawHandler, this$static.titleLines));
  allPaddings = new LinkedList;
  for (lstso$iterator = $listIterator(this$static.spanningLifelineOccurrences, 0); lstso$iterator.currentNode != lstso$iterator.this$01.tail;) {
    lstso = castTo($next_5(lstso$iterator), 153);
    !!lstso.getPaddingInformation() && $add_15(allPaddings, lstso.getPaddingInformation());
  }
  horizontalDrawingInfo = new HorizontalDrawingInfoImpl(diagramMinWidth, lifelineWidth, this$static.lifelines.length, this$static.lastTick, allPaddings);
  diagramWidth = horizontalDrawingInfo.diagramWidth;
  headerHeight = 0;
  (this$static.titleLines.length > 1 || this$static.titleLines.length == 1 && this$static.titleLines[0].length != 0) && (headerHeight = $doubleValue_0(draw_6(drawHandler, this$static.titleLines, diagramWidth, new PointDouble(0, 0), ($clinit_Collections() , $clinit_Collections() , EMPTY_LIST)).y_0));
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(diagramWidth, 0)]));
  descHeight = getSplitStringHeight(this$static.descLines, diagramWidth - 20, drawHandler);
  drawText(drawHandler, this$static.descLines, 10, headerHeight + 10, diagramWidth - 20, descHeight, ($clinit_AlignHorizontal() , LEFT), ($clinit_AlignVertical() , CENTER_0));
  lifelineHeadTop = headerHeight + descHeight + 20 + 20;
  lifelineHeadHeight = $getLifelineHeadHeight(this$static, drawHandler, horizontalDrawingInfo);
  verticalInfo = new VerticalDrawingInfoImpl(lifelineHeadTop, lifelineHeadHeight, $calculateAddiontalHeights(this$static, drawHandler, horizontalDrawingInfo), allPaddings);
  drawingInfo = new DrawingInfoImpl(horizontalDrawingInfo, verticalInfo, this$static.lifelines.length);
  if (this$static.lifelines.length > 0) {
    for (llstso$iterator = $listIterator(this$static.spanningLifelineOccurrences, 0); llstso$iterator.currentNode != llstso$iterator.this$01.tail;) {
      llstso = castTo($next_5(llstso$iterator), 153);
      llstso.draw(drawHandler, drawingInfo);
    }
    for (ll$array = this$static.lifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
      ll = ll$array[ll$index];
      $draw(ll, drawHandler, new DrawingInfoImpl$LifelineDrawingInfoProxy(drawingInfo, ll), this$static.lastTick);
    }
  }
  bottomY = $convert($getVerticalEnd_0(verticalInfo, this$static.lastTick) + 20);
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, bottomY), new PointDouble(diagramWidth, bottomY)]));
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(0, 0), new PointDouble(0, bottomY)]));
  $drawLines_0(drawHandler, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_control_basics_geom_PointDouble_2_classLit, 1), $intern_8, 5, 0, [new PointDouble(diagramWidth, 0), new PointDouble(diagramWidth, bottomY)]));
  return new DimensionDouble(diagramWidth, bottomY);
}

function $getLifelineHeadHeight(this$static, drawHandler, hDrawingInfo){
  var ll, ll$array, ll$index, ll$max, maxHeight;
  maxHeight = 0;
  for (ll$array = this$static.lifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    ll.createdOnStart && (maxHeight = $wnd.Math.max(maxHeight, $getHeadMinHeight(ll, drawHandler, hDrawingInfo.horizontalDrawingInfos[ll.index_0].getWidth())));
  }
  return maxHeight;
}

function $getLifelineWidth(this$static, drawHandler){
  var ll, ll$array, ll$index, ll$max, llCount, llstso, llstso$iterator, maxMinWidth;
  maxMinWidth = 0;
  for (ll$array = this$static.lifelines , ll$index = 0 , ll$max = ll$array.length; ll$index < ll$max; ++ll$index) {
    ll = ll$array[ll$index];
    maxMinWidth = $wnd.Math.max(maxMinWidth, $getMinWidth(ll, drawHandler));
  }
  for (llstso$iterator = $listIterator(this$static.spanningLifelineOccurrences, 0); llstso$iterator.currentNode != llstso$iterator.this$01.tail;) {
    llstso = castTo($next_5(llstso$iterator), 153);
    llCount = llstso.getLastLifeline().index_0 - llstso.getFirstLifeline().index_0 + 1;
    maxMinWidth = $wnd.Math.max(maxMinWidth, (llstso.getOverallMinWidth(drawHandler, 40) - 40 * (llCount - 1)) / llCount);
  }
  return maxMinWidth;
}

function $getLifelinesArray(this$static){
  return castTo(copyOf_0(this$static.lifelines, this$static.lifelines.length), 152);
}

function $setLastTick(this$static, lastTick){
  this$static.lastTick = lastTick;
}

function $setText(this$static, text_0){
  this$static.descLines = $split(text_0, '\n', 0);
}

function $setTitle(this$static, title_0){
  this$static.titleLines = $split(title_0, '\n', 0);
}

function SequenceDiagram(){
  this.titleLines = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['']);
  this.descLines = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['']);
  this.lifelines = initUnidimensionalArray(Lcom_baselet_element_sequence_1aio_facet_Lifeline_2_classLit, {152:1, 3:1, 4:1}, 194, 0, 0, 1);
  this.spanningLifelineOccurrences = new LinkedList;
}

defineClass(942, 1, {}, SequenceDiagram);
_.lastTick = 0;
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagram_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagram', 942);
function $clinit_SequenceDiagramBuilder(){
  $clinit_SequenceDiagramBuilder = emptyMethod;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder_2_classLit) , Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder_2_classLit.typeName));
}

function $addContinuation(this$static, startId, endId, text_0){
  var lifelines;
  $checkState(this$static);
  lifelines = $getLifelineIntervalException(this$static, startId, endId);
  $addLifelineSpanningTickSpanningOccurrence(this$static.dia, new Continuation(this$static.currentTick, text_0, lifelines));
}

function $addCoregion(this$static, id_0, start_0){
  var ex, lifeline, lifelineState;
  $checkState(this$static);
  lifeline = $getLifelineException(this$static, id_0);
  lifelineState = castTo($get_0(this$static.currentLifelineState, lifeline), 125);
  lifelineState.coregionActive && start_0?$add_15(this$static.warnings, "On lifeline '" + id_0 + "': " + 'A new coregion was started while an old one was still active.'):!lifelineState.coregionActive && !start_0 && $add_15(this$static.warnings, "On lifeline '" + id_0 + "': " + 'A coregion was closed, but no coregion was active.');
  try {
    $addLifelineOccurrenceAtTick(lifeline, new Coregion(lifeline, this$static.currentTick, start_0), valueOf_9(this$static.currentTick));
    lifelineState.coregionActive = start_0;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 220)) {
      ex = $e0;
      throw toJs(new SequenceDiagramException_0("Error on lifeline '" + id_0 + "': " + ex.detailMessage, ex));
    }
     else 
      throw toJs($e0);
  }
}

function $addFoundMessage(this$static, toId, text_0, lineType, arrowType, toLocalId){
  var msg, to;
  $checkState(this$static);
  to = $getLifelineException(this$static, toId);
  if (!to.createdOnStart) {
    if (!to.created || to.created.value_0 >= this$static.currentTick) {
      throw toJs(new SequenceDiagramException('The lifeline ' + toId + ' was not yet created, therefore it is not possible to send a found message to it.'));
    }
  }
  msg = new LostOrFoundMessage(to, true, this$static.currentTick, text_0, arrowType, lineType);
  toLocalId != null && $addOccurrenceSpecification(this$static, to, toId, toLocalId, $receiveOccurrenceSpecification_0(msg));
  $addLifelineOccurrence(this$static, toId, msg);
}

function $addInteractionUse(this$static, startId, endId, text_0){
  var lifelines;
  $checkState(this$static);
  lifelines = $getLifelineIntervalException(this$static, startId, endId);
  $addLifelineSpanningTickSpanningOccurrence(this$static.dia, new InteractionUse(this$static.currentTick, text_0, lifelines));
}

function $addLifelineOccurrence(this$static, id_0, occurrence){
  var ex;
  $checkState(this$static);
  try {
    $addLifelineOccurrenceAtTick($getLifelineException(this$static, id_0), occurrence, valueOf_9(this$static.currentTick));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 220)) {
      ex = $e0;
      throw toJs(new SequenceDiagramException_0("Error on lifeline '" + id_0 + "': " + ex.detailMessage, ex));
    }
     else 
      throw toJs($e0);
  }
}

function $addLiveline_0(this$static, headText, id_0, headType, createdOnStart, execSpecFromStart){
  var newLifeline, newLifelineState;
  $checkState(this$static);
  if (this$static.overrideDefaultIds && id_0 == null) {
    throw toJs(new SequenceDiagramException('If the override option is set to true then every lifeline needs an id!'));
  }
  newLifeline = $addLiveline(this$static.dia, headText, headType, createdOnStart, execSpecFromStart);
  if (id_0 != null) {
    if ($hasStringValue(this$static.ids, id_0)) {
      throw toJs(new SequenceDiagramException("There is already a lifeline which is associated with the id '" + id_0 + "', please choose another identifier."));
    }
    $putStringValue(this$static.ids, id_0, newLifeline);
  }
  if (!this$static.overrideDefaultIds) {
    if ($hasStringValue(this$static.ids, 'id' + this$static.dia.lifelines.length)) {
      throw toJs(new SequenceDiagramException("There is already a lifeline which is associated with the default id 'id" + this$static.dia.lifelines.length + "',\nplease choose another identifier or add the option 'overrideIds=true'."));
    }
    $putStringValue(this$static.ids, 'id' + this$static.dia.lifelines.length, newLifeline);
  }
  $put(this$static.lifelineLocalIds, newLifeline, new HashMap);
  newLifelineState = new SequenceDiagramBuilder$LifelineState;
  execSpecFromStart && createdOnStart && $addFirst(newLifelineState.execSpecStartTickStack, valueOf_9(-1));
  $put(this$static.currentLifelineState, newLifeline, newLifelineState);
}

function $addLostMessage(this$static, fromId, text_0, lineType, arrowType, fromLocalId){
  var from, msg;
  $checkState(this$static);
  from = $getLifelineException(this$static, fromId);
  $checkLifelineSendMessage(this$static, from, fromId);
  msg = new LostOrFoundMessage(from, false, this$static.currentTick, text_0, arrowType, lineType);
  fromLocalId != null && $addOccurrenceSpecification(this$static, from, fromId, fromLocalId, $sendOccurrenceSpecification_0(msg));
  $addLifelineOccurrence(this$static, fromId, msg);
}

function $addMessage(this$static, fromId, toId, duration, text_0, lineType, arrowType, fromLocalId, toLocalId){
  var from, msg, to;
  $checkState(this$static);
  if ($equals_6(fromId, toId)) {
    if (duration < 1) {
      throw toJs(new SequenceDiagramException('The duration of a self message must be greater than 0, but was ' + duration + '.'));
    }
  }
  this$static.lastMessageReceiveTick = $wnd.Math.max(this$static.lastMessageReceiveTick, this$static.currentTick + duration);
  from = $getLifelineException(this$static, fromId);
  $checkLifelineSendMessage(this$static, from, fromId);
  to = $getLifelineException(this$static, toId);
  if (!to.createdOnStart && !!to.created && this$static.currentTick + duration <= to.created.value_0) {
    throw toJs(new SequenceDiagramException("A message can't end on a lifeline before this lifeline was created.\nPlease increase the messages duration by at least " + (to.created.value_0 + 1 - (this$static.currentTick + duration)) + '.'));
  }
   else if (this$static.currentTick + duration < 0) {
    throw toJs(new SequenceDiagramException("A message can't end on a lifeline before this lifeline was created.\nPlease increase the messages duration by at least " + -(this$static.currentTick + duration) + '.'));
  }
  if (!to.createdOnStart && !to.created) {
    $setCreated(to, valueOf_9(this$static.currentTick + duration));
    to.execSpecFromStart && $push_0(castTo($get_0(this$static.currentLifelineState, to), 125).execSpecStartTickStack, valueOf_9(this$static.currentTick + duration));
  }
  msg = new Message(from, to, duration, this$static.currentTick, text_0, arrowType, lineType);
  fromLocalId != null && $addOccurrenceSpecification(this$static, from, fromId, fromLocalId, new Message$MessageSendEndpoint(msg));
  toLocalId != null && $addOccurrenceSpecification(this$static, to, toId, toLocalId, new Message$MessageReceiveEndpoint(msg));
  $addLifelineSpanningTickSpanningOccurrence(this$static.dia, msg);
}

function $addOccurrenceSpecification(this$static, lifeline, lifelineId, localId, occurrence){
  if (castTo($get_0(this$static.lifelineLocalIds, lifeline), 82).containsKey(localId)) {
    throw toJs(new SequenceDiagramException("The lifeline '" + lifelineId + "' has already a local id '" + localId + "', please choose another id."));
  }
  castTo($get_0(this$static.lifelineLocalIds, lifeline), 82).put(localId, occurrence);
}

function $addReceiveGateMessage(this$static, fromId, text_0, lineType, arrowType, fromLocalId){
  var from, msg;
  $checkState(this$static);
  from = $getLifelineException(this$static, fromId);
  $checkLifelineSendMessage(this$static, from, fromId);
  msg = createReceiveGateMessage(from, this$static.currentTick, text_0, arrowType, lineType, $getLifelinesArray(this$static.dia)[0], $getLifelinesArray(this$static.dia)[$getLifelinesArray(this$static.dia).length - 1]);
  fromLocalId != null && $addOccurrenceSpecification(this$static, from, fromId, fromLocalId, $sendOccurrenceSpecification(msg));
  $addLifelineSpanningTickSpanningOccurrence(this$static.dia, msg);
}

function $addSendGateMessage(this$static, toId, text_0, lineType, arrowType, toLocalId){
  var msg, to;
  $checkState(this$static);
  to = $getLifelineException(this$static, toId);
  msg = createSendGateMessage(to, this$static.currentTick, text_0, arrowType, lineType, $getLifelinesArray(this$static.dia)[0], $getLifelinesArray(this$static.dia)[$getLifelinesArray(this$static.dia).length - 1]);
  toLocalId != null && $addOccurrenceSpecification(this$static, to, toId, toLocalId, $receiveOccurrenceSpecification(msg));
  !to.createdOnStart && !to.created && $setCreated(to, valueOf_9(this$static.currentTick));
  $addLifelineSpanningTickSpanningOccurrence(this$static.dia, msg);
}

function $beginCombinedFragment(this$static, startId, endId, cfId, operator){
  var lifelines;
  $checkState(this$static);
  startId == null && endId == null?(lifelines = castTo(copyOf_0($getLifelinesArray(this$static.dia), $getLifelinesArray(this$static.dia).length), 152)):(lifelines = $getLifelineIntervalException(this$static, startId, endId));
  $push_0(this$static.activeCombinedFragmentStack, new SequenceDiagramBuilder$ActiveCombinedFragment(new CombinedFragment(lifelines, this$static.currentTick, operator), cfId));
  castTo($peek_0(this$static.activeCombinedFragmentStack), 168).activeOperand = new SequenceDiagramBuilder$ActiveOperand(this$static.currentTick);
}

function $changeExecutionSpecification(this$static, lifelineId, on){
  var lifeline, lifelineState, startTick;
  $checkState(this$static);
  lifeline = $getLifelineException(this$static, lifelineId);
  lifelineState = castTo($get_0(this$static.currentLifelineState, lifeline), 125);
  if (on) {
    if (lifelineState.execSpecStartTickStack.size_0 > 0 && castTo($peek_0(lifelineState.execSpecStartTickStack), 48).value_0 == this$static.currentTick) {
      throw toJs(new SequenceDiagramException('On lifeline ' + lifelineId + ' two executionspecifications start at the same tick, this is not possible.'));
    }
    if (lifelineState.lastEndOfExecSpec == this$static.currentTick) {
      throw toJs(new SequenceDiagramException('On lifeline ' + lifelineId + ' two executionspecifications overlap, this is not possible.'));
    }
    if (!lifeline.createdOnStart && (!lifeline.created || lifeline.created.value_0 >= this$static.currentTick)) {
      throw toJs(new SequenceDiagramException("Error on lifeline '" + lifelineId + "': the lifeline can not contain executionspecifications before it is created."));
    }
    $addFirst(lifelineState.execSpecStartTickStack, valueOf_9(this$static.currentTick));
  }
   else {
    if (lifelineState.execSpecStartTickStack.size_0 == 0) {
      throw toJs(new SequenceDiagramException('On lifeline ' + lifelineId + ' a executionspecification was closed but no active executionspecification exists.'));
    }
    startTick = castTo($poll(lifelineState.execSpecStartTickStack), 48).value_0;
    if (startTick == this$static.currentTick) {
      throw toJs(new SequenceDiagramException('On lifeline ' + lifelineId + ' a executionspecification was closed too soon, every executionspecification needs to be at least 1 tick long.'));
    }
    if (lifelineState.lastEndOfExecSpec == this$static.currentTick) {
      throw toJs(new SequenceDiagramException('On lifeline ' + lifelineId + ' two executionspecifications end at the same tick, this is not possible.'));
    }
    lifelineState.lastEndOfExecSpec = this$static.currentTick;
    $addExecutionSpecification(lifeline, new ExecutionSpecification(startTick, this$static.currentTick));
  }
}

function $checkLifelineSendMessage(this$static, from, id_0){
  if (!from.createdOnStart) {
    if (!from.created || from.created.value_0 >= this$static.currentTick) {
      throw toJs(new SequenceDiagramException('The lifeline ' + id_0 + ' was not yet created, therefore it is not possible to send a message from it.'));
    }
  }
}

function $checkState(this$static){
  if (this$static.diagramRetrieved) {
    throw toJs(new IllegalStateException_0('The final diagram was returned and therefore no more changes are allowed.'));
  }
}

function $endAndBeginOperand(this$static, cfId){
  var activeCFIter, currentCombFrag;
  $checkState(this$static);
  if (this$static.activeCombinedFragmentStack.size_0 == 0) {
    throw toJs(new SequenceDiagramException('Error a combined fragment was closed, but no open one exists.'));
  }
  currentCombFrag = null;
  if (cfId == null) {
    currentCombFrag = castTo($peek_0(this$static.activeCombinedFragmentStack), 168);
  }
   else {
    activeCFIter = $listIterator(this$static.activeCombinedFragmentStack, 0);
    while (activeCFIter.currentNode != activeCFIter.this$01.tail) {
      currentCombFrag = castTo($next_5(activeCFIter), 168);
      if ($equals_6(cfId, currentCombFrag.id_0)) {
        break;
      }
      currentCombFrag = null;
    }
  }
  if (!currentCombFrag) {
    throw toJs(new SequenceDiagramException("Error no combined fragment with id '" + cfId + "' was found."));
  }
   else {
    $addOperand(currentCombFrag.combFrag, currentCombFrag.activeOperand.startTick, this$static.currentTick);
    currentCombFrag.activeOperand = new SequenceDiagramBuilder$ActiveOperand(this$static.currentTick);
  }
}

function $endCombinedFragment(this$static, cfId){
  var activeCFIter, currentCombFrag;
  $checkState(this$static);
  if (this$static.activeCombinedFragmentStack.size_0 == 0) {
    throw toJs(new SequenceDiagramException('Error a combined fragment was closed, but no open one exists.'));
  }
  currentCombFrag = null;
  if (cfId == null) {
    currentCombFrag = castTo($pop(this$static.activeCombinedFragmentStack), 168);
  }
   else {
    activeCFIter = $listIterator(this$static.activeCombinedFragmentStack, 0);
    while (activeCFIter.currentNode != activeCFIter.this$01.tail) {
      currentCombFrag = castTo($next_5(activeCFIter), 168);
      if ($equals_6(cfId, currentCombFrag.id_0)) {
        $remove_20(activeCFIter);
        break;
      }
      currentCombFrag = null;
    }
  }
  if (!currentCombFrag) {
    throw toJs(new SequenceDiagramException("Error no combined fragment with id '" + cfId + "' was found."));
  }
   else {
    $addOperand(currentCombFrag.combFrag, currentCombFrag.activeOperand.startTick, this$static.currentTick);
    $addLifelineSpanningTickSpanningOccurrence(this$static.dia, currentCombFrag.combFrag);
  }
}

function $generateDiagram(this$static){
  var createdLaterWarning, e, e$iterator, foundOpenExecSpecs, ll, ll$iterator, openExecSpecs;
  if (this$static.diagramRetrieved) {
    return this$static.dia;
  }
   else {
    createdLaterWarning = false;
    for (ll$iterator = new AbstractList$IteratorImpl(new Arrays$ArrayList(this$static.dia.lifelines)); ll$iterator.i < ll$iterator.this$01_0.size_1();) {
      ll = (checkCriticalElement(ll$iterator.i < ll$iterator.this$01_0.size_1()) , castTo(ll$iterator.this$01_0.get_0(ll$iterator.last = ll$iterator.i++), 194));
      if (!ll.createdOnStart && !ll.created) {
        createdLaterWarning = true;
        ll.createdOnStart = true;
      }
    }
    createdLaterWarning && $add_15(this$static.warnings, "At least one lifeline was specified as created later, but didn't receive a message");
    foundOpenExecSpecs = false;
    do {
      openExecSpecs = false;
      for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this$static.currentLifelineState)).this$01); e$iterator.hasNext;) {
        e = $next_1(e$iterator);
        if (castTo(e.getValue_0(), 125).execSpecStartTickStack.size_0 > 0) {
          if (castTo(e.getValue_0(), 125).lastEndOfExecSpec < this$static.currentTick) {
            castTo(e.getValue_0(), 125).lastEndOfExecSpec = this$static.currentTick;
            $addExecutionSpecification(castTo(e.getKey(), 194), new ExecutionSpecification(castTo($pop(castTo(e.getValue_0(), 125).execSpecStartTickStack), 48).value_0, this$static.currentTick));
            openExecSpecs = openExecSpecs || castTo(e.getValue_0(), 125).execSpecStartTickStack.size_0 > 0;
            foundOpenExecSpecs = true;
          }
        }
      }
      openExecSpecs && ++this$static.currentTick;
    }
     while (openExecSpecs);
    foundOpenExecSpecs && $add_15(this$static.warnings, 'At least one executionspecification was not closed, any open executionspecification was closed at the end of the diagram.');
    $setLastTick(this$static.dia, $wnd.Math.max(this$static.currentTick, this$static.lastMessageReceiveTick));
    this$static.diagramRetrieved = true;
    return this$static.dia;
  }
}

function $getLifelineException(this$static, id_0){
  if (!$hasStringValue(this$static.ids, id_0)) {
    throw toJs(new SequenceDiagramException("No lifeline is associated with the id: '" + id_0 + "'"));
  }
  return castTo($getStringValue(this$static.ids, id_0), 194);
}

function $getLifelineIntervalException(this$static, id1, id2){
  var ll1, ll2, tmp;
  ll1 = $getLifelineException(this$static, id1);
  ll2 = $getLifelineException(this$static, id2);
  if (ll1.index_0 > ll2.index_0) {
    tmp = ll1;
    ll1 = ll2;
    ll2 = tmp;
  }
  return castTo(copyOfRange($getLifelinesArray(this$static.dia), ll1.index_0, ll2.index_0 + 1), 152);
}

function $getLifelineOccurrenceSpecException(this$static, lifelineId, localId){
  var llifeline, occurrenceSpec;
  llifeline = $getLifelineException(this$static, lifelineId);
  occurrenceSpec = castTo(castTo($get_0(this$static.lifelineLocalIds, llifeline), 82).get_1(localId), 391);
  if (!occurrenceSpec) {
    throw toJs(new SequenceDiagramException("No lifeline occurrence with the id '" + localId + "' could be found on lifeline '" + lifelineId + "'."));
  }
  return occurrenceSpec;
}

function $setOverrideDefaultIds(this$static, overrideDefaultIds){
  $checkState(this$static);
  if (this$static.dia.lifelines.length > 0) {
    throw toJs(new SequenceDiagramException('The override ids option must be specified before any lifeline is specified.'));
  }
   else {
    this$static.overrideDefaultIds = overrideDefaultIds;
  }
}

function $tick(this$static, tickCount){
  $checkState(this$static);
  if (tickCount < 1) {
    throw toJs(new IllegalArgumentException_0('The tickCount must be greater than 0.'));
  }
  this$static.currentTick += tickCount;
}

function SequenceDiagramBuilder(){
  $clinit_SequenceDiagramBuilder();
  this.overrideDefaultIds = false;
  this.ids = new HashMap;
  this.activeCombinedFragmentStack = new LinkedList;
  this.lifelineLocalIds = new HashMap;
  this.dia = new SequenceDiagram;
  this.currentLifelineState = new HashMap;
  this.warnings = new LinkedList;
  this.currentTick = 0;
  this.lastMessageReceiveTick = 0;
  this.diagramRetrieved = false;
}

defineClass(970, 1, {}, SequenceDiagramBuilder);
_.currentTick = 0;
_.diagramRetrieved = false;
_.lastMessageReceiveTick = 0;
_.overrideDefaultIds = false;
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramBuilder', 970);
function SequenceDiagramBuilder$ActiveCombinedFragment(combFrag, cfId){
  this.combFrag = combFrag;
  this.id_0 = cfId;
}

defineClass(168, 1, {168:1}, SequenceDiagramBuilder$ActiveCombinedFragment);
_.activeOperand = null;
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder$ActiveCombinedFragment_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramBuilder/ActiveCombinedFragment', 168);
function SequenceDiagramBuilder$ActiveOperand(startTick){
  this.startTick = startTick;
}

defineClass(364, 1, {}, SequenceDiagramBuilder$ActiveOperand);
_.startTick = 0;
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder$ActiveOperand_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramBuilder/ActiveOperand', 364);
function SequenceDiagramBuilder$LifelineState(){
  this.execSpecStartTickStack = new LinkedList;
}

defineClass(125, 1, {125:1}, SequenceDiagramBuilder$LifelineState);
_.coregionActive = false;
_.lastEndOfExecSpec = -1;
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramBuilder$LifelineState_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramBuilder/LifelineState', 125);
function SequenceDiagramCheckedException(message){
  Exception_1.call(this, message);
}

defineClass(220, 14, {220:1, 3:1, 14:1, 17:1}, SequenceDiagramCheckedException);
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramCheckedException_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramCheckedException', 220);
function SequenceDiagramException(message){
  RuntimeException_0.call(this, message);
}

function SequenceDiagramException_0(message, cause){
  RuntimeException_1.call(this, message, cause);
}

function SequenceDiagramException_1(cause){
  RuntimeException_2.call(this, cause);
}

defineClass(50, 11, $intern_11, SequenceDiagramException, SequenceDiagramException_0, SequenceDiagramException_1);
var Lcom_baselet_element_sequence_1aio_facet_SequenceDiagramException_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'SequenceDiagramException', 50);
function $getHeight(this$static, drawHandler, totalWidth){
  this$static.style_0 == 0 && (totalWidth -= 28);
  return this$static.style_0 == 1?getSplitStringHeight(this$static.lines, totalWidth, drawHandler) + 4:getSplitStringHeight(this$static.lines, totalWidth, drawHandler) + 10;
}

function StateInvariant(text_0, style){
  this.style_0 = style;
  style == 1?(this.lines = $split('{' + text_0 + '}', '\n', 0)):(this.lines = $split(text_0, '\n', 0));
}

defineClass(992, 1, $intern_49, StateInvariant);
_.draw_0 = function draw_7(drawHandler, topLeft, size_0){
  var height, interruptedLifeline, topY;
  height = $getHeight(this, drawHandler, $doubleValue_0(size_0.x_0));
  topY = $doubleValue_0(topLeft.y_0) + ($doubleValue_0(size_0.y_0) - height) / 2;
  interruptedLifeline = new Line1D(topY, topY + height);
  if (this.style_0 == 0) {
    $drawArc_0(drawHandler, $doubleValue_0(topLeft.x_0), topY, 40, height, 90, 180, true);
    $drawArc_0(drawHandler, $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) - 40, topY, 40, height, 270, 180, true);
    $drawLine(drawHandler, $doubleValue_0(topLeft.x_0) + 20, topY, $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) - 20, topY);
    $drawLine(drawHandler, $doubleValue_0(topLeft.x_0) + 20, topY + height, $doubleValue_0(topLeft.x_0) + $doubleValue_0(size_0.x_0) - 20, topY + height);
    drawText(drawHandler, this.lines, $doubleValue_0(topLeft.x_0) + 14, topY, $doubleValue_0(size_0.x_0) - 28, height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  }
   else 
    this.style_0 == 1 && drawText(drawHandler, this.lines, $doubleValue_0(topLeft.x_0), topY, $doubleValue_0(size_0.x_0), height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  return interruptedLifeline;
}
;
_.getAdditionalYHeight = function getAdditionalYHeight_1(drawHandler, size_0){
  return $getHeight(this, drawHandler, $doubleValue_0(size_0.x_0)) - $doubleValue_0(size_0.y_0);
}
;
_.getMinWidth = function getMinWidth_1(drawHandler){
  var minWidth;
  minWidth = $wnd.Math.max(50, getTextMinWidth_0(this.lines, drawHandler));
  return this.style_0 == 1?minWidth:minWidth + 28;
}
;
_.style_0 = 0;
var Lcom_baselet_element_sequence_1aio_facet_StateInvariant_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'StateInvariant', 992);
function TextOnLifeline(text_0){
  this.lines = $split(text_0, '\n', 0);
}

defineClass(996, 1, $intern_49, TextOnLifeline);
_.draw_0 = function draw_8(drawHandler, topLeft, size_0){
  var height, interruptedLifeline, topY;
  height = getSplitStringHeight(this.lines, $doubleValue_0(size_0.x_0), drawHandler);
  topY = $doubleValue_0(topLeft.y_0) + ($doubleValue_0(size_0.y_0) - height) / 2;
  interruptedLifeline = new Line1D(topY, topY + height);
  drawText(drawHandler, this.lines, $doubleValue_0(topLeft.x_0), topY, $doubleValue_0(size_0.x_0), height, ($clinit_AlignHorizontal() , CENTER), ($clinit_AlignVertical() , CENTER_0));
  return interruptedLifeline;
}
;
_.getAdditionalYHeight = function getAdditionalYHeight_2(drawHandler, size_0){
  return getSplitStringHeight(this.lines, $doubleValue_0(size_0.x_0), drawHandler) - $doubleValue_0(size_0.y_0);
}
;
_.getMinWidth = function getMinWidth_2(drawHandler){
  return $wnd.Math.max(50, getTextMinWidth_0(this.lines, drawHandler));
}
;
var Lcom_baselet_element_sequence_1aio_facet_TextOnLifeline_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'TextOnLifeline', 996);
function $calculateBottomPaddings(this$static, endMap){
  var cp, cp$iterator, cpIter, cpList, e, e$iterator, endLl, padding, startLl;
  for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(endMap)).this$01); e$iterator.hasNext;) {
    e = $next_1(e$iterator);
    while (!castTo(e.getValue_0(), 41).isEmpty()) {
      cpList = new LinkedList;
      $add_15(cpList, castTo(castTo(e.getValue_0(), 41).remove(0), 95));
      startLl = castTo($get_6(cpList, 0), 95).container.coveredLifelines[0].index_0;
      endLl = $getLastLifeline(castTo($get_6(cpList, 0), 95).container).index_0;
      cpIter = castTo(e.getValue_0(), 41).listIterator();
      while (cpIter.hasNext_0()) {
        cp = castTo(cpIter.next_1(), 95);
        if ($isIntersecting_0(startLl, endLl, cp.container)) {
          $addNode(cpList, cp, cpList.tail.prev, cpList.tail);
          cpIter.remove_3();
          startLl = $wnd.Math.min(startLl, cp.container.coveredLifelines[0].index_0);
          endLl = $wnd.Math.max(endLl, $getLastLifeline(cp.container).index_0);
        }
      }
      $clinit_Collections();
      $sort_0(cpList, new LifelineSpanningTickSpanningOccurrence$ContainerPadding$2);
      padding = 0;
      for (cp$iterator = $listIterator(cpList, 0); cp$iterator.currentNode != cp$iterator.this$01.tail;) {
        cp = castTo($next_5(cp$iterator), 95);
        $put(this$static.containerBottomPadding, cp.container, padding);
        padding += cp.bottomPadding;
      }
      this$static.bottomPadding[castTo(e.getKey(), 48).value_0] = $wnd.Math.max(this$static.bottomPadding[castTo(e.getKey(), 48).value_0], padding);
    }
  }
}

function $contains_2(low, high, value_0){
  return low <= value_0 && value_0 <= high;
}

function $getTickHeight_1(this$static, tick){
  return this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.defaultTickHeight + this$static.accumulativeAddiontalHeightOffsets[tick + 1] - this$static.bottomPadding[tick] - (this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.accumulativeAddiontalHeightOffsets[tick] + this$static.topPadding[tick]);
}

function $getVerticalCenter_1(this$static, tick){
  return (this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.accumulativeAddiontalHeightOffsets[tick] + this$static.topPadding[tick]) / 2 + (this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.defaultTickHeight + this$static.accumulativeAddiontalHeightOffsets[tick + 1] - this$static.bottomPadding[tick]) / 2;
}

function $getVerticalEnd_0(this$static, tick){
  return this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.defaultTickHeight + this$static.accumulativeAddiontalHeightOffsets[tick + 1] - this$static.bottomPadding[tick];
}

function $getVerticalEnd_1(this$static, container){
  var tick;
  tick = $getEndTick(container);
  return this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.defaultTickHeight + this$static.accumulativeAddiontalHeightOffsets[tick + 1] - $doubleValue_0(castToDouble($get_0(this$static.containerBottomPadding, container)));
}

function $getVerticalStart_1(this$static, tick){
  return this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.accumulativeAddiontalHeightOffsets[tick] + this$static.topPadding[tick];
}

function $getVerticalStart_2(this$static, container){
  var tick;
  tick = container.startTick;
  return this$static.startingTickTopY + tick * (this$static.defaultTickHeight + this$static.tickVerticalPadding) + this$static.accumulativeAddiontalHeightOffsets[tick];
}

function $isIntersecting_0(startLl, endLl, container){
  var isIntersecting;
  isIntersecting = $contains_2(startLl, endLl, container.coveredLifelines[0].index_0);
  isIntersecting = isIntersecting || $contains_2(startLl, endLl, container.coveredLifelines[container.coveredLifelines.length - 1].index_0);
  isIntersecting = isIntersecting || $contains_2(container.coveredLifelines[container.coveredLifelines.length - 1].index_0, container.coveredLifelines[container.coveredLifelines.length - 1].index_0, startLl);
  return isIntersecting;
}

function $processPaddings(this$static, addiontalHeights, allPaddings){
  var cp, cp$iterator, cp$iterator0, e, e$iterator, endMap, i, startMap, sum;
  endMap = new HashMap;
  startMap = new HashMap;
  for (cp$iterator0 = $listIterator(allPaddings, 0); cp$iterator0.currentNode != cp$iterator0.this$01.tail;) {
    cp = castTo($next_5(cp$iterator0), 95);
    $containsKey_0(startMap, valueOf_9(cp.container.startTick)) || $put(startMap, valueOf_9(cp.container.startTick), new LinkedList);
    castTo($get_0(startMap, valueOf_9(cp.container.startTick)), 41).add_0(cp);
    $containsKey_0(endMap, valueOf_9($getEndTick(cp.container))) || $put(endMap, valueOf_9($getEndTick(cp.container)), new LinkedList);
    castTo($get_0(endMap, valueOf_9($getEndTick(cp.container))), 41).add_0(cp);
  }
  for (e$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(startMap)).this$01); e$iterator.hasNext;) {
    e = $next_1(e$iterator);
    for (cp$iterator = castTo(e.getValue_0(), 41).iterator(); cp$iterator.hasNext_0();) {
      cp = castTo(cp$iterator.next_1(), 95);
      this$static.topPadding[castTo(e.getKey(), 48).value_0] = $wnd.Math.max(this$static.topPadding[castTo(e.getKey(), 48).value_0], cp.topPadding);
    }
  }
  $calculateBottomPaddings(this$static, endMap);
  sum = 0;
  for (i = 0; i < addiontalHeights.length; i++) {
    sum += addiontalHeights[i] + this$static.topPadding[i] + this$static.bottomPadding[i];
    this$static.accumulativeAddiontalHeightOffsets[i + 1] = sum;
  }
}

function VerticalDrawingInfoImpl(startingHeadTopY, startingHeadHeight, addiontalHeights, allPaddings){
  this.startingHeadTopY = startingHeadTopY;
  this.startingHeadHeight = startingHeadHeight;
  this.tickVerticalPadding = 6;
  this.defaultTickHeight = 20;
  this.topPadding = initUnidimensionalArray(D_classLit, $intern_50, 32, addiontalHeights.length + 1, 15, 1);
  this.bottomPadding = initUnidimensionalArray(D_classLit, $intern_50, 32, addiontalHeights.length + 1, 15, 1);
  this.containerBottomPadding = new HashMap_0(round_int(allPaddings.size_0 / 0.7));
  this.accumulativeAddiontalHeightOffsets = initUnidimensionalArray(D_classLit, $intern_50, 32, addiontalHeights.length + 1, 15, 1);
  $processPaddings(this, addiontalHeights, allPaddings);
  this.startingTickTopY = startingHeadTopY + startingHeadHeight + 6;
}

defineClass(976, 1, {}, VerticalDrawingInfoImpl);
_.defaultTickHeight = 0;
_.startingHeadHeight = 0;
_.startingHeadTopY = 0;
_.startingTickTopY = 0;
_.tickVerticalPadding = 0;
var Lcom_baselet_element_sequence_1aio_facet_VerticalDrawingInfoImpl_2_classLit = createForClass('com.baselet.element.sequence_aio.facet', 'VerticalDrawingInfoImpl', 976);
function $AdjustBuffSize_0(this$static){
  if (this$static.available == this$static.bufsize) {
    if (this$static.tokenBegin > $intern_30) {
      this$static.bufpos = 0;
      this$static.available = this$static.tokenBegin;
    }
     else 
      $ExpandBuff_0(this$static, false);
  }
   else 
    this$static.available > this$static.tokenBegin?(this$static.available = this$static.bufsize):this$static.tokenBegin - this$static.available < $intern_30?$ExpandBuff_0(this$static, true):(this$static.available = this$static.tokenBegin);
}

function $BeginToken_0(this$static){
  if (this$static.inBuf > 0) {
    --this$static.inBuf;
    ++this$static.bufpos == this$static.bufsize && (this$static.bufpos = 0);
    this$static.tokenBegin = this$static.bufpos;
    return this$static.buffer[this$static.bufpos];
  }
  this$static.tokenBegin = 0;
  this$static.bufpos = -1;
  return $readChar_0(this$static);
}

function $ExpandBuff_0(this$static, wrapAround){
  var newbufcolumn, newbuffer, newbufline, t;
  newbuffer = initUnidimensionalArray(C_classLit, $intern_23, 32, this$static.bufsize + $intern_30, 15, 1);
  newbufline = initUnidimensionalArray(I_classLit, $intern_20, 32, this$static.bufsize + $intern_30, 15, 1);
  newbufcolumn = initUnidimensionalArray(I_classLit, $intern_20, 32, this$static.bufsize + $intern_30, 15, 1);
  try {
    if (wrapAround) {
      arraycopy(this$static.buffer, this$static.tokenBegin, newbuffer, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.buffer, 0, newbuffer, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.buffer = newbuffer;
      arraycopy(this$static.bufline, this$static.tokenBegin, newbufline, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.bufline, 0, newbufline, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.bufline = newbufline;
      arraycopy(this$static.bufcolumn, this$static.tokenBegin, newbufcolumn, 0, this$static.bufsize - this$static.tokenBegin);
      arraycopy(this$static.bufcolumn, 0, newbufcolumn, this$static.bufsize - this$static.tokenBegin, this$static.bufpos);
      this$static.bufcolumn = newbufcolumn;
      this$static.bufpos += this$static.bufsize - this$static.tokenBegin;
    }
     else {
      arraycopy(this$static.buffer, this$static.tokenBegin, newbuffer, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.buffer = newbuffer;
      arraycopy(this$static.bufline, this$static.tokenBegin, newbufline, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.bufline = newbufline;
      arraycopy(this$static.bufcolumn, this$static.tokenBegin, newbufcolumn, 0, this$static.bufsize - this$static.tokenBegin);
      this$static.bufcolumn = newbufcolumn;
      this$static.bufpos -= this$static.tokenBegin;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 14)) {
      t = $e0;
      throw toJs(new RuntimeException_0(t.getMessage()));
    }
     else 
      throw toJs($e0);
  }
  this$static.available = this$static.bufsize += $intern_30;
  this$static.tokenBegin = 0;
}

function $FillBuff_0(this$static){
  var e, i;
  this$static.maxNextCharInd == $intern_22 && (this$static.maxNextCharInd = this$static.nextCharInd = 0);
  try {
    if ((i = $read_0(this$static.inputStream, this$static.nextCharBuf, this$static.maxNextCharInd, $intern_22 - this$static.maxNextCharInd)) == -1) {
      this$static.inputStream._string = null;
      throw toJs(new IOException);
    }
     else 
      this$static.maxNextCharInd += i;
    return;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      e = $e0;
      if (this$static.bufpos != 0) {
        --this$static.bufpos;
        this$static.inBuf += 0;
        (this$static.bufpos -= 0) < 0 && (this$static.bufpos += this$static.bufsize);
      }
       else {
        this$static.bufline[this$static.bufpos] = this$static.line_0;
        this$static.bufcolumn[this$static.bufpos] = this$static.column;
      }
      throw toJs(e);
    }
     else 
      throw toJs($e0);
  }
}

function $GetImage_0(this$static){
  return this$static.bufpos >= this$static.tokenBegin?valueOf_12(this$static.buffer, this$static.tokenBegin, this$static.bufpos - this$static.tokenBegin + 1):valueOf_12(this$static.buffer, this$static.tokenBegin, this$static.bufsize - this$static.tokenBegin) + valueOf_12(this$static.buffer, 0, this$static.bufpos + 1);
}

function $UpdateLineColumn_0(this$static, c){
  ++this$static.column;
  if (this$static.prevCharIsLF) {
    this$static.prevCharIsLF = false;
    this$static.line_0 += this$static.column = 1;
  }
   else if (this$static.prevCharIsCR) {
    this$static.prevCharIsCR = false;
    c == 10?(this$static.prevCharIsLF = true):(this$static.line_0 += this$static.column = 1);
  }
  switch (c) {
    case 13:
      this$static.prevCharIsCR = true;
      break;
    case 10:
      this$static.prevCharIsLF = true;
      break;
    case 9:
      --this$static.column;
      this$static.column += this$static.tabSize - this$static.column % this$static.tabSize;
  }
  this$static.bufline[this$static.bufpos] = this$static.line_0;
  this$static.bufcolumn[this$static.bufpos] = this$static.column;
}

function $backup_0(this$static, amount){
  this$static.inBuf += amount;
  (this$static.bufpos -= amount) < 0 && (this$static.bufpos += this$static.bufsize);
}

function $getBeginColumn_0(this$static){
  return this$static.bufcolumn[this$static.tokenBegin];
}

function $getBeginLine_0(this$static){
  return this$static.bufline[this$static.tokenBegin];
}

function $getEndColumn_0(this$static){
  return this$static.bufcolumn[this$static.bufpos];
}

function $getEndLine_0(this$static){
  return this$static.bufline[this$static.bufpos];
}

function $readChar_0(this$static){
  var backSlashCnt, c;
  if (this$static.inBuf > 0) {
    --this$static.inBuf;
    ++this$static.bufpos == this$static.bufsize && (this$static.bufpos = 0);
    return this$static.buffer[this$static.bufpos];
  }
  ++this$static.bufpos == this$static.available && $AdjustBuffSize_0(this$static);
  if ((this$static.buffer[this$static.bufpos] = c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) == 92) {
    $UpdateLineColumn_0(this$static, c);
    backSlashCnt = 1;
    for (;;) {
      ++this$static.bufpos == this$static.available && $AdjustBuffSize_0(this$static);
      try {
        if ((this$static.buffer[this$static.bufpos] = c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) != 92) {
          $UpdateLineColumn_0(this$static, c);
          if (c == 117 && (backSlashCnt & 1) == 1) {
            --this$static.bufpos < 0 && (this$static.bufpos = this$static.bufsize - 1);
            break;
          }
          this$static.inBuf += backSlashCnt;
          (this$static.bufpos -= backSlashCnt) < 0 && (this$static.bufpos += this$static.bufsize);
          return 92;
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 13)) {
          backSlashCnt > 1 && (this$static.inBuf += backSlashCnt - 1 , (this$static.bufpos -= backSlashCnt - 1) < 0 && (this$static.bufpos += this$static.bufsize));
          return 92;
        }
         else 
          throw toJs($e0);
      }
      $UpdateLineColumn_0(this$static, c);
      ++backSlashCnt;
    }
    try {
      while ((c = (++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) == 117)
        ++this$static.column;
      this$static.buffer[this$static.bufpos] = c = (hexval_0(c) << 12 | hexval_0((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) << 8 | hexval_0((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd])) << 4 | hexval_0((++this$static.nextCharInd >= this$static.maxNextCharInd && $FillBuff_0(this$static) , this$static.nextCharBuf[this$static.nextCharInd]))) & $intern_44;
      this$static.column += 4;
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 13)) {
        throw toJs(new RuntimeException_0('Invalid escape character at line ' + this$static.line_0 + ' column ' + this$static.column + '.'));
      }
       else 
        throw toJs($e1);
    }
    if (backSlashCnt == 1)
      return c;
    else {
      this$static.inBuf += backSlashCnt - 1;
      (this$static.bufpos -= backSlashCnt - 1) < 0 && (this$static.bufpos += this$static.bufsize);
      return 92;
    }
  }
   else {
    $UpdateLineColumn_0(this$static, c);
    return c;
  }
}

function JavaCharStream_0(dstream){
  this.inputStream = dstream;
  this.line_0 = 1;
  this.column = 0;
  this.available = this.bufsize = $intern_22;
  this.buffer = initUnidimensionalArray(C_classLit, $intern_23, 32, $intern_22, 15, 1);
  this.bufline = initUnidimensionalArray(I_classLit, $intern_20, 32, $intern_22, 15, 1);
  this.bufcolumn = initUnidimensionalArray(I_classLit, $intern_20, 32, $intern_22, 15, 1);
  this.nextCharBuf = initUnidimensionalArray(C_classLit, $intern_23, 32, $intern_22, 15, 1);
}

function hexval_0(c){
  switch (c) {
    case 48:
      return 0;
    case 49:
      return 1;
    case 50:
      return 2;
    case 51:
      return 3;
    case 52:
      return 4;
    case 53:
      return 5;
    case 54:
      return 6;
    case 55:
      return 7;
    case 56:
      return 8;
    case 57:
      return 9;
    case 97:
    case 65:
      return 10;
    case 98:
    case 66:
      return 11;
    case 99:
    case 67:
      return 12;
    case 100:
    case 68:
      return 13;
    case 101:
    case 69:
      return 14;
    case 102:
    case 70:
      return 15;
  }
  throw toJs(new IOException);
}

defineClass(372, 1, {}, JavaCharStream_0);
_.available = 0;
_.bufpos = -1;
_.bufsize = 0;
_.column = 0;
_.inBuf = 0;
_.line_0 = 1;
_.maxNextCharInd = 0;
_.nextCharInd = -1;
_.prevCharIsCR = false;
_.prevCharIsLF = false;
_.tabSize = 1;
_.tokenBegin = 0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_JavaCharStream_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'JavaCharStream', 372);
function ParseException_2(){
  Exception_0.call(this);
}

function ParseException_3(currentTokenVal, expectedTokenSequencesVal, tokenImageVal){
  Exception_1.call(this, initialise_0(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
}

function ParseException_4(message){
  Exception_1.call(this, message);
}

function add_escapes_0(str){
  var ch_0, i, number, retval, s;
  retval = new StringBuffer;
  for (i = 0; i < str.length; i++) {
    switch (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i)) {
      case 8:
        retval.string += '\\b';
        continue;
      case 9:
        retval.string += '\\t';
        continue;
      case 10:
        retval.string += '\\n';
        continue;
      case 12:
        retval.string += '\\f';
        continue;
      case 13:
        retval.string += '\\r';
        continue;
      case 34:
        retval.string += '\\"';
        continue;
      case 39:
        retval.string += "\\'";
        continue;
      case 92:
        retval.string += '\\\\';
        continue;
      default:if ((ch_0 = (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i))) < 32 || ch_0 > 126) {
          s = (number = ch_0 , '0000' + number.toString(16));
          $append_0(retval, '\\u' + $substring_0(s, s.length - 4, s.length));
        }
         else {
          retval.string += String.fromCharCode(ch_0);
        }

        continue;
    }
  }
  return retval.string;
}

function initialise_0(currentToken, expectedTokenSequences, tokenImage){
  var entry, entryIterator, escapedTokenText, expected, i, i0, j, maxSize, numExpectedTokens, option, option$iterator, sb, sortedOptions, tok, tokenText;
  sb = new StringBuilder;
  expected = new StringBuffer;
  maxSize = 0;
  sortedOptions = new TreeSet;
  for (i0 = 0; i0 < expectedTokenSequences.length; i0++) {
    maxSize < expectedTokenSequences[i0].length && (maxSize = expectedTokenSequences[i0].length);
    for (j = 0; j < expectedTokenSequences[i0].length; j++) {
      $add_18(sortedOptions, tokenImage[expectedTokenSequences[i0][j]]);
    }
  }
  for (option$iterator = (entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(sortedOptions.map_0)).map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator)); $hasNext(option$iterator.val$entryIterator2.iter);) {
    option = (entry = $next_6(option$iterator.val$entryIterator2) , castToString(entry.getKey()));
    $append_0($append_0((expected.string += '    ' , expected), option), EOL_0);
  }
  sb.string += 'Encountered unexpected token:';
  tok = currentToken.next_0;
  for (i = 0; i < maxSize; i++) {
    tokenText = tok.image;
    escapedTokenText = add_escapes_0(tokenText);
    i != 0 && (sb.string += ' ' , sb);
    if (tok.kind == 0) {
      sb.string += '' + tokenImage[0];
      break;
    }
    sb.string += ' "';
    sb.string += '' + escapedTokenText;
    sb.string += '"';
    $append_5(sb, ' ' + tokenImage[tok.kind]);
    tok = tok.next_0;
  }
  $append_5($append_5($append_5(sb, EOL_0), '    '), 'at line ' + currentToken.next_0.beginLine + ', column ' + currentToken.next_0.beginColumn);
  $append_5((sb.string += '.' , sb), EOL_0);
  if (expectedTokenSequences.length == 0)
  ;
  else {
    numExpectedTokens = expectedTokenSequences.length;
    $append_5($append_5(sb, EOL_0), 'Was expecting' + (numExpectedTokens == 1?':':' one of:') + EOL_0 + EOL_0);
    $append_5(sb, expected.string);
  }
  return sb.string;
}

defineClass(55, 14, {55:1, 3:1, 14:1, 17:1}, ParseException_2, ParseException_3, ParseException_4);
var EOL_0 = '\n';
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_ParseException_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'ParseException', 55);
function $clinit_SequenceAllInOneParserConstants(){
  $clinit_SequenceAllInOneParserConstants = emptyMethod;
  tokenImage_1 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['<EOF>', '" "', '"\\t"', '"\\n"', '"\\r\\n"', '"\\r"', '"overrideIds="', '"autoTick="', '"true"', '"false"', '"title="', '"desc="', '"obj="', '<DIAGRAM_DEFINITION_TEXT>', '<LL_DEF_NEW_LINE>', '"|"', '"ACTOR"', '"ACTIVE"', '"CREATED_LATER"', '"EXECUTION"', '<LIFELINE_TITLE>', '":"', '","', '"{"', '"}"', '";"', '"-"', '"."', '".."', '"="', '"<"', '"<<<"', '">"', '">>>"', '"+"', '"lost"', '"found"', '"gate"', '"coregionStart="', '"coregionEnd="', '"invariant="', '"stateInvariant="', '"on="', '"off="', '"destroy="', '"ref="', '"continuation="', '"text="', '"tick="', '"combinedFragment="', '"constraint="', '<UNSIGNED_INT_CONSTANT>', '<DEFAULT_NEW_LINE>', '<LIFELINE_ID>', '<TEXT_UNTIL_NEXT_COMMAND>', '<COMBINED_FRAGMENT_OPERATOR>', '<token of kind 56>', '<LAST_LINE_COMMENT>']);
}

var tokenImage_1;
function $clinit_SequenceAllInOneParser(){
  $clinit_SequenceAllInOneParser = emptyMethod;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser_2_classLit) , Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser_2_classLit.typeName));
  jj_la1_0_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [7360, 7360, 0, 8192, 192, $intern_38, 0, $intern_51, $intern_51, $intern_52, $intern_53, $intern_52, 0, $intern_52, 0, 0, 0, $intern_33, $intern_33, $intern_52, 0, $intern_36, 0, $intern_35, $intern_54, 0, -1073741824, -872415232, $intern_34, 0, 0, $intern_35, 0, $intern_35, $intern_40, 0, 0, $intern_55, $intern_55, 0, $intern_54, 0, $intern_54, $intern_54, $intern_55, 768]);
  jj_la1_1_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [0, 0, $intern_53, 0, 0, 0, $intern_54, 0, 0, 3407864, 0, 3407864, $intern_56, 2293752, $intern_54, $intern_54, $intern_54, 0, 0, $intern_57, 2097208, 0, 2097208, 4, 0, 3, 0, 0, 0, 4, $intern_56, 0, $intern_56, 4, 1, 192, 3072, $intern_54, 0, 768, 0, $intern_38, 0, 0, 0, 0]);
}

function $CombinedFragment(this$static, diagram){
  var id_0, interval, operator;
  interval = new SequenceAllInOneParser$LifelineInterval;
  id_0 = null;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 49:
      {
        $jj_consume_token_0(this$static, 49);
        $jj_consume_token_0(this$static, 55);
        operator = backslashReplace($substring_0(this$static.token.image, 0, this$static.token.image.length - 1), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['\\n', '\n', '\\;', ';', '\\~', '~']));
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 53:
            {
              id_0 = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
              switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
                case 53:
                  {
                    interval = $LifelineInterval(this$static);
                    break;
                  }

                default:this$static.jj_la1[15] = this$static.jj_gen;
              }
              break;
            }

          default:this$static.jj_la1[16] = this$static.jj_gen;
        }
        $beginCombinedFragment(diagram, interval.startId, interval.endId, id_0, operator);
        break;
      }

    case 26:
      {
        $jj_consume_token_0(this$static, 26);
        $jj_consume_token_0(this$static, 26);
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 29:
            {
              $jj_consume_token_0(this$static, 29);
              id_0 = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
              break;
            }

          default:this$static.jj_la1[17] = this$static.jj_gen;
        }
        $endCombinedFragment(diagram, id_0);
        break;
      }

    case 28:
      {
        $jj_consume_token_0(this$static, 28);
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 29:
            {
              $jj_consume_token_0(this$static, 29);
              id_0 = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
              break;
            }

          default:this$static.jj_la1[18] = this$static.jj_gen;
        }
        $endAndBeginOperand(diagram, id_0);
        break;
      }

    default:this$static.jj_la1[19] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
}

function $Continuation(this$static, diagram){
  var interval, text_0;
  text_0 = '';
  $jj_consume_token_0(this$static, 46);
  interval = $LifelineInterval(this$static);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 21:
      {
        text_0 = $TextUntilNewLine(this$static);
        break;
      }

    default:this$static.jj_la1[43] = this$static.jj_gen;
  }
  $addContinuation(diagram, interval.startId, interval.endId, text_0);
}

function $Coregion(this$static, diagram){
  var lifelineId, start_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 38:
      {
        $jj_consume_token_0(this$static, 38);
        start_0 = true;
        break;
      }

    case 39:
      {
        $jj_consume_token_0(this$static, 39);
        start_0 = false;
        break;
      }

    default:this$static.jj_la1[35] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  $addCoregion(diagram, lifelineId, start_0);
}

function $DiagramTitle(this$static){
  var text_0;
  text_0 = '';
  $jj_consume_token_0(this$static, 10);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 13:
      {
        $jj_consume_token_0(this$static, 13);
        text_0 = backslashReplace(this$static.token.image, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['\\n', '\n']));
        break;
      }

    default:this$static.jj_la1[3] = this$static.jj_gen;
  }
  return text_0;
}

function $ExecutionSpecification(this$static, diagram){
  var lifelineId, on;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 42:
      {
        $jj_consume_token_0(this$static, 42);
        on = true;
        break;
      }

    case 43:
      {
        $jj_consume_token_0(this$static, 43);
        on = false;
        break;
      }

    default:this$static.jj_la1[36] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  $changeExecutionSpecification(diagram, lifelineId, on);
  label_8: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 22:
      case 53:
        {
          break;
        }

      default:this$static.jj_la1[37] = this$static.jj_gen;
        break label_8;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 22:
        {
          $jj_consume_token_0(this$static, 22);
          break;
        }

      default:this$static.jj_la1[38] = this$static.jj_gen;
    }
    lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
    $changeExecutionSpecification(diagram, lifelineId, on);
  }
}

function $GeneralOrdering(this$static, diagram){
  var leftEarlier, leftLifelineId, leftLifelineLocalId, rightLifelineId, rightLifelineLocalId;
  leftLifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  $jj_consume_token_0(this$static, 27);
  leftLifelineLocalId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 32:
      {
        $jj_consume_token_0(this$static, 32);
        leftEarlier = true;
        break;
      }

    case 30:
      {
        $jj_consume_token_0(this$static, 30);
        leftEarlier = false;
        break;
      }

    default:this$static.jj_la1[34] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  rightLifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  $jj_consume_token_0(this$static, 27);
  rightLifelineLocalId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  leftEarlier?($checkState(diagram) , $addLifelineSpanningTickSpanningOccurrence(diagram.dia, new GeneralOrdering($getLifelineOccurrenceSpecException(diagram, leftLifelineId, leftLifelineLocalId), $getLifelineOccurrenceSpecException(diagram, rightLifelineId, rightLifelineLocalId), $getLifelineIntervalException(diagram, leftLifelineId, rightLifelineId)))):($checkState(diagram) , $addLifelineSpanningTickSpanningOccurrence(diagram.dia, new GeneralOrdering($getLifelineOccurrenceSpecException(diagram, rightLifelineId, rightLifelineLocalId), $getLifelineOccurrenceSpecException(diagram, leftLifelineId, leftLifelineLocalId), $getLifelineIntervalException(diagram, rightLifelineId, leftLifelineId))));
}

function $InteractionUse(this$static, diagram){
  var interval, text_0;
  text_0 = '';
  $jj_consume_token_0(this$static, 45);
  interval = $LifelineInterval(this$static);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 21:
      {
        text_0 = $TextUntilNewLine(this$static);
        break;
      }

    default:this$static.jj_la1[42] = this$static.jj_gen;
  }
  $addInteractionUse(diagram, interval.startId, interval.endId, text_0);
}

function $LifelineDef(this$static, diagram){
  var createdOnStart, execSpecFromStart, headType, id_0, name_0;
  id_0 = null;
  createdOnStart = true;
  headType = ($clinit_Lifeline$LifelineHeadType() , STANDARD);
  execSpecFromStart = false;
  name_0 = ($jj_consume_token_0(this$static, 20) , backslashReplace($substring_0(this$static.token.image, 0, this$static.token.image.length - 1), stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['\\n', '\n', '\\~', '~', '\\|', '|'])));
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 53:
      {
        id_0 = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
        break;
      }

    default:this$static.jj_la1[6] = this$static.jj_gen;
  }
  label_3: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
        {
          break;
        }

      default:this$static.jj_la1[7] = this$static.jj_gen;
        break label_3;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 16:
        {
          $jj_consume_token_0(this$static, 16);
          headType = ACTOR;
          break;
        }

      case 17:
        {
          $jj_consume_token_0(this$static, 17);
          headType = ACTIVE_CLASS;
          break;
        }

      case 18:
        {
          $jj_consume_token_0(this$static, 18);
          createdOnStart = false;
          break;
        }

      case 19:
        {
          $jj_consume_token_0(this$static, 19);
          execSpecFromStart = true;
          break;
        }

      default:this$static.jj_la1[8] = this$static.jj_gen;
        $jj_consume_token_0(this$static, -1);
        throw toJs(new ParseException_2);
    }
  }
  if ($equals_6('lost', id_0) || $equals_6('found', id_0)) {
    throw toJs(new SequenceDiagramException("'lost' and 'found' are keywords and can not be used as lifeline identifiers."));
  }
  $addLiveline_0(diagram, name_0, id_0, headType, createdOnStart, execSpecFromStart);
}

function $LifelineDefinitions(this$static, diagram){
  $jj_consume_token_0(this$static, 12);
  $LifelineDef(this$static, diagram);
  label_2: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 15:
        {
          break;
        }

      default:this$static.jj_la1[5] = this$static.jj_gen;
        break label_2;
    }
    $jj_consume_token_0(this$static, 15);
    $LifelineDef(this$static, diagram);
  }
  $jj_consume_token_0(this$static, 14);
}

function $LifelineInterval(this$static){
  var interval;
  interval = new SequenceAllInOneParser$LifelineInterval;
  interval.startId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 22:
      {
        $jj_consume_token_0(this$static, 22);
        break;
      }

    default:this$static.jj_la1[44] = this$static.jj_gen;
  }
  interval.endId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  return interval;
}

function $Message(this$static, diagram){
  var duration, foundCount, gateCount, leftLifelineId, leftLifelineLocalId, lostCount, messageArrowInfo, msgText, receive, receiveLocalId, rightLifelineId, rightLifelineLocalId, send, sendLocalId;
  leftLifelineLocalId = null;
  rightLifelineLocalId = null;
  msgText = '';
  lostCount = 0;
  foundCount = 0;
  gateCount = 0;
  duration = 0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 53:
      {
        leftLifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
        if ($jj_2_4(this$static)) {
          $jj_consume_token_0(this$static, 27);
          leftLifelineLocalId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
        }
        break;
      }

    case 35:
      {
        $jj_consume_token_0(this$static, 35);
        leftLifelineId = 'lost';
        ++lostCount;
        break;
      }

    case 36:
      {
        $jj_consume_token_0(this$static, 36);
        leftLifelineId = 'found';
        ++foundCount;
        break;
      }

    case 37:
      {
        $jj_consume_token_0(this$static, 37);
        leftLifelineId = 'gate';
        ++gateCount;
        break;
      }

    default:this$static.jj_la1[20] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  messageArrowInfo = $MessageArrow(this$static);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 53:
      {
        rightLifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 27:
            {
              $jj_consume_token_0(this$static, 27);
              rightLifelineLocalId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
              break;
            }

          default:this$static.jj_la1[21] = this$static.jj_gen;
        }
        break;
      }

    case 35:
      {
        $jj_consume_token_0(this$static, 35);
        rightLifelineId = 'lost';
        ++lostCount;
        break;
      }

    case 36:
      {
        $jj_consume_token_0(this$static, 36);
        rightLifelineId = 'found';
        ++foundCount;
        break;
      }

    case 37:
      {
        $jj_consume_token_0(this$static, 37);
        rightLifelineId = 'gate';
        ++gateCount;
        break;
      }

    default:this$static.jj_la1[22] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 26:
    case 34:
      {
        duration = $MessageDuration(this$static);
        break;
      }

    default:this$static.jj_la1[23] = this$static.jj_gen;
  }
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 21:
      {
        msgText = $TextUntilNewLine(this$static);
        break;
      }

    default:this$static.jj_la1[24] = this$static.jj_gen;
  }
  if (lostCount + foundCount + gateCount > 1) {
    throw toJs(new SequenceDiagramException("Error: 'lost', 'found' and 'gate' can only occur once per message."));
  }
  if (messageArrowInfo.fromLeftToRight) {
    send = leftLifelineId;
    receive = rightLifelineId;
    sendLocalId = leftLifelineLocalId;
    receiveLocalId = rightLifelineLocalId;
  }
   else {
    send = rightLifelineId;
    receive = leftLifelineId;
    sendLocalId = rightLifelineLocalId;
    receiveLocalId = leftLifelineLocalId;
  }
  if (gateCount > 0) {
    if (duration != 0) {
      throw toJs(new SequenceDiagramException('Error: a messages with a gate can only have a duration of 0, but the duration was ' + duration + '.'));
    }
    $equals_6(send, 'gate')?$addSendGateMessage(diagram, receive, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, receiveLocalId):$addReceiveGateMessage(diagram, send, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId);
  }
   else if ($equals_6(send, 'lost')) {
    throw toJs(new SequenceDiagramException("Error: 'lost' can only be on the receiving end of a message."));
  }
   else if ($equals_6(send, 'found')) {
    if (duration != 0) {
      throw toJs(new SequenceDiagramException("Error: 'lost' and 'found' messages can only have a duration of 0, but the duration was " + duration + '.'));
    }
    $addFoundMessage(diagram, receive, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, receiveLocalId);
  }
   else {
    if ($equals_6(receive, 'lost')) {
      if (duration != 0) {
        throw toJs(new SequenceDiagramException("Error: 'lost' and 'found' messages can only have a duration of 0, but the duration was " + duration + '.'));
      }
      $addLostMessage(diagram, send, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId);
    }
     else if ($equals_6(receive, 'found')) {
      throw toJs(new SequenceDiagramException("Error: 'found' can only be on the sending end of a message."));
    }
     else {
      $addMessage(diagram, send, receive, duration, msgText, messageArrowInfo.lineType, messageArrowInfo.arrowType, sendLocalId, receiveLocalId);
    }
  }
}

function $MessageArrow(this$static){
  var messageArrowInfo;
  messageArrowInfo = new SequenceAllInOneParser$MessageArrowInfo;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 26:
    case 27:
      {
        messageArrowInfo.lineType = $MessageArrowLineType(this$static);
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 32:
            {
              $jj_consume_token_0(this$static, 32);
              messageArrowInfo.arrowType = ($clinit_Message$ArrowType() , OPEN);
              break;
            }

          case 33:
            {
              $jj_consume_token_0(this$static, 33);
              messageArrowInfo.arrowType = ($clinit_Message$ArrowType() , FILLED);
              break;
            }

          default:this$static.jj_la1[25] = this$static.jj_gen;
            $jj_consume_token_0(this$static, -1);
            throw toJs(new ParseException_2);
        }
        messageArrowInfo.fromLeftToRight = true;
        break;
      }

    case 30:
    case 31:
      {
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 30:
            {
              $jj_consume_token_0(this$static, 30);
              messageArrowInfo.arrowType = ($clinit_Message$ArrowType() , OPEN);
              break;
            }

          case 31:
            {
              $jj_consume_token_0(this$static, 31);
              messageArrowInfo.arrowType = ($clinit_Message$ArrowType() , FILLED);
              break;
            }

          default:this$static.jj_la1[26] = this$static.jj_gen;
            $jj_consume_token_0(this$static, -1);
            throw toJs(new ParseException_2);
        }
        messageArrowInfo.lineType = $MessageArrowLineType(this$static);
        messageArrowInfo.fromLeftToRight = false;
        break;
      }

    default:this$static.jj_la1[27] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  return messageArrowInfo;
}

function $MessageArrowLineType(this$static){
  var lineType;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 26:
      {
        $jj_consume_token_0(this$static, 26);
        lineType = ($clinit_LineType() , SOLID);
        break;
      }

    case 27:
      {
        $jj_consume_token_0(this$static, 27);
        lineType = ($clinit_LineType() , DASHED);
        break;
      }

    default:this$static.jj_la1[28] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  return lineType;
}

function $MessageDuration(this$static){
  var duration;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 34:
      {
        $jj_consume_token_0(this$static, 34);
        duration = 1;
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 51:
            {
              duration = $unsignedIntConstant(this$static);
              break;
            }

          default:this$static.jj_la1[30] = this$static.jj_gen;
            label_6: while (true) {
              switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
                case 34:
                  {
                    break;
                  }

                default:this$static.jj_la1[29] = this$static.jj_gen;
                  break label_6;
              }
              $jj_consume_token_0(this$static, 34);
              ++duration;
            }

        }
        break;
      }

    case 26:
      {
        $jj_consume_token_0(this$static, 26);
        duration = -1;
        switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
          case 51:
            {
              duration = $unsignedIntConstant(this$static);
              duration = -duration;
              break;
            }

          default:this$static.jj_la1[32] = this$static.jj_gen;
            label_7: while (true) {
              switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
                case 26:
                  {
                    break;
                  }

                default:this$static.jj_la1[31] = this$static.jj_gen;
                  break label_7;
              }
              $jj_consume_token_0(this$static, 26);
              --duration;
            }

        }
        break;
      }

    default:this$static.jj_la1[33] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  return duration;
}

function $MessageOrGeneralOrderingOrText(this$static, diagram){
  if ($jj_2_2(this$static)) {
    $TextOnLifeline(this$static, diagram);
  }
   else if ($jj_2_3(this$static)) {
    $Message(this$static, diagram);
  }
   else {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 53:
        {
          $GeneralOrdering(this$static, diagram);
          break;
        }

      default:this$static.jj_la1[14] = this$static.jj_gen;
        $jj_consume_token_0(this$static, -1);
        throw toJs(new ParseException_2);
    }
  }
}

function $Option(this$static, diagram){
  var overrideIds;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 6:
      {
        $jj_consume_token_0(this$static, 6);
        overrideIds = $booleanConstant_0(this$static);
        $setOverrideDefaultIds(diagram, overrideIds);
        break;
      }

    case 7:
      {
        $jj_consume_token_0(this$static, 7);
        this$static.autoTick = $booleanConstant_0(this$static);
        break;
      }

    default:this$static.jj_la1[4] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
}

function $Sequence(this$static, diagram){
  label_4: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 26:
      case 28:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 52:
      case 53:
        {
          break;
        }

      default:this$static.jj_la1[9] = this$static.jj_gen;
        break label_4;
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 48:
        {
          $SequenceTick(this$static, diagram);
          $jj_consume_token_0(this$static, 52);
          break;
        }

      case 26:
      case 28:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 49:
      case 53:
        {
          $SequenceElement(this$static, diagram);
          label_5: while (true) {
            if ($jj_2_1(this$static))
            ;
            else {
              break label_5;
            }
            $jj_consume_token_0(this$static, 25);
            $SequenceElement(this$static, diagram);
          }
          switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
            case 25:
              {
                $jj_consume_token_0(this$static, 25);
                break;
              }

            default:this$static.jj_la1[10] = this$static.jj_gen;
          }
          $jj_consume_token_0(this$static, 52);
          this$static.autoTick && $tick(diagram, 1);
          break;
        }

      case 52:
        {
          $jj_consume_token_0(this$static, 52);
          break;
        }

      default:this$static.jj_la1[11] = this$static.jj_gen;
        $jj_consume_token_0(this$static, -1);
        throw toJs(new ParseException_2);
    }
  }
}

function $SequenceElement(this$static, diagram){
  var lifelineId, lifeline;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 35:
    case 36:
    case 37:
    case 47:
    case 53:
      {
        $MessageOrGeneralOrderingOrText(this$static, diagram);
        break;
      }

    case 38:
    case 39:
      {
        $Coregion(this$static, diagram);
        break;
      }

    case 44:
      {
        $jj_consume_token_0(this$static, 44);
        lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
        $checkState(diagram);
        lifeline = $getLifelineException(diagram, lifelineId);
        lifeline.destroyed?$add_15(diagram.warnings, "On lifeline '" + lifelineId + "': " + 'The lifeline was already destroyed.'):$setDestroyed(lifeline, valueOf_9(diagram.currentTick));
        break;
      }

    case 42:
    case 43:
      {
        $ExecutionSpecification(this$static, diagram);
        break;
      }

    case 40:
    case 41:
      {
        $StateInvariant(this$static, diagram);
        break;
      }

    case 45:
      {
        $InteractionUse(this$static, diagram);
        break;
      }

    case 46:
      {
        $Continuation(this$static, diagram);
        break;
      }

    case 26:
    case 28:
    case 49:
      {
        $CombinedFragment(this$static, diagram);
        break;
      }

    default:this$static.jj_la1[13] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
}

function $SequenceTick(this$static, diagram){
  var tickCount;
  tickCount = 1;
  $jj_consume_token_0(this$static, 48);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 51:
      {
        tickCount = $unsignedIntConstant(this$static);
        break;
      }

    default:this$static.jj_la1[12] = this$static.jj_gen;
  }
  $tick(diagram, tickCount);
}

function $StateInvariant(this$static, diagram){
  var lifelineId, stateStyle, text_0;
  text_0 = '';
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 40:
      {
        $jj_consume_token_0(this$static, 40);
        stateStyle = false;
        break;
      }

    case 41:
      {
        $jj_consume_token_0(this$static, 41);
        stateStyle = true;
        break;
      }

    default:this$static.jj_la1[39] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 21:
      {
        text_0 = $TextUntilNewLine(this$static);
        break;
      }

    default:this$static.jj_la1[40] = this$static.jj_gen;
  }
  $addLifelineOccurrence(diagram, lifelineId, new StateInvariant(text_0, stateStyle?0:1));
}

function $TextOnLifeline(this$static, diagram){
  var lifelineId, text_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 47:
      {
        $jj_consume_token_0(this$static, 47);
        break;
      }

    default:this$static.jj_la1[41] = this$static.jj_gen;
  }
  lifelineId = ($jj_consume_token_0(this$static, 53) , this$static.token.image);
  text_0 = $TextUntilNewLine(this$static);
  $addLifelineOccurrence(diagram, lifelineId, new TextOnLifeline(text_0));
}

function $TextUntilNewLine(this$static){
  $jj_consume_token_0(this$static, 21);
  $jj_consume_token_0(this$static, 54);
  return backslashReplace(this$static.token.image, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['\\n', '\n', '\\;', ';']));
}

function $booleanConstant_0(this$static){
  var value_0;
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 9:
      {
        $jj_consume_token_0(this$static, 9);
        value_0 = false;
        break;
      }

    case 8:
      {
        $jj_consume_token_0(this$static, 8);
        value_0 = true;
        break;
      }

    default:this$static.jj_la1[45] = this$static.jj_gen;
      $jj_consume_token_0(this$static, -1);
      throw toJs(new ParseException_2);
  }
  return value_0;
}

function $generateParseException_0(this$static){
  var exptokseq, i, i0, i1, j, la1tokens, lastArg;
  this$static.jj_expentries.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
  la1tokens = initUnidimensionalArray(Z_classLit, $intern_23, 32, 58, 16, 1);
  if (this$static.jj_kind >= 0) {
    la1tokens[this$static.jj_kind] = true;
    this$static.jj_kind = -1;
  }
  for (i0 = 0; i0 < 46; i0++) {
    if (this$static.jj_la1[i0] == this$static.jj_gen) {
      for (j = 0; j < 32; j++) {
        (jj_la1_0_0[i0] & 1 << j) != 0 && (la1tokens[j] = true);
        (jj_la1_1_0[i0] & 1 << j) != 0 && (la1tokens[32 + j] = true);
      }
    }
  }
  for (i1 = 0; i1 < 58; i1++) {
    if (la1tokens[i1]) {
      this$static.jj_expentry = initUnidimensionalArray(I_classLit, $intern_20, 32, 1, 15, 1);
      this$static.jj_expentry[0] = i1;
      $add_13(this$static.jj_expentries, this$static.jj_expentry);
    }
  }
  this$static.jj_endpos = 0;
  $jj_rescan_token(this$static);
  $jj_add_error_token(this$static, 0, 0);
  exptokseq = initUnidimensionalArray(I_classLit, $intern_3, 47, this$static.jj_expentries.array.length, 0, 2);
  for (i = 0; i < this$static.jj_expentries.array.length; i++) {
    exptokseq[i] = castTo($get_7(this$static.jj_expentries, i), 47);
  }
  return new ParseException_3(this$static.token, exptokseq, (lastArg = ($clinit_SequenceAllInOneParserConstants() , tokenImage_1) , !this$static.token_source?null:($clinit_SequenceAllInOneParserTokenManager() , lexStateNames_0)[this$static.token_source.curLexState] , lastArg));
}

function $jj_2_1(this$static){
  this$static.jj_la = 2;
  this$static.jj_lastpos = this$static.jj_scanpos = this$static.token;
  try {
    return !$jj_3_1(this$static);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 169)) {
      return true;
    }
     else 
      throw toJs($e0);
  }
   finally {
    $jj_save(this$static, 0, 2);
  }
}

function $jj_2_2(this$static){
  this$static.jj_la = 2;
  this$static.jj_lastpos = this$static.jj_scanpos = this$static.token;
  try {
    return !$jj_3_2(this$static);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 169)) {
      return true;
    }
     else 
      throw toJs($e0);
  }
   finally {
    $jj_save(this$static, 1, 2);
  }
}

function $jj_2_3(this$static){
  this$static.jj_la = 5;
  this$static.jj_lastpos = this$static.jj_scanpos = this$static.token;
  try {
    return !$jj_3_3(this$static);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 169)) {
      return true;
    }
     else 
      throw toJs($e0);
  }
   finally {
    $jj_save(this$static, 2, 5);
  }
}

function $jj_2_4(this$static){
  this$static.jj_la = 2;
  this$static.jj_lastpos = this$static.jj_scanpos = this$static.token;
  try {
    return !$jj_3_4(this$static);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 169)) {
      return true;
    }
     else 
      throw toJs($e0);
  }
   finally {
    $jj_save(this$static, 3, 2);
  }
}

function $jj_3R_10(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  $jj_scan_token(this$static, 47) && (this$static.jj_scanpos = xsp);
  if ($jj_3R_12(this$static))
    return true;
  if ($jj_3R_21(this$static))
    return true;
  return false;
}

function $jj_3R_11(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_22(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_23(this$static)) {
      this$static.jj_scanpos = xsp;
      if ($jj_3R_24(this$static)) {
        this$static.jj_scanpos = xsp;
        if ($jj_3R_25(this$static))
          return true;
      }
    }
  }
  if ($jj_3R_26(this$static))
    return true;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_27(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_28(this$static)) {
      this$static.jj_scanpos = xsp;
      if ($jj_3R_29(this$static)) {
        this$static.jj_scanpos = xsp;
        if ($jj_3R_30(this$static))
          return true;
      }
    }
  }
  xsp = this$static.jj_scanpos;
  $jj_3R_31(this$static) && (this$static.jj_scanpos = xsp);
  xsp = this$static.jj_scanpos;
  $jj_3R_32(this$static) && (this$static.jj_scanpos = xsp);
  return false;
}

function $jj_3R_12(this$static){
  if ($jj_scan_token(this$static, 53))
    return true;
  return false;
}

function $jj_3R_13(this$static){
  if ($jj_3R_33(this$static))
    return true;
  return false;
}

function $jj_3R_14(this$static){
  if ($jj_3R_34(this$static))
    return true;
  return false;
}

function $jj_3R_15(this$static){
  if ($jj_3R_35(this$static))
    return true;
  return false;
}

function $jj_3R_16(this$static){
  if ($jj_3R_36(this$static))
    return true;
  return false;
}

function $jj_3R_17(this$static){
  if ($jj_3R_37(this$static))
    return true;
  return false;
}

function $jj_3R_18(this$static){
  if ($jj_3R_38(this$static))
    return true;
  return false;
}

function $jj_3R_19(this$static){
  if ($jj_3R_39(this$static))
    return true;
  return false;
}

function $jj_3R_20(this$static){
  if ($jj_3R_40(this$static))
    return true;
  return false;
}

function $jj_3R_21(this$static){
  if ($jj_scan_token(this$static, 21))
    return true;
  return false;
}

function $jj_3R_22(this$static){
  var xsp;
  if ($jj_3R_12(this$static))
    return true;
  xsp = this$static.jj_scanpos;
  $jj_3_4(this$static) && (this$static.jj_scanpos = xsp);
  return false;
}

function $jj_3R_23(this$static){
  if ($jj_scan_token(this$static, 35))
    return true;
  return false;
}

function $jj_3R_24(this$static){
  if ($jj_scan_token(this$static, 36))
    return true;
  return false;
}

function $jj_3R_25(this$static){
  if ($jj_scan_token(this$static, 37))
    return true;
  return false;
}

function $jj_3R_26(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_41(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_42(this$static))
      return true;
  }
  return false;
}

function $jj_3R_27(this$static){
  var xsp;
  if ($jj_3R_12(this$static))
    return true;
  xsp = this$static.jj_scanpos;
  $jj_3R_43(this$static) && (this$static.jj_scanpos = xsp);
  return false;
}

function $jj_3R_28(this$static){
  if ($jj_scan_token(this$static, 35))
    return true;
  return false;
}

function $jj_3R_29(this$static){
  if ($jj_scan_token(this$static, 36))
    return true;
  return false;
}

function $jj_3R_30(this$static){
  if ($jj_scan_token(this$static, 37))
    return true;
  return false;
}

function $jj_3R_31(this$static){
  if ($jj_3R_44(this$static))
    return true;
  return false;
}

function $jj_3R_32(this$static){
  if ($jj_3R_21(this$static))
    return true;
  return false;
}

function $jj_3R_33(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3_2(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3_3(this$static)) {
      this$static.jj_scanpos = xsp;
      if ($jj_3R_45(this$static))
        return true;
    }
  }
  return false;
}

function $jj_3R_34(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_46(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_47(this$static))
      return true;
  }
  return false;
}

function $jj_3R_35(this$static){
  if ($jj_scan_token(this$static, 44))
    return true;
  return false;
}

function $jj_3R_36(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_48(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_49(this$static))
      return true;
  }
  return false;
}

function $jj_3R_37(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_50(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_51(this$static))
      return true;
  }
  return false;
}

function $jj_3R_38(this$static){
  if ($jj_scan_token(this$static, 45))
    return true;
  return false;
}

function $jj_3R_39(this$static){
  if ($jj_scan_token(this$static, 46))
    return true;
  return false;
}

function $jj_3R_40(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_52(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_53(this$static)) {
      this$static.jj_scanpos = xsp;
      if ($jj_3R_54(this$static))
        return true;
    }
  }
  return false;
}

function $jj_3R_41(this$static){
  var xsp;
  if ($jj_3R_55(this$static))
    return true;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_56(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_57(this$static))
      return true;
  }
  return false;
}

function $jj_3R_42(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_58(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_59(this$static))
      return true;
  }
  if ($jj_3R_55(this$static))
    return true;
  return false;
}

function $jj_3R_43(this$static){
  if ($jj_scan_token(this$static, 27))
    return true;
  return false;
}

function $jj_3R_44(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_60(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_61(this$static))
      return true;
  }
  return false;
}

function $jj_3R_45(this$static){
  if ($jj_3R_62(this$static))
    return true;
  return false;
}

function $jj_3R_46(this$static){
  if ($jj_scan_token(this$static, 38))
    return true;
  return false;
}

function $jj_3R_47(this$static){
  if ($jj_scan_token(this$static, 39))
    return true;
  return false;
}

function $jj_3R_48(this$static){
  if ($jj_scan_token(this$static, 42))
    return true;
  return false;
}

function $jj_3R_49(this$static){
  if ($jj_scan_token(this$static, 43))
    return true;
  return false;
}

function $jj_3R_50(this$static){
  if ($jj_scan_token(this$static, 40))
    return true;
  return false;
}

function $jj_3R_51(this$static){
  if ($jj_scan_token(this$static, 41))
    return true;
  return false;
}

function $jj_3R_52(this$static){
  if ($jj_scan_token(this$static, 49))
    return true;
  return false;
}

function $jj_3R_53(this$static){
  if ($jj_scan_token(this$static, 26))
    return true;
  return false;
}

function $jj_3R_54(this$static){
  if ($jj_scan_token(this$static, 28))
    return true;
  return false;
}

function $jj_3R_55(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_63(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_64(this$static))
      return true;
  }
  return false;
}

function $jj_3R_56(this$static){
  if ($jj_scan_token(this$static, 32))
    return true;
  return false;
}

function $jj_3R_57(this$static){
  if ($jj_scan_token(this$static, 33))
    return true;
  return false;
}

function $jj_3R_58(this$static){
  if ($jj_scan_token(this$static, 30))
    return true;
  return false;
}

function $jj_3R_59(this$static){
  if ($jj_scan_token(this$static, 31))
    return true;
  return false;
}

function $jj_3R_60(this$static){
  if ($jj_scan_token(this$static, 34))
    return true;
  return false;
}

function $jj_3R_61(this$static){
  if ($jj_scan_token(this$static, 26))
    return true;
  return false;
}

function $jj_3R_62(this$static){
  if ($jj_3R_12(this$static))
    return true;
  return false;
}

function $jj_3R_63(this$static){
  if ($jj_scan_token(this$static, 26))
    return true;
  return false;
}

function $jj_3R_64(this$static){
  if ($jj_scan_token(this$static, 27))
    return true;
  return false;
}

function $jj_3R_9(this$static){
  var xsp;
  xsp = this$static.jj_scanpos;
  if ($jj_3R_13(this$static)) {
    this$static.jj_scanpos = xsp;
    if ($jj_3R_14(this$static)) {
      this$static.jj_scanpos = xsp;
      if ($jj_3R_15(this$static)) {
        this$static.jj_scanpos = xsp;
        if ($jj_3R_16(this$static)) {
          this$static.jj_scanpos = xsp;
          if ($jj_3R_17(this$static)) {
            this$static.jj_scanpos = xsp;
            if ($jj_3R_18(this$static)) {
              this$static.jj_scanpos = xsp;
              if ($jj_3R_19(this$static)) {
                this$static.jj_scanpos = xsp;
                if ($jj_3R_20(this$static))
                  return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}

function $jj_3_1(this$static){
  if ($jj_scan_token(this$static, 25))
    return true;
  if ($jj_3R_9(this$static))
    return true;
  return false;
}

function $jj_3_2(this$static){
  if ($jj_3R_10(this$static))
    return true;
  return false;
}

function $jj_3_3(this$static){
  if ($jj_3R_11(this$static))
    return true;
  return false;
}

function $jj_3_4(this$static){
  if ($jj_scan_token(this$static, 27))
    return true;
  if ($jj_3R_12(this$static))
    return true;
  return false;
}

function $jj_add_error_token(this$static, kind, pos){
  var i, i0, isMatched, oldentry, oldentry$iterator;
  if (pos >= 100) {
    return;
  }
  if (pos == this$static.jj_endpos + 1) {
    this$static.jj_lasttokens[this$static.jj_endpos++] = kind;
  }
   else if (this$static.jj_endpos != 0) {
    this$static.jj_expentry = initUnidimensionalArray(I_classLit, $intern_20, 32, this$static.jj_endpos, 15, 1);
    for (i0 = 0; i0 < this$static.jj_endpos; i0++) {
      this$static.jj_expentry[i0] = this$static.jj_lasttokens[i0];
    }
    for (oldentry$iterator = new ArrayList$1(this$static.jj_expentries); oldentry$iterator.i < oldentry$iterator.this$01.array.length;) {
      oldentry = castTo($next_3(oldentry$iterator), 47);
      if (oldentry.length == this$static.jj_expentry.length) {
        isMatched = true;
        for (i = 0; i < this$static.jj_expentry.length; i++) {
          if (oldentry[i] !== this$static.jj_expentry[i]) {
            isMatched = false;
            break;
          }
        }
        if (isMatched) {
          $add_13(this$static.jj_expentries, this$static.jj_expentry);
          break;
        }
      }
    }
    pos != 0 && (this$static.jj_lasttokens[(this$static.jj_endpos = pos) - 1] = kind);
  }
}

function $jj_consume_token_0(this$static, kind){
  var c, i, oldToken;
  (oldToken = this$static.token).next_0?(this$static.token = this$static.token.next_0):(this$static.token = this$static.token.next_0 = $getNextToken_0(this$static.token_source));
  this$static.jj_ntk = -1;
  if (this$static.token.kind == kind) {
    ++this$static.jj_gen;
    if (++this$static.jj_gc > 100) {
      this$static.jj_gc = 0;
      for (i = 0; i < this$static.jj_2_rtns.length; i++) {
        c = this$static.jj_2_rtns[i];
        while (c) {
          c.gen < this$static.jj_gen && (c.first = null);
          c = c.next_0;
        }
      }
    }
    return this$static.token;
  }
  this$static.token = oldToken;
  this$static.jj_kind = kind;
  throw toJs($generateParseException_0(this$static));
}

function $jj_rescan_token(this$static){
  var i, p;
  this$static.jj_rescan = true;
  for (i = 0; i < 4; i++) {
    try {
      p = this$static.jj_2_rtns[i];
      do {
        if (p.gen > this$static.jj_gen) {
          this$static.jj_la = p.arg;
          this$static.jj_lastpos = this$static.jj_scanpos = p.first;
          switch (i) {
            case 0:
              $jj_3_1(this$static);
              break;
            case 1:
              $jj_3_2(this$static);
              break;
            case 2:
              $jj_3_3(this$static);
              break;
            case 3:
              $jj_3_4(this$static);
          }
        }
        p = p.next_0;
      }
       while (p);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 169))
        throw toJs($e0);
    }
  }
  this$static.jj_rescan = false;
}

function $jj_save(this$static, index_0, xla){
  var p;
  p = this$static.jj_2_rtns[index_0];
  while (p.gen > this$static.jj_gen) {
    if (!p.next_0) {
      p = p.next_0 = new SequenceAllInOneParser$JJCalls;
      break;
    }
    p = p.next_0;
  }
  p.gen = this$static.jj_gen + xla - this$static.jj_la;
  p.first = this$static.token;
  p.arg = xla;
}

function $jj_scan_token(this$static, kind){
  var i, tok;
  if (this$static.jj_scanpos == this$static.jj_lastpos) {
    --this$static.jj_la;
    !this$static.jj_scanpos.next_0?(this$static.jj_lastpos = this$static.jj_scanpos = this$static.jj_scanpos.next_0 = $getNextToken_0(this$static.token_source)):(this$static.jj_lastpos = this$static.jj_scanpos = this$static.jj_scanpos.next_0);
  }
   else {
    this$static.jj_scanpos = this$static.jj_scanpos.next_0;
  }
  if (this$static.jj_rescan) {
    i = 0;
    tok = this$static.token;
    while (!!tok && tok != this$static.jj_scanpos) {
      ++i;
      tok = tok.next_0;
    }
    !!tok && $jj_add_error_token(this$static, kind, i);
  }
  if (this$static.jj_scanpos.kind != kind)
    return true;
  if (this$static.jj_la == 0 && this$static.jj_scanpos == this$static.jj_lastpos)
    throw toJs(this$static.jj_ls);
  return false;
}

function $start_0(this$static){
  var descText, diagram, titleText;
  titleText = '';
  descText = '';
  diagram = new SequenceDiagramBuilder;
  this$static.autoTick = true;
  label_1: while (true) {
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 10:
        {
          titleText = $DiagramTitle(this$static);
          break;
        }

      case 11:
        {
          descText = ($jj_consume_token_0(this$static, 11) , $jj_consume_token_0(this$static, 13) , backslashReplace(this$static.token.image, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['\\n', '\n'])));
          break;
        }

      case 6:
      case 7:
        {
          $Option(this$static, diagram);
          $jj_consume_token_0(this$static, 52);
          break;
        }

      case 12:
        {
          $LifelineDefinitions(this$static, diagram);
          break;
        }

      default:this$static.jj_la1[0] = this$static.jj_gen;
        $jj_consume_token_0(this$static, -1);
        throw toJs(new ParseException_2);
    }
    switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
        {
          break;
        }

      default:this$static.jj_la1[1] = this$static.jj_gen;
        break label_1;
    }
  }
  $Sequence(this$static, diagram);
  switch (this$static.jj_ntk == -1?!(this$static.jj_nt = this$static.token.next_0)?(this$static.jj_ntk = (this$static.token.next_0 = $getNextToken_0(this$static.token_source)).kind):(this$static.jj_ntk = this$static.jj_nt.kind):this$static.jj_ntk) {
    case 57:
      {
        $jj_consume_token_0(this$static, 57);
        break;
      }

    default:this$static.jj_la1[2] = this$static.jj_gen;
  }
  $jj_consume_token_0(this$static, 0);
  $checkState(diagram);
  $setTitle(diagram.dia, titleText);
  $checkState(diagram);
  $setText(diagram.dia, descText);
  return diagram;
}

function $unsignedIntConstant(this$static){
  var e, value_0;
  $jj_consume_token_0(this$static, 51);
  try {
    value_0 = __parseAndValidateInt(this$static.token.image, 10);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 77)) {
      e = $e0;
      throw toJs(castTo($initCause(new ParseException_4("Error: The string '" + this$static.token.image + "' couldn't be parsed as integer. The most probable reason is that the number is too big."), e), 55));
    }
     else 
      throw toJs($e0);
  }
  return value_0;
}

function SequenceAllInOneParser(stream){
  var i, i0;
  this.jj_la1 = initUnidimensionalArray(I_classLit, $intern_20, 32, 46, 15, 1);
  this.jj_2_rtns = initUnidimensionalArray(Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser$JJCalls_2_classLit, $intern_6, 245, 4, 0, 1);
  this.jj_ls = new SequenceAllInOneParser$LookaheadSuccess;
  this.jj_expentries = new ArrayList;
  this.jj_lasttokens = initUnidimensionalArray(I_classLit, $intern_20, 32, 100, 15, 1);
  this.jj_input_stream = new JavaCharStream_0(stream);
  this.token_source = new SequenceAllInOneParserTokenManager(this.jj_input_stream);
  this.token = new Token_1;
  this.jj_ntk = -1;
  this.jj_gen = 0;
  for (i0 = 0; i0 < 46; i0++)
    this.jj_la1[i0] = -1;
  for (i = 0; i < this.jj_2_rtns.length; i++)
    this.jj_2_rtns[i] = new SequenceAllInOneParser$JJCalls;
}

function SequenceAllInOneParser_0(dsl){
  $clinit_SequenceAllInOneParser();
  SequenceAllInOneParser.call(this, new StringProvider_0(dsl));
}

function backslashReplace(input_0, matchReplacePairs){
  var firstIndex, foundIndex, j, lastIndex, strBuilder, tmp;
  if (matchReplacePairs.length % 2 == 1) {
    throw toJs(new IllegalArgumentException_0('matchReplacePairs must have an even number of elements.'));
  }
  strBuilder = new StringBuilder_0;
  firstIndex = 0;
  foundIndex = input_0.indexOf('\\\\', 0);
  while (firstIndex < input_0.length) {
    lastIndex = foundIndex == -1?input_0.length:foundIndex;
    tmp = input_0.substr(firstIndex, lastIndex - firstIndex);
    for (j = 0; j < matchReplacePairs.length - 1; j += 2) {
      tmp = $replace_0(tmp, matchReplacePairs[j], matchReplacePairs[j + 1]);
    }
    strBuilder.string += '' + tmp;
    foundIndex != -1 && (strBuilder.string += '\\' , strBuilder);
    firstIndex = lastIndex + 2;
    foundIndex = input_0.indexOf('\\\\', firstIndex);
  }
  return strBuilder.string;
}

defineClass(365, 1, {}, SequenceAllInOneParser_0);
_.autoTick = false;
_.jj_endpos = 0;
_.jj_gc = 0;
_.jj_gen = 0;
_.jj_kind = -1;
_.jj_la = 0;
_.jj_ntk = 0;
_.jj_rescan = false;
var jj_la1_0_0, jj_la1_1_0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParser', 365);
function SequenceAllInOneParser$JJCalls(){
}

defineClass(245, 1, {245:1}, SequenceAllInOneParser$JJCalls);
_.arg = 0;
_.gen = 0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser$JJCalls_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParser/JJCalls', 245);
function SequenceAllInOneParser$LifelineInterval(){
}

defineClass(366, 1, {}, SequenceAllInOneParser$LifelineInterval);
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser$LifelineInterval_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParser/LifelineInterval', 366);
function SequenceAllInOneParser$LookaheadSuccess(){
  RuntimeException.call(this);
}

defineClass(169, 11, {169:1, 3:1, 14:1, 11:1, 17:1}, SequenceAllInOneParser$LookaheadSuccess);
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser$LookaheadSuccess_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParser/LookaheadSuccess', 169);
function SequenceAllInOneParser$MessageArrowInfo(){
}

defineClass(971, 1, {}, SequenceAllInOneParser$MessageArrowInfo);
_.fromLeftToRight = false;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParser$MessageArrowInfo_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParser/MessageArrowInfo', 971);
function $clinit_SequenceAllInOneParserTokenManager(){
  $clinit_SequenceAllInOneParserTokenManager = emptyMethod;
  jjbitVec0_0 = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [-2, -1, -1, -1]);
  jjbitVec2_0 = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [0, 0, -1, -1]);
  jjnextStates_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [7, 9, 4, 6, 0, 1, 3, 5, 7, 3, 4, 6, 10, 12]);
  jjstrLiteralImages_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['', null, null, null, null, null, 'overrideIds=', 'autoTick=', 'true', 'false', 'title=', 'desc=', 'obj=', null, null, '|', 'ACTOR', 'ACTIVE', 'CREATED_LATER', 'EXECUTION', null, ':', ',', '{', '}', ';', '-', '.', '..', '=', '<', '<<<', '>', '>>>', '+', 'lost', 'found', 'gate', 'coregionStart=', 'coregionEnd=', 'invariant=', 'stateInvariant=', 'on=', 'off=', 'destroy=', 'ref=', 'continuation=', 'text=', 'tick=', 'combinedFragment=', 'constraint=', null, null, null, null, null, null, null]);
  lexStateNames_0 = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['CF_OPERATOR', 'DIAGRAM_SEQ_TEXT', 'LIFELINE_DEF', 'DIAGRAM_DEF_TEXT', 'DEFAULT']);
  jjnewLexState = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, [-1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 3, 3, 2, -1, 4, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 4, 4, -1, -1]);
  jjtoToken_0 = stampJavaTypeInfo(getClassLiteralForArray(J_classLit, 1), $intern_23, 32, 14, [{l:4194241, m:$intern_58, h:12287}]);
}

function $ReInitRounds_0(this$static){
  var i;
  this$static.jjround = -2147483647;
  for (i = 14; i-- > 0;)
    this$static.jjrounds[i] = $intern_12;
}

function $getNextToken_0(this$static){
  var EOFSeen, curPos, error_after, error_column, error_line, matchedToken;
  curPos = 0;
  EOFLoop: for (;;) {
    try {
      this$static.curChar = $BeginToken_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 14)) {
        this$static.jjmatchedKind = 0;
        this$static.jjmatchedPos = -1;
        matchedToken = $jjFillToken_0(this$static);
        return matchedToken;
      }
       else 
        throw toJs($e0);
    }
    switch (this$static.curLexState) {
      case 0:
        this$static.jjmatchedKind = $intern_0;
        this$static.jjmatchedPos = 0;
        curPos = $jjMoveStringLiteralDfa0_0_0(this$static);
        break;
      case 1:
        this$static.jjmatchedKind = $intern_0;
        this$static.jjmatchedPos = 0;
        curPos = $jjMoveStringLiteralDfa0_1(this$static);
        break;
      case 2:
        this$static.jjmatchedKind = $intern_0;
        this$static.jjmatchedPos = 0;
        curPos = $jjMoveStringLiteralDfa0_2(this$static);
        break;
      case 3:
        this$static.jjmatchedKind = $intern_0;
        this$static.jjmatchedPos = 0;
        curPos = $jjMoveStringLiteralDfa0_3(this$static);
        break;
      case 4:
        try {
          $backup_0(this$static.input_stream, 0);
          while (this$static.curChar <= 32 && neq(and_0(4294967808, shl_0(1, this$static.curChar)), 0))
            this$static.curChar = $BeginToken_0(this$static.input_stream);
        }
         catch ($e1) {
          $e1 = toJava($e1);
          if (instanceOf($e1, 13)) {
            continue EOFLoop;
          }
           else 
            throw toJs($e1);
        }

        this$static.jjmatchedKind = $intern_0;
        this$static.jjmatchedPos = 0;
        curPos = $jjMoveStringLiteralDfa0_4(this$static);
    }
    if (this$static.jjmatchedKind != $intern_0) {
      this$static.jjmatchedPos + 1 < curPos && $backup_0(this$static.input_stream, curPos - this$static.jjmatchedPos - 1);
      if (neq(and_0(jjtoToken_0[this$static.jjmatchedKind >> 6], shl_0(1, this$static.jjmatchedKind & 63)), 0)) {
        matchedToken = $jjFillToken_0(this$static);
        jjnewLexState[this$static.jjmatchedKind] != -1 && (this$static.curLexState = jjnewLexState[this$static.jjmatchedKind]);
        return matchedToken;
      }
       else {
        jjnewLexState[this$static.jjmatchedKind] != -1 && (this$static.curLexState = jjnewLexState[this$static.jjmatchedKind]);
        continue EOFLoop;
      }
    }
    error_line = $getEndLine_0(this$static.input_stream);
    error_column = $getEndColumn_0(this$static.input_stream);
    error_after = null;
    EOFSeen = false;
    try {
      $readChar_0(this$static.input_stream);
      $backup_0(this$static.input_stream, 1);
    }
     catch ($e2) {
      $e2 = toJava($e2);
      if (instanceOf($e2, 13)) {
        EOFSeen = true;
        error_after = curPos <= 1?'':$GetImage_0(this$static.input_stream);
        if (this$static.curChar == 10 || this$static.curChar == 13) {
          ++error_line;
          error_column = 0;
        }
         else 
          ++error_column;
      }
       else 
        throw toJs($e2);
    }
    if (!EOFSeen) {
      $backup_0(this$static.input_stream, 1);
      error_after = curPos <= 1?'':$GetImage_0(this$static.input_stream);
    }
    throw toJs(new TokenMgrException_2(EOFSeen, error_line, error_column, error_after, this$static.curChar));
  }
}

function $jjAddStates_0(this$static, start_0, end){
  do {
    this$static.jjstateSet[this$static.jjnewStateCnt++] = jjnextStates_0[start_0];
  }
   while (start_0++ != end);
}

function $jjCheckNAdd_0(this$static, state){
  if (this$static.jjrounds[state] != this$static.jjround) {
    this$static.jjstateSet[this$static.jjnewStateCnt++] = state;
    this$static.jjrounds[state] = this$static.jjround;
  }
}

function $jjCheckNAddStates_0(this$static, start_0, end){
  do {
    $jjCheckNAdd_0(this$static, jjnextStates_0[start_0]);
  }
   while (start_0++ != end);
}

function $jjFillToken_0(this$static){
  var beginColumn, beginLine, curTokenImage, im, t;
  im = jjstrLiteralImages_0[this$static.jjmatchedKind];
  curTokenImage = im == null?$GetImage_0(this$static.input_stream):im;
  beginLine = $getBeginLine_0(this$static.input_stream);
  beginColumn = $getBeginColumn_0(this$static.input_stream);
  $getEndLine_0(this$static.input_stream);
  $getEndColumn_0(this$static.input_stream);
  t = new Token_2(this$static.jjmatchedKind, curTokenImage);
  t.beginLine = beginLine;
  t.beginColumn = beginColumn;
  return t;
}

function $jjMoveNfa_0_0(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 9;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds_0(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 9:
          case 0:
            neq(and_0($intern_59, l), 0) && $jjCheckNAddStates_0(this$static, 4, 6);
            break;
          case 4:
            neq(and_0($intern_59, l), 0) && $jjCheckNAddStates_0(this$static, 4, 6);
            this$static.curChar == 47 && $jjAddStates_0(this$static, 7, 8);
            break;
          case 2:
            this$static.curChar == 59 && $jjCheckNAddStates_0(this$static, 4, 6);
            break;
          case 5:
            if (this$static.curChar != 47)
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 6);
            }

            break;
          case 6:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 6);
            }

            break;
          case 7:
            if (this$static.curChar != 47)
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 8:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 9:
            neq(and_0($intern_60, l), 0)?$jjCheckNAddStates_0(this$static, 4, 6):this$static.curChar == 126?kind > 55 && (kind = 55):this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 4:
            neq(and_0($intern_60, l), 0)?$jjCheckNAddStates_0(this$static, 4, 6):this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 0:
            neq(and_0($intern_60, l), 0) && $jjCheckNAddStates_0(this$static, 4, 6);
            break;
          case 1:
            this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 2:
            neq(and_0($intern_61, l), 0) && $jjCheckNAddStates_0(this$static, 4, 6);
            break;
          case 3:
            this$static.curChar == 126 && kind > 55 && (kind = 55);
            break;
          case 6:
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 6;
            break;
          case 8:
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 8;
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 9:
          case 4:
          case 0:
            jjCanMove_0_0(hiByte, i1, i2, l1, l2) && $jjCheckNAddStates_0(this$static, 4, 6);
            break;
          case 6:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 6;
            break;
          case 8:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 8;
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 9 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveNfa_1(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 8;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds_0(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 3:
            if (neq(and_0($intern_59, l), 0)) {
              kind > 54 && (kind = 54);
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            this$static.curChar == 47 && $jjAddStates_0(this$static, 2, 3);
            break;
          case 8:
          case 0:
            if (eq(and_0($intern_59, l), 0))
              break;
            kind > 54 && (kind = 54);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 2:
            if (this$static.curChar != 59)
              break;
            kind > 54 && (kind = 54);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 4:
            if (this$static.curChar != 47)
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 5);
            }

            break;
          case 5:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 5);
            }

            break;
          case 6:
            if (this$static.curChar != 47)
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 7);
            }

            break;
          case 7:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 7);
            }

        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 8:
          case 3:
            if (neq(and_0($intern_28, l), 0)) {
              kind > 54 && (kind = 54);
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }
             else 
              this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 0:
            if (eq(and_0($intern_28, l), 0))
              break;
            kind > 54 && (kind = 54);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 1:
            this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 2:
            if (eq(and_0($intern_62, l), 0))
              break;
            kind > 54 && (kind = 54);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 5:
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 5;
            break;
          case 7:
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 7;
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 3:
          case 8:
          case 0:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 54 && (kind = 54);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 5:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 5;
            break;
          case 7:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 7;
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 8 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveNfa_2(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 14;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds_0(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 0:
            neq(and_0($intern_25, l), 0)?$jjCheckNAddStates_0(this$static, 9, 11):neq(and_0(9216, l), 0) && kind > 14 && (kind = 14);
            this$static.curChar == 47?$jjAddStates_0(this$static, 12, 13):this$static.curChar == 13 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 1);
            break;
          case 14:
            neq(and_0($intern_25, l), 0) && $jjCheckNAddStates_0(this$static, 9, 11);
            if (neq(and_0($intern_24, l), 0)) {
              kind > 53 && (kind = 53);
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 15:
          case 3:
            neq(and_0($intern_25, l), 0) && $jjCheckNAddStates_0(this$static, 9, 11);
            break;
          case 1:
            this$static.curChar == 10 && kind > 14 && (kind = 14);
            break;
          case 2:
            this$static.curChar == 13 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 1);
            break;
          case 8:
            if (eq(and_0($intern_24, l), 0))
              break;
            kind > 53 && (kind = 53);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 9:
            this$static.curChar == 47 && $jjAddStates_0(this$static, 12, 13);
            break;
          case 10:
            if (this$static.curChar != 47)
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 11);
            }

            break;
          case 11:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 11);
            }

            break;
          case 12:
            if (this$static.curChar != 47)
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 13);
            }

            break;
          case 13:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 13);
            }

        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 0:
            neq(and_0($intern_63, l), 0)?$jjCheckNAddStates_0(this$static, 9, 11):this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 5);
            if (neq(and_0($intern_26, l), 0)) {
              kind > 53 && (kind = 53);
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 14:
            neq(and_0($intern_63, l), 0)?$jjCheckNAddStates_0(this$static, 9, 11):this$static.curChar == 126?kind > 20 && (kind = 20):this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 5);
            if (neq(and_0($intern_26, l), 0)) {
              kind > 53 && (kind = 53);
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 15:
            neq(and_0($intern_63, l), 0)?$jjCheckNAddStates_0(this$static, 9, 11):this$static.curChar == 126?kind > 20 && (kind = 20):this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 5);
            break;
          case 3:
            neq(and_0($intern_63, l), 0) && $jjCheckNAddStates_0(this$static, 9, 11);
            break;
          case 4:
            this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 5);
            break;
          case 5:
            neq(and_0($intern_61, l), 0) && $jjCheckNAddStates_0(this$static, 9, 11);
            break;
          case 6:
            this$static.curChar == 126 && kind > 20 && (kind = 20);
            break;
          case 8:
          case 7:
            if (eq(and_0($intern_26, l), 0))
              break;
            kind > 53 && (kind = 53);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 11:
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 11;
            break;
          case 13:
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 13;
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 0:
          case 14:
          case 15:
          case 3:
            jjCanMove_0_0(hiByte, i1, i2, l1, l2) && $jjCheckNAddStates_0(this$static, 9, 11);
            break;
          case 11:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 11;
            break;
          case 13:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 13;
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 14 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveNfa_3(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 8;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds_0(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 3:
            if (neq(and_0($intern_25, l), 0)) {
              kind > 13 && (kind = 13);
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            this$static.curChar == 47 && $jjAddStates_0(this$static, 2, 3);
            break;
          case 8:
          case 0:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 13 && (kind = 13);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 4:
            if (this$static.curChar != 47)
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 5);
            }

            break;
          case 5:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 5);
            }

            break;
          case 6:
            if (this$static.curChar != 47)
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 7);
            }

            break;
          case 7:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 7);
            }

        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 8:
          case 3:
            if (neq(and_0($intern_28, l), 0)) {
              kind > 13 && (kind = 13);
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }
             else 
              this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 0:
            if (eq(and_0($intern_28, l), 0))
              break;
            kind > 13 && (kind = 13);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 1:
            this$static.curChar == 92 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 2:
            if (eq(and_0($intern_62, l), 0))
              break;
            kind > 13 && (kind = 13);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 5:
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 5;
            break;
          case 7:
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 7;
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 3:
          case 8:
          case 0:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 13 && (kind = 13);
            {
              $jjCheckNAdd_0(this$static, 0);
              $jjCheckNAdd_0(this$static, 1);
            }

            break;
          case 5:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 5;
            break;
          case 7:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 7;
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 8 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveNfa_4(this$static, startState, curPos){
  var hiByte, i, i1, i2, kind, l, l1, l2, startsAt;
  startsAt = 0;
  this$static.jjnewStateCnt = 11;
  i = 1;
  this$static.jjstateSet[0] = startState;
  kind = $intern_0;
  for (;;) {
    ++this$static.jjround == $intern_0 && $ReInitRounds_0(this$static);
    if (this$static.curChar < 64) {
      l = shl_0(1, this$static.curChar);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 1:
            if (neq(and_0($intern_24, l), 0)) {
              kind > 51 && (kind = 51);
              $jjCheckNAdd_0(this$static, 0);
            }
             else 
              neq(and_0(9216, l), 0)?kind > 52 && (kind = 52):this$static.curChar == 47 && $jjAddStates_0(this$static, 0, 1);
            this$static.curChar == 13 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 0:
            if (eq(and_0($intern_24, l), 0))
              break;
            kind > 51 && (kind = 51);
            {
              $jjCheckNAdd_0(this$static, 0);
            }

            break;
          case 2:
            this$static.curChar == 10 && kind > 52 && (kind = 52);
            break;
          case 3:
            this$static.curChar == 13 && (this$static.jjstateSet[this$static.jjnewStateCnt++] = 2);
            break;
          case 5:
            if (eq(and_0($intern_24, l), 0))
              break;
            kind > 53 && (kind = 53);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 5;
            break;
          case 6:
            this$static.curChar == 47 && $jjAddStates_0(this$static, 0, 1);
            break;
          case 7:
            if (this$static.curChar != 47)
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 8:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 56 && (kind = 56);
            {
              $jjCheckNAdd_0(this$static, 8);
            }

            break;
          case 9:
            if (this$static.curChar != 47)
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 10);
            }

            break;
          case 10:
            if (eq(and_0($intern_25, l), 0))
              break;
            kind > 57 && (kind = 57);
            {
              $jjCheckNAdd_0(this$static, 10);
            }

        }
      }
       while (i != startsAt);
    }
     else if (this$static.curChar < 128) {
      l = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 1:
          case 5:
            if (eq(and_0($intern_26, l), 0))
              break;
            kind > 53 && (kind = 53);
            {
              $jjCheckNAdd_0(this$static, 5);
            }

            break;
          case 8:
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 8;
            break;
          case 10:
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 10;
        }
      }
       while (i != startsAt);
    }
     else {
      hiByte = this$static.curChar >> 8;
      i1 = hiByte >> 6;
      l1 = shl_0(1, hiByte & 63);
      i2 = (this$static.curChar & 255) >> 6;
      l2 = shl_0(1, this$static.curChar & 63);
      do {
        switch (this$static.jjstateSet[--i]) {
          case 8:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 56 && (kind = 56);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 8;
            break;
          case 10:
            if (!jjCanMove_0_0(hiByte, i1, i2, l1, l2))
              break;
            kind > 57 && (kind = 57);
            this$static.jjstateSet[this$static.jjnewStateCnt++] = 10;
            break;
          default:if (i1 == 0 || compare_5(l1, 0) == 0 || i2 == 0 || compare_5(l2, 0) == 0)
              break;
            else 
              break;
        }
      }
       while (i != startsAt);
    }
    if (kind != $intern_0) {
      this$static.jjmatchedKind = kind;
      this$static.jjmatchedPos = curPos;
      kind = $intern_0;
    }
    ++curPos;
    if ((i = this$static.jjnewStateCnt) == (startsAt = 11 - (this$static.jjnewStateCnt = startsAt)))
      return curPos;
    try {
      this$static.curChar = $readChar_0(this$static.input_stream);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 13)) {
        return curPos;
      }
       else 
        throw toJs($e0);
    }
  }
}

function $jjMoveStringLiteralDfa0_0_0(this$static){
  switch (this$static.curChar) {
    case 9:
      return $jjStartNfaWithStates_0_0(this$static, 2);
    case 32:
      return $jjStartNfaWithStates_0_0(this$static, 1);
    default:return $jjMoveNfa_0_0(this$static, 4, 0);
  }
}

function $jjMoveStringLiteralDfa0_1(this$static){
  switch (this$static.curChar) {
    case 9:
      return $jjStartNfaWithStates_1(this$static, 2);
    case 32:
      return $jjStartNfaWithStates_1(this$static, 1);
    default:return $jjMoveNfa_1(this$static, 3, 0);
  }
}

function $jjMoveStringLiteralDfa0_2(this$static){
  switch (this$static.curChar) {
    case 9:
      return $jjStartNfaWithStates_2(this$static, 0, 2, 15);
    case 32:
      return $jjStartNfaWithStates_2(this$static, 0, 1, 15);
    case 65:
      return $jjMoveStringLiteralDfa1_2(this$static, 196608);
    case 67:
      return $jjMoveStringLiteralDfa1_2(this$static, $intern_64);
    case 69:
      return $jjMoveStringLiteralDfa1_2(this$static, $intern_56);
    case 124:
      return $jjStopAtPos_0(this$static, 0, 15);
    default:return $jjMoveNfa_2(this$static, 0, 0);
  }
}

function $jjMoveStringLiteralDfa0_3(this$static){
  switch (this$static.curChar) {
    case 9:
      return $jjStartNfaWithStates_3(this$static, 2);
    case 10:
      return $jjStopAtPos_0(this$static, 0, 3);
    case 13:
      this$static.jjmatchedKind = 5;
      return $jjMoveStringLiteralDfa1_3(this$static);
    case 32:
      return $jjStartNfaWithStates_3(this$static, 1);
    default:return $jjMoveNfa_3(this$static, 3, 0);
  }
}

function $jjMoveStringLiteralDfa0_4(this$static){
  switch (this$static.curChar) {
    case 43:
      return $jjStopAtPos_0(this$static, 0, 34);
    case 44:
      return $jjStopAtPos_0(this$static, 0, 22);
    case 45:
      return $jjStopAtPos_0(this$static, 0, 26);
    case 46:
      this$static.jjmatchedKind = 27;
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_31);
    case 58:
      return $jjStopAtPos_0(this$static, 0, 21);
    case 59:
      return $jjStopAtPos_0(this$static, 0, 25);
    case 60:
      this$static.jjmatchedKind = 30;
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_42);
    case 61:
      return $jjStopAtPos_0(this$static, 0, 29);
    case 62:
      this$static.jjmatchedKind = 32;
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_65);
    case 97:
      return $jjMoveStringLiteralDfa1_4(this$static, 128);
    case 99:
      return $jjMoveStringLiteralDfa1_4(this$static, {l:0, m:196608, h:100});
    case 100:
      return $jjMoveStringLiteralDfa1_4(this$static, {l:$intern_30, m:0, h:1});
    case 102:
      return $jjMoveStringLiteralDfa1_4(this$static, 68719477248);
    case 103:
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_29);
    case 105:
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_43);
    case 108:
      return $jjMoveStringLiteralDfa1_4(this$static, 34359738368);
    case 111:
      return $jjMoveStringLiteralDfa1_4(this$static, 13194139537472);
    case 114:
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_66);
    case 115:
      return $jjMoveStringLiteralDfa1_4(this$static, $intern_67);
    case 116:
      return $jjMoveStringLiteralDfa1_4(this$static, {l:1280, m:0, h:24});
    case 123:
      return $jjStopAtPos_0(this$static, 0, 23);
    case 125:
      return $jjStopAtPos_0(this$static, 0, 24);
    default:return $jjMoveNfa_4(this$static, 1, 0);
  }
}

function $jjMoveStringLiteralDfa10_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 8, old0), 9);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 9, active0);
      return 10;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 84) {
    return $jjMoveStringLiteralDfa11_2(this$static, active0, $intern_64);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 9, active0), 10);
}

function $jjMoveStringLiteralDfa10_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 8, old0), 9);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 9, active0);
      return 10;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_68), 0))
        return $jjStopAtPos_0(this$static, 10, 50);
      break;
    case 97:
      return $jjMoveStringLiteralDfa11_4(this$static, active0, {l:0, m:$intern_32, h:32});
    case 100:
      return $jjMoveStringLiteralDfa11_4(this$static, active0, $intern_69);
    case 105:
      return $jjMoveStringLiteralDfa11_4(this$static, active0, $intern_67);
    case 111:
      return $jjMoveStringLiteralDfa11_4(this$static, active0, $intern_70);
    case 115:
      return $jjMoveStringLiteralDfa11_4(this$static, active0, 64);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 9, active0), 10);
}

function $jjMoveStringLiteralDfa11_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 9, old0), 10);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 10, active0);
      return 11;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 69) {
    return $jjMoveStringLiteralDfa12_2(this$static, active0, $intern_64);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 10, active0), 11);
}

function $jjMoveStringLiteralDfa11_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 9, old0), 10);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 10, active0);
      return 11;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, 64), 0))
        return $jjStopAtPos_0(this$static, 11, 6);
      else if (neq(and_0(active0, $intern_69), 0))
        return $jjStopAtPos_0(this$static, 11, 39);
      break;
    case 97:
      return $jjMoveStringLiteralDfa12_4(this$static, active0, $intern_67);
    case 103:
      return $jjMoveStringLiteralDfa12_4(this$static, active0, $intern_71);
    case 110:
      return $jjMoveStringLiteralDfa12_4(this$static, active0, $intern_70);
    case 114:
      return $jjMoveStringLiteralDfa12_4(this$static, active0, $intern_72);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 10, active0), 11);
}

function $jjMoveStringLiteralDfa12_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 10, old0), 11);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 11, active0);
      return 12;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 82) {
    if (neq(and_0(active0, $intern_64), 0))
      return $jjStartNfaWithStates_2(this$static, 12, 18, 15);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 11, active0), 12);
}

function $jjMoveStringLiteralDfa12_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 10, old0), 11);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 11, active0);
      return 12;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_70), 0))
        return $jjStopAtPos_0(this$static, 12, 46);
      break;
    case 109:
      return $jjMoveStringLiteralDfa13_4(this$static, active0, $intern_71);
    case 110:
      return $jjMoveStringLiteralDfa13_4(this$static, active0, $intern_67);
    case 116:
      return $jjMoveStringLiteralDfa13_4(this$static, active0, $intern_72);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 11, active0), 12);
}

function $jjMoveStringLiteralDfa13_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 11, old0), 12);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 12, active0);
      return 13;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_72), 0))
        return $jjStopAtPos_0(this$static, 13, 38);
      break;
    case 101:
      return $jjMoveStringLiteralDfa14_4(this$static, active0, $intern_71);
    case 116:
      return $jjMoveStringLiteralDfa14_4(this$static, active0, $intern_67);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 12, active0), 13);
}

function $jjMoveStringLiteralDfa14_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 12, old0), 13);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 13, active0);
      return 14;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_67), 0))
        return $jjStopAtPos_0(this$static, 14, 41);
      break;
    case 110:
      return $jjMoveStringLiteralDfa15_4(this$static, active0, $intern_71);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 13, active0), 14);
}

function $jjMoveStringLiteralDfa15_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 13, old0), 14);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 14, active0);
      return 15;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 116) {
    return $jjMoveStringLiteralDfa16_4(this$static, active0, $intern_71);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 14, active0), 15);
}

function $jjMoveStringLiteralDfa16_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 14, old0), 15);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 15, active0);
      return 16;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 61) {
    if (neq(and_0(active0, $intern_71), 0))
      return $jjStopAtPos_0(this$static, 16, 49);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 15, active0), 16);
}

function $jjMoveStringLiteralDfa1_2(this$static, active0){
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 0, active0);
      return 1;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 67:
      return $jjMoveStringLiteralDfa2_2(this$static, active0, 196608);
    case 82:
      return $jjMoveStringLiteralDfa2_2(this$static, active0, $intern_64);
    case 88:
      return $jjMoveStringLiteralDfa2_2(this$static, active0, $intern_56);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 0, active0), 1);
}

function $jjMoveStringLiteralDfa1_3(this$static){
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return 1;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 10) {
    return $jjStopAtPos_0(this$static, 1, 4);
  }
  return $jjMoveNfa_3(this$static, -1, 1);
}

function $jjMoveStringLiteralDfa1_4(this$static, active0){
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 0, active0);
      return 1;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 46:
      if (neq(and_0(active0, $intern_31), 0))
        return $jjStopAtPos_0(this$static, 1, 28);
      break;
    case 60:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, $intern_42);
    case 62:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, $intern_65);
    case 97:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, 137438953984);
    case 98:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, $intern_22);
    case 101:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, {l:$intern_30, m:0, h:11});
    case 102:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, $intern_73);
    case 105:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, {l:1024, m:0, h:16});
    case 110:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, 5497558138880);
    case 111:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, {l:0, m:221184, h:100});
    case 114:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, 256);
    case 116:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, $intern_67);
    case 117:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, 128);
    case 118:
      return $jjMoveStringLiteralDfa2_4(this$static, active0, 64);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 0, active0), 1);
}

function $jjMoveStringLiteralDfa2_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 0, old0), 1);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 1, active0);
      return 2;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 69:
      return $jjMoveStringLiteralDfa3_2(this$static, active0, 786432);
    case 84:
      return $jjMoveStringLiteralDfa3_2(this$static, active0, 196608);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 1, active0), 2);
}

function $jjMoveStringLiteralDfa2_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 0, old0), 1);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 1, active0);
      return 2;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 60:
      if (neq(and_0(active0, $intern_42), 0))
        return $jjStopAtPos_0(this$static, 2, 31);
      break;
    case 61:
      if (neq(and_0(active0, 4398046511104), 0))
        return $jjStopAtPos_0(this$static, 2, 42);
      break;
    case 62:
      if (neq(and_0(active0, $intern_65), 0))
        return $jjStopAtPos_0(this$static, 2, 33);
      break;
    case 97:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_67);
    case 99:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_74);
    case 101:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, 64);
    case 102:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, {l:0, m:$intern_54, h:2});
    case 106:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_22);
    case 108:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, 512);
    case 109:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_71);
    case 110:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, {l:0, m:0, h:68});
    case 114:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_75);
    case 115:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, {l:$intern_30, m:8192, h:1});
    case 116:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, 137438954624);
    case 117:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, 68719476992);
    case 118:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_43);
    case 120:
      return $jjMoveStringLiteralDfa3_4(this$static, active0, $intern_76);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 1, active0), 2);
}

function $jjMoveStringLiteralDfa3_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 1, old0), 2);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 2, active0);
      return 3;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 65:
      return $jjMoveStringLiteralDfa4_2(this$static, active0, $intern_64);
    case 67:
      return $jjMoveStringLiteralDfa4_2(this$static, active0, $intern_56);
    case 73:
      return $jjMoveStringLiteralDfa4_2(this$static, active0, $intern_57);
    case 79:
      return $jjMoveStringLiteralDfa4_2(this$static, active0, $intern_32);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 2, active0), 3);
}

function $jjMoveStringLiteralDfa3_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 1, old0), 2);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 2, active0);
      return 3;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_22), 0))
        return $jjStopAtPos_0(this$static, 3, 12);
      else if (neq(and_0(active0, $intern_73), 0))
        return $jjStopAtPos_0(this$static, 3, 43);
      else if (neq(and_0(active0, $intern_66), 0))
        return $jjStopAtPos_0(this$static, 3, 45);
      break;
    case 97:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, $intern_43);
    case 98:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, $intern_71);
    case 99:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, $intern_30);
    case 101:
      if (neq(and_0(active0, 256), 0))
        return $jjStartNfaWithStates_4(this$static, 3, 8);
      else if (neq(and_0(active0, $intern_29), 0))
        return $jjStartNfaWithStates_4(this$static, 3, 37);
      return $jjMoveStringLiteralDfa4_4(this$static, active0, $intern_75);
    case 107:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, $intern_74);
    case 108:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, 1024);
    case 110:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, 68719476736);
    case 111:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, 128);
    case 114:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, 64);
    case 115:
      return $jjMoveStringLiteralDfa4_4(this$static, active0, {l:512, m:0, h:64});
    case 116:
      if (neq(and_0(active0, 34359738368), 0))
        return $jjStartNfaWithStates_4(this$static, 3, 35);
      return $jjMoveStringLiteralDfa4_4(this$static, active0, {l:0, m:$intern_56, h:13});
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 2, active0), 3);
}

function $jjMoveStringLiteralDfa4_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 2, old0), 3);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 3, active0);
      return 4;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 82:
      if (neq(and_0(active0, $intern_32), 0))
        return $jjStartNfaWithStates_2(this$static, 4, 16, 14);
      break;
    case 84:
      return $jjMoveStringLiteralDfa5_2(this$static, active0, $intern_64);
    case 85:
      return $jjMoveStringLiteralDfa5_2(this$static, active0, $intern_56);
    case 86:
      return $jjMoveStringLiteralDfa5_2(this$static, active0, $intern_57);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 3, active0), 4);
}

function $jjMoveStringLiteralDfa4_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 2, old0), 3);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 3, active0);
      return 4;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_30), 0))
        return $jjStopAtPos_0(this$static, 4, 11);
      else if (neq(and_0(active0, $intern_76), 0))
        return $jjStopAtPos_0(this$static, 4, 47);
      else if (neq(and_0(active0, $intern_74), 0))
        return $jjStopAtPos_0(this$static, 4, 48);
      break;
    case 84:
      return $jjMoveStringLiteralDfa5_4(this$static, active0, 128);
    case 100:
      if (neq(and_0(active0, 68719476736), 0))
        return $jjStartNfaWithStates_4(this$static, 4, 36);
      break;
    case 101:
      if (neq(and_0(active0, 512), 0))
        return $jjStartNfaWithStates_4(this$static, 4, 9);
      return $jjMoveStringLiteralDfa5_4(this$static, active0, 2199023256576);
    case 103:
      return $jjMoveStringLiteralDfa5_4(this$static, active0, $intern_75);
    case 105:
      return $jjMoveStringLiteralDfa5_4(this$static, active0, $intern_77);
    case 114:
      return $jjMoveStringLiteralDfa5_4(this$static, active0, {l:64, m:$intern_64, h:1});
    case 116:
      return $jjMoveStringLiteralDfa5_4(this$static, active0, $intern_68);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 3, active0), 4);
}

function $jjMoveStringLiteralDfa5_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 3, old0), 4);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 4, active0);
      return 5;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 69:
      if (neq(and_0(active0, $intern_57), 0))
        return $jjStartNfaWithStates_2(this$static, 5, 17, 14);
      return $jjMoveStringLiteralDfa6_2(this$static, active0, $intern_64);
    case 84:
      return $jjMoveStringLiteralDfa6_2(this$static, active0, $intern_56);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 4, active0), 5);
}

function $jjMoveStringLiteralDfa5_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 3, old0), 4);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 4, active0);
      return 5;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, 1024), 0))
        return $jjStopAtPos_0(this$static, 5, 10);
      break;
    case 73:
      return $jjMoveStringLiteralDfa6_4(this$static, active0, $intern_67);
    case 105:
      return $jjMoveStringLiteralDfa6_4(this$static, active0, 1924145348800);
    case 110:
      return $jjMoveStringLiteralDfa6_4(this$static, active0, $intern_77);
    case 111:
      return $jjMoveStringLiteralDfa6_4(this$static, active0, $intern_78);
    case 114:
      return $jjMoveStringLiteralDfa6_4(this$static, active0, $intern_68);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 4, active0), 5);
}

function $jjMoveStringLiteralDfa6_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 4, old0), 5);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 5, active0);
      return 6;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 68:
      return $jjMoveStringLiteralDfa7_2(this$static, active0, $intern_64);
    case 73:
      return $jjMoveStringLiteralDfa7_2(this$static, active0, $intern_56);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 5, active0), 6);
}

function $jjMoveStringLiteralDfa6_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 4, old0), 5);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 5, active0);
      return 6;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 97:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, {l:0, m:$intern_64, h:64});
    case 99:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, 128);
    case 100:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, 64);
    case 101:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, $intern_71);
    case 110:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, $intern_67);
    case 111:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, $intern_75);
    case 117:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, $intern_70);
    case 121:
      return $jjMoveStringLiteralDfa7_4(this$static, active0, $intern_78);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 5, active0), 6);
}

function $jjMoveStringLiteralDfa7_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 5, old0), 6);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 6, active0);
      return 7;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 79:
      return $jjMoveStringLiteralDfa8_2(this$static, active0, $intern_56);
    case 95:
      return $jjMoveStringLiteralDfa8_2(this$static, active0, $intern_64);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 6, active0), 7);
}

function $jjMoveStringLiteralDfa7_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 5, old0), 6);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 6, active0);
      return 7;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_78), 0))
        return $jjStopAtPos_0(this$static, 7, 44);
      break;
    case 97:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, $intern_70);
    case 100:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, $intern_71);
    case 101:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, 64);
    case 105:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, $intern_68);
    case 107:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, 128);
    case 110:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, 1924145348608);
    case 118:
      return $jjMoveStringLiteralDfa8_4(this$static, active0, $intern_67);
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 6, active0), 7);
}

function $jjMoveStringLiteralDfa8_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 6, old0), 7);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 7, active0);
      return 8;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 76:
      return $jjMoveStringLiteralDfa9_2(this$static, active0, $intern_64);
    case 78:
      if (neq(and_0(active0, $intern_56), 0))
        return $jjStartNfaWithStates_2(this$static, 8, 19, 14);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 7, active0), 8);
}

function $jjMoveStringLiteralDfa8_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 6, old0), 7);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 7, active0);
      return 8;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, 128), 0))
        return $jjStopAtPos_0(this$static, 8, 7);
      break;
    case 69:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, $intern_69);
    case 70:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, $intern_71);
    case 73:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, 64);
    case 83:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, $intern_72);
    case 97:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, $intern_67);
    case 110:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, $intern_68);
    case 116:
      return $jjMoveStringLiteralDfa9_4(this$static, active0, {l:0, m:$intern_64, h:4});
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 7, active0), 8);
}

function $jjMoveStringLiteralDfa9_2(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 7, old0), 8);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_2(this$static, 8, active0);
      return 9;
    }
     else 
      throw toJs($e0);
  }
  if (this$static.curChar == 65) {
    return $jjMoveStringLiteralDfa10_2(this$static, active0, $intern_64);
  }
  return $jjMoveNfa_2(this$static, $jjStopStringLiteralDfa_2(this$static, 8, active0), 9);
}

function $jjMoveStringLiteralDfa9_4(this$static, old0, active0){
  if (eq(active0 = and_0(active0, old0), 0))
    return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 7, old0), 8);
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      $jjStopStringLiteralDfa_4(this$static, 8, active0);
      return 9;
    }
     else 
      throw toJs($e0);
  }
  switch (this$static.curChar) {
    case 61:
      if (neq(and_0(active0, $intern_43), 0))
        return $jjStopAtPos_0(this$static, 9, 40);
      break;
    case 100:
      return $jjMoveStringLiteralDfa10_4(this$static, active0, 64);
    case 105:
      return $jjMoveStringLiteralDfa10_4(this$static, active0, $intern_70);
    case 110:
      return $jjMoveStringLiteralDfa10_4(this$static, active0, $intern_69);
    case 114:
      return $jjMoveStringLiteralDfa10_4(this$static, active0, $intern_79);
    case 116:
      return $jjMoveStringLiteralDfa10_4(this$static, active0, {l:0, m:$intern_32, h:64});
  }
  return $jjMoveNfa_4(this$static, $jjStopStringLiteralDfa_4(this$static, 8, active0), 9);
}

function $jjStartNfaWithStates_0_0(this$static, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = 0;
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_0_0(this$static, 9, 1);
}

function $jjStartNfaWithStates_1(this$static, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = 0;
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_1(this$static, 8, 1);
}

function $jjStartNfaWithStates_2(this$static, pos, kind, state){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = pos;
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return pos + 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_2(this$static, state, pos + 1);
}

function $jjStartNfaWithStates_3(this$static, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = 0;
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_3(this$static, 8, 1);
}

function $jjStartNfaWithStates_4(this$static, pos, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = pos;
  try {
    this$static.curChar = $readChar_0(this$static.input_stream);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 13)) {
      return pos + 1;
    }
     else 
      throw toJs($e0);
  }
  return $jjMoveNfa_4(this$static, 5, pos + 1);
}

function $jjStopAtPos_0(this$static, pos, kind){
  this$static.jjmatchedKind = kind;
  this$static.jjmatchedPos = pos;
  return pos + 1;
}

function $jjStopStringLiteralDfa_2(this$static, pos, active0){
  switch (pos) {
    case 0:
      if (neq(and_0(active0, $intern_51), 0)) {
        this$static.jjmatchedKind = 53;
        return 14;
      }

      if (neq(and_0(active0, 6), 0))
        return 15;
      return -1;
    case 1:
      if (neq(and_0(active0, $intern_51), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 1;
        return 14;
      }

      return -1;
    case 2:
      if (neq(and_0(active0, $intern_51), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 2;
        return 14;
      }

      return -1;
    case 3:
      if (neq(and_0(active0, $intern_51), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 3;
        return 14;
      }

      return -1;
    case 4:
      if (neq(and_0(active0, $intern_32), 0))
        return 14;
      if (neq(and_0(active0, 917504), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 4;
        return 14;
      }

      return -1;
    case 5:
      if (neq(and_0(active0, $intern_57), 0))
        return 14;
      if (neq(and_0(active0, 786432), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 5;
        return 14;
      }

      return -1;
    case 6:
      if (neq(and_0(active0, 786432), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 6;
        return 14;
      }

      return -1;
    case 7:
      if (neq(and_0(active0, $intern_56), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 7;
        return 14;
      }

      if (neq(and_0(active0, $intern_64), 0)) {
        if (this$static.jjmatchedPos < 6) {
          this$static.jjmatchedKind = 53;
          this$static.jjmatchedPos = 6;
        }
        return 15;
      }

      return -1;
    case 8:
      if (neq(and_0(active0, $intern_56), 0))
        return 14;
      if (neq(and_0(active0, $intern_64), 0)) {
        if (this$static.jjmatchedPos < 6) {
          this$static.jjmatchedKind = 53;
          this$static.jjmatchedPos = 6;
        }
        return 15;
      }

      return -1;
    case 10:
    case 11:
    case 9:
      if (neq(and_0(active0, $intern_64), 0)) {
        if (this$static.jjmatchedPos < 6) {
          this$static.jjmatchedKind = 53;
          this$static.jjmatchedPos = 6;
        }
        return 15;
      }

      return -1;
    default:return -1;
  }
}

function $jjStopStringLiteralDfa_4(this$static, pos, active0){
  switch (pos) {
    case 0:
      if (neq(and_0(active0, $intern_80), 0)) {
        this$static.jjmatchedKind = 53;
        return 5;
      }

      return -1;
    case 1:
      if (neq(and_0(active0, $intern_80), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 1;
        return 5;
      }

      return -1;
    case 2:
      if (neq(and_0(active0, {l:8128, m:3137536, h:127}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 2;
        return 5;
      }

      return -1;
    case 3:
      if (neq(and_0(active0, {l:3776, m:999424, h:125}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 3;
        return 5;
      }

      if (neq(and_0(active0, 171798692096), 0))
        return 5;
      return -1;
    case 4:
      if (neq(and_0(active0, {l:1216, m:$intern_51, h:101}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 4;
        return 5;
      }

      if (neq(and_0(active0, 68719477248), 0))
        return 5;
      return -1;
    case 5:
      if (neq(and_0(active0, $intern_81), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 5;
        return 5;
      }

      return -1;
    case 6:
      if (neq(and_0(active0, $intern_81), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 6;
        return 5;
      }

      return -1;
    case 7:
      if (neq(and_0(active0, {l:192, m:$intern_51, h:100}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 7;
        return 5;
      }

      return -1;
    case 8:
      if (neq(and_0(active0, {l:64, m:$intern_51, h:100}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 8;
        return 5;
      }

      return -1;
    case 9:
      if (neq(and_0(active0, {l:64, m:720896, h:100}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 9;
        return 5;
      }

      return -1;
    case 10:
      if (neq(and_0(active0, {l:64, m:720896, h:36}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 10;
        return 5;
      }

      return -1;
    case 11:
      if (neq(and_0(active0, {l:0, m:589824, h:36}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 11;
        return 5;
      }

      return -1;
    case 12:
      if (neq(and_0(active0, {l:0, m:589824, h:32}), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 12;
        return 5;
      }

      return -1;
    case 13:
      if (neq(and_0(active0, $intern_79), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 13;
        return 5;
      }

      return -1;
    case 14:
      if (neq(and_0(active0, $intern_71), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 14;
        return 5;
      }

      return -1;
    case 15:
      if (neq(and_0(active0, $intern_71), 0)) {
        this$static.jjmatchedKind = 53;
        this$static.jjmatchedPos = 15;
        return 5;
      }

      return -1;
    default:return -1;
  }
}

function SequenceAllInOneParserTokenManager(stream){
  $clinit_SequenceAllInOneParserTokenManager();
  $clinit_System();
  this.jjrounds = initUnidimensionalArray(I_classLit, $intern_20, 32, 14, 15, 1);
  this.jjstateSet = initUnidimensionalArray(I_classLit, $intern_20, 32, 28, 15, 1);
  this.input_stream = stream;
}

function jjCanMove_0_0(hiByte, i1, i2, l1, l2){
  switch (hiByte) {
    case 0:
      return neq(and_0(jjbitVec2_0[i2], l2), 0);
    default:if (neq(and_0(jjbitVec0_0[i1], l1), 0))
        return true;
      return false;
  }
}

defineClass(981, 1, {}, SequenceAllInOneParserTokenManager);
_.curChar = 0;
_.curLexState = 4;
_.jjmatchedKind = 0;
_.jjmatchedPos = 0;
_.jjnewStateCnt = 0;
_.jjround = 0;
var jjbitVec0_0, jjbitVec2_0, jjnewLexState, jjnextStates_0, jjstrLiteralImages_0, jjtoToken_0, lexStateNames_0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_SequenceAllInOneParserTokenManager_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'SequenceAllInOneParserTokenManager', 981);
function $read_0(this$static, cbuf, off, len){
  var numBytesInBuffer, numBytesToRead, numCharsOutstandingInString;
  numCharsOutstandingInString = this$static._size - this$static._position;
  if (numCharsOutstandingInString == 0) {
    return -1;
  }
  numBytesInBuffer = cbuf.length;
  numBytesToRead = numBytesInBuffer - off;
  numBytesToRead = numBytesToRead > len?len:numBytesToRead;
  numBytesToRead > numCharsOutstandingInString && (numBytesToRead = numCharsOutstandingInString);
  $getChars(this$static._string, this$static._position, this$static._position + numBytesToRead, cbuf, off);
  this$static._position += numBytesToRead;
  return numBytesToRead;
}

function StringProvider_0(string){
  this._string = string;
  this._size = string.length;
}

defineClass(973, 1, {}, StringProvider_0);
_._position = 0;
_._size = 0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_StringProvider_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'StringProvider', 973);
function Token_1(){
}

function Token_2(kind, image){
  this.kind = kind;
  this.image = image;
}

defineClass(369, 1, $intern_23, Token_1, Token_2);
_.toString_0 = function toString_25(){
  return this.image;
}
;
_.beginColumn = 0;
_.beginLine = 0;
_.kind = 0;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_Token_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'Token', 369);
function TokenMgrException_1(message){
  RuntimeException_0.call(this, message);
}

function TokenMgrException_2(EOFSeen, errorLine, errorColumn, errorAfter, curChar){
  var curChar1;
  TokenMgrException_1.call(this, (curChar1 = curChar & $intern_44 , 'Lexical error at line ' + errorLine + ', column ' + errorColumn + '.  Encountered: ' + (EOFSeen?'<EOF> ':'"' + addEscapes_0(String.fromCharCode(curChar1)) + '"' + ' (' + curChar + '), ') + 'after : "' + addEscapes_0(errorAfter) + '"'));
}

function addEscapes_0(str){
  var ch_0, i, number, retval, s;
  retval = new StringBuffer;
  for (i = 0; i < str.length; i++) {
    switch (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i)) {
      case 8:
        retval.string += '\\b';
        continue;
      case 9:
        retval.string += '\\t';
        continue;
      case 10:
        retval.string += '\\n';
        continue;
      case 12:
        retval.string += '\\f';
        continue;
      case 13:
        retval.string += '\\r';
        continue;
      case 34:
        retval.string += '\\"';
        continue;
      case 39:
        retval.string += "\\'";
        continue;
      case 92:
        retval.string += '\\\\';
        continue;
      default:if ((ch_0 = (checkCriticalStringElementIndex(i, str.length) , str.charCodeAt(i))) < 32 || ch_0 > 126) {
          s = (number = ch_0 , '0000' + number.toString(16));
          $append_0(retval, '\\u' + $substring_0(s, s.length - 4, s.length));
        }
         else {
          retval.string += String.fromCharCode(ch_0);
        }

        continue;
    }
  }
  return retval.string;
}

defineClass(244, 11, {244:1, 3:1, 14:1, 11:1, 17:1}, TokenMgrException_2);
_.getMessage = function getMessage_1(){
  return this.detailMessage;
}
;
var Lcom_baselet_element_sequence_1aio_facet_specific_gen_TokenMgrException_2_classLit = createForClass('com.baselet.element.sequence_aio.facet.specific.gen', 'TokenMgrException', 244);
function SettingsAutoresize(){
  $clinit_Settings();
}

defineClass(286, $intern_16, {}, SettingsAutoresize);
_.createFacets = function createFacets_14(){
  return AUTORESIZE_0;
}
;
_.getElementStyle = function getElementStyle_4(){
  return $clinit_ElementStyle() , AUTORESIZE;
}
;
var Lcom_baselet_element_settings_SettingsAutoresize_2_classLit = createForClass('com.baselet.element.settings', 'SettingsAutoresize', 286);
function SettingsNoText(){
  $clinit_Settings();
}

defineClass(354, $intern_16, {}, SettingsNoText);
_.createFacets = function createFacets_15(){
  return NOTEXT;
}
;
_.getElementStyle = function getElementStyle_5(){
  return $clinit_ElementStyle() , SIMPLE;
}
;
var Lcom_baselet_element_settings_SettingsNoText_2_classLit = createForClass('com.baselet.element.settings', 'SettingsNoText', 354);
function SettingsText(){
  $clinit_Settings();
}

defineClass(353, $intern_16, {}, SettingsText);
_.createFacets = function createFacets_16(){
  return listOf(MANUALRESIZE, stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_element_facet_Facet_2_classLit, 1), $intern_6, 19, 0, [($clinit_SeparatorLineFacet() , INSTANCE_9)]));
}
;
_.getElementStyle = function getElementStyle_6(){
  return $clinit_ElementStyle() , SIMPLE;
}
;
_.getHAlign = function getHAlign_2(){
  return $clinit_AlignHorizontal() , LEFT;
}
;
var Lcom_baselet_element_settings_SettingsText_2_classLit = createForClass('com.baselet.element.settings', 'SettingsText', 353);
function PointChange(index_0, diffX, diffY){
  this.index_0 = index_0;
  this.diffX = diffX;
  this.diffY = diffY;
}

defineClass(143, 1, {143:1}, PointChange);
_.toString_0 = function toString_26(){
  return 'PointChange [index=' + this.index_0 + ', diffX=' + this.diffX + ', diffY=' + this.diffY + ']';
}
;
_.diffX = 0;
_.diffY = 0;
var Lcom_baselet_element_sticking_PointChange_2_classLit = createForClass('com.baselet.element.sticking', 'PointChange', 143);
function $equals_3(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (!$equals_0(this$static, obj)) {
    return false;
  }
  if (Lcom_baselet_element_sticking_PointDoubleIndexed_2_classLit != getClass__Ljava_lang_Class___devirtual$(obj)) {
    return false;
  }
  other = castTo(obj, 98);
  if (!this$static.index_0) {
    if (other.index_0) {
      return false;
    }
  }
   else if (!$equals_5(this$static.index_0, other.index_0)) {
    return false;
  }
  return true;
}

function PointDoubleIndexed(index_0, x_0, y_0){
  PointDouble.call(this, x_0, y_0);
  this.index_0 = index_0;
}

defineClass(98, 5, {5:1, 98:1}, PointDoubleIndexed);
_.equals_0 = function equals_14(obj){
  return $equals_3(this, obj);
}
;
_.hashCode_0 = function hashCode_13(){
  var result;
  result = $hashCode(this);
  result = 31 * result + (!this.index_0?0:this.index_0.value_0);
  return result;
}
;
_.toString_0 = function toString_27(){
  return 'p(i=' + this.index_0 + ' x=' + this.x_0 + ' y=' + this.y_0 + ')';
}
;
var Lcom_baselet_element_sticking_PointDoubleIndexed_2_classLit = createForClass('com.baselet.element.sticking', 'PointDoubleIndexed', 98);
function StickLineChange(oldLine, newLine){
  this.oldLine = oldLine;
  this.newLine = newLine;
}

defineClass(295, 1, {295:1}, StickLineChange);
_.toString_0 = function toString_28(){
  return 'StickLineChange [oldLine=' + this.oldLine + ', newLine=' + this.newLine + ']';
}
;
var Lcom_baselet_element_sticking_StickLineChange_2_classLit = createForClass('com.baselet.element.sticking', 'StickLineChange', 295);
function $clinit_StickableMap(){
  $clinit_StickableMap = emptyMethod;
  EMPTY_MAP = new StickableMap;
}

function $add_2(this$static, stickable, p){
  var points;
  points = castTo($get_0(this$static.stickingIndexMap, stickable), 41);
  if (!points) {
    points = new ArrayList;
    $put(this$static.stickingIndexMap, stickable, points);
  }
  points.add_0(p.index_0);
}

function $getStickablePoints_0(this$static, stickable){
  var p, p$iterator, returnList, stickingIndexes;
  stickingIndexes = castTo($get_0(this$static.stickingIndexMap, stickable), 41);
  returnList = new ArrayList;
  for (p$iterator = new AbstractList$IteratorImpl($getStickablePoints(stickable.relationPoints.points)); p$iterator.i < p$iterator.this$01_0.size_1();) {
    p = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , castTo(p$iterator.this$01_0.get_0(p$iterator.last = p$iterator.i++), 98));
    stickingIndexes.contains_0(p.index_0) && (returnList.array[returnList.array.length] = p , true);
  }
  return returnList;
}

function $isEmpty_0(this$static){
  var entry, outerIter, valueList, valueList$iterator;
  for (valueList$iterator = (outerIter = (new AbstractMap$2(this$static.stickingIndexMap)).this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter)); valueList$iterator.val$outerIter2.hasNext_0();) {
    valueList = (entry = castTo(valueList$iterator.val$outerIter2.next_1(), 46) , castTo(entry.getValue_0(), 41));
    if (!valueList.isEmpty()) {
      return false;
    }
  }
  return true;
}

function $setStickablePoints(this$static, stickable, updatedChangedPoints){
  var indexList, p, p$iterator;
  indexList = new ArrayList;
  for (p$iterator = new ArrayList$1(updatedChangedPoints); p$iterator.i < p$iterator.this$01.array.length;) {
    p = castTo($next_3(p$iterator), 98);
    $add_13(indexList, p.index_0);
  }
  $put(this$static.stickingIndexMap, stickable, indexList);
}

function StickableMap(){
  $clinit_StickableMap();
  this.stickingIndexMap = new HashMap;
}

defineClass(145, 1, {145:1}, StickableMap);
_.toString_0 = function toString_29(){
  return 'StickableMap [map=' + mapToString(this.stickingIndexMap) + ']';
}
;
var EMPTY_MAP;
var Lcom_baselet_element_sticking_StickableMap_2_classLit = createForClass('com.baselet.element.sticking', 'StickableMap', 145);
function $clinit_Stickables(){
  $clinit_Stickables = emptyMethod;
  log_10 = getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_element_sticking_Stickables_2_classLit) , Lcom_baselet_element_sticking_Stickables_2_classLit.typeName));
}

function applyChanges(changeList, stickablePointsToCheck){
  var entry, entry$iterator, stickable, updatedChangedPoints;
  for (entry$iterator = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(changeList)).this$01); entry$iterator.hasNext;) {
    entry = $next_1(entry$iterator);
    stickable = castTo(entry.getKey(), 389);
    updatedChangedPoints = $movePoints(stickable, castTo(entry.getValue_0(), 41));
    !!stickablePointsToCheck && $setStickablePoints(stickablePointsToCheck, stickable, updatedChangedPoints);
  }
}

function calcOtherCoordinate(stickablePoint, oldLine, newLine, diffX, diffY){
  var point, stickablePointWithDiff;
  stickablePointWithDiff = new PointDouble($doubleValue_0(stickablePoint.x_0) + diffX, $doubleValue_0(stickablePoint.y_0) + diffY);
  if (distanceBetweenTwoPoints_0(oldLine.start_0, oldLine.end) == distanceBetweenTwoPoints_0(newLine.start_0, newLine.end)) {
    return new PointDouble($intValue(newLine.start_0.x_0) - $intValue(oldLine.start_0.x_0), $intValue(newLine.start_0.y_0) - $intValue(oldLine.start_0.y_0));
  }
   else if ($getDistanceToPoint(newLine, stickablePointWithDiff) > 1) {
    $distance(newLine.start_0, stickablePointWithDiff) < $distance(newLine.end, stickablePointWithDiff)?(point = newLine.start_0):(point = newLine.end);
    return new PointDouble($doubleValue_0(point.x_0) - $doubleValue_0(stickablePoint.x_0), $doubleValue_0(point.y_0) - $doubleValue_0(stickablePoint.y_0));
  }
  return new PointDouble(0, 0);
}

function calcPointDiffBasedOnStickLineChange(index_0, stickablePoint, stickline){
  var diffX, diffY, newLine, oldLine;
  oldLine = stickline.oldLine;
  newLine = stickline.newLine;
  if ($isHorizontal($getDirectionOfLine(newLine, true))) {
    diffY = $intValue(newLine.start_0.y_0) - $intValue(oldLine.start_0.y_0);
    diffX = $intValue(calcOtherCoordinate(stickablePoint, oldLine, newLine, 0, diffY).x_0);
  }
   else {
    diffX = $intValue(newLine.start_0.x_0) - $intValue(oldLine.start_0.x_0);
    diffY = $intValue(calcOtherCoordinate(stickablePoint, oldLine, newLine, diffX, 0).y_0);
  }
  return new PointChange(index_0, diffX, diffY);
}

function calculateStickingPointChanges(stickable, stickablePoints, changedStickLines, maxDistance){
  var absolutePosOfStickablePoint, changedPoint, changedPoints, relevantStickline, stickablePoint, stickablePoint$iterator;
  changedPoints = new ArrayList;
  for (stickablePoint$iterator = new ArrayList$1(stickablePoints); stickablePoint$iterator.i < stickablePoint$iterator.this$01.array.length;) {
    stickablePoint = castTo($next_3(stickablePoint$iterator), 98);
    absolutePosOfStickablePoint = getAbsolutePosition(stickable, stickablePoint);
    relevantStickline = getNearestStickLineChangeWhichWillChangeTheStickPoint(changedStickLines, absolutePosOfStickablePoint, maxDistance);
    if (relevantStickline) {
      changedPoint = calcPointDiffBasedOnStickLineChange(stickablePoint.index_0, absolutePosOfStickablePoint, relevantStickline);
      (changedPoint.diffX != 0 || changedPoint.diffY != 0) && (changedPoints.array[changedPoints.array.length] = changedPoint , true);
    }
  }
  return changedPoints;
}

function getAbsolutePosition(stickable, pd){
  var x_0, y_0;
  x_0 = (new Rectangle_0($zoom(stickable, $copy_0(stickable.component.rect_0).x_0), $zoom(stickable, $copy_0(stickable.component.rect_0).y_0), $zoom(stickable, $copy_0(stickable.component.rect_0).width_0), $zoom(stickable, $copy_0(stickable.component.rect_0).height_0))).x_0 + $intValue(pd.x_0);
  y_0 = (new Rectangle_0($zoom(stickable, $copy_0(stickable.component.rect_0).x_0), $zoom(stickable, $copy_0(stickable.component.rect_0).y_0), $zoom(stickable, $copy_0(stickable.component.rect_0).width_0), $zoom(stickable, $copy_0(stickable.component.rect_0).height_0))).y_0 + $intValue(pd.y_0);
  return new PointDouble(x_0, y_0);
}

function getChangedStickLines(oldStickingPolygon, newStickingPolygon){
  var changedStickLines, newLine, newLineIter, oldLine, oldLineIter;
  changedStickLines = new ArrayList;
  oldLineIter = new ArrayList$1(oldStickingPolygon.stick.arrayList);
  newLineIter = new ArrayList$1(newStickingPolygon.stick.arrayList);
  while (oldLineIter.i < oldLineIter.this$01.array.length) {
    oldLine = castTo($next_3(oldLineIter), 163);
    newLine = castTo($next_3(newLineIter), 163);
    $equals(oldLine, newLine) || $add_13(changedStickLines, new StickLineChange(oldLine, newLine));
  }
  return changedStickLines;
}

function getNearestStickLineChangeWhichWillChangeTheStickPoint(changedStickLines, absolutePositionOfStickablePoint, maxDistance){
  var change, change$iterator, changeMatchingLowestDistance, distance, lowestDistance;
  lowestDistance = null;
  changeMatchingLowestDistance = null;
  for (change$iterator = new ArrayList$1(changedStickLines); change$iterator.i < change$iterator.this$01.array.length;) {
    change = castTo($next_3(change$iterator), 295);
    distance = $getDistanceToPoint(change.oldLine, absolutePositionOfStickablePoint);
    if (distance < maxDistance && (lowestDistance == null || distance < (checkCriticalNotNull(lowestDistance) , lowestDistance))) {
      lowestDistance = distance;
      changeMatchingLowestDistance = change;
    }
  }
  return changeMatchingLowestDistance;
}

function getStickingPointsWhichAreConnectedToStickingPolygon(oldStickingPolygon, stickables){
  $clinit_Stickables();
  var absolutePointPosition, distance, p, p$iterator, returnMap, sl, sl$iterator, stickable, stickable$iterator;
  $debug_1(log_10, 'Polygon to check: ' + oldStickingPolygon);
  returnMap = new StickableMap;
  for (stickable$iterator = new ArrayList$1(stickables); stickable$iterator.i < stickable$iterator.this$01.array.length;) {
    stickable = castTo($next_3(stickable$iterator), 389);
    for (p$iterator = new AbstractList$IteratorImpl($getStickablePoints(stickable.relationPoints.points)); p$iterator.i < p$iterator.this$01_0.size_1();) {
      p = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , castTo(p$iterator.this$01_0.get_0(p$iterator.last = p$iterator.i++), 98));
      absolutePointPosition = getAbsolutePosition(stickable, p);
      for (sl$iterator = new ArrayList$1(oldStickingPolygon.stick.arrayList); sl$iterator.i < sl$iterator.this$01.array.length;) {
        sl = castTo($next_3(sl$iterator), 163);
        $trace_0(log_10, 'CHECK ' + sl + '/' + absolutePointPosition + '/' + 9);
        distance = $getDistanceToPoint(sl, absolutePointPosition);
        distance < 9 && $add_2(returnMap, stickable, p);
      }
    }
  }
  return returnMap;
}

function moveStickPointsBasedOnPolygonChanges(oldStickingPolygon, newStickingPolygon, stickablePointsToCheck, maxDistance){
  $clinit_Stickables();
  var calculatedStickingPointChanges, changeList, changedStickLines, entry, outerIter, stickable, stickable$iterator;
  if (!stickablePointsToCheck || $isEmpty_0(stickablePointsToCheck)) {
    return $clinit_Collections() , $clinit_Collections() , EMPTY_MAP_0;
  }
  changedStickLines = getChangedStickLines(oldStickingPolygon, newStickingPolygon);
  changeList = new HashMap;
  for (stickable$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$1(stickablePointsToCheck.stickingIndexMap)).this$01)).this$01) , new AbstractMap$1$1(outerIter)); stickable$iterator.val$outerIter2.hasNext;) {
    stickable = (entry = $next_1(stickable$iterator.val$outerIter2) , castTo(entry.getKey(), 389));
    calculatedStickingPointChanges = calculateStickingPointChanges(stickable, $getStickablePoints_0(stickablePointsToCheck, stickable), changedStickLines, maxDistance);
    calculatedStickingPointChanges.array.length == 0 || $put_1(changeList.hashCodeMap, stickable, calculatedStickingPointChanges);
  }
  applyChanges(changeList, stickablePointsToCheck);
  return changeList;
}

var log_10;
var Lcom_baselet_element_sticking_Stickables_2_classLit = createForClass('com.baselet.element.sticking', 'Stickables', null);
function $addPoint(this$static, x_0, y_0){
  var p;
  p = new PointDouble(this$static.elementX + x_0, this$static.elementY + y_0);
  $add_13(this$static.allPoints, p);
  !this$static.firstpoint?(this$static.firstpoint = p):$add_16(this$static.stick, new StickingPolygon$StickLine(this$static.lastpoint, p));
  this$static.lastpoint = p;
}

function $addPoint_0(this$static, x_0, y_0){
  $addPoint(this$static, x_0, y_0);
  $add_13(this$static.allPoints, this$static.firstpoint);
  $add_16(this$static.stick, new StickingPolygon$StickLine(this$static.lastpoint, this$static.firstpoint));
}

function $addPoint_1(this$static, points){
  var p, p$iterator;
  for (p$iterator = new AbstractList$IteratorImpl(points); p$iterator.i < p$iterator.this$01_0.size_1();) {
    p = (checkCriticalElement(p$iterator.i < p$iterator.this$01_0.size_1()) , castTo(p$iterator.this$01_0.get_0(p$iterator.last = p$iterator.i++), 5));
    $addPoint(this$static, $doubleValue_0(p.x_0), $doubleValue_0(p.y_0));
  }
}

function $addRectangle(this$static, x_0, y_0, width_0, height){
  $addPoint(this$static, x_0, y_0);
  $addPoint(this$static, x_0 + width_0, y_0);
  $addPoint(this$static, x_0 + width_0, y_0 + height);
  $addPoint_0(this$static, x_0, y_0 + height);
}

function $addRectangle_0(this$static, rect){
  $addRectangle(this$static, rect.x_0, rect.y_0, rect.width_0, rect.height_0);
}

function StickingPolygon(elementX, elementY){
  this.stick = new Vector;
  this.allPoints = new ArrayList;
  this.elementX = elementX;
  this.elementY = elementY;
}

defineClass(132, 1, {}, StickingPolygon);
_.toString_0 = function toString_30(){
  return 'StickingPolygon [stick=' + toString_54($toArray_3(this.stick, initUnidimensionalArray(Lcom_baselet_element_sticking_StickingPolygon$StickLine_2_classLit, $intern_14, 163, this.stick.arrayList.array.length, 0, 1))) + ']';
}
;
_.elementX = 0;
_.elementY = 0;
_.firstpoint = null;
_.lastpoint = null;
var Lcom_baselet_element_sticking_StickingPolygon_2_classLit = createForClass('com.baselet.element.sticking', 'StickingPolygon', 132);
function StickingPolygon$StickLine(p1, p2){
  $clinit_Line();
  Line.call(this, p1, p2);
}

defineClass(163, 62, {62:1, 163:1}, StickingPolygon$StickLine);
var Lcom_baselet_element_sticking_StickingPolygon$StickLine_2_classLit = createForClass('com.baselet.element.sticking', 'StickingPolygon/StickLine', 163);
function $clinit_NoStickingPolygonGenerator(){
  $clinit_NoStickingPolygonGenerator = emptyMethod;
  INSTANCE_27 = new NoStickingPolygonGenerator;
}

function NoStickingPolygonGenerator(){
}

defineClass(927, 1, {}, NoStickingPolygonGenerator);
_.generateStickingBorder_0 = function generateStickingBorder_6(rect){
  return new StickingPolygon(rect.x_0, rect.y_0);
}
;
var INSTANCE_27;
var Lcom_baselet_element_sticking_polygon_NoStickingPolygonGenerator_2_classLit = createForClass('com.baselet.element.sticking.polygon', 'NoStickingPolygonGenerator', 927);
function PointDoubleStickingPolygonGenerator(points){
  this.points = points;
}

defineClass(359, 1, {}, PointDoubleStickingPolygonGenerator);
_.generateStickingBorder_0 = function generateStickingBorder_7(rect){
  var p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addPoint_1(p, this.points);
  return p;
}
;
var Lcom_baselet_element_sticking_polygon_PointDoubleStickingPolygonGenerator_2_classLit = createForClass('com.baselet.element.sticking.polygon', 'PointDoubleStickingPolygonGenerator', 359);
function $clinit_SimpleStickingPolygonGenerator(){
  $clinit_SimpleStickingPolygonGenerator = emptyMethod;
  INSTANCE_28 = new SimpleStickingPolygonGenerator;
}

function SimpleStickingPolygonGenerator(){
}

defineClass(847, 1, {}, SimpleStickingPolygonGenerator);
_.generateStickingBorder_0 = function generateStickingBorder_8(rect){
  var p;
  p = new StickingPolygon(rect.x_0, rect.y_0);
  $addRectangle(p, 0, 0, rect.width_0, rect.height_0);
  return p;
}
;
var INSTANCE_28;
var Lcom_baselet_element_sticking_polygon_SimpleStickingPolygonGenerator_2_classLit = createForClass('com.baselet.element.sticking.polygon', 'SimpleStickingPolygonGenerator', 847);
function AutocompletionText(text_0, info){
  this.text_0 = text_0;
  this.info_0 = info;
}

defineClass(16, 1, {16:1}, AutocompletionText);
var Lcom_baselet_gui_AutocompletionText_2_classLit = createForClass('com.baselet.gui', 'AutocompletionText', 16);
function $lambda$0(this$static, throwable_0){
  var unwrapped;
  unwrapped = $unwrap(this$static, throwable_0);
  showFeatureNotSupported('Sorry, the program just crashed. Please check logs and report a bug.', false);
  $error(this$static.log_0, unwrapped.getMessage());
}

function $onModuleLoad(this$static){
  var s, i;
  setUncaughtExceptionHandler(new BaseletGWT$lambda$0$Type(this$static));
  new ThemeFactoryVsCode;
  $clinit_ThemeFactory();
  $add_13(listeners, this$static);
  $getElement(get_5()).style['backgroundColor'] = convert($getColor((!theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_DOCUMENT_BACKGROUND)));
  $info(this$static.log_0, 'Starting GUI ...');
  $clinit_Program();
  new Program(($clinit_RuntimeType() , GWT));
  $setDev_mode(($clinit_SharedConfig() , $clinit_SharedConfig() , instance_0), getParameter('dev') != null);
  $clinit_WebStorage();
  clipboardStorage = new VsCodeClipboard;
  if ($init_3(clipboardStorage)) {
    if (typeof FileReader != 'undefined') {
      showInfo('Loading application ... please wait ...');
      runAsync(1, new BaseletGWT$1);
      (null , instance_0).dev_mode || addWindowClosingHandler(new BaseletGWT$2);
    }
     else {
      showFeatureNotSupported("Sorry, but your browser does not support the required HTML 5 feature 'file reader'<br/>Suggested browsers are Firefox, Chrome, Opera, Internet Explorer 10+", false);
    }
  }
   else {
    get_1() == ($clinit_Browser() , INTERNET_EXPLORER) && $startsWith(($clinit_Impl() , s = $doc.location.href , i = s.indexOf('#') , i != -1 && (s = s.substring(0, i)) , i = s.indexOf('?') , i != -1 && (s = s.substring(0, i)) , i = s.lastIndexOf('/') , i != -1 && (s = s.substring(0, i)) , s.length > 0?s + '/':''), 'file:')?showFeatureNotSupported('You have opened this webpage from your filesystem, therefore<br/>Internet Explorer will not support local storage<br/><br/>Please use another browser like Firefox or Chrome,<br/>or open this application using the web url', false):showFeatureNotSupported("Sorry, but your browser does not support the required HTML 5 feature 'local storage' (or has cookies disabled)<br/>Suggested browsers are Firefox, Chrome, Opera, Internet Explorer 10+", false);
  }
  $info(this$static.log_0, 'GUI started');
}

function $unwrap(this$static, e){
  var ue;
  if (instanceOf(e, 136)) {
    ue = castTo(e, 136);
    if (ue.causes.size_1() == 1) {
      return $unwrap(this$static, castTo(ue.causes.iterator().next_1(), 17));
    }
  }
  return e;
}

function BaseletGWT(){
  this.log_0 = getLogger();
}

defineClass(392, 1, {199:1}, BaseletGWT);
_.onThemeChange = function onThemeChange(){
  $getElement(get_5()).style['backgroundColor'] = convert($getColor(($clinit_ThemeFactory() , !theme_0 && changeTheme(($clinit_ThemeFactory$THEMES() , LIGHT), null, true) , $clinit_ThemeFactory() , theme_0), ($clinit_Theme$ColorStyle() , DEFAULT_DOCUMENT_BACKGROUND)));
}
;
var Lcom_baselet_gwt_client_BaseletGWT_2_classLit = createForClass('com.baselet.gwt.client', 'BaseletGWT', 392);
var Lcom_google_gwt_core_client_RunAsyncCallback_2_classLit = createForInterface('com.google.gwt.core.client', 'RunAsyncCallback');
function BaseletGWT$1(){
}

defineClass(403, 1, {306:1}, BaseletGWT$1);
var Lcom_baselet_gwt_client_BaseletGWT$1_2_classLit = createForClass('com.baselet.gwt.client', 'BaseletGWT/1', 403);
function BaseletGWT$2(){
}

defineClass(404, 1, {29:1, 1013:1}, BaseletGWT$2);
var Lcom_baselet_gwt_client_BaseletGWT$2_2_classLit = createForClass('com.baselet.gwt.client', 'BaseletGWT/2', 404);
function BaseletGWT$lambda$0$Type($$outer_0){
  this.$$outer_0 = $$outer_0;
}

defineClass(399, 1, {}, BaseletGWT$lambda$0$Type);
_.onUncaughtException = function onUncaughtException(arg0){
  $lambda$0(this.$$outer_0, arg0);
}
;
var Lcom_baselet_gwt_client_BaseletGWT$lambda$0$Type_2_classLit = createForClass('com.baselet.gwt.client', 'BaseletGWT/lambda$0$Type', 399);
function $clinit_Browser(){
  $clinit_Browser = emptyMethod;
  INTERNET_EXPLORER = new Browser('INTERNET_EXPLORER', 0, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['MSIE']));
  FIREFOX = new Browser('FIREFOX', 1, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Firefox']));
  CHROME = new Browser('CHROME', 2, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Chrome']));
  OPERA = new Browser('OPERA', 3, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Opera']));
  ANDROID_STOCK_BROWSER = new Browser('ANDROID_STOCK_BROWSER', 4, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Android']));
  UNKNOWN = new Browser('UNKNOWN', 5, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['######']));
}

function Browser(enum$name, enum$ordinal, browserFilters){
  Enum.call(this, enum$name, enum$ordinal);
  this.browserFilters = browserFilters;
}

function browserFiltersMatch(currentAgent, b){
  var filterString, filterString$array, filterString$index, filterString$max;
  for (filterString$array = b.browserFilters , filterString$index = 0 , filterString$max = filterString$array.length; filterString$index < filterString$max; ++filterString$index) {
    filterString = filterString$array[filterString$index];
    if ($indexOf_0(currentAgent, (checkCriticalNotNull(filterString) , filterString)) == -1) {
      return false;
    }
  }
  return true;
}

function get_1(){
  $clinit_Browser();
  var b, b$array, b$index, b$max, currentAgent;
  currentAgent = navigator.userAgent;
  for (b$array = stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_gwt_client_base_Browser_2_classLit, 1), $intern_5, 128, 0, [INTERNET_EXPLORER, FIREFOX, CHROME, OPERA, ANDROID_STOCK_BROWSER, UNKNOWN]) , b$index = 0 , b$max = b$array.length; b$index < b$max; ++b$index) {
    b = b$array[b$index];
    if (browserFiltersMatch(currentAgent, b)) {
      return b;
    }
  }
  return UNKNOWN;
}

function values_26(){
  $clinit_Browser();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_gwt_client_base_Browser_2_classLit, 1), $intern_5, 128, 0, [INTERNET_EXPLORER, FIREFOX, CHROME, OPERA, ANDROID_STOCK_BROWSER, UNKNOWN]);
}

defineClass(128, 8, {128:1, 3:1, 9:1, 8:1}, Browser);
var ANDROID_STOCK_BROWSER, CHROME, FIREFOX, INTERNET_EXPLORER, OPERA, UNKNOWN;
var Lcom_baselet_gwt_client_base_Browser_2_classLit = createForEnum('com.baselet.gwt.client.base', 'Browser', 128, values_26);
function convert(in_0){
  if (!in_0) {
    return null;
  }
  return 'rgba(' + in_0.red + ', ' + in_0.green + ',' + in_0.blue + ', ' + in_0.alpha_0 / 255 + ')';
}

function $clinit_Notification(){
  $clinit_Notification = emptyMethod;
  element_0 = $getElement(get_6('featurewarning'));
}

function showFeatureNotSupported(text_0, fadeOut){
  $clinit_Notification();
  if ($equals_6(text_0, lastShownFeatureNotSupportedText)) {
    return;
  }
  lastShownFeatureNotSupportedText = text_0;
  element_0.style['color'] = 'red';
  $setInnerHTML(element_0, text_0);
  fadeOut && fade_0(element_0, 7000, 3000);
}

function showInfo(text_0){
  $clinit_Notification();
  element_0.style['color'] = 'blue';
  $setInnerHTML(element_0, text_0);
  fade_0(element_0, 4000, 2000);
}

var element_0, lastShownFeatureNotSupportedText;
function fade(element, startOpacity, endOpacity, totalTimeMillis){
  var deltaOpacity, stepLengthMillis;
  stepLengthMillis = totalTimeMillis / 30 | 0;
  stepCount = 0;
  deltaOpacity = (endOpacity - startOpacity) / 30;
  timerFader = new Notification$ElementFader$2(startOpacity, deltaOpacity, element, endOpacity);
  $scheduleRepeating(timerFader, stepLengthMillis);
}

function fade_0(element, delay, totalTimeMillis){
  !!timer_0 && $cancel(timer_0);
  !!timerFader && $cancel(timerFader);
  $clinit_DOM();
  element.style['opacity'] = '1.0';
  timer_0 = new Notification$ElementFader$1(element, totalTimeMillis);
  $schedule(timer_0, delay);
}

var stepCount = 0, timer_0, timerFader;
function $cancel(this$static){
  if (!this$static.timerId) {
    return;
  }
  ++this$static.cancelCounter;
  this$static.isRepeating?clearInterval_0(this$static.timerId.value_0):clearTimeout_0(this$static.timerId.value_0);
  this$static.timerId = null;
}

function $schedule(this$static, delayMillis){
  if (delayMillis < 0) {
    throw toJs(new IllegalArgumentException_0('must be non-negative'));
  }
  !!this$static.timerId && $cancel(this$static);
  this$static.isRepeating = false;
  this$static.timerId = valueOf_9(setTimeout_0(createCallback(this$static, this$static.cancelCounter), delayMillis));
}

function $scheduleRepeating(this$static, periodMillis){
  if (periodMillis <= 0) {
    throw toJs(new IllegalArgumentException_0('must be positive'));
  }
  !!this$static.timerId && $cancel(this$static);
  this$static.isRepeating = true;
  this$static.timerId = valueOf_9(setInterval_0(createCallback(this$static, this$static.cancelCounter), periodMillis));
}

function Timer_0(){
}

function clearInterval_0(timerId){
  $wnd.clearInterval(timerId);
}

function clearTimeout_0(timerId){
  $wnd.clearTimeout(timerId);
}

function createCallback(timer, cancelCounter){
  return $entry(function(){
    timer.fire(cancelCounter);
  }
  );
}

function setInterval_0(func, time){
  return $wnd.setInterval(func, time);
}

function setTimeout_0(func, time){
  return $wnd.setTimeout(func, time);
}

defineClass(178, 1, {});
_.fire = function fire(scheduleCancelCounter){
  if (scheduleCancelCounter != this.cancelCounter) {
    return;
  }
  this.isRepeating || (this.timerId = null);
  this.run();
}
;
_.cancelCounter = 0;
_.isRepeating = false;
_.timerId = null;
var Lcom_google_gwt_user_client_Timer_2_classLit = createForClass('com.google.gwt.user.client', 'Timer', 178);
function Notification$ElementFader$1(val$element, val$totalTimeMillis){
  this.val$element1 = val$element;
  this.val$startOpacity2 = 1;
  this.val$endOpacity3 = 0;
  this.val$totalTimeMillis4 = val$totalTimeMillis;
  Timer_0.call(this);
}

defineClass(433, 178, {}, Notification$ElementFader$1);
_.run = function run_11(){
  fade(this.val$element1, this.val$startOpacity2, this.val$endOpacity3, this.val$totalTimeMillis4);
}
;
_.val$endOpacity3 = 0;
_.val$startOpacity2 = 0;
_.val$totalTimeMillis4 = 0;
var Lcom_baselet_gwt_client_base_Notification$ElementFader$1_2_classLit = createForClass('com.baselet.gwt.client.base', 'Notification/ElementFader/1', 433);
function Notification$ElementFader$2(val$startOpacity, val$deltaOpacity, val$element, val$endOpacity){
  this.val$startOpacity1 = val$startOpacity;
  this.val$deltaOpacity2 = val$deltaOpacity;
  this.val$element3 = val$element;
  this.val$endOpacity4 = val$endOpacity;
  Timer_0.call(this);
}

defineClass(434, 178, {}, Notification$ElementFader$2);
_.run = function run_12(){
  var opacity;
  opacity = this.val$startOpacity1 + stepCount * this.val$deltaOpacity2;
  setStyleAttribute(this.val$element3, '' + opacity);
  ++stepCount;
  if (stepCount == 30) {
    setStyleAttribute(this.val$element3, '' + this.val$endOpacity4);
    $cancel(this);
  }
}
;
_.val$deltaOpacity2 = 0;
_.val$endOpacity4 = 0;
_.val$startOpacity1 = 0;
var Lcom_baselet_gwt_client_base_Notification$ElementFader$2_2_classLit = createForClass('com.baselet.gwt.client.base', 'Notification/ElementFader/2', 434);
function $clinit_ClipboardStorage(){
  $clinit_ClipboardStorage = emptyMethod;
  getLogger();
}

defineClass(503, 1, {});
_.SAVE_PREFIX = 's_';
var Lcom_baselet_gwt_client_clipboard_ClipboardStorage_2_classLit = createForClass('com.baselet.gwt.client.clipboard', 'ClipboardStorage', 503);
function $setBoundsRect(this$static, rect){
  this$static.rect_0 = rect;
}

function ComponentGwt(element){
  this.canvas = createIfSupported();
  this.element = element;
  this.drawer = new DrawHandlerGwt(this.canvas);
  this.metadrawer = new DrawHandlerGwt(this.canvas);
}

defineClass(344, 1, {}, ComponentGwt);
_.lastSelected = false;
_.redrawNecessary = true;
var Lcom_baselet_gwt_client_element_ComponentGwt_2_classLit = createForClass('com.baselet.gwt.client.element', 'ComponentGwt', 344);
function $clinit_DiagramGwt(){
  $clinit_DiagramGwt = emptyMethod;
  LAYER_COMPARATOR_ASCENDING = new DiagramGwt$1;
  LAYER_COMPARATOR_DESCENDING = new DiagramGwt$2;
}

function $getStickables(this$static){
  var ge, ge$iterator, returnList;
  returnList = new ArrayList;
  for (ge$iterator = new ArrayList$1(this$static.gridElements); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 27);
    instanceOf(ge, 236) && $add_13(returnList, castTo(ge, 236));
  }
  return returnList;
}

function $getStickables_0(this$static, draggedElement, excludeList){
  var stickables, stickingBorder, stickingStickables;
  if (!($clinit_SharedConfig() , $clinit_SharedConfig() , instance_0).stickingEnabled) {
    return $clinit_StickableMap() , EMPTY_MAP;
  }
  stickables = $getStickables(this$static);
  $removeAll(stickables, excludeList);
  stickingBorder = draggedElement.generateStickingBorder();
  stickingStickables = getStickingPointsWhichAreConnectedToStickingPolygon(stickingBorder, stickables);
  return stickingStickables;
}

function DiagramGwt(helpText, gridElements){
  $clinit_DiagramGwt();
  this.helpText = helpText;
  this.gridElements = gridElements;
}

function DiagramGwt_0(gridElements){
  $clinit_DiagramGwt();
  DiagramGwt.call(this, null, gridElements);
}

defineClass(235, 1, $intern_82, DiagramGwt, DiagramGwt_0);
_.getPanelAttributes = function getPanelAttributes_0(){
  return this.helpText;
}
;
var LAYER_COMPARATOR_ASCENDING, LAYER_COMPARATOR_DESCENDING;
var Lcom_baselet_gwt_client_element_DiagramGwt_2_classLit = createForClass('com.baselet.gwt.client.element', 'DiagramGwt', 235);
function $compare_2(o1, o2){
  return $compareTo_3(o1.getLayer(), o2.getLayer());
}

function DiagramGwt$1(){
}

defineClass(678, 1, {}, DiagramGwt$1);
_.compare = function compare_2(o1, o2){
  return $compare_2(castTo(o1, 27), castTo(o2, 27));
}
;
_.equals_0 = function equals_15(other){
  return this === other;
}
;
var Lcom_baselet_gwt_client_element_DiagramGwt$1_2_classLit = createForClass('com.baselet.gwt.client.element', 'DiagramGwt/1', 678);
function $compare_3(o1, o2){
  return $compareTo_3(o2.getLayer(), o1.getLayer());
}

function DiagramGwt$2(){
}

defineClass(679, 1, {}, DiagramGwt$2);
_.compare = function compare_3(o1, o2){
  return $compare_3(castTo(o1, 27), castTo(o2, 27));
}
;
_.equals_0 = function equals_16(other){
  return this === other;
}
;
var Lcom_baselet_gwt_client_element_DiagramGwt$2_2_classLit = createForClass('com.baselet.gwt.client.element', 'DiagramGwt/2', 679);
function $clinit_DiagramXmlParser(){
  $clinit_DiagramXmlParser = emptyMethod;
  log_11 = getLogger();
}

function create(doc, name_0, children){
  var c, c$index, c$max, element;
  element = $createElement(doc, name_0);
  for (c$index = 0 , c$max = children.length; c$index < c$max; ++c$index) {
    c = children[c$index];
    $appendChild_0(element, c);
  }
  return element;
}

function diagramToXml(diagram){
  $clinit_DiagramXmlParser();
  var diagramElement, doc, ge, ge$iterator, helpText, xml;
  doc = ($clinit_XMLParser() , castTo(build($createDocumentImpl()), 1008));
  diagramElement = $createElement(doc, 'diagram');
  $setAttribute_0(diagramElement, 'program', 'umletino');
  $setAttribute_0(diagramElement, 'version', '14.4.0-SNAPSHOT');
  $appendChild_0(diagramElement, create(doc, 'zoom_level', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, '10')])));
  helpText = diagram.helpText;
  helpText != null && $appendChild_0(diagramElement, create(doc, 'help_text', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, helpText)])));
  $appendChild_0(doc, diagramElement);
  for (ge$iterator = new ArrayList$1(diagram.gridElements); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 27);
    $appendChild_0(diagramElement, create(doc, 'element', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [create(doc, 'id', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, $toString(ge.getId()))])), create(doc, 'coordinates', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [create(doc, 'x', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getRectangle().x_0 + '')])), create(doc, 'y', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getRectangle().y_0 + '')])), create(doc, 'w', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getRectangle().width_0 + '')])), create(doc, 'h', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getRectangle().height_0 + '')]))])), create(doc, 'panel_attributes', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getPanelAttributes())])), create(doc, 'additional_attributes', stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_xml_client_Node_2_classLit, 1), $intern_6, 76, 0, [$createTextNode(doc, ge.getAdditionalAttributes())]))])));
  }
  xml = ($clinit_XMLParserImpl() , $toStringImpl(doc));
  $debug(log_11, 'Deserializing to ' + xml);
  return xml;
}

function xmlToDiagram(xml){
  $clinit_DiagramXmlParser();
  var additionalAttrNode, additionalPanelAttributes, coord, diagram, element, elements, firstChild, gridElement, helpText, helpTextNode, i, id_0, messageDom, panelAttrNode, panelAttributes, rect, zoomElement, zoomScale;
  $debug(log_11, 'Serializing ' + xml);
  $equals_6(xml.substr(0, 1), '\uFEFF') && (xml = xml.substr(1));
  diagram = null;
  helpText = null;
  try {
    messageDom = ($clinit_XMLParser() , $parse_2(impl_3, xml));
    helpTextNode = build(item_1((new NodeListImpl(($clinit_XMLParserImpl() , messageDom.jsObject.selectNodes(".//*[local-name()='help_text']")))).jsObject, 0));
    if (helpTextNode) {
      firstChild = build(item_1((new NodeListImpl(getChildNodes(helpTextNode.jsObject))).jsObject, 0));
      firstChild?(helpText = getNodeValue(build(item_1((new NodeListImpl(getChildNodes(helpTextNode.jsObject))).jsObject, 0)).jsObject)):(helpText = '');
    }
    zoomScale = 1;
    zoomElement = build(item_1((new NodeListImpl(messageDom.jsObject.selectNodes(".//*[local-name()='zoom_level']"))).jsObject, 0));
    !!zoomElement && (zoomScale = (new Float(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(zoomElement.jsObject))).jsObject, 0)).jsObject))).value_0 / 10);
    diagram = new DiagramGwt(helpText, new ArrayList);
    elements = new NodeListImpl(messageDom.jsObject.selectNodes(".//*[local-name()='element']"));
    for (i = 0; i < getLength(elements.jsObject); i++) {
      element = castTo(build(item_1(elements.jsObject, i)), 388);
      try {
        id_0 = valueOf_2(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(element.jsObject.selectNodes(".//*[local-name()='id']"))).jsObject, 0)).jsObject))).jsObject, 0)).jsObject));
        coord = castTo(build(item_1((new NodeListImpl(element.jsObject.selectNodes(".//*[local-name()='coordinates']"))).jsObject, 0)), 388);
        rect = new Rectangle_0(valueOf_9(__parseAndValidateInt(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(coord.jsObject.selectNodes(".//*[local-name()='x']"))).jsObject, 0)).jsObject))).jsObject, 0)).jsObject), 10)).value_0, valueOf_9(__parseAndValidateInt(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(coord.jsObject.selectNodes(".//*[local-name()='y']"))).jsObject, 0)).jsObject))).jsObject, 0)).jsObject), 10)).value_0, valueOf_9(__parseAndValidateInt(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(coord.jsObject.selectNodes(".//*[local-name()='w']"))).jsObject, 0)).jsObject))).jsObject, 0)).jsObject), 10)).value_0, valueOf_9(__parseAndValidateInt(getNodeValue(build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(coord.jsObject.selectNodes(".//*[local-name()='h']"))).jsObject, 0)).jsObject))).jsObject, 0)).jsObject), 10)).value_0);
        panelAttributes = '';
        panelAttrNode = build(item_1((new NodeListImpl(getChildNodes(build(item_1((new NodeListImpl(element.jsObject.selectNodes(".//*[local-name()='panel_attributes']"))).jsObject, 0)).jsObject))).jsObject, 0));
        !!panelAttrNode && (panelAttributes = getNodeValue(panelAttrNode.jsObject));
        additionalPanelAttributes = '';
        additionalAttrNode = build(item_1((new NodeListImpl(element.jsObject.selectNodes(".//*[local-name()='additional_attributes']"))).jsObject, 0));
        !!additionalAttrNode && !!build(item_1((new NodeListImpl(getChildNodes(additionalAttrNode.jsObject))).jsObject, 0)) && (additionalPanelAttributes = getNodeValue(build(item_1((new NodeListImpl(getChildNodes(additionalAttrNode.jsObject))).jsObject, 0)).jsObject));
        if (zoomScale != 1) {
          $setX_0(rect, round_int(rect.x_0 / zoomScale));
          $setY_0(rect, round_int(rect.y_0 / zoomScale));
          $setWidth(rect, round_int(rect.width_0 / zoomScale));
          $setHeight(rect, round_int(rect.height_0 / zoomScale));
        }
        gridElement = create_0(id_0, rect, panelAttributes, additionalPanelAttributes, diagram);
        $add_13(diagram.gridElements, gridElement);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 14)) {
          $error_0(log_11, 'Element has invalid XML structure: ' + element);
          showFeatureNotSupported('Diagram has invalid element: ' + element, true);
        }
         else 
          throw toJs($e0);
      }
    }
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 186)) {
      $error_0(log_11, 'Parsing error');
      $wnd.alert('Could not parse XML document.');
    }
     else 
      throw toJs($e1);
  }
  return diagram;
}

var log_11;
function $clinit_DrawHandlerGwt(){
  $clinit_DrawHandlerGwt = emptyMethod;
  log_12 = getLogger();
}

function $ctxSetFont(this$static, fontSize, stringStyle){
  var htmlStyle;
  htmlStyle = '';
  stringStyle.format.contains_0(($clinit_FormatLabels() , BOLD)) && (htmlStyle += ' bold');
  stringStyle.format.contains_0(ITALIC) && (htmlStyle += ' italic');
  $setFont(this$static.ctx, htmlStyle + ' ' + fontSize + 'px sans-serif');
}

function $drawArc_0(this$static, x_0, y_0, width_0, height, start_0, extent, open_0){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$1(this$static, styleAtDrawingCall, x_0, width_0, y_0, height, open_0, start_0, extent));
}

function $drawCircle_0(this$static, x_0, y_0, radius){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$2(this$static, styleAtDrawingCall, x_0, y_0, radius));
}

function $drawEllipse_0(this$static, x_0, y_0, width_0, height){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$3(this$static, styleAtDrawingCall, x_0, y_0, width_0, height));
}

function $drawLines_0(this$static, points){
  var styleAtDrawingCall;
  if (points.length > 1) {
    styleAtDrawingCall = $cloneFromMe(this$static.style_0);
    $addDrawable(this$static, new DrawHandlerGwt$4(this$static, styleAtDrawingCall, points));
  }
}

function $drawRectangle_1(this$static, x_0, y_0, width_0, height){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$5(this$static, styleAtDrawingCall, x_0, y_0, width_0, height));
}

function $drawRectangleRound_0(this$static, x_0, y_0, width_0, height, radius){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$6(this$static, styleAtDrawingCall, x_0, y_0, width_0, height, radius));
}

function $printHelper(this$static, text_0, point, align_0){
  var styleAtDrawingCall;
  styleAtDrawingCall = $cloneFromMe(this$static.style_0);
  $addDrawable(this$static, new DrawHandlerGwt$7(this$static, point, styleAtDrawingCall, text_0, align_0));
}

function $textDimensionHelper(this$static, singleLine){
  var dim, oldFont;
  oldFont = this$static.ctx.font;
  $ctxSetFont(this$static, this$static.style_0.fontSize, singleLine);
  dim = new DimensionDouble($measureText(this$static.ctx, singleLine.stringWithoutMarkup).width, this$static.style_0.fontSize);
  $setFont(this$static.ctx, oldFont);
  return dim;
}

function DrawHandlerGwt(canvas){
  $clinit_DrawHandlerGwt();
  this.style_0 = new Style;
  this.overlay = new Style;
  this.drawablesBackground = new ArrayList;
  this.drawablesForeground = new ArrayList;
  this.ctx = ($clinit_DOM() , canvas.element).getContext('2d');
  this.scalingFactor = 1;
  this.scalingIsSet = false;
}

defineClass(346, 721, {}, DrawHandlerGwt);
_.scalingFactor = 0;
_.scalingIsSet = false;
var log_12;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt', 346);
function DrawHandlerGwt$1(this$0, val$styleAtDrawingCall, val$x, val$width, val$y, val$height, val$open, val$start, val$extent){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$x3 = val$x;
  this.val$width5 = val$width;
  this.val$y7 = val$y;
  this.val$height9 = val$height;
  this.val$open11 = val$open;
  this.val$start12 = val$start;
  this.val$extent14 = val$extent;
}

defineClass(279, 1, $intern_83, DrawHandlerGwt$1);
_.val$extent14 = 0;
_.val$height9 = 0;
_.val$open11 = false;
_.val$start12 = 0;
_.val$width5 = 0;
_.val$x3 = 0;
_.val$y7 = 0;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$1_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/1', 279);
function DrawHandlerGwt$2(this$0, val$styleAtDrawingCall, val$x, val$y, val$radius){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$x3 = val$x;
  this.val$y5 = val$y;
  this.val$radius7 = val$radius;
}

defineClass(347, 1, $intern_83, DrawHandlerGwt$2);
_.val$radius7 = 0;
_.val$x3 = 0;
_.val$y5 = 0;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$2_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/2', 347);
function DrawHandlerGwt$3(this$0, val$styleAtDrawingCall, val$x, val$y, val$width, val$height){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$x3 = val$x;
  this.val$y5 = val$y;
  this.val$width7 = val$width;
  this.val$height9 = val$height;
}

defineClass(160, 1, $intern_83, DrawHandlerGwt$3);
_.val$height9 = 0;
_.val$width7 = 0;
_.val$x3 = 0;
_.val$y5 = 0;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$3_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/3', 160);
function DrawHandlerGwt$4(this$0, val$styleAtDrawingCall, val$points){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$points3 = val$points;
}

defineClass(722, 1, $intern_83, DrawHandlerGwt$4);
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$4_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/4', 722);
function DrawHandlerGwt$5(this$0, val$styleAtDrawingCall, val$x, val$y, val$width, val$height){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$x3 = val$x;
  this.val$y5 = val$y;
  this.val$width7 = val$width;
  this.val$height9 = val$height;
}

defineClass(188, 1, $intern_83, DrawHandlerGwt$5);
_.val$height9 = 0;
_.val$width7 = 0;
_.val$x3 = 0;
_.val$y5 = 0;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$5_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/5', 188);
function DrawHandlerGwt$6(this$0, val$styleAtDrawingCall, val$x, val$y, val$width, val$height, val$radius){
  this.this$01 = this$0;
  this.val$styleAtDrawingCall2 = val$styleAtDrawingCall;
  this.val$x3 = val$x;
  this.val$y5 = val$y;
  this.val$width7 = val$width;
  this.val$height9 = val$height;
  this.val$radius11 = val$radius;
}

defineClass(280, 1, $intern_83, DrawHandlerGwt$6);
_.val$height9 = 0;
_.val$radius11 = 0;
_.val$width7 = 0;
_.val$x3 = 0;
_.val$y5 = 0;
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$6_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/6', 280);
function DrawHandlerGwt$7(this$0, val$point, val$styleAtDrawingCall, val$text, val$align){
  this.this$01 = this$0;
  this.val$point2 = val$point;
  this.val$styleAtDrawingCall3 = val$styleAtDrawingCall;
  this.val$text4 = val$text;
  this.val$align5 = val$align;
}

defineClass(348, 1, $intern_83, DrawHandlerGwt$7);
var Lcom_baselet_gwt_client_element_DrawHandlerGwt$7_2_classLit = createForClass('com.baselet.gwt.client.element', 'DrawHandlerGwt/7', 348);
function create_0(id_0, rect, panelAttributes, additionalPanelAttributes, diagram){
  var element, handler;
  element = createAssociatedGridElement(id_0);
  handler = new ElementFactoryGwt$1(diagram, element);
  $init(element, rect, panelAttributes, additionalPanelAttributes, new ComponentGwt(element), handler);
  element.panelAttributes = new Arrays$ArrayList($split(panelAttributes, '\n', -1));
  $updateModelFromText(element);
  return element;
}

function $getStickableMap(this$static){
  return $getStickables_0(this$static.val$diagram1, this$static.val$element2, ($clinit_Collections() , $clinit_Collections() , EMPTY_LIST));
}

function ElementFactoryGwt$1(val$diagram, val$element){
  this.val$diagram1 = val$diagram;
  this.val$element2 = val$element;
}

defineClass(677, 1, {}, ElementFactoryGwt$1);
var Lcom_baselet_gwt_client_element_ElementFactoryGwt$1_2_classLit = createForClass('com.baselet.gwt.client.element', 'ElementFactoryGwt/1', 677);
function $clinit_WebStorage(){
  $clinit_WebStorage = emptyMethod;
  getLogger_1(($ensureNamesAreInitialized(Lcom_baselet_gwt_client_BaseletGWT_2_classLit) , Lcom_baselet_gwt_client_BaseletGWT_2_classLit.typeName));
}

function setClipboard(gridelements){
  $clinit_WebStorage();
  $set_2(($clinit_DiagramXmlParser() , diagramToXml(new DiagramGwt_0(gridelements))));
}

var clipboardStorage;
function getLogger(){
  var logger;
  logger = new VsCodeLogger;
  $initListener_0(logger);
  logger.levelValue = $getLevel_0(getLogger_0('')).intValue();
  return logger;
}

function $clinit_CommandInvoker(){
  $clinit_CommandInvoker = emptyMethod;
  instance_1 = new CommandInvoker;
}

function $copyElementsInList(sourceElements, targetDiagram){
  var e, ge, ge$iterator, targetElements;
  targetElements = new ArrayList;
  for (ge$iterator = new ArrayList$1(sourceElements); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 27);
    e = create_0(ge.getId(), $copy_0(ge.getRectangle()), ge.getPanelAttributes(), ge.getAdditionalAttributes(), targetDiagram);
    targetElements.array[targetElements.array.length] = e;
  }
  return targetElements;
}

function $copySelectedElements(target){
  setClipboard($copyElementsInList(target.getSelector().getSelectedElements(), target.getDiagram()));
}

function $cutSelectedElements(this$static, target){
  setClipboard($copyElementsInList(target.getSelector().getSelectedElements(), target.getDiagram()));
  $executeCommand(this$static, new RemoveGridElementCommand(target, target.getSelector().getSelectedElements()));
}

function $executePaste(this$static, target, content_0, pasteTargetPosition){
  var copyOfElements, xOffset, yOffset;
  copyOfElements = $copyElementsInList(($clinit_DiagramXmlParser() , xmlToDiagram(content_0).gridElements), target.getDiagram());
  replaceGroupsWithNewGroups(copyOfElements, target.getSelector());
  $realignElementsToVisibleRect(target, copyOfElements);
  pasteTargetPosition?snapElementsToPointPosition(copyOfElements, target, pasteTargetPosition):(xOffset = target.getVisibleBounds().x_0 + target.getAbsoluteLeft() , yOffset = target.getVisibleBounds().y_0 + target.getAbsoluteTop() , snapElementsToPointPosition(copyOfElements, target, new Point(xOffset + 10, yOffset + 10)) , undefined);
  $executeCommand(this$static, new AddGridElementCommand(target, copyOfElements));
}

function $realignElementsToVisibleRect(target, gridElements){
  var ge, ge$iterator, rect, visible;
  rect = getGridElementsRectangle(gridElements);
  visible = target.getVisibleBounds();
  for (ge$iterator = gridElements.iterator(); ge$iterator.hasNext_0();) {
    ge = castTo(ge$iterator.next_1(), 27);
    $move_0(ge.getRectangle(), visible.x_0 - rect.x_0 + 10, visible.y_0 - rect.y_0 + 10);
  }
}

function CommandInvoker(){
  this.commands = new ArrayList;
  this._cursor = -1;
}

defineClass(562, 561, {}, CommandInvoker);
var instance_1;
var Lcom_baselet_gwt_client_view_CommandInvoker_2_classLit = createForClass('com.baselet.gwt.client.view', 'CommandInvoker', 562);
function $getElement(this$static){
  return $clinit_DOM() , this$static.element;
}

function $setElement(this$static, elem){
  $setElement_0(this$static, ($clinit_DOM() , elem));
}

function $setElement_0(this$static, elem){
  this$static.element = elem;
}

defineClass(21, 1, $intern_84);
_.getElement = function getElement(){
  return $getElement(this);
}
;
_.toString_0 = function toString_31(){
  if (!this.element) {
    return '(null handle)';
  }
  return this.getElement().outerHTML;
}
;
var Lcom_google_gwt_user_client_ui_UIObject_2_classLit = createForClass('com.google.gwt.user.client.ui', 'UIObject', 21);
function $onAttach(this$static){
  var bitsToAdd;
  if (this$static.isAttached()) {
    throw toJs(new IllegalStateException_0("Should only call onAttach when the widget is detached from the browser's document"));
  }
  this$static.attached = true;
  $clinit_DOM();
  setEventListener(this$static.getElement(), this$static);
  bitsToAdd = this$static.eventsToSink;
  this$static.eventsToSink = -1;
  bitsToAdd > 0 && (this$static.eventsToSink == -1?sinkEvents(this$static.getElement(), bitsToAdd | (this$static.getElement().__eventBits || 0)):(this$static.eventsToSink |= bitsToAdd));
  this$static.doAttachChildren();
  this$static.onLoad();
  fire_0(this$static, true);
}

function $onBrowserEvent(this$static, event_0){
  var related;
  switch ($clinit_DOM() , $eventGetTypeInt(event_0.type)) {
    case 16:
    case 32:
      related = event_0.relatedTarget;
      if (!!related && isOrHasChildImpl(this$static.getElement(), related)) {
        return;
      }

  }
  fireNativeEvent(event_0, this$static, this$static.getElement());
}

function $onDetach(this$static){
  if (!this$static.isAttached()) {
    throw toJs(new IllegalStateException_0("Should only call onDetach when the widget is attached to the browser's document"));
  }
  try {
    this$static.onUnload();
    fire_0(this$static, false);
  }
   finally {
    try {
      this$static.doDetachChildren();
    }
     finally {
      $clinit_DOM();
      this$static.getElement().__listener = null;
      this$static.attached = false;
    }
  }
}

function $removeFromParent(this$static){
  if (!this$static.parent_0) {
    $clinit_RootPanel();
    $contains_4(widgetsToDetach, this$static) && detachNow(this$static);
  }
   else if (instanceOf(this$static.parent_0, 51)) {
    castTo(this$static.parent_0, 51).remove_1(this$static);
  }
   else if (this$static.parent_0) {
    throw toJs(new IllegalStateException_0("This widget's parent does not implement HasWidgets"));
  }
}

function $setParent(this$static, parent_0){
  var oldParent;
  oldParent = this$static.parent_0;
  if (!parent_0) {
    try {
      !!oldParent && oldParent.isAttached() && this$static.onDetach();
    }
     finally {
      this$static.parent_0 = null;
    }
  }
   else {
    if (oldParent) {
      throw toJs(new IllegalStateException_0('Cannot set a new parent without first clearing the old parent'));
    }
    this$static.parent_0 = parent_0;
    parent_0.isAttached() && this$static.onAttach();
  }
}

defineClass(24, 21, $intern_85);
_.doAttachChildren = function doAttachChildren(){
}
;
_.doDetachChildren = function doDetachChildren(){
}
;
_.fireEvent = function fireEvent(event_0){
  !!this.handlerManager && $fireEvent(this.handlerManager, event_0);
}
;
_.isAttached = function isAttached(){
  return this.attached;
}
;
_.onAttach = function onAttach(){
  $onAttach(this);
}
;
_.onBrowserEvent = function onBrowserEvent(event_0){
  $onBrowserEvent(this, event_0);
}
;
_.onDetach = function onDetach(){
  $onDetach(this);
}
;
_.onLoad = function onLoad(){
}
;
_.onUnload = function onUnload(){
}
;
_.attached = false;
_.eventsToSink = 0;
var Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Widget', 24);
defineClass(1033, 24, $intern_86);
_.doAttachChildren = function doAttachChildren_0(){
  tryCommand(this, ($clinit_AttachDetachException() , attachCommand));
}
;
_.doDetachChildren = function doDetachChildren_0(){
  tryCommand(this, ($clinit_AttachDetachException() , detachCommand));
}
;
var Lcom_google_gwt_user_client_ui_Panel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Panel', 1033);
function snapElementsToPointPosition(elementList, targetPanel, point){
  var e, e$iterator, i, pivotX, pivotY, remX, remY, xOffset, xPosition, yOffset, yPosition;
  if (elementList.array.length <= 0) {
    return;
  }
  pivotX = (checkCriticalElementIndex(0, elementList.array.length) , castTo(elementList.array[0], 27)).getRectangle().x_0;
  pivotY = (checkCriticalElementIndex(0, elementList.array.length) , castTo(elementList.array[0], 27)).getRectangle().y_0;
  for (i = 1; i < elementList.array.length; i++) {
    xPosition = (checkCriticalElementIndex(i, elementList.array.length) , castTo(elementList.array[i], 27)).getRectangle().x_0;
    yPosition = (checkCriticalElementIndex(i, elementList.array.length) , castTo(elementList.array[i], 27)).getRectangle().y_0;
    xPosition < pivotX && (pivotX = xPosition);
    yPosition < pivotY && (pivotY = yPosition);
  }
  remX = point.x_0 % 10;
  remY = point.y_0 % 10;
  $setX(point, remX >= 5?point.x_0 - remX + 10:point.x_0 - remX);
  $setY(point, remY >= 5?point.y_0 - remY + 10:point.y_0 - remY);
  for (e$iterator = new ArrayList$1(elementList); e$iterator.i < e$iterator.this$01.array.length;) {
    e = castTo($next_3(e$iterator), 27);
    xOffset = e.getRectangle().x_0 - pivotX;
    yOffset = e.getRectangle().y_0 - pivotY;
    targetPanel.getVisibleBounds();
    e.setLocation(xOffset + point.x_0 - targetPanel.getAbsoluteLeft(), yOffset + point.y_0 - targetPanel.getAbsoluteTop());
  }
}

function $clinit_EventHandlingUtils(){
  $clinit_EventHandlingUtils = emptyMethod;
  DRAG_COMMANDS = new Arrays$ArrayList(stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_gwt_client_view_EventHandlingUtils$DragStatus_2_classLit, 1), $intern_5, 184, 0, [($clinit_EventHandlingUtils$DragStatus() , FIRST), CONTINUOUS]));
}

var DRAG_COMMANDS, storageInstance;
function $clinit_EventHandlingUtils$DragStatus(){
  $clinit_EventHandlingUtils$DragStatus = emptyMethod;
  FIRST = new EventHandlingUtils$DragStatus('FIRST', 0);
  CONTINUOUS = new EventHandlingUtils$DragStatus('CONTINUOUS', 1);
  NO = new EventHandlingUtils$DragStatus('NO', 2);
}

function EventHandlingUtils$DragStatus(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_29(){
  $clinit_EventHandlingUtils$DragStatus();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_baselet_gwt_client_view_EventHandlingUtils$DragStatus_2_classLit, 1), $intern_5, 184, 0, [FIRST, CONTINUOUS, NO]);
}

defineClass(184, 8, {184:1, 3:1, 9:1, 8:1}, EventHandlingUtils$DragStatus);
var CONTINUOUS, FIRST, NO;
var Lcom_baselet_gwt_client_view_EventHandlingUtils$DragStatus_2_classLit = createForEnum('com.baselet.gwt.client.view', 'EventHandlingUtils/DragStatus', 184, values_29);
function $add_4(this$static, child, container){
  $removeFromParent(child);
  $add_10(this$static.children, child);
  $clinit_DOM();
  $appendChild(container, resolve_0(child.getElement()));
  $setParent(child, this$static);
}

function $remove_0(this$static, w){
  var elem;
  if (w.parent_0 != this$static) {
    return false;
  }
  try {
    $setParent(w, null);
  }
   finally {
    elem = w.getElement();
    $removeChild(($clinit_DOM() , $clinit_DOM() , $getParentElement(elem)), elem);
    $remove_8(this$static.children, w);
  }
  return true;
}

function ComplexPanel(){
  this.children = new WidgetCollection(this);
}

defineClass(202, 1033, $intern_86);
_.iterator = function iterator_2(){
  return new WidgetCollection$WidgetIterator(this.children);
}
;
_.remove_1 = function remove_3(w){
  return $remove_0(this, w);
}
;
var Lcom_google_gwt_user_client_ui_ComplexPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'ComplexPanel', 202);
defineClass(1015, 1, {});
_.toString_0 = function toString_32(){
  return 'An event type';
}
;
var Lcom_google_web_bindery_event_shared_Event_2_classLit = createForClass('com.google.web.bindery.event.shared', 'Event', 1015);
function $overrideSource(this$static, source){
  this$static.source = source;
}

defineClass(1014, 1015, {});
_.revive = function revive(){
  this.dead = false;
  this.source = null;
}
;
_.dead = false;
var Lcom_google_gwt_event_shared_GwtEvent_2_classLit = createForClass('com.google.gwt.event.shared', 'GwtEvent', 1014);
function fireNativeEvent(nativeEvent, handlerSource, relativeElem){
  var currentNative, currentRelativeElem, type_0, type$iterator, types;
  if (registered) {
    types = castTo(registered.unsafeGet(nativeEvent.type), 41);
    if (types) {
      for (type$iterator = types.iterator(); type$iterator.hasNext_0();) {
        type_0 = castTo(type$iterator.next_1(), 54);
        currentNative = type_0.flyweight.nativeEvent;
        currentRelativeElem = type_0.flyweight.relativeElem;
        type_0.flyweight.setNativeEvent(nativeEvent);
        type_0.flyweight.setRelativeElement(relativeElem);
        handlerSource.fireEvent(type_0.flyweight);
        type_0.flyweight.setNativeEvent(currentNative);
        type_0.flyweight.setRelativeElement(currentRelativeElem);
      }
    }
  }
}

var registered;
defineClass(268, 24, $intern_85);
_.onAttach = function onAttach_3(){
  var tabIndex;
  $onAttach(this);
  tabIndex = $getTabIndex(($clinit_DOM() , this.element));
  -1 == tabIndex && (this.element.tabIndex = 0 , undefined);
}
;
var Lcom_google_gwt_user_client_ui_FocusWidget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'FocusWidget', 268);
function $containsEntry(this$static, entry){
  var key, ourValue, value_0;
  key = entry.getKey();
  value_0 = entry.getValue_0();
  ourValue = this$static.get_1(key);
  if (!(maskUndefined(value_0) === maskUndefined(ourValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, ourValue))) {
    return false;
  }
  if (ourValue == null && !this$static.containsKey(key)) {
    return false;
  }
  return true;
}

function $implFindEntry(this$static, key, remove){
  var entry, iter, k;
  for (iter = this$static.entrySet_0().iterator(); iter.hasNext_0();) {
    entry = castTo(iter.next_1(), 46);
    k = entry.getKey();
    if (maskUndefined(key) === maskUndefined(k) || key != null && equals_Ljava_lang_Object__Z__devirtual$(key, k)) {
      if (remove) {
        entry = new AbstractMap$SimpleEntry(entry.getKey(), entry.getValue_0());
        iter.remove_3();
      }
      return entry;
    }
  }
  return null;
}

function $toString_4(this$static, o){
  return o === this$static?'(this Map)':o == null?'null':toString_36(o);
}

function getEntryValueOrNull(entry){
  return !entry?null:entry.getValue_0();
}

defineClass(1035, 1, $intern_87);
_.containsEntry = function containsEntry(entry){
  return $containsEntry(this, entry);
}
;
_.containsKey = function containsKey(key){
  return !!$implFindEntry(this, key, false);
}
;
_.equals_0 = function equals_17(obj){
  var entry, entry$iterator, otherMap;
  if (obj === this) {
    return true;
  }
  if (!instanceOf(obj, 82)) {
    return false;
  }
  otherMap = castTo(obj, 82);
  if (this.size_1() != otherMap.size_1()) {
    return false;
  }
  for (entry$iterator = otherMap.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 46);
    if (!this.containsEntry(entry)) {
      return false;
    }
  }
  return true;
}
;
_.get_1 = function get_2(key){
  return getEntryValueOrNull($implFindEntry(this, key, false));
}
;
_.hashCode_0 = function hashCode_14(){
  return hashCode_29(this.entrySet_0());
}
;
_.put = function put(key, value_0){
  throw toJs(new UnsupportedOperationException_0('Put not supported on this map'));
}
;
_.size_1 = function size_2(){
  return this.entrySet_0().size_1();
}
;
_.toString_0 = function toString_33(){
  var entry, entry$iterator, joiner;
  joiner = new StringJoiner('{', '}');
  for (entry$iterator = this.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 46);
    $add_17(joiner, $toString_4(this, entry.getKey()) + '=' + $toString_4(this, entry.getValue_0()));
  }
  return !joiner.builder?joiner.emptyValue:joiner.suffix.length == 0?joiner.builder.string:joiner.builder.string + ('' + joiner.suffix);
}
;
var Ljava_util_AbstractMap_2_classLit = createForClass('java.util', 'AbstractMap', 1035);
function $containsKey_0(this$static, key){
  return instanceOfString(key)?$hasStringValue(this$static, key):!!$getEntry(this$static.hashCodeMap, key);
}

function $containsValue(this$static, value_0, entries){
  var entry, entry$iterator;
  for (entry$iterator = entries.iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 46);
    if (this$static.equals_1(value_0, entry.getValue_0())) {
      return true;
    }
  }
  return false;
}

function $get_0(this$static, key){
  return instanceOfString(key)?$getStringValue(this$static, key):getEntryValueOrNull($getEntry(this$static.hashCodeMap, key));
}

function $getStringValue(this$static, key){
  return key == null?getEntryValueOrNull($getEntry(this$static.hashCodeMap, null)):$get_9(this$static.stringMap, key);
}

function $hasStringValue(this$static, key){
  return key == null?!!$getEntry(this$static.hashCodeMap, null):$contains_5(this$static.stringMap, key);
}

function $put(this$static, key, value_0){
  return instanceOfString(key)?$putStringValue(this$static, key, value_0):$put_1(this$static.hashCodeMap, key, value_0);
}

function $putStringValue(this$static, key, value_0){
  return key == null?$put_1(this$static.hashCodeMap, null, value_0):$put_2(this$static.stringMap, key, value_0);
}

function $remove_2(this$static, key){
  return instanceOfString(key)?$removeStringValue(this$static, key):$remove_17(this$static.hashCodeMap, key);
}

function $removeStringValue(this$static, key){
  return key == null?$remove_17(this$static.hashCodeMap, null):$remove_18(this$static.stringMap, key);
}

function $reset_0(this$static){
  this$static.hashCodeMap = new InternalHashCodeMap(this$static);
  this$static.stringMap = new InternalStringMap(this$static);
  structureChanged(this$static);
}

function $size(this$static){
  return this$static.hashCodeMap.size_0 + this$static.stringMap.size_0;
}

function AbstractHashMap(ignored, alsoIgnored){
  checkCriticalArgument(ignored >= 0, 'Negative initial capacity');
  checkCriticalArgument(alsoIgnored >= 0, 'Non-positive load factor');
  $reset_0(this);
}

defineClass(227, 1035, $intern_87);
_.containsKey = function containsKey_0(key){
  return $containsKey_0(this, key);
}
;
_.containsValue = function containsValue(value_0){
  return $containsValue(this, value_0, this.stringMap) || $containsValue(this, value_0, this.hashCodeMap);
}
;
_.entrySet_0 = function entrySet(){
  return new AbstractHashMap$EntrySet(this);
}
;
_.get_1 = function get_3(key){
  return $get_0(this, key);
}
;
_.put = function put_0(key, value_0){
  return $put(this, key, value_0);
}
;
_.size_1 = function size_3(){
  return $size(this);
}
;
var Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util', 'AbstractHashMap', 227);
function HashMap(){
  $reset_0(this);
}

function HashMap_0(ignored){
  AbstractHashMap.call(this, ignored, 0);
}

defineClass(36, 227, $intern_88, HashMap, HashMap_0);
_.equals_1 = function equals_18(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.getHashCode = function getHashCode(key){
  var hashCode;
  hashCode = hashCode__I__devirtual$(key);
  return hashCode | 0;
}
;
var Ljava_util_HashMap_2_classLit = createForClass('java.util', 'HashMap', 36);
function $$init_0(this$static){
  this$static.head_0 = new LinkedHashMap$ChainEntry(this$static);
  this$static.map_0 = new HashMap;
}

function $containsKey_1(this$static, key){
  return $containsKey_0(this$static.map_0, key);
}

function $get_1(this$static, key){
  var entry;
  entry = castTo($get_0(this$static.map_0, key), 167);
  if (entry) {
    $recordAccess(this$static, entry);
    return entry.value_0;
  }
  return null;
}

function $put_0(this$static, key, value_0){
  var eldest, newEntry, old, oldValue;
  old = castTo($get_0(this$static.map_0, key), 167);
  if (!old) {
    newEntry = new LinkedHashMap$ChainEntry_0(this$static, key, value_0);
    $put(this$static.map_0, key, newEntry);
    $addToEnd(newEntry);
    eldest = this$static.head_0.next_0;
    if (this$static.removeEldestEntry(eldest)) {
      $remove_19(eldest);
      $remove_2(this$static.map_0, eldest.key);
    }
    return null;
  }
   else {
    oldValue = $setValue_1(old, value_0);
    $recordAccess(this$static, old);
    return oldValue;
  }
}

function $recordAccess(this$static, entry){
  if (this$static.accessOrder) {
    $remove_19(entry);
    $addToEnd(entry);
  }
}

function LinkedHashMap(){
  HashMap.call(this);
  $$init_0(this);
  this.head_0.prev = this.head_0;
  this.head_0.next_0 = this.head_0;
}

function LinkedHashMap_0(ignored){
  AbstractHashMap.call(this, ignored, $intern_89);
  $$init_0(this);
  this.accessOrder = true;
  this.head_0.prev = this.head_0;
  this.head_0.next_0 = this.head_0;
}

defineClass(363, 36, $intern_88, LinkedHashMap);
_.containsKey = function containsKey_1(key){
  return $containsKey_1(this, key);
}
;
_.containsValue = function containsValue_0(value_0){
  var node;
  node = this.head_0.next_0;
  while (node != this.head_0) {
    if (equals_38(node.value_0, value_0)) {
      return true;
    }
    node = node.next_0;
  }
  return false;
}
;
_.entrySet_0 = function entrySet_0(){
  return new LinkedHashMap$EntrySet(this);
}
;
_.get_1 = function get_4(key){
  return $get_1(this, key);
}
;
_.put = function put_1(key, value_0){
  return $put_0(this, key, value_0);
}
;
_.removeEldestEntry = function removeEldestEntry(eldest){
  return false;
}
;
_.size_1 = function size_4(){
  return $size(this.map_0);
}
;
_.accessOrder = false;
var Ljava_util_LinkedHashMap_2_classLit = createForClass('java.util', 'LinkedHashMap', 363);
function LRUCache(cacheSize){
  LinkedHashMap_0.call(this, round_int((cacheSize + 1) / $intern_89) + 1);
  this.cacheSize = cacheSize;
}

defineClass(298, 363, $intern_88, LRUCache);
_.removeEldestEntry = function removeEldestEntry_0(eldest){
  return $size(this.map_0) >= this.cacheSize;
}
;
_.cacheSize = 0;
var Lcom_baselet_util_LRUCache_2_classLit = createForClass('com.baselet.util', 'LRUCache', 298);
function $cancel_0(this$static){
  if (!this$static.isRunning) {
    return;
  }
  this$static.wasStarted = this$static.isStarted;
  this$static.element = null;
  this$static.isRunning = false;
  this$static.isStarted = false;
  if (this$static.requestHandle) {
    this$static.requestHandle.cancel_0();
    this$static.requestHandle = null;
  }
  this$static.onCancel();
}

function $run(this$static, duration, startTime, element){
  $cancel_0(this$static);
  this$static.isRunning = true;
  this$static.isStarted = false;
  this$static.duration = duration;
  this$static.startTime = startTime;
  this$static.element = element;
  ++this$static.runId;
  $execute(this$static.callback, now_1());
}

function $run_0(this$static, duration, element){
  $run(this$static, duration, now_1(), element);
}

function $update(this$static, curTime){
  var curRunId, finished, progress;
  curRunId = this$static.runId;
  finished = curTime >= this$static.startTime + this$static.duration;
  if (this$static.isStarted && !finished) {
    progress = (curTime - this$static.startTime) / this$static.duration;
    this$static.onUpdate((1 + $wnd.Math.cos($intern_17 + progress * $intern_17)) / 2);
    return this$static.isRunning && this$static.runId == curRunId;
  }
  if (!this$static.isStarted && curTime >= this$static.startTime) {
    this$static.isStarted = true;
    this$static.onStart();
    if (!(this$static.isRunning && this$static.runId == curRunId)) {
      return false;
    }
  }
  if (finished) {
    this$static.isRunning = false;
    this$static.isStarted = false;
    this$static.onComplete();
    return false;
  }
  return true;
}

function Animation(){
  Animation_0.call(this, (!instance_3 && (instance_3 = !!$wnd.requestAnimationFrame && !!$wnd.cancelAnimationFrame?new AnimationSchedulerImplStandard:new AnimationSchedulerImplTimer) , instance_3));
}

function Animation_0(scheduler){
  this.callback = new Animation$1(this);
  this.scheduler = scheduler;
}

defineClass(260, 1, {});
_.onCancel = function onCancel(){
  this.wasStarted && this.onComplete();
}
;
_.onComplete = function onComplete(){
  this.onUpdate((1 + $wnd.Math.cos($intern_90)) / 2);
}
;
_.onStart = function onStart(){
  this.onUpdate((1 + $wnd.Math.cos($intern_17)) / 2);
}
;
_.duration = -1;
_.isRunning = false;
_.isStarted = false;
_.runId = -1;
_.startTime = -1;
_.wasStarted = false;
var Lcom_google_gwt_animation_client_Animation_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation', 260);
function $execute(this$static, timestamp){
  $update(this$static.this$01, timestamp)?(this$static.this$01.requestHandle = this$static.this$01.scheduler.requestAnimationFrame_0(this$static.this$01.callback, this$static.this$01.element)):(this$static.this$01.requestHandle = null);
}

function Animation$1(this$0){
  this.this$01 = this$0;
}

defineClass(535, 1, {}, Animation$1);
_.execute_0 = function execute_20(timestamp){
  $execute(this, timestamp);
}
;
var Lcom_google_gwt_animation_client_Animation$1_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation/1', 535);
defineClass(1066, 1, {});
var instance_3;
var Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler', 1066);
defineClass(282, 1, {282:1});
var Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler/AnimationHandle', 282);
function AnimationSchedulerImplStandard(){
}

function cancelImpl(holder){
  $wnd.cancelAnimationFrame(holder.id);
}

function requestImpl(cb, element){
  var callback = $entry(function(){
    var time = now_1();
    cb.execute_0(time);
  }
  );
  var handle = $wnd.requestAnimationFrame(callback, element);
  return {id:handle};
}

defineClass(769, 1066, {}, AnimationSchedulerImplStandard);
_.requestAnimationFrame_0 = function requestAnimationFrame_0(callback, element){
  var handle;
  handle = requestImpl(callback, element);
  return new AnimationSchedulerImplStandard$1(handle);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard', 769);
function AnimationSchedulerImplStandard$1(val$handle){
  this.val$handle2 = val$handle;
}

defineClass(770, 282, {282:1}, AnimationSchedulerImplStandard$1);
_.cancel_0 = function cancel(){
  cancelImpl(this.val$handle2);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard/1', 770);
function $cancelAnimationFrame(this$static, requestId){
  $remove_13(this$static.animationRequests, requestId);
  this$static.animationRequests.array.length == 0 && $cancel(this$static.timer);
}

function $updateAnimations(this$static){
  var curAnimations, duration, requestId, requestId$index, requestId$max;
  curAnimations = initUnidimensionalArray(Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit, {1010:1, 3:1, 4:1}, 283, this$static.animationRequests.array.length, 0, 1);
  curAnimations = castTo($toArray_1(this$static.animationRequests, curAnimations), 1010);
  duration = new Duration;
  for (requestId$index = 0 , requestId$max = curAnimations.length; requestId$index < requestId$max; ++requestId$index) {
    requestId = curAnimations[requestId$index];
    $remove_13(this$static.animationRequests, requestId);
    $execute(requestId.callback, duration.start_0);
  }
  this$static.animationRequests.array.length > 0 && $schedule(this$static.timer, $wnd.Math.max(5, 16 - (now_1() - duration.start_0)));
}

function AnimationSchedulerImplTimer(){
  this.animationRequests = new ArrayList;
  this.timer = new AnimationSchedulerImplTimer$1(this);
}

defineClass(771, 1066, {}, AnimationSchedulerImplTimer);
_.requestAnimationFrame_0 = function requestAnimationFrame_1(callback, element){
  var requestId;
  requestId = new AnimationSchedulerImplTimer$AnimationHandleImpl(this, callback);
  $add_13(this.animationRequests, requestId);
  this.animationRequests.array.length == 1 && $schedule(this.timer, 16);
  return requestId;
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer', 771);
function AnimationSchedulerImplTimer$1(this$0){
  this.this$01 = this$0;
  Timer_0.call(this);
}

defineClass(772, 178, {}, AnimationSchedulerImplTimer$1);
_.run = function run_21(){
  $updateAnimations(this.this$01);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/1', 772);
function AnimationSchedulerImplTimer$AnimationHandleImpl(this$0, callback){
  this.this$01 = this$0;
  this.callback = callback;
}

defineClass(283, 282, {282:1, 283:1}, AnimationSchedulerImplTimer$AnimationHandleImpl);
_.cancel_0 = function cancel_0(){
  $cancelAnimationFrame(this.this$01, this);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/AnimationHandleImpl', 283);
function $getAriaValue(this$static, value_0){
  var buf, item_0, item$index, item$max;
  buf = new StringBuilder;
  for (item$index = 0 , item$max = value_0.length; item$index < item$max; ++item$index) {
    item_0 = value_0[item$index];
    $append_5($append_5(buf, this$static.getSingleValue(item_0)), ' ');
  }
  return $trim(buf.string);
}

function $set_1(this$static, element, values){
  $setAttribute(element, this$static.name_0, $getAriaValue(this$static, values));
}

function Attribute(name_0){
  this.name_0 = name_0;
}

defineClass(343, 1, {});
var Lcom_google_gwt_aria_client_Attribute_2_classLit = createForClass('com.google.gwt.aria.client', 'Attribute', 343);
function AriaValueAttribute(name_0){
  Attribute.call(this, name_0);
}

defineClass(80, 343, {}, AriaValueAttribute);
_.getSingleValue = function getSingleValue(value_0){
  return castTo(value_0, 1088).getAriaValue();
}
;
var Lcom_google_gwt_aria_client_AriaValueAttribute_2_classLit = createForClass('com.google.gwt.aria.client', 'AriaValueAttribute', 80);
function PrimitiveValueAttribute(name_0){
  Attribute.call(this, name_0);
}

defineClass(85, 343, {}, PrimitiveValueAttribute);
_.getSingleValue = function getSingleValue_0(value_0){
  return value_0 == null?'null':toString_36(value_0);
}
;
var Lcom_google_gwt_aria_client_PrimitiveValueAttribute_2_classLit = createForClass('com.google.gwt.aria.client', 'PrimitiveValueAttribute', 85);
function $clinit_State(){
  $clinit_State = emptyMethod;
  new PrimitiveValueAttribute('aria-busy');
  new AriaValueAttribute('aria-checked');
  new PrimitiveValueAttribute('aria-disabled');
  new AriaValueAttribute('aria-expanded');
  new AriaValueAttribute('aria-grabbed');
  HIDDEN = new PrimitiveValueAttribute('aria-hidden');
  new AriaValueAttribute('aria-invalid');
  new AriaValueAttribute('aria-pressed');
  new AriaValueAttribute('aria-selected');
}

var HIDDEN;
function Canvas_1(element){
  $setElement_0(this, ($clinit_DOM() , element));
}

function createIfSupported(){
  var element;
  !detector && (detector = new Canvas$CanvasElementSupportDetectedMaybe);
  element = $doc.createElement('canvas');
  if (!element.getContext) {
    return null;
  }
  return new Canvas_1(element);
}

defineClass(680, 268, $intern_85, Canvas_1);
var detector;
var Lcom_google_gwt_canvas_client_Canvas_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas', 680);
defineClass(1056, 1, {});
var Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetector_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas/CanvasElementSupportDetector', 1056);
function Canvas$CanvasElementSupportDetectedMaybe(){
}

defineClass(681, 1056, {}, Canvas$CanvasElementSupportDetectedMaybe);
var Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetectedMaybe_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas/CanvasElementSupportDetectedMaybe', 681);
function $hashCode_2(this$static){
  return !!this$static && !!this$static.hashCode?this$static.hashCode():getHashCode_0(this$static);
}

var Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptObject$', 0);
function $measureText(this$static, text_0){
  return this$static.measureText(text_0);
}

function $setFont(this$static, f){
  this$static.font = f;
}

function CodeDownloadException(message){
  RuntimeException_0.call(this, message);
}

defineClass(1053, 11, $intern_11, CodeDownloadException);
var Lcom_google_gwt_core_client_CodeDownloadException_2_classLit = createForClass('com.google.gwt.core.client', 'CodeDownloadException', 1053);
function Duration(){
  this.start_0 = now_1();
}

defineClass(261, 1, {}, Duration);
_.start_0 = 0;
var Lcom_google_gwt_core_client_Duration_2_classLit = createForClass('com.google.gwt.core.client', 'Duration', 261);
function setUncaughtExceptionHandler(handler){
  uncaughtExceptionHandler = handler;
  maybeInitializeWindowOnError();
}

var uncaughtExceptionHandler = null;
function JsException(backingJsObject){
  $$init(this);
  $fillInStackTrace(this);
  this.backingJsObject = backingJsObject;
  backingJsObject != null && setPropertySafe(backingJsObject, '__java$exception', this);
  this.detailMessage = backingJsObject == null?'null':toString_36(backingJsObject);
}

defineClass(198, 11, $intern_11, JsException);
var Ljava_lang_JsException_2_classLit = createForClass('java.lang', 'JsException', 198);
defineClass(427, 198, $intern_11);
var Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'JavaScriptExceptionBase', 427);
function $clinit_JavaScriptException(){
  $clinit_JavaScriptException = emptyMethod;
  NOT_SET = new Object_0;
}

function $ensureInit(this$static){
  var exception;
  if (this$static.message_0 == null) {
    exception = maskUndefined(this$static.e) === maskUndefined(NOT_SET)?null:this$static.e;
    this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(castToJso(exception)):instanceOfString(exception)?'String':$getName(getClass__Ljava_lang_Class___devirtual$(exception));
    this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(castToJso(exception)):exception + '');
    this$static.message_0 = '(' + this$static.name_0 + ') ' + this$static.description;
  }
}

function JavaScriptException(e){
  $clinit_JavaScriptException();
  JsException.call(this, e);
  this.description = '';
  this.e = e;
  this.description = '';
}

function getExceptionDescription0(e){
  return e == null?null:e.message;
}

function getExceptionName0(e){
  return e == null?null:e.name;
}

defineClass(101, 427, {101:1, 3:1, 14:1, 11:1, 17:1}, JavaScriptException);
_.getMessage = function getMessage_2(){
  return $ensureInit(this) , this.message_0;
}
;
_.getThrown = function getThrown(){
  return maskUndefined(this.e) === maskUndefined(NOT_SET)?null:this.e;
}
;
var NOT_SET;
var Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptException', 101);
function now_1(){
  if (Date.now) {
    return Date.now();
  }
  return (new Date).getTime();
}

defineClass(1012, 1, {});
var Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client', 'Scheduler', 1012);
function $clinit_ScriptInjector(){
  $clinit_ScriptInjector = emptyMethod;
  TOP_WINDOW = $wnd;
}

function attachListeners(scriptElement, callback, removeTag){
  $clinit_ScriptInjector();
  function clearCallbacks(){
    scriptElement.onerror = scriptElement.onreadystatechange = scriptElement.onload = null;
    removeTag && nativeRemove(scriptElement);
  }

  scriptElement.onload = $entry(function(){
    clearCallbacks();
    callback && callback.onSuccess_0(null);
  }
  );
  scriptElement.onerror = $entry(function(){
    clearCallbacks();
    if (callback) {
      var ex = new CodeDownloadException('onerror() called.');
      callback.onFailure(ex);
    }
  }
  );
  scriptElement.onreadystatechange = $entry(function(){
    /loaded|complete/.test(scriptElement.readyState) && scriptElement.onload();
  }
  );
}

function nativeRemove(scriptElement){
  scriptElement.parentNode.removeChild(scriptElement);
}

function nativeSetSrc(element, url_0){
  $clinit_ScriptInjector();
  element.src = url_0;
}

var TOP_WINDOW;
function $inject(this$static){
  var doc, scriptElement, wnd;
  wnd = !this$static.window_0?($clinit_ScriptInjector() , window):this$static.window_0;
  doc = ($clinit_ScriptInjector() , wnd.document);
  scriptElement = doc.createElement('script');
  (!!this$static.callback || this$static.removeTag) && attachListeners(scriptElement, this$static.callback, this$static.removeTag);
  nativeSetSrc(scriptElement, this$static.scriptUrl);
  (doc.head || doc.getElementsByTagName('head')[0]).appendChild(scriptElement);
  return scriptElement;
}

function $setCallback(this$static, callback){
  this$static.callback = callback;
  return this$static;
}

function $setRemoveTag(this$static){
  this$static.removeTag = true;
  return this$static;
}

function ScriptInjector$FromUrl(scriptUrl){
  this.scriptUrl = scriptUrl;
}

defineClass(270, 1, {}, ScriptInjector$FromUrl);
_.removeTag = false;
var Lcom_google_gwt_core_client_ScriptInjector$FromUrl_2_classLit = createForClass('com.google.gwt.core.client', 'ScriptInjector/FromUrl', 270);
function $clinit_AsyncFragmentLoader(){
  $clinit_AsyncFragmentLoader = emptyMethod;
  BROWSER_LOADER = new AsyncFragmentLoader(2, stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_20, 32, 15, []), new ScriptTagLoadingStrategy);
}

function $clearRequestsAlreadyLoaded(this$static){
  var offset;
  while ($size_0(this$static.requestedExclusives) > 0 && this$static.isLoaded[$peek(this$static.requestedExclusives)]) {
    offset = $remove_4(this$static.requestedExclusives);
    offset < this$static.pendingDownloadErrorHandlers.length && (this$static.pendingDownloadErrorHandlers[offset] = null);
  }
}

function $initializeRemainingInitialFragments(this$static){
  var sp, sp$array, sp$index, sp$max;
  if (!this$static.remainingInitialFragments) {
    this$static.remainingInitialFragments = new AsyncFragmentLoader$BoundedIntQueue(this$static.initialLoadSequence.length + 1);
    for (sp$array = this$static.initialLoadSequence , sp$index = 0 , sp$max = sp$array.length; sp$index < sp$max; ++sp$index) {
      sp = sp$array[sp$index];
      $add_5(this$static.remainingInitialFragments, sp);
    }
    $add_5(this$static.remainingInitialFragments, this$static.numEntries);
  }
}

function $inject_0(this$static, splitPoint, loadErrorHandler){
  this$static.pendingDownloadErrorHandlers[splitPoint] = loadErrorHandler;
  $isInitial(this$static, splitPoint) || $add_5(this$static.requestedExclusives, splitPoint);
  $startLoadingNextFragment(this$static);
}

function $isEmpty_1(array){
  var i;
  for (i = 0; i < array.length; i++) {
    if (array[i]) {
      return false;
    }
  }
  return true;
}

function $isInitial(this$static, splitPoint){
  var sp, sp$array, sp$index, sp$max;
  if (splitPoint == this$static.numEntries) {
    return true;
  }
  for (sp$array = this$static.initialLoadSequence , sp$index = 0 , sp$max = sp$array.length; sp$index < sp$max; ++sp$index) {
    sp = sp$array[sp$index];
    if (sp == splitPoint) {
      return true;
    }
  }
  return false;
}

function $logEventProgress(eventGroup, fragment){
  !!$stats && stats($createStatsEvent(eventGroup, 'begin', fragment, -1));
}

function $onLoadImpl(this$static, fragment){
  var callback, callback$array, callback$index, callback$max, callbacks, t, logGroup;
  logGroup = fragment == this$static.numEntries?'leftoversDownload':'download' + fragment;
  !!$stats && stats($createStatsEvent(logGroup, 'end', fragment, -1));
  fragment < this$static.pendingDownloadErrorHandlers.length && (this$static.pendingDownloadErrorHandlers[fragment] = null);
  $isInitial(this$static, fragment) && !!this$static.remainingInitialFragments && $remove_4(this$static.remainingInitialFragments);
  this$static.fragmentLoading = -1;
  this$static.isLoaded[fragment] = true;
  $startLoadingNextFragment(this$static);
  callbacks = this$static.allCallbacks[fragment];
  if (callbacks != null) {
    !!$stats && stats($createStatsEvent('runCallbacks' + fragment, 'begin', -1, -1));
    this$static.allCallbacks[fragment] = null;
    for (callback$array = callbacks , callback$index = 0 , callback$max = callbacks.length; callback$index < callback$max; ++callback$index) {
      callback = callback$array[callback$index];
      try {
        castTo(callback, 306).onSuccess();
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 17)) {
          t = $e0;
          $clinit_Impl();
          reportUncaughtException(t, true);
        }
         else 
          throw toJs($e0);
      }
    }
    !!$stats && stats($createStatsEvent('runCallbacks' + fragment, 'end', -1, -1));
  }
}

function $runAsyncImpl(this$static, fragment, callback){
  var callbacks;
  if (this$static.isLoaded[fragment]) {
    $scheduleDeferred(($clinit_SchedulerImpl() , INSTANCE_29), new OnSuccessExecutor$1(callback));
    return;
  }
  callbacks = this$static.allCallbacks[fragment];
  callbacks == null && (callbacks = this$static.allCallbacks[fragment] = initUnidimensionalArray(Lcom_google_gwt_core_client_RunAsyncCallback_2_classLit, $intern_6, 306, 0, 0, 1));
  setCheck(callbacks, callbacks.length, callback);
  !!this$static.pendingDownloadErrorHandlers[fragment] || $inject_0(this$static, fragment, new AsyncFragmentLoader$1(this$static, fragment));
}

function $startLoadingFragment(this$static, fragment){
  this$static.fragmentLoading = fragment;
  $logEventProgress(fragment == this$static.numEntries?'leftoversDownload':'download' + fragment, fragment);
  $startLoadingFragment_0(this$static.loadingStrategy, fragment, new AsyncFragmentLoader$ResetAfterDownloadFailure(this$static, fragment));
}

function $startLoadingNextFragment(this$static){
  if (this$static.fragmentLoading >= 0) {
    return;
  }
  $initializeRemainingInitialFragments(this$static);
  $clearRequestsAlreadyLoaded(this$static);
  if ($isEmpty_1(this$static.pendingDownloadErrorHandlers)) {
    return;
  }
  if ($size_0(this$static.remainingInitialFragments) > 0) {
    $startLoadingFragment(this$static, $peek(this$static.remainingInitialFragments));
    return;
  }
  if ($size_0(this$static.requestedExclusives) > 0) {
    $startLoadingFragment(this$static, $remove_4(this$static.requestedExclusives));
    return;
  }
}

function AsyncFragmentLoader(numEntries, initialLoadSequence, loadingStrategy){
  var numEntriesPlusOne;
  this.numEntries = numEntries;
  this.initialLoadSequence = initialLoadSequence;
  this.loadingStrategy = loadingStrategy;
  numEntriesPlusOne = numEntries + 1;
  this.allCallbacks = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 4, numEntriesPlusOne, 3, 2);
  this.requestedExclusives = new AsyncFragmentLoader$BoundedIntQueue(numEntriesPlusOne);
  this.isLoaded = initUnidimensionalArray(Z_classLit, $intern_23, 32, numEntriesPlusOne, 16, 1);
  this.pendingDownloadErrorHandlers = initUnidimensionalArray(Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit, $intern_6, 310, numEntriesPlusOne, 0, 1);
}

function onLoad_1(fragment){
  $clinit_AsyncFragmentLoader();
  $onLoadImpl(BROWSER_LOADER, fragment);
}

function runAsync(fragment, callback){
  $clinit_AsyncFragmentLoader();
  $runAsyncImpl(BROWSER_LOADER, fragment, callback);
}

defineClass(416, 1, {}, AsyncFragmentLoader);
_.fragmentLoading = -1;
_.numEntries = 0;
_.remainingInitialFragments = null;
var BROWSER_LOADER;
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader', 416);
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit = createForInterface('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/LoadTerminatedHandler');
function AsyncFragmentLoader$1(this$0, val$fragment){
  this.this$01 = this$0;
  this.val$fragment2 = val$fragment;
}

defineClass(418, 1, {310:1}, AsyncFragmentLoader$1);
_.loadTerminated = function loadTerminated(reason){
  var callback, callback$index, callback$max, callbacks;
  callbacks = this.this$01.allCallbacks[this.val$fragment2];
  if (callbacks != null) {
    this.this$01.allCallbacks[this.val$fragment2] = null;
    for (callback$index = 0 , callback$max = callbacks.length; callback$index < callback$max; ++callback$index) {
      callback = callbacks[callback$index];
      castTo(callback, 306);
      showFeatureNotSupported('Cannot load application from server', false);
    }
  }
}
;
_.val$fragment2 = 0;
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/1', 418);
function $add_5(this$static, x_0){
  this$static.array[this$static.write_0++] = x_0;
}

function $clear(this$static){
  this$static.read = 0;
  this$static.write_0 = 0;
}

function $peek(this$static){
  return this$static.array[this$static.read];
}

function $remove_4(this$static){
  return this$static.array[this$static.read++];
}

function $size_0(this$static){
  return this$static.write_0 - this$static.read;
}

function AsyncFragmentLoader$BoundedIntQueue(maxPuts){
  this.array = initUnidimensionalArray(I_classLit, $intern_20, 32, maxPuts, 15, 1);
}

defineClass(309, 1, {}, AsyncFragmentLoader$BoundedIntQueue);
_.read = 0;
_.write_0 = 0;
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$BoundedIntQueue_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/BoundedIntQueue', 309);
function AsyncFragmentLoader$HttpDownloadFailure(url_0){
  RuntimeException_0.call(this, 'Download of ' + url_0 + ' failed with status ' + 404 + '(' + 'Script Tag Failure - no status available' + ')');
}

defineClass(420, 11, $intern_11, AsyncFragmentLoader$HttpDownloadFailure);
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$HttpDownloadFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/HttpDownloadFailure', 420);
function AsyncFragmentLoader$HttpInstallFailure(url_0, text_0, rootCause){
  RuntimeException_1.call(this, 'Install of ' + url_0 + ' failed with text ' + text_0, rootCause);
}

defineClass(421, 11, $intern_11, AsyncFragmentLoader$HttpInstallFailure);
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$HttpInstallFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/HttpInstallFailure', 421);
function $loadTerminated(this$static, reason){
  var e, handler, handler$array, handler$index, handler$max, handlersToRun, lastException;
  if (this$static.this$01.fragmentLoading != this$static.fragment_0) {
    return;
  }
  handlersToRun = this$static.this$01.pendingDownloadErrorHandlers;
  this$static.this$01.pendingDownloadErrorHandlers = initUnidimensionalArray(Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$LoadTerminatedHandler_2_classLit, $intern_6, 310, this$static.this$01.numEntries + 1, 0, 1);
  $clear(this$static.this$01.requestedExclusives);
  this$static.this$01.fragmentLoading = -1;
  lastException = null;
  for (handler$array = handlersToRun , handler$index = 0 , handler$max = handlersToRun.length; handler$index < handler$max; ++handler$index) {
    handler = handler$array[handler$index];
    if (handler) {
      try {
        handler.loadTerminated(reason);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 11)) {
          e = $e0;
          lastException = e;
        }
         else 
          throw toJs($e0);
      }
    }
  }
  if (lastException) {
    throw toJs(lastException);
  }
}

function AsyncFragmentLoader$ResetAfterDownloadFailure(this$0, myFragment){
  this.this$01 = this$0;
  this.fragment_0 = myFragment;
}

defineClass(419, 1, {310:1}, AsyncFragmentLoader$ResetAfterDownloadFailure);
_.loadTerminated = function loadTerminated_0(reason){
  $loadTerminated(this, reason);
}
;
_.fragment_0 = 0;
var Lcom_google_gwt_core_client_impl_AsyncFragmentLoader$ResetAfterDownloadFailure_2_classLit = createForClass('com.google.gwt.core.client.impl', 'AsyncFragmentLoader/ResetAfterDownloadFailure', 419);
function $createStatsEvent(eventGroup, type_0, fragment, size_0){
  var evt = {moduleName:($clinit_Impl() , $moduleName), sessionId:$sessionId, subSystem:'runAsync', evtGroup:eventGroup, millis:(new Date).getTime(), type:type_0};
  fragment >= 0 && (evt.fragment = fragment);
  size_0 >= 0 && (evt.size = size_0);
  return evt;
}

function stats(data_0){
  return $stats(data_0);
}

function $clinit_Impl(){
  $clinit_Impl = emptyMethod;
  !!($clinit_StackTraceCreator() , collector);
}

function apply_0(jsFunction, thisObj, args){
  return jsFunction.apply(thisObj, args);
  var __0;
}

function enter(){
  var now_0;
  if (entryDepth != 0) {
    now_0 = now_1();
    if (now_0 - watchdogEntryDepthLastScheduled > 2000) {
      watchdogEntryDepthLastScheduled = now_0;
      watchdogEntryDepthTimerId = $wnd.setTimeout(watchdogEntryDepthRun, 10);
    }
  }
  if (entryDepth++ == 0) {
    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE_29));
    return true;
  }
  return false;
}

function entry_0(jsFunction){
  $clinit_Impl();
  return function(){
    return entry0(jsFunction, this, arguments);
    var __0;
  }
  ;
}

function entry0(jsFunction, thisObj, args){
  var initialEntry, t;
  initialEntry = enter();
  try {
    if (uncaughtExceptionHandler) {
      try {
        return apply_0(jsFunction, thisObj, args);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 17)) {
          t = $e0;
          reportUncaughtException(t, true);
          return undefined;
        }
         else 
          throw toJs($e0);
      }
    }
     else {
      return apply_0(jsFunction, thisObj, args);
    }
  }
   finally {
    exit(initialEntry);
  }
}

function exit(initialEntry){
  initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE_29));
  --entryDepth;
  if (initialEntry) {
    if (watchdogEntryDepthTimerId != -1) {
      watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
      watchdogEntryDepthTimerId = -1;
    }
  }
}

function maybeInitializeWindowOnError(){
  $clinit_Impl();
  if (onErrorInitialized) {
    return;
  }
  onErrorInitialized = true;
  registerWindowOnError(false);
}

function registerWindowOnError(reportAlways){
  $clinit_Impl();
  function errorHandler(msg, url_0, line, column, error){
    if (!error) {
      error = msg + ' (' + url_0 + ':' + line;
      column && (error += ':' + column);
      error += ')';
    }
    var throwable = of(error);
    reportUncaughtException(throwable, false);
  }

  ;
  function addOnErrorHandler(windowRef){
    var origHandler = windowRef.onerror;
    if (origHandler && !reportAlways) {
      return;
    }
    windowRef.onerror = function(){
      errorHandler.apply(this, arguments);
      origHandler && origHandler.apply(this, arguments);
      return false;
    }
    ;
  }

  addOnErrorHandler($wnd);
  addOnErrorHandler(window);
}

function reportToBrowser(e){
  $wnd.setTimeout(function(){
    throw e;
  }
  , 0);
}

function reportUncaughtException(e, reportSwallowedExceptionToBrowser){
  $clinit_Impl();
  var handler;
  handler = uncaughtExceptionHandler;
  if (handler) {
    if (handler == uncaughtExceptionHandlerForTest) {
      return;
    }
    handler.onUncaughtException(e);
    return;
  }
  if (reportSwallowedExceptionToBrowser) {
    reportToBrowser(instanceOf(e, 101)?castTo(e, 101).getThrown():e);
  }
   else {
    $clinit_System();
    $printStackTraceImpl(e, err_0, '', '');
  }
}

function watchdogEntryDepthCancel(timerId){
  $wnd.clearTimeout(timerId);
}

function watchdogEntryDepthRun(){
  entryDepth != 0 && (entryDepth = 0);
  watchdogEntryDepthTimerId = -1;
}

var entryDepth = 0, onErrorInitialized = false, uncaughtExceptionHandlerForTest, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;
function $startLoadingFragment_0(this$static, fragment, loadErrorHandler){
  var connector, manualRetry, request, url_0, ser;
  url_0 = gwtStartLoadingFragment(fragment, loadErrorHandler);
  if (url_0 == null) {
    return;
  }
  manualRetry = (ser = $get_2(this$static.manualRetryNumbers, fragment) , this$static.manualRetryNumbers[fragment] = ser + 1 , ser);
  if (manualRetry > 0) {
    connector = url_0.indexOf('?') != -1?38:63;
    url_0 += String.fromCharCode(connector) + 'manualRetry=' + manualRetry;
  }
  request = new LoadingStrategyBase$RequestData(url_0, loadErrorHandler, fragment, MAX_AUTO_RETRY_COUNT);
  setAsyncCallback(request.fragment_0, request);
  $inject($setCallback($setRemoveTag(($clinit_ScriptInjector() , new ScriptInjector$FromUrl(request.url_0))), new ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(request)));
}

function gwtStartLoadingFragment(fragment, loadErrorHandler){
  function loadFailed(e){
    loadErrorHandler.loadTerminated(e);
  }

  return __gwtStartLoadingFragment(fragment, $entry(loadFailed));
}

defineClass(430, 1, {});
var MAX_AUTO_RETRY_COUNT = 3;
var Lcom_google_gwt_core_client_impl_LoadingStrategyBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'LoadingStrategyBase', 430);
function $get_2(this$static, x_0){
  return this$static[x_0]?this$static[x_0]:0;
}

function $onLoadError(this$static, e, mayRetry){
  var connector;
  if (mayRetry) {
    ++this$static.retryCount;
    if (this$static.retryCount <= this$static.maxRetryCount) {
      connector = this$static.originalUrl.indexOf('?') != -1?38:63;
      this$static.url_0 = this$static.originalUrl + String.fromCharCode(connector) + 'autoRetry=' + this$static.retryCount;
      setAsyncCallback(this$static.fragment_0, this$static);
      $inject($setCallback($setRemoveTag(($clinit_ScriptInjector() , new ScriptInjector$FromUrl(this$static.url_0))), new ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(this$static)));
      return;
    }
  }
  $loadTerminated(this$static.errorHandler, e);
}

function $tryInstall(this$static, code_0){
  var e, textIntro;
  try {
    __gwtInstallCode(code_0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 11)) {
      e = $e0;
      textIntro = code_0;
      code_0 != null && code_0.length > 200 && (textIntro = code_0.substr(0, 200) + '...');
      $onLoadError(this$static, new AsyncFragmentLoader$HttpInstallFailure(this$static.url_0, textIntro, e), false);
    }
     else 
      throw toJs($e0);
  }
}

function LoadingStrategyBase$RequestData(url_0, errorHandler, fragment, maxRetryCount){
  this.url_0 = url_0;
  this.originalUrl = url_0;
  this.errorHandler = errorHandler;
  this.maxRetryCount = maxRetryCount;
  this.retryCount = 0;
  this.fragment_0 = fragment;
}

defineClass(431, 1, {}, LoadingStrategyBase$RequestData);
_.errorHandler = null;
_.fragment_0 = 0;
_.maxRetryCount = 0;
_.retryCount = 0;
var Lcom_google_gwt_core_client_impl_LoadingStrategyBase$RequestData_2_classLit = createForClass('com.google.gwt.core.client.impl', 'LoadingStrategyBase/RequestData', 431);
function OnSuccessExecutor$1(val$callback){
  this.val$callback3 = val$callback;
}

defineClass(417, 1, {}, OnSuccessExecutor$1);
_.execute = function execute_21(){
  this.val$callback3.onSuccess();
}
;
var Lcom_google_gwt_core_client_impl_OnSuccessExecutor$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'OnSuccessExecutor/1', 417);
function $clinit_SchedulerImpl(){
  $clinit_SchedulerImpl = emptyMethod;
  INSTANCE_29 = new SchedulerImpl;
}

function $flushEntryCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.entryCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.entryCommands;
      this$static.entryCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.entryCommands);
    this$static.entryCommands = rescheduled;
  }
}

function $flushFinallyCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.finallyCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.finallyCommands;
      this$static.finallyCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.finallyCommands);
    this$static.finallyCommands = rescheduled;
  }
}

function $flushPostEventPumpCommands(this$static){
  var oldDeferred;
  if (this$static.deferredCommands) {
    oldDeferred = this$static.deferredCommands;
    this$static.deferredCommands = null;
    !this$static.incrementalCommands && (this$static.incrementalCommands = []);
    runScheduledTasks(oldDeferred, this$static.incrementalCommands);
  }
  !!this$static.incrementalCommands && (this$static.incrementalCommands = $runRepeatingTasks(this$static.incrementalCommands));
}

function $isWorkQueued(this$static){
  return !!this$static.deferredCommands || !!this$static.incrementalCommands;
}

function $maybeSchedulePostEventPumpCommands(this$static){
  if (!this$static.shouldBeRunning) {
    this$static.shouldBeRunning = true;
    !this$static.flusher && (this$static.flusher = new SchedulerImpl$Flusher(this$static));
    scheduleFixedDelayImpl(this$static.flusher, 1);
    !this$static.rescue && (this$static.rescue = new SchedulerImpl$Rescuer(this$static));
    scheduleFixedDelayImpl(this$static.rescue, 50);
  }
}

function $runRepeatingTasks(tasks){
  var canceledSomeTasks, duration, executedSomeTask, i, length_0, newTasks, t;
  length_0 = tasks.length;
  if (length_0 == 0) {
    return null;
  }
  canceledSomeTasks = false;
  duration = new Duration;
  while (now_1() - duration.start_0 < 16) {
    executedSomeTask = false;
    for (i = 0; i < length_0; i++) {
      t = tasks[i];
      if (!t) {
        continue;
      }
      executedSomeTask = true;
      if (!t[0].execute_1()) {
        tasks[i] = null;
        canceledSomeTasks = true;
      }
    }
    if (!executedSomeTask) {
      break;
    }
  }
  if (canceledSomeTasks) {
    newTasks = [];
    for (i = 0; i < length_0; i++) {
      !!tasks[i] && (newTasks[newTasks.length] = tasks[i] , undefined);
    }
    return newTasks.length == 0?null:newTasks;
  }
   else {
    return tasks;
  }
}

function $scheduleDeferred(this$static, cmd){
  this$static.deferredCommands = push_0(this$static.deferredCommands, [cmd, false]);
  $maybeSchedulePostEventPumpCommands(this$static);
}

function SchedulerImpl(){
}

function execute_22(cmd){
  return cmd.execute_1();
}

function push_0(queue, task){
  !queue && (queue = []);
  queue[queue.length] = task;
  return queue;
}

function runScheduledTasks(tasks, rescheduled){
  var e, i, j, t;
  for (i = 0 , j = tasks.length; i < j; i++) {
    t = tasks[i];
    try {
      t[1]?t[0].execute_1() && (rescheduled = push_0(rescheduled, t)):t[0].execute();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 17)) {
        e = $e0;
        $clinit_Impl();
        reportUncaughtException(e, true);
      }
       else 
        throw toJs($e0);
    }
  }
  return rescheduled;
}

function scheduleFixedDelayImpl(cmd, delayMs){
  $clinit_SchedulerImpl();
  function callback(){
    var ret = $entry(execute_22)(cmd);
    ret && $wnd.setTimeout(callback, delayMs);
  }

  $wnd.setTimeout(callback, delayMs);
}

defineClass(508, 1012, {}, SchedulerImpl);
_.flushRunning = false;
_.shouldBeRunning = false;
var INSTANCE_29;
var Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl', 508);
function SchedulerImpl$Flusher(this$0){
  this.this$01 = this$0;
}

defineClass(509, 1, {}, SchedulerImpl$Flusher);
_.execute_1 = function execute_23(){
  this.this$01.flushRunning = true;
  $flushPostEventPumpCommands(this.this$01);
  this.this$01.flushRunning = false;
  return this.this$01.shouldBeRunning = $isWorkQueued(this.this$01);
}
;
var Lcom_google_gwt_core_client_impl_SchedulerImpl$Flusher_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl/Flusher', 509);
function SchedulerImpl$Rescuer(this$0){
  this.this$01 = this$0;
}

defineClass(510, 1, {}, SchedulerImpl$Rescuer);
_.execute_1 = function execute_24(){
  this.this$01.flushRunning && scheduleFixedDelayImpl(this.this$01.flusher, 1);
  return this.this$01.shouldBeRunning;
}
;
var Lcom_google_gwt_core_client_impl_SchedulerImpl$Rescuer_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl/Rescuer', 510);
function ScriptTagLoadingStrategy(){
  this.manualRetryNumbers = [];
}

function asyncCallback(request, code_0){
  var firstTimeCalled;
  firstTimeCalled = clearAsyncCallback(request.fragment_0);
  firstTimeCalled && $tryInstall(request, code_0);
}

function cleanup(request){
  var neverCalled;
  neverCalled = clearAsyncCallback(request.fragment_0);
  neverCalled && $onLoadError(request, new AsyncFragmentLoader$HttpDownloadFailure(request.url_0), true);
}

function clearAsyncCallback(fragment){
  if (!__gwtModuleFunction['runAsyncCallback' + fragment]) {
    return false;
  }
  delete __gwtModuleFunction['runAsyncCallback' + fragment];
  return true;
}

function setAsyncCallback(fragment, request){
  __gwtModuleFunction['runAsyncCallback' + fragment] = $entry(function(code_0, instance){
    asyncCallback(request, code_0);
  }
  );
}

defineClass(415, 430, {}, ScriptTagLoadingStrategy);
var Lcom_google_gwt_core_client_impl_ScriptTagLoadingStrategy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'ScriptTagLoadingStrategy', 415);
function ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1(val$request){
  this.val$request2 = val$request;
}

defineClass(315, 1, {}, ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1);
_.onFailure = function onFailure(reason){
  var lastArg;
  cleanup((lastArg = this , castTo(reason, 14) , lastArg).val$request2);
}
;
_.onSuccess_0 = function onSuccess_0(result){
  var lastArg;
  cleanup((lastArg = this , throwClassCastExceptionUnlessNull(result) , lastArg).val$request2);
}
;
var Lcom_google_gwt_core_client_impl_ScriptTagLoadingStrategy$ScriptTagDownloadStrategy$1_2_classLit = createForClass('com.google.gwt.core.client.impl', 'ScriptTagLoadingStrategy/ScriptTagDownloadStrategy/1', 315);
function $clinit_StackTraceCreator(){
  $clinit_StackTraceCreator = emptyMethod;
  var c, enforceLegacy;
  enforceLegacy = !supportsErrorStack();
  c = new StackTraceCreator$CollectorModernNoSourceMap;
  collector = enforceLegacy?new StackTraceCreator$CollectorLegacy:c;
}

function captureStackTrace(error){
  $clinit_StackTraceCreator();
  collector.collect(error);
}

function dropInternalFrames(stackTrace){
  var dropFrameUntilFnName, dropFrameUntilFnName2, i, numberOfFramesToSearch;
  dropFrameUntilFnName = 'captureStackTrace';
  dropFrameUntilFnName2 = 'initializeBackingError';
  numberOfFramesToSearch = $wnd.Math.min(stackTrace.length, 5);
  for (i = numberOfFramesToSearch - 1; i >= 0; i--) {
    if ($equals_6(stackTrace[i].methodName, dropFrameUntilFnName) || $equals_6(stackTrace[i].methodName, dropFrameUntilFnName2)) {
      stackTrace.length >= i + 1 && stackTrace.splice(0, i + 1);
      break;
    }
  }
  return stackTrace;
}

function extractFunctionName(fnName){
  var fnRE = /function(?:\s+([\w$]+))?\s*\(/;
  var match_0 = fnRE.exec(fnName);
  return match_0 && match_0[1] || 'anonymous';
}

function parseInt_0(number){
  $clinit_StackTraceCreator();
  return parseInt(number) || -1;
}

function supportsErrorStack(){
  if (Error.stackTraceLimit > 0) {
    $wnd.Error.stackTraceLimit = Error.stackTraceLimit = 64;
    return true;
  }
  return 'stack' in new Error;
}

var collector;
defineClass(1027, 1, {});
var Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/Collector', 1027);
function StackTraceCreator$CollectorLegacy(){
}

defineClass(428, 1027, {}, StackTraceCreator$CollectorLegacy);
_.collect = function collect(error){
  var seen = {}, name_1;
  var fnStack = [];
  error['fnStack'] = fnStack;
  var callee = arguments.callee.caller;
  while (callee) {
    var name_0 = ($clinit_StackTraceCreator() , callee.name || (callee.name = extractFunctionName(callee.toString())));
    fnStack.push(name_0);
    var keyName = ':' + name_0;
    var withThisName = seen[keyName];
    if (withThisName) {
      var i, j;
      for (i = 0 , j = withThisName.length; i < j; i++) {
        if (withThisName[i] === callee) {
          return;
        }
      }
    }
    (withThisName || (seen[keyName] = [])).push(callee);
    callee = callee.caller;
  }
}
;
_.getStackTrace = function getStackTrace(t){
  var i, length_0, stack_0, stackTrace;
  stack_0 = ($clinit_StackTraceCreator() , t && t['fnStack']?t['fnStack']:[]);
  length_0 = stack_0.length;
  stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_3, 126, length_0, 0, 1);
  for (i = 0; i < length_0; i++) {
    stackTrace[i] = new StackTraceElement(stack_0[i], null, -1);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorLegacy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorLegacy', 428);
function $parse_1(this$static, stString){
  var closeParen, col, endFileUrlIndex, fileName, index_0, lastColonIndex, line, location_0, toReturn;
  if (stString.length == 0) {
    return this$static.createSte('Unknown', 'anonymous', -1, -1);
  }
  toReturn = $trim(stString);
  $equals_6(toReturn.substr(0, 3), 'at ') && (toReturn = toReturn.substr(3));
  toReturn = toReturn.replace(/\[.*?\]/g, '');
  index_0 = toReturn.indexOf('(');
  if (index_0 == -1) {
    index_0 = toReturn.indexOf('@');
    if (index_0 == -1) {
      location_0 = toReturn;
      toReturn = '';
    }
     else {
      location_0 = $trim(toReturn.substr(index_0 + 1));
      toReturn = $trim(toReturn.substr(0, index_0));
    }
  }
   else {
    closeParen = toReturn.indexOf(')', index_0);
    location_0 = toReturn.substr(index_0 + 1, closeParen - (index_0 + 1));
    toReturn = $trim(toReturn.substr(0, index_0));
  }
  index_0 = $indexOf_0(toReturn, fromCodePoint(46));
  index_0 != -1 && (toReturn = toReturn.substr(index_0 + 1));
  (toReturn.length == 0 || $equals_6(toReturn, 'Anonymous function')) && (toReturn = 'anonymous');
  lastColonIndex = $lastIndexOf(location_0, fromCodePoint(58));
  endFileUrlIndex = $lastIndexOf_0(location_0, fromCodePoint(58), lastColonIndex - 1);
  line = -1;
  col = -1;
  fileName = 'Unknown';
  if (lastColonIndex != -1 && endFileUrlIndex != -1) {
    fileName = location_0.substr(0, endFileUrlIndex);
    line = parseInt_0(location_0.substr(endFileUrlIndex + 1, lastColonIndex - (endFileUrlIndex + 1)));
    col = parseInt_0(location_0.substr(lastColonIndex + 1));
  }
  return this$static.createSte(fileName, toReturn, line, col);
}

defineClass(1028, 1027, {});
_.collect = function collect_0(error){
}
;
_.createSte = function createSte(fileName, method, line, col){
  return new StackTraceElement(method, fileName + '@' + col, line < 0?-1:line);
}
;
_.getStackTrace = function getStackTrace_0(t){
  var addIndex, i, length_0, stack_0, stackTrace, ste, e;
  stack_0 = ($clinit_StackTraceCreator() , e = t.backingJsObject , e && e.stack?e.stack.split('\n'):[]);
  stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_3, 126, 0, 0, 1);
  addIndex = 0;
  length_0 = stack_0.length;
  if (length_0 == 0) {
    return stackTrace;
  }
  ste = $parse_1(this, stack_0[0]);
  $equals_6(ste.methodName, 'anonymous') || (stackTrace[addIndex++] = ste);
  for (i = 1; i < length_0; i++) {
    stackTrace[addIndex++] = $parse_1(this, stack_0[i]);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModern', 1028);
function StackTraceCreator$CollectorModernNoSourceMap(){
}

defineClass(429, 1028, {}, StackTraceCreator$CollectorModernNoSourceMap);
_.createSte = function createSte_0(fileName, method, line, col){
  return new StackTraceElement(method, fileName, -1);
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModernNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModernNoSourceMap', 429);
function $appendChild(this$static, newChild){
  return this$static.appendChild(newChild);
}

function $removeChild(this$static, oldChild){
  return this$static.removeChild(oldChild);
}

function $setAttribute(this$static, name_0, value_0){
  this$static.setAttribute(name_0, value_0);
}

function $setInnerHTML(this$static, html){
  this$static.innerHTML = html || '';
}

function $getParentElement(node){
  var parent_0 = node.parentNode;
  (!parent_0 || parent_0.nodeType != 1) && (parent_0 = null);
  return parent_0;
}

function $setInnerText(elem, text_0){
  elem.textContent = text_0 || '';
}

function $createScriptElement(doc, source){
  var elem;
  elem = doc.createElement('script');
  elem.textContent = source || '';
  return elem;
}

function $getTabIndex(elem){
  return elem.tabIndex < $intern_44?elem.tabIndex:-(elem.tabIndex % $intern_44) - 1;
}

function isOrHasChildImpl(parent_0, child){
  if (parent_0.nodeType != 1 && parent_0.nodeType != 9) {
    return parent_0 == child;
  }
  if (child.nodeType != 1) {
    child = child.parentNode;
    if (!child) {
      return false;
    }
  }
  if (parent_0.nodeType == 9) {
    return parent_0 === child || parent_0.body && parent_0.body.contains(child);
  }
   else {
    return parent_0 === child || parent_0.contains(child);
  }
}

function $getClientHeight(this$static){
  return ($equals_6(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientHeight | 0;
}

function $getClientWidth(this$static){
  return ($equals_6(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientWidth | 0;
}

function $getElementById(this$static, elementId){
  return this$static.getElementById(elementId);
}

function $clinit_Style$Display(){
  $clinit_Style$Display = emptyMethod;
  NONE_0 = new Style$Display$1;
  BLOCK = new Style$Display$2;
  INLINE = new Style$Display$3;
  INLINE_BLOCK = new Style$Display$4;
  INLINE_TABLE = new Style$Display$5;
  LIST_ITEM = new Style$Display$6;
  RUN_IN = new Style$Display$7;
  TABLE = new Style$Display$8;
  TABLE_CAPTION = new Style$Display$9;
  TABLE_COLUMN_GROUP = new Style$Display$10;
  TABLE_HEADER_GROUP = new Style$Display$11;
  TABLE_FOOTER_GROUP = new Style$Display$12;
  TABLE_ROW_GROUP = new Style$Display$13;
  TABLE_CELL = new Style$Display$14;
  TABLE_COLUMN = new Style$Display$15;
  TABLE_ROW = new Style$Display$16;
  INITIAL_0 = new Style$Display$17;
  FLEX = new Style$Display$18;
  INLINE_FLEX = new Style$Display$19;
}

function Style$Display(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_33(){
  $clinit_Style$Display();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Display_2_classLit, 1), $intern_5, 42, 0, [NONE_0, BLOCK, INLINE, INLINE_BLOCK, INLINE_TABLE, LIST_ITEM, RUN_IN, TABLE, TABLE_CAPTION, TABLE_COLUMN_GROUP, TABLE_HEADER_GROUP, TABLE_FOOTER_GROUP, TABLE_ROW_GROUP, TABLE_CELL, TABLE_COLUMN, TABLE_ROW, INITIAL_0, FLEX, INLINE_FLEX]);
}

defineClass(42, 8, $intern_91);
var BLOCK, FLEX, INITIAL_0, INLINE, INLINE_BLOCK, INLINE_FLEX, INLINE_TABLE, LIST_ITEM, NONE_0, RUN_IN, TABLE, TABLE_CAPTION, TABLE_CELL, TABLE_COLUMN, TABLE_COLUMN_GROUP, TABLE_FOOTER_GROUP, TABLE_HEADER_GROUP, TABLE_ROW, TABLE_ROW_GROUP;
var Lcom_google_gwt_dom_client_Style$Display_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display', 42, values_33);
function Style$Display$1(){
  Style$Display.call(this, 'NONE', 0);
}

defineClass(464, 42, $intern_91, Style$Display$1);
var Lcom_google_gwt_dom_client_Style$Display$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/1', 464, null);
function Style$Display$10(){
  Style$Display.call(this, 'TABLE_COLUMN_GROUP', 9);
}

defineClass(473, 42, $intern_91, Style$Display$10);
var Lcom_google_gwt_dom_client_Style$Display$10_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/10', 473, null);
function Style$Display$11(){
  Style$Display.call(this, 'TABLE_HEADER_GROUP', 10);
}

defineClass(474, 42, $intern_91, Style$Display$11);
var Lcom_google_gwt_dom_client_Style$Display$11_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/11', 474, null);
function Style$Display$12(){
  Style$Display.call(this, 'TABLE_FOOTER_GROUP', 11);
}

defineClass(475, 42, $intern_91, Style$Display$12);
var Lcom_google_gwt_dom_client_Style$Display$12_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/12', 475, null);
function Style$Display$13(){
  Style$Display.call(this, 'TABLE_ROW_GROUP', 12);
}

defineClass(476, 42, $intern_91, Style$Display$13);
var Lcom_google_gwt_dom_client_Style$Display$13_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/13', 476, null);
function Style$Display$14(){
  Style$Display.call(this, 'TABLE_CELL', 13);
}

defineClass(477, 42, $intern_91, Style$Display$14);
var Lcom_google_gwt_dom_client_Style$Display$14_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/14', 477, null);
function Style$Display$15(){
  Style$Display.call(this, 'TABLE_COLUMN', 14);
}

defineClass(478, 42, $intern_91, Style$Display$15);
var Lcom_google_gwt_dom_client_Style$Display$15_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/15', 478, null);
function Style$Display$16(){
  Style$Display.call(this, 'TABLE_ROW', 15);
}

defineClass(479, 42, $intern_91, Style$Display$16);
var Lcom_google_gwt_dom_client_Style$Display$16_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/16', 479, null);
function Style$Display$17(){
  Style$Display.call(this, 'INITIAL', 16);
}

defineClass(480, 42, $intern_91, Style$Display$17);
var Lcom_google_gwt_dom_client_Style$Display$17_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/17', 480, null);
function Style$Display$18(){
  Style$Display.call(this, 'FLEX', 17);
}

defineClass(481, 42, $intern_91, Style$Display$18);
var Lcom_google_gwt_dom_client_Style$Display$18_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/18', 481, null);
function Style$Display$19(){
  Style$Display.call(this, 'INLINE_FLEX', 18);
}

defineClass(482, 42, $intern_91, Style$Display$19);
var Lcom_google_gwt_dom_client_Style$Display$19_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/19', 482, null);
function Style$Display$2(){
  Style$Display.call(this, 'BLOCK', 1);
}

defineClass(465, 42, $intern_91, Style$Display$2);
var Lcom_google_gwt_dom_client_Style$Display$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/2', 465, null);
function Style$Display$3(){
  Style$Display.call(this, 'INLINE', 2);
}

defineClass(466, 42, $intern_91, Style$Display$3);
var Lcom_google_gwt_dom_client_Style$Display$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/3', 466, null);
function Style$Display$4(){
  Style$Display.call(this, 'INLINE_BLOCK', 3);
}

defineClass(467, 42, $intern_91, Style$Display$4);
var Lcom_google_gwt_dom_client_Style$Display$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/4', 467, null);
function Style$Display$5(){
  Style$Display.call(this, 'INLINE_TABLE', 4);
}

defineClass(468, 42, $intern_91, Style$Display$5);
var Lcom_google_gwt_dom_client_Style$Display$5_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/5', 468, null);
function Style$Display$6(){
  Style$Display.call(this, 'LIST_ITEM', 5);
}

defineClass(469, 42, $intern_91, Style$Display$6);
var Lcom_google_gwt_dom_client_Style$Display$6_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/6', 469, null);
function Style$Display$7(){
  Style$Display.call(this, 'RUN_IN', 6);
}

defineClass(470, 42, $intern_91, Style$Display$7);
var Lcom_google_gwt_dom_client_Style$Display$7_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/7', 470, null);
function Style$Display$8(){
  Style$Display.call(this, 'TABLE', 7);
}

defineClass(471, 42, $intern_91, Style$Display$8);
var Lcom_google_gwt_dom_client_Style$Display$8_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/8', 471, null);
function Style$Display$9(){
  Style$Display.call(this, 'TABLE_CAPTION', 8);
}

defineClass(472, 42, $intern_91, Style$Display$9);
var Lcom_google_gwt_dom_client_Style$Display$9_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Display/9', 472, null);
function $clinit_Style$Position(){
  $clinit_Style$Position = emptyMethod;
  STATIC = new Style$Position$1;
  RELATIVE = new Style$Position$2;
  ABSOLUTE = new Style$Position$3;
  FIXED = new Style$Position$4;
}

function Style$Position(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_35(){
  $clinit_Style$Position();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Position_2_classLit, 1), $intern_5, 118, 0, [STATIC, RELATIVE, ABSOLUTE, FIXED]);
}

defineClass(118, 8, $intern_92);
var ABSOLUTE, FIXED, RELATIVE, STATIC;
var Lcom_google_gwt_dom_client_Style$Position_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position', 118, values_35);
function Style$Position$1(){
  Style$Position.call(this, 'STATIC', 0);
}

defineClass(487, 118, $intern_92, Style$Position$1);
var Lcom_google_gwt_dom_client_Style$Position$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/1', 487, null);
function Style$Position$2(){
  Style$Position.call(this, 'RELATIVE', 1);
}

defineClass(488, 118, $intern_92, Style$Position$2);
var Lcom_google_gwt_dom_client_Style$Position$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/2', 488, null);
function Style$Position$3(){
  Style$Position.call(this, 'ABSOLUTE', 2);
}

defineClass(489, 118, $intern_92, Style$Position$3);
var Lcom_google_gwt_dom_client_Style$Position$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/3', 489, null);
function Style$Position$4(){
  Style$Position.call(this, 'FIXED', 3);
}

defineClass(490, 118, $intern_92, Style$Position$4);
var Lcom_google_gwt_dom_client_Style$Position$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Position/4', 490, null);
function $clinit_Style$Unit(){
  $clinit_Style$Unit = emptyMethod;
  PX = new Style$Unit$1;
  PCT = new Style$Unit$2;
  EM = new Style$Unit$3;
  EX = new Style$Unit$4;
  PT = new Style$Unit$5;
  PC = new Style$Unit$6;
  IN = new Style$Unit$7;
  CM = new Style$Unit$8;
  MM = new Style$Unit$9;
}

function Style$Unit(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_37(){
  $clinit_Style$Unit();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Unit_2_classLit, 1), $intern_5, 67, 0, [PX, PCT, EM, EX, PT, PC, IN, CM, MM]);
}

defineClass(67, 8, $intern_93);
var CM, EM, EX, IN, MM, PC, PCT, PT, PX;
var Lcom_google_gwt_dom_client_Style$Unit_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit', 67, values_37);
function Style$Unit$1(){
  Style$Unit.call(this, 'PX', 0);
}

defineClass(437, 67, $intern_93, Style$Unit$1);
_.getType = function getType(){
  return 'px';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/1', 437, null);
function Style$Unit$2(){
  Style$Unit.call(this, 'PCT', 1);
}

defineClass(438, 67, $intern_93, Style$Unit$2);
_.getType = function getType_0(){
  return '%';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/2', 438, null);
function Style$Unit$3(){
  Style$Unit.call(this, 'EM', 2);
}

defineClass(439, 67, $intern_93, Style$Unit$3);
_.getType = function getType_1(){
  return 'em';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$3_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/3', 439, null);
function Style$Unit$4(){
  Style$Unit.call(this, 'EX', 3);
}

defineClass(440, 67, $intern_93, Style$Unit$4);
_.getType = function getType_2(){
  return 'ex';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$4_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/4', 440, null);
function Style$Unit$5(){
  Style$Unit.call(this, 'PT', 4);
}

defineClass(441, 67, $intern_93, Style$Unit$5);
_.getType = function getType_3(){
  return 'pt';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$5_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/5', 441, null);
function Style$Unit$6(){
  Style$Unit.call(this, 'PC', 5);
}

defineClass(442, 67, $intern_93, Style$Unit$6);
_.getType = function getType_4(){
  return 'pc';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$6_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/6', 442, null);
function Style$Unit$7(){
  Style$Unit.call(this, 'IN', 6);
}

defineClass(443, 67, $intern_93, Style$Unit$7);
_.getType = function getType_5(){
  return 'in';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$7_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/7', 443, null);
function Style$Unit$8(){
  Style$Unit.call(this, 'CM', 7);
}

defineClass(444, 67, $intern_93, Style$Unit$8);
_.getType = function getType_6(){
  return 'cm';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$8_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/8', 444, null);
function Style$Unit$9(){
  Style$Unit.call(this, 'MM', 8);
}

defineClass(445, 67, $intern_93, Style$Unit$9);
_.getType = function getType_7(){
  return 'mm';
}
;
var Lcom_google_gwt_dom_client_Style$Unit$9_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Unit/9', 445, null);
function $clinit_Style$Visibility(){
  $clinit_Style$Visibility = emptyMethod;
  VISIBLE_0 = new Style$Visibility$1;
  HIDDEN_1 = new Style$Visibility$2;
}

function Style$Visibility(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_38(){
  $clinit_Style$Visibility();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_dom_client_Style$Visibility_2_classLit, 1), $intern_5, 179, 0, [VISIBLE_0, HIDDEN_1]);
}

defineClass(179, 8, $intern_94);
var HIDDEN_1, VISIBLE_0;
var Lcom_google_gwt_dom_client_Style$Visibility_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Visibility', 179, values_38);
function Style$Visibility$1(){
  Style$Visibility.call(this, 'VISIBLE', 0);
}

defineClass(495, 179, $intern_94, Style$Visibility$1);
var Lcom_google_gwt_dom_client_Style$Visibility$1_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Visibility/1', 495, null);
function Style$Visibility$2(){
  Style$Visibility.call(this, 'HIDDEN', 1);
}

defineClass(496, 179, $intern_94, Style$Visibility$2);
var Lcom_google_gwt_dom_client_Style$Visibility$2_2_classLit = createForEnum('com.google.gwt.dom.client', 'Style/Visibility/2', 496, null);
defineClass(410, 1, {});
_.hashCode_0 = function hashCode_15(){
  return this.index_0;
}
;
_.toString_0 = function toString_34(){
  return 'Event type';
}
;
_.index_0 = 0;
var nextHashCode = 0;
var Lcom_google_web_bindery_event_shared_Event$Type_2_classLit = createForClass('com.google.web.bindery.event.shared', 'Event/Type', 410);
function GwtEvent$Type(){
  this.index_0 = ++nextHashCode;
}

defineClass(127, 410, {}, GwtEvent$Type);
var Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit = createForClass('com.google.gwt.event.shared', 'GwtEvent/Type', 127);
function AttachEvent(attached){
  this.attached = attached;
}

function fire_0(source, attached){
  var event_0;
  if (TYPE_23) {
    event_0 = new AttachEvent(attached);
    source.fireEvent(event_0);
  }
}

defineClass(566, 1014, {}, AttachEvent);
_.dispatch_0 = function dispatch_24(handler){
  castTo(handler, 1074).onAttachOrDetach(this);
}
;
_.getAssociatedType = function getAssociatedType_24(){
  return TYPE_23;
}
;
_.attached = false;
var TYPE_23;
var Lcom_google_gwt_event_logical_shared_AttachEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'AttachEvent', 566);
function CloseEvent_0(){
}

function fire_1(source){
  var event_0;
  if (TYPE_24) {
    event_0 = new CloseEvent_0;
    source.fireEvent(event_0);
  }
}

defineClass(565, 1014, {}, CloseEvent_0);
_.dispatch_0 = function dispatch_25(handler){
  castTo(handler, 998).onClose(this);
}
;
_.getAssociatedType = function getAssociatedType_25(){
  return TYPE_24;
}
;
var TYPE_24;
var Lcom_google_gwt_event_logical_shared_CloseEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'CloseEvent', 565);
function ResizeEvent(){
}

function fire_2(source){
  var event_0;
  if (TYPE_25) {
    event_0 = new ResizeEvent;
    $fireEvent(source, event_0);
  }
}

defineClass(558, 1014, {}, ResizeEvent);
_.dispatch_0 = function dispatch_26(handler){
  castTo(handler, 302).onResize_0(this);
}
;
_.getAssociatedType = function getAssociatedType_26(){
  return TYPE_25;
}
;
var TYPE_25;
var Lcom_google_gwt_event_logical_shared_ResizeEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared', 'ResizeEvent', 558);
defineClass(1016, 1, {});
var Lcom_google_web_bindery_event_shared_EventBus_2_classLit = createForClass('com.google.web.bindery.event.shared', 'EventBus', 1016);
function $addHandler_0(this$static, type_0, handler){
  return new LegacyHandlerWrapper($doAdd(this$static.eventBus, type_0, null, handler));
}

function $fireEvent(this$static, event_0){
  var e, oldSource;
  !event_0.dead || event_0.revive();
  oldSource = event_0.source;
  $overrideSource(event_0, this$static.source);
  try {
    $doFire(this$static.eventBus, event_0, null);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 137)) {
      e = $e0;
      throw toJs(new UmbrellaException_0(e.causes));
    }
     else 
      throw toJs($e0);
  }
   finally {
    oldSource == null?(event_0.dead = true , event_0.source = null):(event_0.source = oldSource);
  }
}

function $isEventHandled(this$static, e){
  return $isEventHandled_0(this$static.eventBus, e);
}

function HandlerManager(source){
  HandlerManager_0.call(this, source, false);
}

function HandlerManager_0(source, fireInReverseOrder){
  this.eventBus = new HandlerManager$Bus(fireInReverseOrder);
  this.source = source;
}

defineClass(173, 1, $intern_95, HandlerManager, HandlerManager_0);
_.fireEvent = function fireEvent_1(event_0){
  $fireEvent(this, event_0);
}
;
var Lcom_google_gwt_event_shared_HandlerManager_2_classLit = createForClass('com.google.gwt.event.shared', 'HandlerManager', 173);
function $defer(this$static, command){
  !this$static.deferredDeltas && (this$static.deferredDeltas = new ArrayList);
  $add_13(this$static.deferredDeltas, command);
}

function $doAdd(this$static, type_0, source, handler){
  var l;
  if (!type_0) {
    throw toJs(new NullPointerException_1('Cannot add a handler with a null type'));
  }
  if (!handler) {
    throw toJs(new NullPointerException_1('Cannot add a null handler'));
  }
  this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$2(this$static, type_0, source, handler)):(l = $ensureHandlerList(this$static, type_0, source) , l.add_0(handler));
  return new SimpleEventBus$1(this$static, type_0, source, handler);
}

function $doAddNow(this$static, type_0, source, handler){
  var l;
  l = $ensureHandlerList(this$static, type_0, source);
  l.add_0(handler);
}

function $doFire(this$static, event_0, source){
  var causes, e, handler, handlers, it;
  if (!event_0) {
    throw toJs(new NullPointerException_1('Cannot fire null event'));
  }
  try {
    ++this$static.firingDepth;
    source != null && (event_0.source = source);
    handlers = $getDispatchList(this$static, event_0.getAssociatedType(), source);
    causes = null;
    it = this$static.isReverseOrder?handlers.listIterator_0(handlers.size_1()):handlers.listIterator();
    while (this$static.isReverseOrder?it.hasPrevious():it.hasNext_0()) {
      handler = this$static.isReverseOrder?it.previous():it.next_1();
      try {
        event_0.dispatch_0(castTo(handler, 29));
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 17)) {
          e = $e0;
          !causes && (causes = new HashSet);
          $put(causes.map_0, e, causes);
        }
         else 
          throw toJs($e0);
      }
    }
    if (causes) {
      throw toJs(new UmbrellaException(causes));
    }
  }
   finally {
    --this$static.firingDepth;
    this$static.firingDepth == 0 && $handleQueuedAddsAndRemoves(this$static);
  }
}

function $ensureHandlerList(this$static, type_0, source){
  var handlers, sourceMap;
  sourceMap = castTo($get_0(this$static.map_0, type_0), 82);
  if (!sourceMap) {
    sourceMap = new HashMap;
    $put(this$static.map_0, type_0, sourceMap);
  }
  handlers = castTo(sourceMap.get_1(source), 41);
  if (!handlers) {
    handlers = new ArrayList;
    sourceMap.put(source, handlers);
  }
  return handlers;
}

function $getDispatchList(this$static, type_0, source){
  var directHandlers, globalHandlers, rtn;
  directHandlers = $getHandlerList(this$static, type_0, source);
  if (source == null) {
    return directHandlers;
  }
  globalHandlers = $getHandlerList(this$static, type_0, null);
  rtn = new ArrayList_1(directHandlers);
  $addAll_1(rtn, globalHandlers);
  return rtn;
}

function $getHandlerList(this$static, type_0, source){
  var handlers, sourceMap;
  sourceMap = castTo($get_0(this$static.map_0, type_0), 82);
  if (!sourceMap) {
    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
  }
  handlers = castTo(sourceMap.get_1(source), 41);
  if (!handlers) {
    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
  }
  return handlers;
}

function $handleQueuedAddsAndRemoves(this$static){
  var c, c$iterator;
  if (this$static.deferredDeltas) {
    try {
      for (c$iterator = new ArrayList$1(this$static.deferredDeltas); c$iterator.i < c$iterator.this$01.array.length;) {
        c = castTo($next_3(c$iterator), 414);
        c.execute();
      }
    }
     finally {
      this$static.deferredDeltas = null;
    }
  }
}

function $isEventHandled_0(this$static, eventKey){
  return $containsKey_0(this$static.map_0, eventKey);
}

function SimpleEventBus_0(fireInReverseOrder){
  this.map_0 = new HashMap;
  this.isReverseOrder = fireInReverseOrder;
}

defineClass(255, 1016, {});
_.firingDepth = 0;
_.isReverseOrder = false;
var Lcom_google_web_bindery_event_shared_SimpleEventBus_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus', 255);
function HandlerManager$Bus(fireInReverseOrder){
  SimpleEventBus_0.call(this, fireInReverseOrder);
}

defineClass(411, 255, {}, HandlerManager$Bus);
var Lcom_google_gwt_event_shared_HandlerManager$Bus_2_classLit = createForClass('com.google.gwt.event.shared', 'HandlerManager/Bus', 411);
function LegacyHandlerWrapper(real){
  this.real = real;
}

defineClass(307, 1, {997:1}, LegacyHandlerWrapper);
var Lcom_google_gwt_event_shared_LegacyHandlerWrapper_2_classLit = createForClass('com.google.gwt.event.shared', 'LegacyHandlerWrapper', 307);
function UmbrellaException(causes){
  var cause, cause$iterator, i;
  RuntimeException_1.call(this, makeMessage(causes), causes.isEmpty()?null:castTo(causes.iterator().next_1(), 17));
  this.causes = causes;
  i = 0;
  for (cause$iterator = causes.iterator(); cause$iterator.hasNext_0();) {
    cause = castTo(cause$iterator.next_1(), 17);
    if (i++ == 0) {
      continue;
    }
    $addSuppressed(this, cause);
  }
}

function makeMessage(causes){
  var b, count, first, t, t$iterator;
  count = causes.size_1();
  if (count == 0) {
    return null;
  }
  b = new StringBuilder_1(count == 1?'Exception caught: ':count + ' exceptions caught: ');
  first = true;
  for (t$iterator = causes.iterator(); t$iterator.hasNext_0();) {
    t = castTo(t$iterator.next_1(), 17);
    first?(first = false):(b.string += '; ' , b);
    $append_5(b, t.getMessage());
  }
  return b.string;
}

defineClass(137, 11, {137:1, 3:1, 14:1, 11:1, 17:1}, UmbrellaException);
var Lcom_google_web_bindery_event_shared_UmbrellaException_2_classLit = createForClass('com.google.web.bindery.event.shared', 'UmbrellaException', 137);
function UmbrellaException_0(causes){
  UmbrellaException.call(this, causes);
}

defineClass(136, 137, $intern_96, UmbrellaException_0);
var Lcom_google_gwt_event_shared_UmbrellaException_2_classLit = createForClass('com.google.gwt.event.shared', 'UmbrellaException', 136);
function throwIfNull(name_0, value_0){
  if (null == value_0) {
    throw toJs(new NullPointerException_1(name_0 + ' cannot be null'));
  }
}

function $clinit_DateTimeFormat(){
  $clinit_DateTimeFormat = emptyMethod;
  new HashMap;
}

function $addPart(this$static, buf, count){
  var oldLength;
  if (buf.string.length > 0) {
    $add_13(this$static.patternParts, new DateTimeFormat$PatternPart(buf.string, count));
    oldLength = buf.string.length;
    0 < oldLength?(buf.string = buf.string.substr(0, 0)):0 > oldLength && (buf.string += valueOf_11(initUnidimensionalArray(C_classLit, $intern_23, 32, -oldLength, 15, 1)));
  }
}

function $format(this$static, date, timeZone){
  var ch_0, diff, i, j, keepDate, keepTime, n, toAppendTo, trailQuote;
  !timeZone && (timeZone = createTimeZone(date.jsdate.getTimezoneOffset()));
  diff = (date.jsdate.getTimezoneOffset() - timeZone.standardOffset) * 60000;
  keepDate = new Date_1(add_3(fromDouble_0(date.jsdate.getTime()), diff));
  keepTime = keepDate;
  if (keepDate.jsdate.getTimezoneOffset() != date.jsdate.getTimezoneOffset()) {
    diff > 0?(diff -= 86400000):(diff += 86400000);
    keepTime = new Date_1(add_3(fromDouble_0(date.jsdate.getTime()), diff));
  }
  toAppendTo = new StringBuilder_0;
  n = this$static.pattern.length;
  for (i = 0; i < n;) {
    ch_0 = $charAt(this$static.pattern, i);
    if (ch_0 >= 97 && ch_0 <= 122 || ch_0 >= 65 && ch_0 <= 90) {
      for (j = i + 1; j < n && $charAt(this$static.pattern, j) == ch_0; ++j)
      ;
      $subFormat(toAppendTo, ch_0, j - i, keepDate, keepTime, timeZone);
      i = j;
    }
     else if (ch_0 == 39) {
      ++i;
      if (i < n && $charAt(this$static.pattern, i) == 39) {
        toAppendTo.string += "'";
        ++i;
        continue;
      }
      trailQuote = false;
      while (!trailQuote) {
        j = i;
        while (j < n && $charAt(this$static.pattern, j) != 39) {
          ++j;
        }
        if (j >= n) {
          throw toJs(new IllegalArgumentException_0("Missing trailing '"));
        }
        j + 1 < n && $charAt(this$static.pattern, j + 1) == 39?++j:(trailQuote = true);
        $append_5(toAppendTo, $substring_0(this$static.pattern, i, j));
        i = j + 1;
      }
    }
     else {
      toAppendTo.string += String.fromCharCode(ch_0);
      ++i;
    }
  }
  return toAppendTo.string;
}

function $formatFractionalSeconds(buf, count, date){
  var time, value_0;
  time = fromDouble_0(date.jsdate.getTime());
  if (compare_5(time, 0) < 0) {
    value_0 = $intern_19 - toInt(mod_0(neg_0(time), $intern_19));
    value_0 == $intern_19 && (value_0 = 0);
  }
   else {
    value_0 = toInt(mod_0(time, $intern_19));
  }
  if (count == 1) {
    value_0 = $wnd.Math.min((value_0 + 50) / 100 | 0, 9);
    $append_1(buf, 48 + value_0 & $intern_44);
  }
   else if (count == 2) {
    value_0 = $wnd.Math.min((value_0 + 5) / 10 | 0, 99);
    $zeroPaddingNumber(buf, value_0, 2);
  }
   else {
    $zeroPaddingNumber(buf, value_0, 3);
    count > 3 && $zeroPaddingNumber(buf, 0, count - 3);
  }
}

function $formatMonth(buf, count, date){
  var value_0;
  value_0 = date.jsdate.getMonth();
  switch (count) {
    case 5:
      $append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value_0]);
      break;
    case 4:
      $append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value_0]);
      break;
    case 3:
      $append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value_0]);
      break;
    default:$zeroPaddingNumber(buf, value_0 + 1, count);
  }
}

function $formatYear(buf, count, date){
  var value_0;
  value_0 = date.jsdate.getFullYear() - 1900 + 1900;
  value_0 < 0 && (value_0 = -value_0);
  switch (count) {
    case 1:
      buf.string += value_0;
      break;
    case 2:
      $zeroPaddingNumber(buf, value_0 % 100, 2);
      break;
    default:$zeroPaddingNumber(buf, value_0, count);
  }
}

function $getNextCharCountInPattern(start_0){
  var ch_0, next;
  ch_0 = (checkCriticalStringElementIndex(start_0, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(start_0));
  next = start_0 + 1;
  while (next < 'yyyy-MM-dd HH:mm:ss'.length && (checkCriticalStringElementIndex(next, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(next) == ch_0)) {
    ++next;
  }
  return next - start_0;
}

function $identifyAbutStart(this$static){
  var abut, i, len;
  abut = false;
  len = this$static.patternParts.array.length;
  for (i = 0; i < len; i++) {
    if ($isNumeric(castTo($get_7(this$static.patternParts, i), 208))) {
      if (!abut && i + 1 < len && $isNumeric(castTo($get_7(this$static.patternParts, i + 1), 208))) {
        abut = true;
        castTo($get_7(this$static.patternParts, i), 208).abutStart = true;
      }
    }
     else {
      abut = false;
    }
  }
}

function $isNumeric(part){
  var i;
  if (part.count <= 0) {
    return false;
  }
  i = $indexOf_0('MLydhHmsSDkK', fromCodePoint($charAt(part.text_0, 0)));
  return i > 1 || i >= 0 && part.count < 3;
}

function $parsePattern(this$static){
  var buf, ch_0, count, i, inQuote;
  buf = new StringBuilder_0;
  inQuote = false;
  for (i = 0; i < 'yyyy-MM-dd HH:mm:ss'.length; i++) {
    ch_0 = (checkCriticalStringElementIndex(i, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(i));
    if (ch_0 == 32) {
      $addPart(this$static, buf, 0);
      buf.string += ' ';
      $addPart(this$static, buf, 0);
      while (i + 1 < 'yyyy-MM-dd HH:mm:ss'.length && (checkCriticalStringElementIndex(i + 1, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(i + 1) == 32)) {
        ++i;
      }
      continue;
    }
    if (inQuote) {
      if (ch_0 == 39) {
        if (i + 1 < 'yyyy-MM-dd HH:mm:ss'.length && (checkCriticalStringElementIndex(i + 1, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(i + 1) == 39)) {
          buf.string += "'";
          ++i;
        }
         else {
          inQuote = false;
        }
      }
       else {
        buf.string += String.fromCharCode(ch_0);
      }
      continue;
    }
    if ($indexOf_0('GyMLdkHmsSEcDahKzZv', fromCodePoint(ch_0)) > 0) {
      $addPart(this$static, buf, 0);
      buf.string += String.fromCharCode(ch_0);
      count = $getNextCharCountInPattern(i);
      $addPart(this$static, buf, count);
      i += count - 1;
      continue;
    }
    if (ch_0 == 39) {
      if (i + 1 < 'yyyy-MM-dd HH:mm:ss'.length && (checkCriticalStringElementIndex(i + 1, 'yyyy-MM-dd HH:mm:ss'.length) , 'yyyy-MM-dd HH:mm:ss'.charCodeAt(i + 1) == 39)) {
        buf.string += "'";
        ++i;
      }
       else {
        inQuote = true;
      }
    }
     else {
      buf.string += String.fromCharCode(ch_0);
    }
  }
  $addPart(this$static, buf, 0);
  $identifyAbutStart(this$static);
}

function $subFormat(buf, ch_0, count, adjustedDate, adjustedTime, timezone){
  var value_0, value0, value1, value10, value2, value3, value4, value5, value6, value7, value8, value9;
  switch (ch_0) {
    case 71:
      value0 = adjustedDate.jsdate.getFullYear() - 1900 >= -1900?1:0;
      count >= 4?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Before Christ', 'Anno Domini'])[value0]):$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['BC', 'AD'])[value0]);
      break;
    case 121:
      $formatYear(buf, count, adjustedDate);
      break;
    case 77:
      $formatMonth(buf, count, adjustedDate);
      break;
    case 107:
      value1 = adjustedTime.jsdate.getHours();
      value1 == 0?$zeroPaddingNumber(buf, 24, count):$zeroPaddingNumber(buf, value1, count);
      break;
    case 83:
      $formatFractionalSeconds(buf, count, adjustedTime);
      break;
    case 69:
      value2 = adjustedDate.jsdate.getDay();
      count == 5?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value2]):count == 4?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value2]):$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value2]);
      break;
    case 97:
      adjustedTime.jsdate.getHours() >= 12 && adjustedTime.jsdate.getHours() < 24?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['AM', 'PM'])[1]):$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['AM', 'PM'])[0]);
      break;
    case 104:
      value3 = adjustedTime.jsdate.getHours() % 12;
      value3 == 0?$zeroPaddingNumber(buf, 12, count):$zeroPaddingNumber(buf, value3, count);
      break;
    case 75:
      value4 = adjustedTime.jsdate.getHours() % 12;
      $zeroPaddingNumber(buf, value4, count);
      break;
    case 72:
      value5 = adjustedTime.jsdate.getHours();
      $zeroPaddingNumber(buf, value5, count);
      break;
    case 99:
      value6 = adjustedDate.jsdate.getDay();
      count == 5?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['S', 'M', 'T', 'W', 'T', 'F', 'S'])[value6]):count == 4?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])[value6]):count == 3?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'])[value6]):$zeroPaddingNumber(buf, value6, 1);
      break;
    case 76:
      value7 = adjustedDate.jsdate.getMonth();
      count == 5?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])[value7]):count == 4?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])[value7]):count == 3?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])[value7]):$zeroPaddingNumber(buf, value7 + 1, count);
      break;
    case 81:
      value8 = adjustedDate.jsdate.getMonth() / 3 | 0;
      count < 4?$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Q1', 'Q2', 'Q3', 'Q4'])[value8]):$append_5(buf, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'])[value8]);
      break;
    case 100:
      value9 = adjustedDate.jsdate.getDate();
      $zeroPaddingNumber(buf, value9, count);
      break;
    case 109:
      value10 = adjustedTime.jsdate.getMinutes();
      $zeroPaddingNumber(buf, value10, count);
      break;
    case 115:
      value_0 = adjustedTime.jsdate.getSeconds();
      $zeroPaddingNumber(buf, value_0, count);
      break;
    case 122:
      count < 4?$append_5(buf, timezone.tzNames[0]):$append_5(buf, timezone.tzNames[1]);
      break;
    case 118:
      $append_5(buf, timezone.timezoneID);
      break;
    case 90:
      count < 3?$append_5(buf, $getRFCTimeZoneString(timezone)):count == 3?$append_5(buf, $getISOTimeZoneString(timezone)):$append_5(buf, composeGMTString(timezone.standardOffset));
      break;
    default:return false;
  }
  return true;
}

function $zeroPaddingNumber(buf, value_0, minWidth){
  var b, i;
  b = 10;
  for (i = 0; i < minWidth - 1; i++) {
    value_0 < b && (buf.string += '0' , buf);
    b *= 10;
  }
  buf.string += value_0;
}

defineClass(557, 1, {});
var Lcom_google_gwt_i18n_shared_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat', 557);
function $clinit_DateTimeFormat_0(){
  $clinit_DateTimeFormat_0 = emptyMethod;
  $clinit_DateTimeFormat();
  cache_0 = new HashMap;
}

function DateTimeFormat(){
  $clinit_DateTimeFormat();
  this.patternParts = new ArrayList;
  this.pattern = 'yyyy-MM-dd HH:mm:ss';
  $parsePattern(this);
}

function getFormat(dtfi){
  $clinit_DateTimeFormat_0();
  var defaultDtfi, dtf;
  defaultDtfi = $getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_4));
  dtf = null;
  dtfi == defaultDtfi && (dtf = castTo($getStringValue(cache_0, 'yyyy-MM-dd HH:mm:ss'), 264));
  if (!dtf) {
    dtf = new DateTimeFormat;
    dtfi == defaultDtfi && $putStringValue(cache_0, 'yyyy-MM-dd HH:mm:ss', dtf);
  }
  return dtf;
}

defineClass(264, 557, {264:1}, DateTimeFormat);
var cache_0;
var Lcom_google_gwt_i18n_client_DateTimeFormat_2_classLit = createForClass('com.google.gwt.i18n.client', 'DateTimeFormat', 264);
defineClass(1054, 1, {});
var Lcom_google_gwt_i18n_shared_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DefaultDateTimeFormatInfo', 1054);
defineClass(1055, 1054, {});
var Lcom_google_gwt_i18n_client_DefaultDateTimeFormatInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'DefaultDateTimeFormatInfo', 1055);
function $clinit_LocaleInfo(){
  $clinit_LocaleInfo = emptyMethod;
  instance_4 = new LocaleInfo;
}

function $getDateTimeFormatInfo(this$static){
  !this$static.dateTimeFormatInfo && (this$static.dateTimeFormatInfo = new DateTimeFormatInfoImpl);
  return this$static.dateTimeFormatInfo;
}

function LocaleInfo(){
}

defineClass(521, 1, {}, LocaleInfo);
var instance_4;
var Lcom_google_gwt_i18n_client_LocaleInfo_2_classLit = createForClass('com.google.gwt.i18n.client', 'LocaleInfo', 521);
function $getISOTimeZoneString(this$static){
  var data_0, offset;
  offset = -this$static.standardOffset;
  data_0 = stampJavaTypeInfo(getClassLiteralForArray(C_classLit, 1), $intern_23, 32, 15, [43, 48, 48, 58, 48, 48]);
  if (offset < 0) {
    data_0[0] = 45;
    offset = -offset;
  }
  data_0[1] = data_0[1] + ((offset / 60 | 0) / 10 | 0) & $intern_44;
  data_0[2] = data_0[2] + (offset / 60 | 0) % 10 & $intern_44;
  data_0[4] = data_0[4] + (offset % 60 / 10 | 0) & $intern_44;
  data_0[5] = data_0[5] + offset % 10 & $intern_44;
  return valueOf_12(data_0, 0, data_0.length);
}

function $getRFCTimeZoneString(this$static){
  var data_0, offset;
  offset = -this$static.standardOffset;
  data_0 = stampJavaTypeInfo(getClassLiteralForArray(C_classLit, 1), $intern_23, 32, 15, [43, 48, 48, 48, 48]);
  if (offset < 0) {
    data_0[0] = 45;
    offset = -offset;
  }
  data_0[1] = data_0[1] + ((offset / 60 | 0) / 10 | 0) & $intern_44;
  data_0[2] = data_0[2] + (offset / 60 | 0) % 10 & $intern_44;
  data_0[3] = data_0[3] + (offset % 60 / 10 | 0) & $intern_44;
  data_0[4] = data_0[4] + offset % 10 & $intern_44;
  return valueOf_12(data_0, 0, data_0.length);
}

function TimeZone(){
}

function composeGMTString(offset){
  var data_0;
  data_0 = stampJavaTypeInfo(getClassLiteralForArray(C_classLit, 1), $intern_23, 32, 15, [71, 77, 84, 45, 48, 48, 58, 48, 48]);
  if (offset <= 0) {
    data_0[3] = 43;
    offset = -offset;
  }
  data_0[4] = data_0[4] + ((offset / 60 | 0) / 10 | 0) & $intern_44;
  data_0[5] = data_0[5] + (offset / 60 | 0) % 10 & $intern_44;
  data_0[7] = data_0[7] + (offset % 60 / 10 | 0) & $intern_44;
  data_0[8] = data_0[8] + offset % 10 & $intern_44;
  return valueOf_12(data_0, 0, data_0.length);
}

function composePOSIXTimeZoneID(offset){
  var str;
  if (offset == 0) {
    return 'Etc/GMT';
  }
  if (offset < 0) {
    offset = -offset;
    str = 'Etc/GMT-';
  }
   else {
    str = 'Etc/GMT+';
  }
  return str + offsetDisplay(offset);
}

function composeUTCString(offset){
  var str;
  if (offset == 0) {
    return 'UTC';
  }
  if (offset < 0) {
    offset = -offset;
    str = 'UTC+';
  }
   else {
    str = 'UTC-';
  }
  return str + offsetDisplay(offset);
}

function createTimeZone(timeZoneOffsetInMinutes){
  var tz;
  tz = new TimeZone;
  tz.standardOffset = timeZoneOffsetInMinutes;
  tz.timezoneID = composePOSIXTimeZoneID(timeZoneOffsetInMinutes);
  tz.tzNames = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_2, 2, 2, 6, 1);
  tz.tzNames[0] = composeUTCString(timeZoneOffsetInMinutes);
  tz.tzNames[1] = composeUTCString(timeZoneOffsetInMinutes);
  return tz;
}

function offsetDisplay(offset){
  var hour, mins;
  hour = offset / 60 | 0;
  mins = offset % 60;
  if (mins == 0) {
    return '' + hour;
  }
  return '' + hour + ':' + ('' + mins);
}

defineClass(676, 1, {}, TimeZone);
_.standardOffset = 0;
var Lcom_google_gwt_i18n_client_TimeZone_2_classLit = createForClass('com.google.gwt.i18n.client', 'TimeZone', 676);
function DateTimeFormatInfoImpl(){
}

defineClass(675, 1055, {}, DateTimeFormatInfoImpl);
var Lcom_google_gwt_i18n_client_impl_cldr_DateTimeFormatInfoImpl_2_classLit = createForClass('com.google.gwt.i18n.client.impl.cldr', 'DateTimeFormatInfoImpl', 675);
function DateTimeFormat$PatternPart(txt, cnt){
  this.text_0 = txt;
  this.count = cnt;
  this.abutStart = false;
}

defineClass(208, 1, {208:1}, DateTimeFormat$PatternPart);
_.abutStart = false;
_.count = 0;
var Lcom_google_gwt_i18n_shared_DateTimeFormat$PatternPart_2_classLit = createForClass('com.google.gwt.i18n.shared', 'DateTimeFormat/PatternPart', 208);
function canSet(array, value_0){
  var elementTypeCategory;
  switch (getElementTypeCategory(array)) {
    case 6:
      return instanceOfString(value_0);
    case 7:
      return instanceOfDouble(value_0);
    case 8:
      return instanceOfBoolean(value_0);
    case 3:
      return Array.isArray(value_0) && (elementTypeCategory = getElementTypeCategory(value_0) , !(elementTypeCategory >= 14 && elementTypeCategory <= 16));
    case 11:
      return value_0 != null && typeof value_0 === 'function';
    case 12:
      return value_0 != null && (typeof value_0 === 'object' || typeof value_0 == 'function');
    case 0:
      return canCast(value_0, array.__elementTypeId$);
    case 2:
      return isJsObjectOrFunction(value_0) && !(value_0.typeMarker === typeMarkerFn);
    case 1:
      return isJsObjectOrFunction(value_0) && !(value_0.typeMarker === typeMarkerFn) || canCast(value_0, array.__elementTypeId$);
    default:return true;
  }
}

function getClassLiteralForArray(clazz, dimensions){
  return getClassLiteralForArray_0(clazz, dimensions);
}

function getElementTypeCategory(array){
  return array.__elementTypeCategory$ == null?10:array.__elementTypeCategory$;
}

function initMultidimensionalArray(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, count){
  return initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, 0, count);
}

function initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count){
  var elementTypeCategory, i, isLastDimension, length_0, result;
  length_0 = dimExprs[index_0];
  isLastDimension = index_0 == count - 1;
  elementTypeCategory = isLastDimension?leafElementTypeCategory:0;
  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  leafElementTypeCategory != 10 && stampJavaTypeInfo(getClassLiteralForArray(leafClassLiteral, count - index_0), castableTypeMapExprs[index_0], elementTypeIds[index_0], elementTypeCategory, result);
  if (!isLastDimension) {
    ++index_0;
    for (i = 0; i < length_0; ++i) {
      result[i] = initMultidimensionalArray_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count);
    }
  }
  return result;
}

function initUnidimensionalArray(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions){
  var result;
  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  elementTypeCategory != 10 && stampJavaTypeInfo(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);
  return result;
}

function initializeArrayElementsWithDefaults(elementTypeCategory, length_0){
  var array = new Array(length_0);
  var initValue;
  switch (elementTypeCategory) {
    case 14:
    case 15:
      initValue = 0;
      break;
    case 16:
      initValue = false;
      break;
    default:return array;
  }
  for (var i = 0; i < length_0; ++i) {
    array[i] = initValue;
  }
  return array;
}

function isJavaArray(src_0){
  return Array.isArray(src_0) && src_0.typeMarker === typeMarkerFn;
}

function setCheck(array, index_0, value_0){
  checkCriticalArrayType(value_0 == null || canSet(array, value_0));
  return array[index_0] = value_0;
}

function stampJavaTypeInfo(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array){
  array.___clazz = arrayClass;
  array.castableTypeMap = castableTypeMap;
  array.typeMarker = typeMarkerFn;
  array.__elementTypeId$ = elementTypeId;
  array.__elementTypeCategory$ = elementTypeCategory;
  return array;
}

function stampJavaTypeInfo_0(array, referenceType){
  getElementTypeCategory(referenceType) != 10 && stampJavaTypeInfo(getClass__Ljava_lang_Class___devirtual$(referenceType), referenceType.castableTypeMap, referenceType.__elementTypeId$, getElementTypeCategory(referenceType), array);
  return array;
}

function create_2(value_0){
  var a0, a1, a2;
  a0 = value_0 & $intern_58;
  a1 = value_0 >> 22 & $intern_58;
  a2 = value_0 < 0?$intern_97:0;
  return create0(a0, a1, a2);
}

function create_3(a){
  return create0(a.l, a.m, a.h);
}

function create0(l, m, h){
  return {l:l, m:m, h:h};
}

function divMod(a, b, computeRemainder){
  var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
  if (b.l == 0 && b.m == 0 && b.h == 0) {
    throw toJs(new ArithmeticException);
  }
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    computeRemainder && (remainder = create0(0, 0, 0));
    return create0(0, 0, 0);
  }
  if (b.h == $intern_56 && b.m == 0 && b.l == 0) {
    return divModByMinValue(a, computeRemainder);
  }
  negative = false;
  if (b.h >> 19 != 0) {
    b = neg(b);
    negative = true;
  }
  bpower = powerOfTwo(b);
  aIsNegative = false;
  aIsMinValue = false;
  aIsCopy = false;
  if (a.h == $intern_56 && a.m == 0 && a.l == 0) {
    aIsMinValue = true;
    aIsNegative = true;
    if (bpower == -1) {
      a = create_3(($clinit_BigLongLib$Const() , MAX_VALUE));
      aIsCopy = true;
      negative = !negative;
    }
     else {
      c = shr(a, bpower);
      negative && negate(c);
      computeRemainder && (remainder = create0(0, 0, 0));
      return c;
    }
  }
   else if (a.h >> 19 != 0) {
    aIsNegative = true;
    a = neg(a);
    aIsCopy = true;
    negative = !negative;
  }
  if (bpower != -1) {
    return divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
  }
  if (compare_4(a, b) < 0) {
    computeRemainder && (aIsNegative?(remainder = neg(a)):(remainder = create0(a.l, a.m, a.h)));
    return create0(0, 0, 0);
  }
  return divModHelper(aIsCopy?a:create0(a.l, a.m, a.h), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}

function divModByMinValue(a, computeRemainder){
  if (a.h == $intern_56 && a.m == 0 && a.l == 0) {
    computeRemainder && (remainder = create0(0, 0, 0));
    return create_3(($clinit_BigLongLib$Const() , ONE));
  }
  computeRemainder && (remainder = create0(a.l, a.m, a.h));
  return create0(0, 0, 0);
}

function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
  var c;
  c = shr(a, bpower);
  negative && negate(c);
  if (computeRemainder) {
    a = maskRight(a, bpower);
    aIsNegative?(remainder = neg(a)):(remainder = create0(a.l, a.m, a.h));
  }
  return c;
}

function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
  var bshift, gte, quotient, shift_0, a1, a2, a0;
  shift_0 = numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
  bshift = shl(b, shift_0);
  quotient = create0(0, 0, 0);
  while (shift_0 >= 0) {
    gte = trialSubtract(a, bshift);
    if (gte) {
      shift_0 < 22?(quotient.l |= 1 << shift_0 , undefined):shift_0 < 44?(quotient.m |= 1 << shift_0 - 22 , undefined):(quotient.h |= 1 << shift_0 - 44 , undefined);
      if (a.l == 0 && a.m == 0 && a.h == 0) {
        break;
      }
    }
    a1 = bshift.m;
    a2 = bshift.h;
    a0 = bshift.l;
    bshift.h = a2 >>> 1;
    bshift.m = a1 >>> 1 | (a2 & 1) << 21;
    bshift.l = a0 >>> 1 | (a1 & 1) << 21;
    --shift_0;
  }
  negative && negate(quotient);
  if (computeRemainder) {
    if (aIsNegative) {
      remainder = neg(a);
      aIsMinValue && (remainder = sub_0(remainder, ($clinit_BigLongLib$Const() , ONE)));
    }
     else {
      remainder = create0(a.l, a.m, a.h);
    }
  }
  return quotient;
}

function maskRight(a, bits){
  var b0, b1, b2;
  if (bits <= 22) {
    b0 = a.l & (1 << bits) - 1;
    b1 = b2 = 0;
  }
   else if (bits <= 44) {
    b0 = a.l;
    b1 = a.m & (1 << bits - 22) - 1;
    b2 = 0;
  }
   else {
    b0 = a.l;
    b1 = a.m;
    b2 = a.h & (1 << bits - 44) - 1;
  }
  return create0(b0, b1, b2);
}

function negate(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_58;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_58;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_97;
  a.l = neg0;
  a.m = neg1;
  a.h = neg2;
}

function numberOfLeadingZeros(a){
  var b1, b2;
  b2 = numberOfLeadingZeros_0(a.h);
  if (b2 == 32) {
    b1 = numberOfLeadingZeros_0(a.m);
    return b1 == 32?numberOfLeadingZeros_0(a.l) + 32:b1 + 20 - 10;
  }
   else {
    return b2 - 12;
  }
}

function powerOfTwo(a){
  var h, l, m;
  l = a.l;
  if ((l & l - 1) != 0) {
    return -1;
  }
  m = a.m;
  if ((m & m - 1) != 0) {
    return -1;
  }
  h = a.h;
  if ((h & h - 1) != 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l == 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l != 0) {
    return numberOfTrailingZeros(l);
  }
  if (h == 0 && m != 0 && l == 0) {
    return numberOfTrailingZeros(m) + 22;
  }
  if (h != 0 && m == 0 && l == 0) {
    return numberOfTrailingZeros(h) + 44;
  }
  return -1;
}

function toDoubleHelper(a){
  return a.l + a.m * $intern_55 + a.h * $intern_98;
}

function trialSubtract(a, b){
  var sum0, sum1, sum2;
  sum2 = a.h - b.h;
  if (sum2 < 0) {
    return false;
  }
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 += sum1 >> 22;
  if (sum2 < 0) {
    return false;
  }
  a.l = sum0 & $intern_58;
  a.m = sum1 & $intern_58;
  a.h = sum2 & $intern_97;
  return true;
}

var remainder;
function add_2(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l + b.l;
  sum1 = a.m + b.m + (sum0 >> 22);
  sum2 = a.h + b.h + (sum1 >> 22);
  return create0(sum0 & $intern_58, sum1 & $intern_58, sum2 & $intern_97);
}

function and(a, b){
  return create0(a.l & b.l, a.m & b.m, a.h & b.h);
}

function compare_4(a, b){
  var a0, a1, a2, b0, b1, b2, signA, signB;
  signA = a.h >> 19;
  signB = b.h >> 19;
  if (signA != signB) {
    return signB - signA;
  }
  a2 = a.h;
  b2 = b.h;
  if (a2 != b2) {
    return a2 - b2;
  }
  a1 = a.m;
  b1 = b.m;
  if (a1 != b1) {
    return a1 - b1;
  }
  a0 = a.l;
  b0 = b.l;
  return a0 - b0;
}

function fromDouble(value_0){
  var a0, a1, a2, negative, result;
  if (isNaN(value_0)) {
    return $clinit_BigLongLib$Const() , ZERO;
  }
  if (value_0 < -9223372036854775808) {
    return $clinit_BigLongLib$Const() , MIN_VALUE;
  }
  if (value_0 >= 9223372036854775807) {
    return $clinit_BigLongLib$Const() , MAX_VALUE;
  }
  negative = false;
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  a2 = 0;
  if (value_0 >= $intern_98) {
    a2 = round_int(value_0 / $intern_98);
    value_0 -= a2 * $intern_98;
  }
  a1 = 0;
  if (value_0 >= $intern_55) {
    a1 = round_int(value_0 / $intern_55);
    value_0 -= a1 * $intern_55;
  }
  a0 = round_int(value_0);
  result = create0(a0, a1, a2);
  negative && negate(result);
  return result;
}

function neg(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_58;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_58;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_97;
  return create0(neg0, neg1, neg2);
}

function or(a, b){
  return create0(a.l | b.l, a.m | b.m, a.h | b.h);
}

function shl(a, n){
  var res0, res1, res2;
  n &= 63;
  if (n < 22) {
    res0 = a.l << n;
    res1 = a.m << n | a.l >> 22 - n;
    res2 = a.h << n | a.m >> 22 - n;
  }
   else if (n < 44) {
    res0 = 0;
    res1 = a.l << n - 22;
    res2 = a.m << n - 22 | a.l >> 44 - n;
  }
   else {
    res0 = 0;
    res1 = 0;
    res2 = a.l << n - 44;
  }
  return create0(res0 & $intern_58, res1 & $intern_58, res2 & $intern_97);
}

function shr(a, n){
  var a2, negative, res0, res1, res2;
  n &= 63;
  a2 = a.h;
  negative = (a2 & $intern_56) != 0;
  negative && (a2 |= -1048576);
  if (n < 22) {
    res2 = a2 >> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = negative?$intern_97:0;
    res1 = a2 >> n - 22;
    res0 = a.m >> n - 22 | a2 << 44 - n;
  }
   else {
    res2 = negative?$intern_97:0;
    res1 = negative?$intern_58:0;
    res0 = a2 >> n - 44;
  }
  return create0(res0 & $intern_58, res1 & $intern_58, res2 & $intern_97);
}

function shru(a, n){
  var a2, res0, res1, res2;
  n &= 63;
  a2 = a.h & $intern_97;
  if (n < 22) {
    res2 = a2 >>> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = 0;
    res1 = a2 >>> n - 22;
    res0 = a.m >> n - 22 | a.h << 44 - n;
  }
   else {
    res2 = 0;
    res1 = 0;
    res0 = a2 >>> n - 44;
  }
  return create0(res0 & $intern_58, res1 & $intern_58, res2 & $intern_97);
}

function sub_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 = a.h - b.h + (sum1 >> 22);
  return create0(sum0 & $intern_58, sum1 & $intern_58, sum2 & $intern_97);
}

function toDouble(a){
  if (compare_4(a, ($clinit_BigLongLib$Const() , ZERO)) < 0) {
    return -toDoubleHelper(neg(a));
  }
  return a.l + a.m * $intern_55 + a.h * $intern_98;
}

function xor(a, b){
  return create0(a.l ^ b.l, a.m ^ b.m, a.h ^ b.h);
}

function $clinit_BigLongLib$Const(){
  $clinit_BigLongLib$Const = emptyMethod;
  MAX_VALUE = create0($intern_58, $intern_58, 524287);
  MIN_VALUE = create0(0, 0, $intern_56);
  ONE = create_2(1);
  create_2(2);
  ZERO = create_2(0);
}

var MAX_VALUE, MIN_VALUE, ONE, ZERO;
function toJava(e){
  var javaException;
  if (instanceOf(e, 17)) {
    return e;
  }
  javaException = e && e['__java$exception'];
  if (!javaException) {
    javaException = new JavaScriptException(e);
    captureStackTrace(javaException);
  }
  return javaException;
}

function toJs(t){
  return t.backingJsObject;
}

function add_3(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a + b;
    if ($intern_99 < result && result < $intern_98) {
      return result;
    }
  }
  return createLongEmul(add_2(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function and_0(a, b){
  return createLongEmul(and(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function compare_5(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a - b;
    if (!isNaN(result)) {
      return result;
    }
  }
  return compare_4(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b);
}

function createLongEmul(big_0){
  var a2;
  a2 = big_0.h;
  if (a2 == 0) {
    return big_0.l + big_0.m * $intern_55;
  }
  if (a2 == $intern_97) {
    return big_0.l + big_0.m * $intern_55 - $intern_98;
  }
  return big_0;
}

function eq(a, b){
  return compare_5(a, b) == 0;
}

function fromDouble_0(value_0){
  if ($intern_99 < value_0 && value_0 < $intern_98) {
    return value_0 < 0?$wnd.Math.ceil(value_0):$wnd.Math.floor(value_0);
  }
  return createLongEmul(fromDouble(value_0));
}

function isSmallLong0(value_0){
  return typeof value_0 === 'number';
}

function mod_0(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a % b;
    if ($intern_99 < result && result < $intern_98) {
      return result;
    }
  }
  return createLongEmul((divMod(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b, true) , remainder));
}

function neg_0(a){
  var result;
  if (isSmallLong0(a)) {
    result = 0 - a;
    if (!isNaN(result)) {
      return result;
    }
  }
  return createLongEmul(neg(a));
}

function neq(a, b){
  return compare_5(a, b) != 0;
}

function or_0(a, b){
  return createLongEmul(or(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function shl_0(a, n){
  return createLongEmul(shl(isSmallLong0(a)?toBigLong(a):a, n));
}

function shru_0(a, n){
  return createLongEmul(shru(isSmallLong0(a)?toBigLong(a):a, n));
}

function toBigLong(longValue){
  var a0, a1, a3, value_0;
  value_0 = longValue;
  a3 = 0;
  if (value_0 < 0) {
    value_0 += $intern_98;
    a3 = $intern_97;
  }
  a1 = round_int(value_0 / $intern_55);
  a0 = round_int(value_0 - a1 * $intern_55);
  return create0(a0, a1, a3);
}

function toDouble_0(a){
  var d;
  if (isSmallLong0(a)) {
    d = a;
    return d == -0.?0:d;
  }
  return toDouble(a);
}

function toInt(a){
  if (isSmallLong0(a)) {
    return a | 0;
  }
  return a.l | a.m << 22;
}

function xor_0(a, b){
  return createLongEmul(xor(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function init(){
  $wnd.setTimeout($entry(assertCompileTimeUserAgent));
  $onModuleLoad_1();
  $clinit_LogConfiguration();
  $onModuleLoad_0();
  $onModuleLoad(new BaseletGWT);
}

function $adjustHorizontalConstraints(this$static, parentWidth, l){
  var leftPx, rightPx, widthPx;
  leftPx = l.left_0 * $getUnitSize(this$static, l.leftUnit, false);
  rightPx = l.right * $getUnitSize(this$static, l.rightUnit, false);
  widthPx = l.width_0 * $getUnitSize(this$static, l.widthUnit, false);
  if (l.setLeft && !l.setTargetLeft) {
    l.setLeft = false;
    if (l.setWidth) {
      l.setTargetRight = true;
      l.sourceRight = (parentWidth - (leftPx + widthPx)) / $getUnitSize(this$static, l.targetRightUnit, false);
    }
     else {
      l.setTargetWidth = true;
      l.sourceWidth = (parentWidth - (leftPx + rightPx)) / $getUnitSize(this$static, l.targetWidthUnit, false);
    }
  }
   else if (l.setWidth && !l.setTargetWidth) {
    l.setWidth = false;
    if (l.setLeft) {
      l.setTargetRight = true;
      l.sourceRight = (parentWidth - (leftPx + widthPx)) / $getUnitSize(this$static, l.targetRightUnit, false);
    }
     else {
      l.setTargetLeft = true;
      l.sourceLeft = (parentWidth - (rightPx + widthPx)) / $getUnitSize(this$static, l.targetLeftUnit, false);
    }
  }
   else if (l.setRight && !l.setTargetRight) {
    l.setRight = false;
    if (l.setWidth) {
      l.setTargetLeft = true;
      l.sourceLeft = (parentWidth - (rightPx + widthPx)) / $getUnitSize(this$static, l.targetLeftUnit, false);
    }
     else {
      l.setTargetWidth = true;
      l.sourceWidth = (parentWidth - (leftPx + rightPx)) / $getUnitSize(this$static, l.targetWidthUnit, false);
    }
  }
  l.setLeft = l.setTargetLeft;
  l.setRight = l.setTargetRight;
  l.setWidth = l.setTargetWidth;
  l.leftUnit = l.targetLeftUnit;
  l.rightUnit = l.targetRightUnit;
  l.widthUnit = l.targetWidthUnit;
}

function $adjustVerticalConstraints(this$static, parentHeight, l){
  var bottomPx, heightPx, topPx;
  topPx = l.top_0 * $getUnitSize(this$static, l.topUnit, true);
  bottomPx = l.bottom * $getUnitSize(this$static, l.bottomUnit, true);
  heightPx = l.height_0 * $getUnitSize(this$static, l.heightUnit, true);
  if (l.setTop && !l.setTargetTop) {
    l.setTop = false;
    if (l.setHeight) {
      l.setTargetBottom = true;
      l.sourceBottom = (parentHeight - (topPx + heightPx)) / $getUnitSize(this$static, l.targetBottomUnit, true);
    }
     else {
      l.setTargetHeight = true;
      l.sourceHeight = (parentHeight - (topPx + bottomPx)) / $getUnitSize(this$static, l.targetHeightUnit, true);
    }
  }
   else if (l.setHeight && !l.setTargetHeight) {
    l.setHeight = false;
    if (l.setTop) {
      l.setTargetBottom = true;
      l.sourceBottom = (parentHeight - (topPx + heightPx)) / $getUnitSize(this$static, l.targetBottomUnit, true);
    }
     else {
      l.setTargetTop = true;
      l.sourceTop = (parentHeight - (bottomPx + heightPx)) / $getUnitSize(this$static, l.targetTopUnit, true);
    }
  }
   else if (l.setBottom && !l.setTargetBottom) {
    l.setBottom = false;
    if (l.setHeight) {
      l.setTargetTop = true;
      l.sourceTop = (parentHeight - (bottomPx + heightPx)) / $getUnitSize(this$static, l.targetTopUnit, true);
    }
     else {
      l.setTargetHeight = true;
      l.sourceHeight = (parentHeight - (topPx + bottomPx)) / $getUnitSize(this$static, l.targetHeightUnit, true);
    }
  }
  l.setTop = l.setTargetTop;
  l.setBottom = l.setTargetBottom;
  l.setHeight = l.setTargetHeight;
  l.topUnit = l.targetTopUnit;
  l.bottomUnit = l.targetBottomUnit;
  l.heightUnit = l.targetHeightUnit;
}

function $getUnitSize(this$static, unit, vertical){
  return $getUnitSizeInPixels(this$static.impl, this$static.parentElem, unit, vertical);
}

function $layout(this$static, duration, callback){
  var child, l, l$iterator, l$iterator0, parentHeight, parentWidth;
  !!this$static.animation && $cancel_0(this$static.animation);
  if (duration == 0) {
    for (l$iterator0 = new ArrayList$1(this$static.layers); l$iterator0.i < l$iterator0.this$01.array.length;) {
      l = castTo($next_3(l$iterator0), 182);
      l.left_0 = l.sourceLeft = l.targetLeft;
      l.top_0 = l.sourceTop = l.targetTop;
      l.right = l.sourceRight = l.targetRight;
      l.bottom = l.sourceBottom = l.targetBottom;
      l.width_0 = l.sourceWidth = l.targetWidth;
      l.height_0 = l.sourceHeight = l.targetHeight;
      l.setLeft = l.setTargetLeft;
      l.setTop = l.setTargetTop;
      l.setRight = l.setTargetRight;
      l.setBottom = l.setTargetBottom;
      l.setWidth = l.setTargetWidth;
      l.setHeight = l.setTargetHeight;
      l.leftUnit = l.targetLeftUnit;
      l.topUnit = l.targetTopUnit;
      l.rightUnit = l.targetRightUnit;
      l.bottomUnit = l.targetBottomUnit;
      l.widthUnit = l.targetWidthUnit;
      l.heightUnit = l.targetHeightUnit;
      $layout_0(this$static.impl, l);
      !!callback && (child = l.getUserObject() , instanceOf(child, 63) && castTo(child, 63).onResize());
    }
    return;
  }
  parentWidth = this$static.parentElem.clientWidth | 0;
  parentHeight = this$static.parentElem.clientHeight | 0;
  for (l$iterator = new ArrayList$1(this$static.layers); l$iterator.i < l$iterator.this$01.array.length;) {
    l = castTo($next_3(l$iterator), 182);
    $adjustHorizontalConstraints(this$static, parentWidth, l);
    $adjustVerticalConstraints(this$static, parentHeight, l);
  }
  this$static.animation = new Layout$1(this$static, callback);
  $run_0(this$static.animation, duration, this$static.parentElem);
}

function $removeChild_0(this$static, layer){
  $removeChild_1(layer.container, layer.child);
  $remove_13(this$static.layers, layer);
}

function Layout(parent_0){
  this.impl = new LayoutImplIE8;
  this.layers = new ArrayList;
  this.parentElem = parent_0;
  $initParent(this.impl, parent_0);
}

defineClass(259, 1, {}, Layout);
var Lcom_google_gwt_layout_client_Layout_2_classLit = createForClass('com.google.gwt.layout.client', 'Layout', 259);
function Layout$1(this$0, val$callback){
  this.this$01 = this$0;
  this.val$callback2 = val$callback;
  Animation.call(this);
}

defineClass(534, 260, {}, Layout$1);
_.onCancel = function onCancel_0(){
  this.this$01.animation = null;
  $layout(this.this$01, 0, null);
}
;
_.onComplete = function onComplete_0(){
  this.this$01.animation = null;
  $layout(this.this$01, 0, null);
}
;
_.onUpdate = function onUpdate(progress){
  var child, l, l$iterator;
  for (l$iterator = new ArrayList$1(this.this$01.layers); l$iterator.i < l$iterator.this$01.array.length;) {
    l = castTo($next_3(l$iterator), 182);
    l.setTargetLeft && (l.left_0 = l.sourceLeft + (l.targetLeft - l.sourceLeft) * progress);
    l.setTargetRight && (l.right = l.sourceRight + (l.targetRight - l.sourceRight) * progress);
    l.setTargetTop && (l.top_0 = l.sourceTop + (l.targetTop - l.sourceTop) * progress);
    l.setTargetBottom && (l.bottom = l.sourceBottom + (l.targetBottom - l.sourceBottom) * progress);
    l.setTargetWidth && (l.width_0 = l.sourceWidth + (l.targetWidth - l.sourceWidth) * progress);
    l.setTargetHeight && (l.height_0 = l.sourceHeight + (l.targetHeight - l.sourceHeight) * progress);
    $layout_0(this.this$01.impl, l);
    !!this.val$callback2 && (child = l.getUserObject() , instanceOf(child, 63) && castTo(child, 63).onResize());
  }
}
;
var Lcom_google_gwt_layout_client_Layout$1_2_classLit = createForClass('com.google.gwt.layout.client', 'Layout/1', 534);
function $clinit_LayoutImpl(){
  $clinit_LayoutImpl = emptyMethod;
  fixedRuler = createRuler(($clinit_Style$Unit() , CM), CM);
  $appendChild($doc.body, fixedRuler);
}

function $fillParent(elem){
  var style;
  style = elem.style;
  style['position'] = ($clinit_Style$Position() , 'absolute');
  style['left'] = ($clinit_Style$Unit() , '0.0px');
  style['top'] = '0.0px';
  style['right'] = '0.0px';
  style['bottom'] = '0.0px';
}

function $getUnitSizeInPixels(this$static, parent_0, unit, vertical){
  if (!unit) {
    return 1;
  }
  switch (unit.ordinal) {
    case 1:
      return (vertical?parent_0.clientHeight | 0:parent_0.clientWidth | 0) / 100;
    case 2:
      return ((this$static.relativeRuler.offsetWidth || 0) | 0) / 10;
    case 3:
      return ((this$static.relativeRuler.offsetHeight || 0) | 0) / 10;
    case 7:
      return ((fixedRuler.offsetWidth || 0) | 0) * 0.1;
    case 8:
      return ((fixedRuler.offsetWidth || 0) | 0) * 0.01;
    case 6:
      return ((fixedRuler.offsetWidth || 0) | 0) * 0.254;
    case 4:
      return ((fixedRuler.offsetWidth || 0) | 0) * 0.00353;
    case 5:
      return ((fixedRuler.offsetWidth || 0) | 0) * 0.0423;
    default:case 0:
      return 1;
  }
}

function $initParent(this$static, parent_0){
  parent_0.style['position'] = ($clinit_Style$Position() , 'relative');
  $appendChild(parent_0, this$static.relativeRuler = createRuler(($clinit_Style$Unit() , EM), EX));
}

function $removeChild_1(container, child){
  var parent_0, parent0, style;
  parent0 = $getParentElement(container);
  !!parent0 && parent0.removeChild(container);
  $getParentElement(child) == container && (parent_0 = $getParentElement(child) , !!parent_0 && parent_0.removeChild(child));
  style = child.style;
  style['position'] = '';
  style['left'] = '';
  style['top'] = '';
  style['width'] = '';
  style['height'] = '';
}

function createRuler(widthUnit, heightUnit){
  var ruler, style;
  ruler = $doc.createElement('div');
  ruler.innerHTML = '&nbsp;';
  style = ruler.style;
  style['position'] = ($clinit_Style$Position() , 'absolute');
  style['zIndex'] = '-32767';
  style['top'] = -20 + heightUnit.getType();
  style['width'] = 10 + widthUnit.getType();
  style['height'] = 10 + heightUnit.getType();
  style['visibility'] = ($clinit_Style$Visibility() , 'hidden');
  $set_1(($clinit_State() , HIDDEN), ruler, stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Boolean_2_classLit, 1), $intern_5, 311, 8, [($clinit_Boolean() , true)]));
  return ruler;
}

defineClass(1044, 1, {});
var fixedRuler;
var Lcom_google_gwt_layout_client_LayoutImpl_2_classLit = createForClass('com.google.gwt.layout.client', 'LayoutImpl', 1044);
function $layout_0(this$static, layer){
  var oldDisplay, style;
  style = layer.container.style;
  setLayer(layer.container, layer);
  if (layer.visible) {
    oldDisplay = style['display'];
    style['display'] = '';
    oldDisplay.length > 0 && $updateVisibility(this$static, layer.container);
  }
   else {
    style['display'] = ($clinit_Style$Display() , 'none');
  }
  layer.setLeft?$setValue_0(this$static, layer, 'left', layer.left_0, layer.leftUnit, false, false):(style['left'] = '' , undefined);
  layer.setRight?$setValue_0(this$static, layer, 'right', layer.right, layer.rightUnit, false, false):(style['right'] = '' , undefined);
  layer.setTop?$setValue_0(this$static, layer, 'top', layer.top_0, layer.topUnit, true, false):(style['top'] = '' , undefined);
  layer.setBottom?$setValue_0(this$static, layer, 'bottom', layer.bottom, layer.bottomUnit, true, false):(style['bottom'] = '' , undefined);
  layer.setWidth?$setValue_0(this$static, layer, 'width', layer.width_0, layer.widthUnit, false, true):(style['width'] = '' , undefined);
  layer.setHeight?$setValue_0(this$static, layer, 'height', layer.height_0, layer.heightUnit, true, true):(style['height'] = '' , undefined);
  style = layer.child.style;
  switch (2) {
    case 2:
      style['left'] = ($clinit_Style$Unit() , '0.0px');
      style['right'] = '0.0px';
  }
  switch (2) {
    case 2:
      style['top'] = ($clinit_Style$Unit() , '0.0px');
      style['bottom'] = '0.0px';
  }
}

function $removeLayerRefs(parent_0){
  for (var i = 0; i < parent_0.childNodes.length; ++i) {
    var container = parent_0.childNodes[i];
    container.__layer && (container.__layer = null);
  }
}

function $setValue_0(this$static, layer, prop, value_0, unit, vertical, noNegative){
  switch (unit.ordinal) {
    case 0:
    case 1:
      break;
    default:value_0 = value_0 * $getUnitSizeInPixels(this$static, layer.container, unit, vertical);
      value_0 = round_int(value_0 + 0.5);
      unit = ($clinit_Style$Unit() , PX);
  }
  noNegative && value_0 < 0 && (value_0 = 0);
  layer.getContainerElement_0().style[prop] = value_0 + unit.getType();
}

function $updateVisibility(this$static, container){
  var i, layer, node, nodes;
  layer = container.__layer;
  !!layer && $layout_0(this$static, layer);
  nodes = container.childNodes;
  for (i = 0; i < nodes.length; ++i) {
    node = nodes[i];
    node.nodeType == 1 && $updateVisibility(this$static, node);
  }
}

function LayoutImplIE8(){
  $clinit_LayoutImpl();
}

function setLayer(container, layer){
  container.__layer = layer;
}

defineClass(658, 1044, {}, LayoutImplIE8);
var Lcom_google_gwt_layout_client_LayoutImplIE8_2_classLit = createForClass('com.google.gwt.layout.client', 'LayoutImplIE8', 658);
function $getLevel(this$static){
  if (this$static.level) {
    return this$static.level;
  }
  return $clinit_Level() , ALL;
}

function $setFormatter(this$static, newFormatter){
  this$static.formatter = newFormatter;
}

function $setLevel(this$static, newLevel){
  this$static.level = newLevel;
}

defineClass(176, 1, $intern_100);
var Ljava_util_logging_Handler_2_classLit = createForClass('java.util.logging', 'Handler', 176);
function ConsoleLogHandler(){
  $setFormatter(this, new TextLogFormatter(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(396, 176, $intern_100, ConsoleLogHandler);
_.publish = function publish(record){
  var msg, val;
  if (!window.console || ($getLevel(this) , $intern_12 > record.level.intValue())) {
    return;
  }
  msg = $format_0(this.formatter, record);
  val = record.level.intValue();
  val >= ($clinit_Level() , $intern_19)?(window.console.error(msg) , undefined):val >= 900?(window.console.warn(msg) , undefined):val >= 800?(window.console.info(msg) , undefined):(window.console.log(msg) , undefined);
}
;
var Lcom_google_gwt_logging_client_ConsoleLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'ConsoleLogHandler', 396);
function DevelopmentModeLogHandler(){
  $setFormatter(this, new TextLogFormatter(false));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(397, 176, $intern_100, DevelopmentModeLogHandler);
_.publish = function publish_0(record){
  return;
}
;
var Lcom_google_gwt_logging_client_DevelopmentModeLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'DevelopmentModeLogHandler', 397);
function $clinit_LogConfiguration(){
  $clinit_LogConfiguration = emptyMethod;
  impl_1 = new LogConfiguration$LogConfigurationImplRegular;
}

function $onModuleLoad_0(){
  var log_0;
  $configureClientSideLogging(impl_1);
  if (!uncaughtExceptionHandler) {
    log_0 = getLogger_0(($ensureNamesAreInitialized(Lcom_google_gwt_logging_client_LogConfiguration_2_classLit) , Lcom_google_gwt_logging_client_LogConfiguration_2_classLit.typeName));
    setUncaughtExceptionHandler(new LogConfiguration$1(log_0));
  }
}

var impl_1;
var Lcom_google_gwt_logging_client_LogConfiguration_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration', null);
function LogConfiguration$1(val$log){
  this.val$log2 = val$log;
}

defineClass(395, 1, {}, LogConfiguration$1);
_.onUncaughtException = function onUncaughtException_0(e){
  $log(this.val$log2, ($clinit_Level() , SEVERE), e.getMessage(), e);
}
;
var Lcom_google_gwt_logging_client_LogConfiguration$1_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/1', 395);
function $configureClientSideLogging(this$static){
  this$static.root = getLogger_0('');
  $setUseParentHandlers(this$static.root);
  $setLevels(this$static.root);
  $setDefaultHandlers(this$static.root);
}

function $setDefaultHandlers(l){
  var console_0, dev, system;
  console_0 = new ConsoleLogHandler;
  $addHandler_1(l, console_0);
  dev = new DevelopmentModeLogHandler;
  $addHandler_1(l, dev);
  system = new SystemLogHandler;
  $addHandler_1(l, system);
}

function $setLevels(l){
  var level, levelParam;
  levelParam = getParameter('logLevel');
  level = levelParam == null?null:parse_0(levelParam);
  level?$setLevel_0(l, level):$setLevel_0(l, ($clinit_Level() , INFO));
}

function LogConfiguration$LogConfigurationImplRegular(){
}

defineClass(394, 1, {}, LogConfiguration$LogConfigurationImplRegular);
var Lcom_google_gwt_logging_client_LogConfiguration$LogConfigurationImplRegular_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/LogConfigurationImplRegular', 394);
function SystemLogHandler(){
  $setFormatter(this, new TextLogFormatter(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(398, 176, $intern_100, SystemLogHandler);
_.publish = function publish_1(record){
  return;
}
;
var Lcom_google_gwt_logging_client_SystemLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'SystemLogHandler', 398);
defineClass(1039, 1, {});
var Ljava_util_logging_Formatter_2_classLit = createForClass('java.util.logging', 'Formatter', 1039);
defineClass(1040, 1039, {});
var Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit = createForClass('com.google.gwt.logging.impl', 'FormatterImpl', 1040);
function $format_0(this$static, event_0){
  var message, date, s;
  message = new StringBuilder;
  $append_5(message, (date = new Date_1(event_0.millis_0) , s = new StringBuilder , $append_5(s, $toString_6(date)) , s.string += ' ' , $append_5(s, event_0.loggerName) , s.string += '\n' , $append_5(s, event_0.level.getName()) , s.string += ': ' , s.string));
  $append_5(message, event_0.msg);
  if (this$static.showStackTraces && !!event_0.thrown) {
    message.string += '\n';
    $printStackTraceImpl(event_0.thrown, new StackTracePrintStream(message), '', '');
  }
  return message.string;
}

function TextLogFormatter(showStackTraces){
  this.showStackTraces = showStackTraces;
}

defineClass(263, 1040, {}, TextLogFormatter);
_.showStackTraces = false;
var Lcom_google_gwt_logging_client_TextLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client', 'TextLogFormatter', 263);
defineClass(1029, 1, {});
var Ljava_io_OutputStream_2_classLit = createForClass('java.io', 'OutputStream', 1029);
function FilterOutputStream(out){
}

defineClass(316, 1029, {}, FilterOutputStream);
var Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io', 'FilterOutputStream', 316);
function PrintStream(out){
  FilterOutputStream.call(this, out);
}

defineClass(257, 316, {}, PrintStream);
_.println = function println(s){
}
;
var Ljava_io_PrintStream_2_classLit = createForClass('java.io', 'PrintStream', 257);
function StackTracePrintStream(builder){
  PrintStream.call(this, new FilterOutputStream(null));
  this.builder = builder;
}

defineClass(554, 257, {}, StackTracePrintStream);
_.println = function println_0(str){
  $append_5(this.builder, str);
  $append_5(this.builder, '\n');
}
;
var Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit = createForClass('com.google.gwt.logging.impl', 'StackTracePrintStream', 554);
function $clinit_DOM(){
  $clinit_DOM = emptyMethod;
  $clinit_DOMImplStandard();
}

function dispatchEvent_0(evt, elem){
  $clinit_DOM();
  var eventListener;
  eventListener = getEventListener(elem);
  if (!eventListener) {
    return false;
  }
  dispatchEvent_1(evt, elem, eventListener);
  return true;
}

function dispatchEvent_1(evt, elem, listener){
  $clinit_DOM();
  var prevCurrentEvent;
  prevCurrentEvent = currentEvent;
  currentEvent = evt;
  elem == sCaptureElem && $eventGetTypeInt(evt.type) == 8192 && (sCaptureElem = null);
  listener.onBrowserEvent(evt);
  currentEvent = prevCurrentEvent;
}

function previewEvent(evt){
  $clinit_DOM();
  var ret;
  ret = fire_4(handlers_0, evt);
  if (!ret && !!evt) {
    evt.stopPropagation();
    evt.preventDefault();
  }
  return ret;
}

function resolve_0(maybePotential){
  $clinit_DOM();
  return maybePotential.__gwt_resolve?maybePotential.__gwt_resolve():maybePotential;
}

function setStyleAttribute(elem, value_0){
  $clinit_DOM();
  elem.style['opacity'] = value_0;
}

function sinkEvents(elem, eventBits){
  $clinit_DOM();
  $maybeInitializeEventSystem();
  $sinkEventsImpl(elem, eventBits);
}

var currentEvent = null, sCaptureElem;
function $onModuleLoad_1(){
  var allowedModes, currentMode, i;
  currentMode = $doc.compatMode;
  allowedModes = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['CSS1Compat']);
  for (i = 0; i < allowedModes.length; i++) {
    if ($equals_6(allowedModes[i], currentMode)) {
      return;
    }
  }
  allowedModes.length == 1 && $equals_6('CSS1Compat', allowedModes[0]) && $equals_6('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom " + "'document.compatMode' configuration property settings.";
}

var handlers_0;
function fire_4(handlers, nativeEvent){
  var lastIsCanceled, lastIsConsumed, lastIsFirstHandler, lastNativeEvent, ret;
  if (!!TYPE_27 && !!handlers && $isEventHandled(handlers, TYPE_27)) {
    lastIsCanceled = singleton.isCanceled;
    lastIsConsumed = singleton.isConsumed;
    lastIsFirstHandler = singleton.isFirstHandler;
    lastNativeEvent = singleton.nativeEvent;
    singleton.revive();
    singleton.setNativeEvent_0(nativeEvent);
    $fireEvent(handlers, singleton);
    ret = !(singleton.isCanceled_0() && !singleton.isConsumed_0());
    singleton.isCanceled = lastIsCanceled;
    singleton.isConsumed = lastIsConsumed;
    singleton.isFirstHandler = lastIsFirstHandler;
    singleton.nativeEvent = lastNativeEvent;
    return ret;
  }
  return true;
}

var TYPE_27, singleton;
function addCloseHandler(handler){
  maybeInitializeCloseHandlers();
  return addHandler(TYPE_24?TYPE_24:(TYPE_24 = new GwtEvent$Type), handler);
}

function addHandler(type_0, handler){
  return $addHandler_0((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1), type_0, handler);
}

function addResizeHandler(handler){
  maybeInitializeCloseHandlers();
  maybeInitializeResizeHandlers();
  return addHandler((!TYPE_25 && (TYPE_25 = new GwtEvent$Type) , TYPE_25), handler);
}

function addWindowClosingHandler(handler){
  maybeInitializeCloseHandlers();
  return addHandler(($clinit_Window$ClosingEvent() , $clinit_Window$ClosingEvent() , TYPE_28), handler);
}

function alert_0(msg){
  $wnd.alert(msg);
}

function maybeInitializeCloseHandlers(){
  if (!closeHandlersInitialized) {
    $initHandler('function __gwt_initWindowCloseHandler(beforeunload, unload) {\n  var wnd = window\n  , oldOnBeforeUnload = wnd.onbeforeunload\n  , oldOnUnload = wnd.onunload;\n  \n  wnd.onbeforeunload = function(evt) {\n    var ret, oldRet;\n    try {\n      ret = beforeunload();\n    } finally {\n      oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);\n    }\n    // Avoid returning null as IE6 will coerce it into a string.\n    // Ensure that "" gets returned properly.\n    if (ret != null) {\n      return ret;\n    }\n    if (oldRet != null) {\n      return oldRet;\n    }\n    // returns undefined.\n  };\n  \n  wnd.onunload = function(evt) {\n    try {\n      unload();\n    } finally {\n      oldOnUnload && oldOnUnload(evt);\n      wnd.onresize = null;\n      wnd.onscroll = null;\n      wnd.onbeforeunload = null;\n      wnd.onunload = null;\n    }\n  };\n  \n  // Remove the reference once we\'ve initialize the handler\n  wnd.__gwt_initWindowCloseHandler = undefined;\n}\n', new WindowImplIE$1);
    closeHandlersInitialized = true;
  }
}

function maybeInitializeResizeHandlers(){
  if (!resizeHandlersInitialized) {
    $initHandler("function __gwt_initWindowResizeHandler(resize) {\n  var wnd = window, oldOnResize = wnd.onresize;\n  \n  wnd.onresize = function(evt) {\n    try {\n      resize();\n    } finally {\n      oldOnResize && oldOnResize(evt);\n    }\n  };\n  \n  // Remove the reference once we've initialize the handler\n  wnd.__gwt_initWindowResizeHandler = undefined;\n}\n", new WindowImplIE$2);
    resizeHandlersInitialized = true;
  }
}

function onClosed(){
  closeHandlersInitialized && fire_1((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1));
}

function onClosing(){
  var event_0;
  if (closeHandlersInitialized) {
    event_0 = new Window$ClosingEvent;
    !!handlers_1 && $fireEvent(handlers_1, event_0);
    return event_0.message_0;
  }
  return null;
}

function onResize_5(){
  var height, width_0;
  if (resizeHandlersInitialized) {
    width_0 = $getClientWidth($doc);
    height = $getClientHeight($doc);
    if (lastResizeWidth != width_0 || lastResizeHeight != height) {
      lastResizeWidth = width_0;
      lastResizeHeight = height;
      fire_2((!handlers_1 && (handlers_1 = new Window$WindowHandlers) , handlers_1));
    }
  }
}

var closeHandlersInitialized = false, handlers_1, lastResizeHeight = 0, lastResizeWidth = 0, resizeHandlersInitialized = false;
function $clinit_Window$ClosingEvent(){
  $clinit_Window$ClosingEvent = emptyMethod;
  TYPE_28 = new GwtEvent$Type;
}

function Window$ClosingEvent(){
  $clinit_Window$ClosingEvent();
}

defineClass(406, 1014, {}, Window$ClosingEvent);
_.dispatch_0 = function dispatch_29(handler){
  var lastArg;
  (lastArg = this , castTo(handler, 1013) , lastArg).message_0 = 'Do you really want to leave the page? You will lose any unsaved changes.';
}
;
_.getAssociatedType = function getAssociatedType_29(){
  return TYPE_28;
}
;
_.message_0 = null;
var TYPE_28;
var Lcom_google_gwt_user_client_Window$ClosingEvent_2_classLit = createForClass('com.google.gwt.user.client', 'Window/ClosingEvent', 406);
function buildListParamMap(queryString){
  var entry, entry$iterator, key, kv, kvPair, kvPair$array, kvPair$index, kvPair$max, out, qs, val, values, regexp;
  out = new HashMap;
  if (queryString != null && queryString.length > 1) {
    qs = queryString.substr(1);
    for (kvPair$array = $split(qs, '&', 0) , kvPair$index = 0 , kvPair$max = kvPair$array.length; kvPair$index < kvPair$max; ++kvPair$index) {
      kvPair = kvPair$array[kvPair$index];
      kv = $split(kvPair, '=', 2);
      key = kv[0];
      if (key.length == 0) {
        continue;
      }
      val = kv.length > 1?kv[1]:'';
      try {
        val = (throwIfNull('encodedURLComponent', val) , regexp = /\+/g , decodeURIComponent(val.replace(regexp, '%20')));
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (!instanceOf($e0, 101))
          throw toJs($e0);
      }
      values = castTo(out.get_1(key), 41);
      if (!values) {
        values = new ArrayList;
        out.put(key, values);
      }
      values.add_0(val);
    }
  }
  for (entry$iterator = out.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 46);
    entry.setValue(unmodifiableList(castTo(entry.getValue_0(), 41)));
  }
  out = ($clinit_Collections() , new Collections$UnmodifiableMap(out));
  return out;
}

function ensureListParameterMap(){
  var currentQueryString, href_0, hashLoc, questionLoc;
  currentQueryString = (href_0 = $wnd.location.href , hashLoc = href_0.indexOf('#') , hashLoc >= 0 && (href_0 = href_0.substring(0, hashLoc)) , questionLoc = href_0.indexOf('?') , questionLoc > 0?href_0.substring(questionLoc):'');
  if (!listParamMap || !$equals_6(cachedQueryString, currentQueryString)) {
    listParamMap = buildListParamMap(currentQueryString);
    cachedQueryString = currentQueryString;
  }
}

function getParameter(name_0){
  var paramsForName;
  ensureListParameterMap();
  paramsForName = castTo(listParamMap.get_1(name_0), 41);
  return !paramsForName?null:castToString(paramsForName.get_0(paramsForName.size_1() - 1));
}

var cachedQueryString = '', listParamMap;
function Window$WindowHandlers(){
  HandlerManager.call(this, null);
}

defineClass(254, 173, $intern_95, Window$WindowHandlers);
var Lcom_google_gwt_user_client_Window$WindowHandlers_2_classLit = createForClass('com.google.gwt.user.client', 'Window/WindowHandlers', 254);
function $eventGetTypeInt(eventType){
  switch (eventType) {
    case 'blur':
      return $intern_22;
    case 'change':
      return 1024;
    case 'click':
      return 1;
    case 'dblclick':
      return 2;
    case 'focus':
      return $intern_30;
    case 'keydown':
      return 128;
    case 'keypress':
      return 256;
    case 'keyup':
      return 512;
    case 'load':
      return $intern_38;
    case 'losecapture':
      return 8192;
    case 'mousedown':
      return 4;
    case 'mousemove':
      return 64;
    case 'mouseout':
      return 32;
    case 'mouseover':
      return 16;
    case 'mouseup':
      return 8;
    case 'scroll':
      return $intern_37;
    case 'error':
      return $intern_32;
    case 'DOMMouseScroll':
    case 'mousewheel':
      return $intern_57;
    case 'contextmenu':
      return $intern_64;
    case 'paste':
      return $intern_56;
    case 'touchstart':
      return $intern_101;
    case 'touchmove':
      return $intern_54;
    case 'touchend':
      return $intern_55;
    case 'touchcancel':
      return $intern_41;
    case 'gesturestart':
      return $intern_102;
    case 'gesturechange':
      return $intern_53;
    case 'gestureend':
      return $intern_35;
    default:return -1;
  }
}

function $maybeInitializeEventSystem(){
  if (!eventSystemIsInitialized) {
    $initEventSystem();
    eventSystemIsInitialized = true;
  }
}

function getEventListener(elem){
  var maybeListener = elem.__listener;
  return !instanceOfJso(maybeListener) && instanceOf(maybeListener, 28)?maybeListener:null;
}

function setEventListener(elem, listener){
  elem.__listener = listener;
}

var eventSystemIsInitialized = false;
function $clinit_DOMImplStandard(){
  $clinit_DOMImplStandard = emptyMethod;
  bitlessEventDispatchers = {_default_:dispatchEvent_3, dragenter:dispatchDragEvent, dragover:dispatchDragEvent};
  captureEventDispatchers = {click:dispatchCapturedMouseEvent, dblclick:dispatchCapturedMouseEvent, mousedown:dispatchCapturedMouseEvent, mouseup:dispatchCapturedMouseEvent, mousemove:dispatchCapturedMouseEvent, mouseover:dispatchCapturedMouseEvent, mouseout:dispatchCapturedMouseEvent, mousewheel:dispatchCapturedMouseEvent, keydown:dispatchCapturedEvent, keyup:dispatchCapturedEvent, keypress:dispatchCapturedEvent, touchstart:dispatchCapturedMouseEvent, touchend:dispatchCapturedMouseEvent, touchmove:dispatchCapturedMouseEvent, touchcancel:dispatchCapturedMouseEvent, gesturestart:dispatchCapturedMouseEvent, gestureend:dispatchCapturedMouseEvent, gesturechange:dispatchCapturedMouseEvent};
}

function $initEventSystem(){
  dispatchEvent_2 = $entry(dispatchEvent_3);
  dispatchUnhandledEvent = $entry(dispatchUnhandledEvent_0);
  var foreach = foreach_0;
  var bitlessEvents = bitlessEventDispatchers;
  foreach(bitlessEvents, function(e, fn){
    bitlessEvents[e] = $entry(fn);
  }
  );
  var captureEvents_0 = captureEventDispatchers;
  foreach(captureEvents_0, function(e, fn){
    captureEvents_0[e] = $entry(fn);
  }
  );
  foreach(captureEvents_0, function(e, fn){
    $wnd.addEventListener(e, fn, true);
  }
  );
}

function $sinkEventsImpl(elem, bits){
  var chMask = (elem.__eventBits || 0) ^ bits;
  elem.__eventBits = bits;
  if (!chMask)
    return;
  chMask & 1 && (elem.onclick = bits & 1?dispatchEvent_2:null);
  chMask & 2 && (elem.ondblclick = bits & 2?dispatchEvent_2:null);
  chMask & 4 && (elem.onmousedown = bits & 4?dispatchEvent_2:null);
  chMask & 8 && (elem.onmouseup = bits & 8?dispatchEvent_2:null);
  chMask & 16 && (elem.onmouseover = bits & 16?dispatchEvent_2:null);
  chMask & 32 && (elem.onmouseout = bits & 32?dispatchEvent_2:null);
  chMask & 64 && (elem.onmousemove = bits & 64?dispatchEvent_2:null);
  chMask & 128 && (elem.onkeydown = bits & 128?dispatchEvent_2:null);
  chMask & 256 && (elem.onkeypress = bits & 256?dispatchEvent_2:null);
  chMask & 512 && (elem.onkeyup = bits & 512?dispatchEvent_2:null);
  chMask & 1024 && (elem.onchange = bits & 1024?dispatchEvent_2:null);
  chMask & $intern_30 && (elem.onfocus = bits & $intern_30?dispatchEvent_2:null);
  chMask & $intern_22 && (elem.onblur = bits & $intern_22?dispatchEvent_2:null);
  chMask & 8192 && (elem.onlosecapture = bits & 8192?dispatchEvent_2:null);
  chMask & $intern_37 && (elem.onscroll = bits & $intern_37?dispatchEvent_2:null);
  chMask & $intern_38 && (elem.onload = bits & $intern_38?dispatchUnhandledEvent:null);
  chMask & $intern_32 && (elem.onerror = bits & $intern_32?dispatchEvent_2:null);
  chMask & $intern_57 && (elem.onmousewheel = bits & $intern_57?dispatchEvent_2:null);
  chMask & $intern_64 && (elem.oncontextmenu = bits & $intern_64?dispatchEvent_2:null);
  chMask & $intern_56 && (elem.onpaste = bits & $intern_56?dispatchEvent_2:null);
  chMask & $intern_101 && (elem.ontouchstart = bits & $intern_101?dispatchEvent_2:null);
  chMask & $intern_54 && (elem.ontouchmove = bits & $intern_54?dispatchEvent_2:null);
  chMask & $intern_55 && (elem.ontouchend = bits & $intern_55?dispatchEvent_2:null);
  chMask & $intern_41 && (elem.ontouchcancel = bits & $intern_41?dispatchEvent_2:null);
  chMask & $intern_102 && (elem.ongesturestart = bits & $intern_102?dispatchEvent_2:null);
  chMask & $intern_53 && (elem.ongesturechange = bits & $intern_53?dispatchEvent_2:null);
  chMask & $intern_35 && (elem.ongestureend = bits & $intern_35?dispatchEvent_2:null);
}

function dispatchCapturedEvent(evt){
  previewEvent(evt);
}

function dispatchCapturedMouseEvent(evt){
  var cancelled;
  cancelled = !previewEvent(evt);
  if (cancelled || !captureElem) {
    return;
  }
  dispatchEvent_0(evt, captureElem) && (evt.stopPropagation() , undefined);
}

function dispatchDragEvent(evt){
  evt.preventDefault();
  dispatchEvent_3(evt);
}

function dispatchEvent_3(evt){
  var element;
  element = getFirstAncestorWithListener(evt);
  if (!element) {
    return;
  }
  dispatchEvent_1(evt, element.nodeType != 1?null:element, getEventListener(element));
}

function dispatchUnhandledEvent_0(evt){
  var element;
  element = evt.currentTarget || $wnd;
  element['__gwtLastUnhandledEvent'] = evt.type;
  dispatchEvent_3(evt);
}

function getFirstAncestorWithListener(evt){
  var curElem;
  curElem = evt.currentTarget || $wnd;
  while (!!curElem && !getEventListener(curElem)) {
    curElem = curElem.parentNode;
  }
  return curElem;
}

var bitlessEventDispatchers, captureElem, captureEventDispatchers, dispatchEvent_2, dispatchUnhandledEvent;
function foreach_0(map_0, fn){
  for (var e in map_0) {
    map_0.hasOwnProperty(e) && fn(e, map_0[e]);
  }
}

function $initHandler(initFunc, cmd){
  var scriptElem;
  scriptElem = $createScriptElement($doc, initFunc);
  $appendChild($doc.body, scriptElem);
  cmd.execute();
  $removeChild($doc.body, scriptElem);
}

function WindowImplIE$1(){
}

defineClass(407, 1, {}, WindowImplIE$1);
_.execute = function execute_28(){
  $wnd.__gwt_initWindowCloseHandler($entry(onClosing), $entry(onClosed));
}
;
var Lcom_google_gwt_user_client_impl_WindowImplIE$1_2_classLit = createForClass('com.google.gwt.user.client.impl', 'WindowImplIE/1', 407);
function WindowImplIE$2(){
}

defineClass(408, 1, {}, WindowImplIE$2);
_.execute = function execute_29(){
  $wnd.__gwt_initWindowResizeHandler($entry(onResize_5));
}
;
var Lcom_google_gwt_user_client_impl_WindowImplIE$2_2_classLit = createForClass('com.google.gwt.user.client.impl', 'WindowImplIE/2', 408);
function $add_6(this$static, w){
  $add_4(this$static, w, ($clinit_DOM() , this$static.element));
}

function $remove_5(this$static, w){
  var removed;
  removed = $remove_0(this$static, w);
  removed && changeToStaticPositioning(w.getElement());
  return removed;
}

function changeToStaticPositioning(elem){
  elem.style['left'] = '';
  elem.style['top'] = '';
  elem.style['position'] = '';
}

defineClass(504, 202, $intern_86);
_.remove_1 = function remove_9(w){
  return $remove_5(this, w);
}
;
var Lcom_google_gwt_user_client_ui_AbsolutePanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AbsolutePanel', 504);
function $clinit_AttachDetachException(){
  $clinit_AttachDetachException = emptyMethod;
  attachCommand = new AttachDetachException$1;
  detachCommand = new AttachDetachException$2;
}

function AttachDetachException(causes){
  UmbrellaException_0.call(this, causes);
}

function tryCommand(hasWidgets, c){
  $clinit_AttachDetachException();
  var caught, e, w, w$iterator;
  caught = null;
  for (w$iterator = hasWidgets.iterator(); w$iterator.hasNext_0();) {
    w = castTo(w$iterator.next_1(), 24);
    try {
      c.execute_2(w);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 17)) {
        e = $e0;
        !caught && (caught = new HashSet);
        $put(caught.map_0, e, caught);
      }
       else 
        throw toJs($e0);
    }
  }
  if (caught) {
    throw toJs(new AttachDetachException(caught));
  }
}

defineClass(500, 136, $intern_96, AttachDetachException);
var attachCommand, detachCommand;
var Lcom_google_gwt_user_client_ui_AttachDetachException_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException', 500);
function AttachDetachException$1(){
}

defineClass(501, 1, {}, AttachDetachException$1);
_.execute_2 = function execute_30(w){
  w.onAttach();
}
;
var Lcom_google_gwt_user_client_ui_AttachDetachException$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException/1', 501);
function AttachDetachException$2(){
}

defineClass(502, 1, {}, AttachDetachException$2);
_.execute_2 = function execute_31(w){
  w.onDetach();
}
;
var Lcom_google_gwt_user_client_ui_AttachDetachException$2_2_classLit = createForClass('com.google.gwt.user.client.ui', 'AttachDetachException/2', 502);
function LayoutCommand(layout){
  this.layout = layout;
}

defineClass(322, 1, {}, LayoutCommand);
_.doBeforeLayout = function doBeforeLayout(){
}
;
_.execute = function execute_32(){
  this.scheduled = false;
  if (this.canceled) {
    return;
  }
  this.doBeforeLayout();
  $layout(this.layout, this.duration, new LayoutCommand$1);
}
;
_.canceled = false;
_.duration = 0;
_.scheduled = false;
var Lcom_google_gwt_user_client_ui_LayoutCommand_2_classLit = createForClass('com.google.gwt.user.client.ui', 'LayoutCommand', 322);
function LayoutCommand$1(){
}

defineClass(533, 1, {}, LayoutCommand$1);
var Lcom_google_gwt_user_client_ui_LayoutCommand$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'LayoutCommand/1', 533);
function $onResize_0(this$static){
  var child, child$iterator;
  for (child$iterator = new WidgetCollection$WidgetIterator(this$static.children); child$iterator.index_0 < child$iterator.this$01.size_0;) {
    child = $next_0(child$iterator);
    instanceOf(child, 63) && castTo(child, 63).onResize();
  }
}

defineClass(497, 202, $intern_103);
_.onAttach = function onAttach_4(){
  $onAttach(this);
}
;
_.onDetach = function onDetach_3(){
  $onDetach(this);
  $removeLayerRefs(this.layout.parentElem);
}
;
_.onResize = function onResize_6(){
  $onResize_0(this);
}
;
_.remove_1 = function remove_12(w){
  var removed;
  removed = $remove_0(this, w);
  removed && $removeChild_0(this.layout, castTo(w.layoutData, 182));
  return removed;
}
;
var Lcom_google_gwt_user_client_ui_LayoutPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'LayoutPanel', 497);
function RootLayoutPanel(){
  ComplexPanel.call(this);
  $setElement(this, $doc.createElement('div'));
  this.layout = new Layout(($clinit_DOM() , this.element));
  this.layoutCmd = new LayoutCommand(this.layout);
  addResizeHandler(new RootLayoutPanel$1(this));
}

function get_5(){
  if (!singleton_0) {
    singleton_0 = new RootLayoutPanel;
    $add_6(($clinit_RootPanel() , get_6(null)), singleton_0);
  }
  return singleton_0;
}

defineClass(498, 497, $intern_103, RootLayoutPanel);
_.onLoad = function onLoad_3(){
  $fillParent(this.layout.parentElem);
}
;
var singleton_0;
var Lcom_google_gwt_user_client_ui_RootLayoutPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootLayoutPanel', 498);
function RootLayoutPanel$1(this$0){
  this.this$01 = this$0;
}

defineClass(499, 1, $intern_104, RootLayoutPanel$1);
_.onResize_0 = function onResize_8(event_0){
  $onResize_0(this.this$01);
}
;
var Lcom_google_gwt_user_client_ui_RootLayoutPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootLayoutPanel/1', 499);
function $clinit_RootPanel(){
  $clinit_RootPanel = emptyMethod;
  maybeDetachCommand = new RootPanel$1;
  rootPanels = new HashMap;
  widgetsToDetach = new HashSet;
}

function RootPanel(elem){
  ComplexPanel.call(this);
  $setElement_0(this, ($clinit_DOM() , elem));
  $onAttach(this);
}

function detachNow(widget){
  $clinit_RootPanel();
  try {
    widget.onDetach();
  }
   finally {
    $remove_16(widgetsToDetach, widget);
  }
}

function detachWidgets(){
  $clinit_RootPanel();
  try {
    tryCommand(widgetsToDetach, maybeDetachCommand);
  }
   finally {
    $reset_0(widgetsToDetach.map_0);
    $reset_0(rootPanels);
  }
}

function get_6(id_0){
  $clinit_RootPanel();
  var elem, rp;
  rp = castTo($getStringValue(rootPanels, id_0), 203);
  elem = null;
  if (id_0 != null) {
    if (!(elem = $getElementById($doc, id_0))) {
      return null;
    }
  }
  if (rp) {
    if (!elem || ($clinit_DOM() , rp.element == elem)) {
      return rp;
    }
  }
  if ($size(rootPanels) == 0) {
    addCloseHandler(new RootPanel$2);
    $clinit_LocaleInfo();
  }
  !elem?(rp = new RootPanel$DefaultRootPanel):(rp = new RootPanel(elem));
  $putStringValue(rootPanels, id_0, rp);
  $add_14(widgetsToDetach, rp);
  return rp;
}

defineClass(203, 504, $intern_105, RootPanel);
var maybeDetachCommand, rootPanels, widgetsToDetach;
var Lcom_google_gwt_user_client_ui_RootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel', 203);
function RootPanel$1(){
}

defineClass(506, 1, {}, RootPanel$1);
_.execute_2 = function execute_35(w){
  w.isAttached() && w.onDetach();
}
;
var Lcom_google_gwt_user_client_ui_RootPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/1', 506);
function RootPanel$2(){
}

defineClass(507, 1, $intern_106, RootPanel$2);
_.onClose = function onClose_0(closeEvent){
  detachWidgets();
}
;
var Lcom_google_gwt_user_client_ui_RootPanel$2_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/2', 507);
function RootPanel$DefaultRootPanel(){
  RootPanel.call(this, ($clinit_RootPanel() , $doc.body));
}

defineClass(505, 203, $intern_105, RootPanel$DefaultRootPanel);
var Lcom_google_gwt_user_client_ui_RootPanel$DefaultRootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui', 'RootPanel/DefaultRootPanel', 505);
function $add_10(this$static, w){
  $insert_2(this$static, w, this$static.size_0);
}

function $indexOf(this$static, w){
  var i;
  for (i = 0; i < this$static.size_0; ++i) {
    if (this$static.array[i] == w) {
      return i;
    }
  }
  return -1;
}

function $insert_2(this$static, w, beforeIndex){
  var i, i0, newArray;
  if (beforeIndex < 0 || beforeIndex > this$static.size_0) {
    throw toJs(new IndexOutOfBoundsException);
  }
  if (this$static.size_0 == this$static.array.length) {
    newArray = initUnidimensionalArray(Lcom_google_gwt_user_client_ui_Widget_2_classLit, $intern_6, 24, this$static.array.length * 2, 0, 1);
    for (i0 = 0; i0 < this$static.array.length; ++i0) {
      newArray[i0] = this$static.array[i0];
    }
    this$static.array = newArray;
  }
  ++this$static.size_0;
  for (i = this$static.size_0 - 1; i > beforeIndex; --i) {
    this$static.array[i] = this$static.array[i - 1];
  }
  this$static.array[beforeIndex] = w;
}

function $remove_7(this$static, index_0){
  var i;
  if (index_0 < 0 || index_0 >= this$static.size_0) {
    throw toJs(new IndexOutOfBoundsException);
  }
  --this$static.size_0;
  for (i = index_0; i < this$static.size_0; ++i) {
    this$static.array[i] = this$static.array[i + 1];
  }
  this$static.array[this$static.size_0] = null;
}

function $remove_8(this$static, w){
  var index_0;
  index_0 = $indexOf(this$static, w);
  if (index_0 == -1) {
    throw toJs(new NoSuchElementException);
  }
  $remove_7(this$static, index_0);
}

function WidgetCollection(parent_0){
  this.parent_0 = parent_0;
  this.array = initUnidimensionalArray(Lcom_google_gwt_user_client_ui_Widget_2_classLit, $intern_6, 24, 4, 0, 1);
}

defineClass(559, 1, $intern_107, WidgetCollection);
_.iterator = function iterator_4(){
  return new WidgetCollection$WidgetIterator(this);
}
;
_.size_0 = 0;
var Lcom_google_gwt_user_client_ui_WidgetCollection_2_classLit = createForClass('com.google.gwt.user.client.ui', 'WidgetCollection', 559);
function $next_0(this$static){
  if (this$static.index_0 >= this$static.this$01.size_0) {
    throw toJs(new NoSuchElementException);
  }
  this$static.currentWidget = this$static.this$01.array[this$static.index_0];
  ++this$static.index_0;
  return this$static.currentWidget;
}

function WidgetCollection$WidgetIterator(this$0){
  this.this$01 = this$0;
}

defineClass(209, 1, {}, WidgetCollection$WidgetIterator);
_.next_1 = function next_1(){
  return $next_0(this);
}
;
_.hasNext_0 = function hasNext_0(){
  return this.index_0 < this.this$01.size_0;
}
;
_.remove_3 = function remove_15(){
  if (!this.currentWidget) {
    throw toJs(new IllegalStateException);
  }
  this.this$01.parent_0.remove_1(this.currentWidget);
  --this.index_0;
  this.currentWidget = null;
}
;
_.index_0 = 0;
var Lcom_google_gwt_user_client_ui_WidgetCollection$WidgetIterator_2_classLit = createForClass('com.google.gwt.user.client.ui', 'WidgetCollection/WidgetIterator', 209);
function assertCompileTimeUserAgent(){
  var runtimeValue;
  runtimeValue = $getRuntimeValue();
  if (!$equals_6('ie9', runtimeValue)) {
    throw toJs(new UserAgentAsserter$UserAgentAssertionError(runtimeValue));
  }
}

function Error_0(message, cause){
  Throwable.call(this, message, cause);
}

defineClass(253, 17, $intern_10);
var Ljava_lang_Error_2_classLit = createForClass('java.lang', 'Error', 253);
defineClass(91, 253, $intern_10);
var Ljava_lang_AssertionError_2_classLit = createForClass('java.lang', 'AssertionError', 91);
function UserAgentAsserter$UserAgentAssertionError(runtimeValue){
  Error_0.call(this, 'Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (ie9) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.' == null?'null':toString_36('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (ie9) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.'), instanceOf('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (ie9) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 17)?castTo('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (ie9) does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 17):null);
}

defineClass(393, 91, $intern_10, UserAgentAsserter$UserAgentAssertionError);
var Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAssertionError_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAssertionError', 393);
function $getRuntimeValue(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}

var Lcom_google_gwt_xml_client_Node_2_classLit = createForInterface('com.google.gwt.xml.client', 'Node');
function DOMException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(186, 11, $intern_108);
var Lcom_google_gwt_xml_client_DOMException_2_classLit = createForClass('com.google.gwt.xml.client', 'DOMException', 186);
function $clinit_XMLParser(){
  $clinit_XMLParser = emptyMethod;
  impl_3 = ($clinit_XMLParserImpl() , $clinit_XMLParserImpl() , impl_4);
}

var impl_3;
function DOMItem(jso){
  this.jsObject = jso;
}

defineClass(87, 1, {87:1});
_.equals_0 = function equals_23(o){
  if (instanceOf(o, 87)) {
    return this.jsObject == castTo(o, 87).jsObject;
  }
  return false;
}
;
_.getJsObject = function getJsObject(){
  return this.jsObject;
}
;
_.hashCode_0 = function hashCode_20(){
  return $hashCode_2(this.jsObject);
}
;
var Lcom_google_gwt_xml_client_impl_DOMItem_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'DOMItem', 87);
function $appendChild_0(this$static, newChild){
  var appendChildResults, e, newChildJs;
  try {
    newChildJs = castTo(newChild, 87).jsObject;
    appendChildResults = appendChild(this$static.jsObject, newChildJs);
    return build(appendChildResults);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 101)) {
      e = $e0;
      throw toJs(new DOMNodeException(e, this$static));
    }
     else 
      throw toJs($e0);
  }
}

function NodeImpl(jso){
  DOMItem.call(this, jso);
}

function build(node){
  var nodeType, out;
  if (!node) {
    return null;
  }
  nodeType = ($clinit_XMLParserImpl() , out = node.nodeType , out == null?-1:out);
  switch (nodeType) {
    case 2:
      return new AttrImpl(node);
    case 4:
      return new CDATASectionImpl(node);
    case 8:
      return new CommentImpl(node);
    case 11:
      return new DocumentFragmentImpl(node);
    case 9:
      return new DocumentImpl(node);
    case 1:
      return new ElementImpl(node);
    case 7:
      return new ProcessingInstructionImpl(node);
    case 3:
      return new TextImpl(node);
    default:return new NodeImpl(node);
  }
}

defineClass(161, 87, $intern_109, NodeImpl);
_.toString_0 = function toString_40(){
  return $clinit_XMLParserImpl() , $toStringImpl(this);
}
;
var Lcom_google_gwt_xml_client_impl_NodeImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'NodeImpl', 161);
function AttrImpl(o){
  NodeImpl.call(this, o);
}

defineClass(777, 161, $intern_109, AttrImpl);
var Lcom_google_gwt_xml_client_impl_AttrImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'AttrImpl', 777);
function CharacterDataImpl(o){
  NodeImpl.call(this, o);
}

defineClass(350, 161, $intern_109);
var Lcom_google_gwt_xml_client_impl_CharacterDataImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'CharacterDataImpl', 350);
function TextImpl(o){
  CharacterDataImpl.call(this, o);
}

defineClass(351, 350, $intern_110, TextImpl);
_.toString_0 = function toString_41(){
  var b, i, x_0;
  b = new StringBuilder;
  x_0 = $split(getData(this.jsObject), '(?=[;&<>\'"])', -1);
  for (i = 0; i < x_0.length; i++) {
    if ($startsWith(x_0[i], ';')) {
      b.string += '&semi;';
      $append_5(b, x_0[i].substr(1));
    }
     else if ($startsWith(x_0[i], '&')) {
      b.string += '&amp;';
      $append_5(b, x_0[i].substr(1));
    }
     else if ($startsWith(x_0[i], '"')) {
      b.string += '&quot;';
      $append_5(b, x_0[i].substr(1));
    }
     else if ($startsWith(x_0[i], "'")) {
      b.string += '&apos;';
      $append_5(b, x_0[i].substr(1));
    }
     else if ($startsWith(x_0[i], '<')) {
      b.string += '&lt;';
      $append_5(b, x_0[i].substr(1));
    }
     else if ($startsWith(x_0[i], '>')) {
      b.string += '&gt;';
      $append_5(b, x_0[i].substr(1));
    }
     else {
      b.string += '' + x_0[i];
    }
  }
  return b.string;
}
;
var Lcom_google_gwt_xml_client_impl_TextImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'TextImpl', 351);
function CDATASectionImpl(o){
  TextImpl.call(this, o);
}

defineClass(778, 351, $intern_110, CDATASectionImpl);
_.toString_0 = function toString_42(){
  var b;
  b = new StringBuilder_1('<![CDATA[');
  $append_5(b, getData(this.jsObject));
  b.string += ']]>';
  return b.string;
}
;
var Lcom_google_gwt_xml_client_impl_CDATASectionImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'CDATASectionImpl', 778);
function CommentImpl(o){
  CharacterDataImpl.call(this, o);
}

defineClass(779, 350, $intern_109, CommentImpl);
_.toString_0 = function toString_43(){
  var b;
  b = new StringBuilder_1('<!--');
  $append_5(b, getData(this.jsObject));
  b.string += '-->';
  return b.string;
}
;
var Lcom_google_gwt_xml_client_impl_CommentImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'CommentImpl', 779);
function DOMNodeException(e, item_0){
  DOMException_0.call(this, 'Error during DOM manipulation of: ' + summarize(item_0.toString_0()));
  $initCause(this, e);
}

defineClass(237, 186, $intern_108, DOMNodeException);
var Lcom_google_gwt_xml_client_impl_DOMNodeException_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'DOMNodeException', 237);
function DOMParseException(contents, e){
  DOMException_0.call(this, 'Failed to parse: ' + $substring_0(contents, 0, $wnd.Math.min(contents.length, 128)));
  $initCause(this, e);
}

function summarize(text_0){
  return $substring_0(text_0, 0, $wnd.Math.min(text_0.length, 128));
}

defineClass(724, 186, $intern_108, DOMParseException);
var Lcom_google_gwt_xml_client_impl_DOMParseException_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'DOMParseException', 724);
function DocumentFragmentImpl(o){
  NodeImpl.call(this, o);
}

defineClass(780, 161, $intern_109, DocumentFragmentImpl);
var Lcom_google_gwt_xml_client_impl_DocumentFragmentImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'DocumentFragmentImpl', 780);
function $createElement(this$static, tagName){
  var e;
  try {
    return castTo(build(createElement(this$static.jsObject, tagName)), 388);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 101)) {
      e = $e0;
      throw toJs(new DOMNodeException(e, this$static));
    }
     else 
      throw toJs($e0);
  }
}

function $createTextNode(this$static, data_0){
  var e;
  try {
    return castTo(build(createTextNode(this$static.jsObject, data_0)), 1009);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 101)) {
      e = $e0;
      throw toJs(new DOMNodeException(e, this$static));
    }
     else 
      throw toJs($e0);
  }
}

function DocumentImpl(o){
  NodeImpl.call(this, o);
}

defineClass(781, 161, {1008:1, 76:1, 87:1}, DocumentImpl);
var Lcom_google_gwt_xml_client_impl_DocumentImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'DocumentImpl', 781);
function $setAttribute_0(this$static, name_0, value_0){
  var e;
  try {
    setAttribute(this$static.jsObject, name_0, value_0);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 101)) {
      e = $e0;
      throw toJs(new DOMNodeException(e, this$static));
    }
     else 
      throw toJs($e0);
  }
}

function ElementImpl(o){
  NodeImpl.call(this, o);
}

defineClass(782, 161, {388:1, 76:1, 87:1}, ElementImpl);
var Lcom_google_gwt_xml_client_impl_ElementImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'ElementImpl', 782);
function NodeListImpl(o){
  DOMItem.call(this, o);
}

defineClass(59, 87, {87:1}, NodeListImpl);
_.toString_0 = function toString_44(){
  var b, i;
  b = new StringBuilder;
  for (i = 0; i < getLength(this.jsObject); i++) {
    $append_5(b, build(item_1(this.jsObject, i)).toString_0());
  }
  return b.string;
}
;
var Lcom_google_gwt_xml_client_impl_NodeListImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'NodeListImpl', 59);
function ProcessingInstructionImpl(o){
  NodeImpl.call(this, o);
}

defineClass(783, 161, $intern_109, ProcessingInstructionImpl);
_.toString_0 = function toString_45(){
  return $clinit_XMLParserImpl() , $toStringImpl(this);
}
;
var Lcom_google_gwt_xml_client_impl_ProcessingInstructionImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'ProcessingInstructionImpl', 783);
function $clinit_XMLParserImpl(){
  $clinit_XMLParserImpl = emptyMethod;
  impl_4 = new XMLParserImplIE6;
}

function $parse_2(this$static, contents){
  var e;
  try {
    return castTo(build($parseImpl(this$static, contents)), 1008);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 101)) {
      e = $e0;
      throw toJs(new DOMParseException(contents, e));
    }
     else 
      throw toJs($e0);
  }
}

function appendChild(jsObject, newChildJs){
  $clinit_XMLParserImpl();
  return jsObject.appendChild(newChildJs);
}

function createElement(jsObject, tagName){
  $clinit_XMLParserImpl();
  return jsObject.createElement(tagName);
}

function createTextNode(jsObject, data_0){
  $clinit_XMLParserImpl();
  return jsObject.createTextNode(data_0);
}

function getChildNodes(t){
  $clinit_XMLParserImpl();
  return t.childNodes;
}

function getData(o){
  $clinit_XMLParserImpl();
  return o.data;
}

function getLength(o){
  $clinit_XMLParserImpl();
  return o.length;
}

function getNodeValue(o){
  $clinit_XMLParserImpl();
  return o.nodeValue;
}

function item_1(t, index_0){
  $clinit_XMLParserImpl();
  if (index_0 >= t.length) {
    return null;
  }
  return t.item(index_0);
}

function setAttribute(jsObject, name_0, value_0){
  $clinit_XMLParserImpl();
  jsObject.setAttribute(name_0, value_0);
}

defineClass(1062, 1, {});
var impl_4;
var Lcom_google_gwt_xml_client_impl_XMLParserImpl_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'XMLParserImpl', 1062);
function $createDocumentImpl(){
  var doc = selectDOMDocumentVersion();
  doc.preserveWhiteSpace = true;
  doc.setProperty('SelectionNamespaces', "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");
  doc.setProperty('SelectionLanguage', 'XPath');
  return doc;
}

function $parseImpl(this$static, contents){
  var doc = this$static.createDocumentImpl();
  if (!doc.loadXML(contents)) {
    var err = doc.parseError;
    throw new Error('line ' + err.line + ', char ' + err.linepos + ':' + err.reason);
  }
   else {
    return doc;
  }
}

function $toStringImpl(node){
  var jsNode = node.getJsObject();
  return jsNode.xml;
}

function XMLParserImplIE6(){
}

function selectDOMDocumentVersion(){
  try {
    return new ActiveXObject('Msxml2.DOMDocument');
  }
   catch (e) {
  }
  try {
    return new ActiveXObject('MSXML.DOMDocument');
  }
   catch (e) {
  }
  try {
    return new ActiveXObject('MSXML3.DOMDocument');
  }
   catch (e) {
  }
  try {
    return new ActiveXObject('Microsoft.XmlDom');
  }
   catch (e) {
  }
  try {
    return new ActiveXObject('Microsoft.DOMDocument');
  }
   catch (e) {
  }
  throw new Error('XMLParserImplIE6.createDocumentImpl: Could not find appropriate version of DOMDocument.');
}

defineClass(723, 1062, {}, XMLParserImplIE6);
_.createDocumentImpl = function createDocumentImpl(){
  return $createDocumentImpl();
}
;
var Lcom_google_gwt_xml_client_impl_XMLParserImplIE6_2_classLit = createForClass('com.google.gwt.xml.client.impl', 'XMLParserImplIE6', 723);
function SimpleEventBus$1(this$0, val$type, val$source, val$handler){
  this.this$01 = this$0;
  this.val$type2 = val$type;
  this.val$source3 = val$source;
  this.val$handler4 = val$handler;
}

defineClass(413, 1, {}, SimpleEventBus$1);
var Lcom_google_web_bindery_event_shared_SimpleEventBus$1_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus/1', 413);
function SimpleEventBus$2(this$0, val$type, val$source, val$handler){
  this.this$01 = this$0;
  this.val$type2 = val$type;
  this.val$source3 = val$source;
  this.val$handler4 = val$handler;
}

defineClass(412, 1, {414:1}, SimpleEventBus$2);
_.execute = function execute_38(){
  $doAddNow(this.this$01, this.val$type2, this.val$source3, this.val$handler4);
}
;
var Lcom_google_web_bindery_event_shared_SimpleEventBus$2_2_classLit = createForClass('com.google.web.bindery.event.shared', 'SimpleEventBus/2', 412);
function $clinit_VsCodeClipboard(){
  $clinit_VsCodeClipboard = emptyMethod;
  var logger;
  $clinit_ClipboardStorage();
  logger = new VsCodeLogger;
  $initListener_0(logger);
  logger.levelValue = $getLevel_0(getLogger_0('')).intValue();
}

function $init_3(this$static){
  this$static.clipboard = new HashMap;
  $initListener(this$static);
  return true;
}

function $initListener(this$static){
  var that = this$static;
  $wnd.addEventListener('message', function(event_0){
    var message = event_0.data;
    switch (message.command) {
      case 'copy':
        that.setExternal();
        break;
      case 'paste':
        that.pasteExternal(message.text);
        break;
      case 'cut':
        that.cutExternal();
        break;
    }
  }
  );
}

function $set_2(value_0){
  $wnd.vscode.postMessage({command:'setClipboard', text:value_0});
}

function VsCodeClipboard(){
  $clinit_VsCodeClipboard();
  this.commandInvoker = ($clinit_CommandInvoker() , $clinit_CommandInvoker() , instance_1);
}

defineClass(402, 503, {}, VsCodeClipboard);
_.cutExternal = function cutExternal(){
  instanceOf(($clinit_EventHandlingUtils() , $clinit_EventHandlingUtils() , storageInstance).getActivePanel(), 104) && $cutSelectedElements(this.commandInvoker, castTo((null , storageInstance).getActivePanel(), 104));
}
;
_.pasteExternal = function pasteExternal(data_0){
  if (instanceOf(($clinit_EventHandlingUtils() , $clinit_EventHandlingUtils() , storageInstance).getActivePanel(), 104)) {
    $executePaste(this.commandInvoker, castTo((null , storageInstance).getActivePanel(), 104), data_0, this.pasteTargetPosition);
    this.pasteTargetPosition = null;
  }
}
;
_.setExternal = function setExternal(){
  instanceOf(($clinit_EventHandlingUtils() , $clinit_EventHandlingUtils() , storageInstance).getActivePanel(), 104) && $copySelectedElements(castTo((null , storageInstance).getActivePanel(), 104));
}
;
var Lcom_vscode_gwt_client_clipboard_VsCodeClipboard_2_classLit = createForClass('com.vscode.gwt.client.clipboard', 'VsCodeClipboard', 402);
function $debug(this$static, message){
  var date;
  (this$static.levelValue == ($clinit_Level() , $intern_12) || this$static.levelValue <= 500) && $postLog((date = new Date_0 , 'UMLet|' + $format(($clinit_DateTimeFormat_0() , getFormat($getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_4)))), date, null) + '|' + 'debug|' + message));
}

function $error(this$static, message){
  var date;
  (this$static.levelValue == ($clinit_Level() , $intern_12) || this$static.levelValue <= $intern_19) && $postLog((date = new Date_0 , 'UMLet|' + $format(($clinit_DateTimeFormat_0() , getFormat($getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_4)))), date, null) + '|' + 'error|' + message));
}

function $error_0(this$static, message){
  var date;
  (this$static.levelValue == ($clinit_Level() , $intern_12) || this$static.levelValue <= $intern_19) && $postLog((date = new Date_0 , 'UMLet|' + $format(($clinit_DateTimeFormat_0() , getFormat($getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_4)))), date, null) + '|' + 'error|' + message));
}

function $info(this$static, message){
  var date;
  (this$static.levelValue == ($clinit_Level() , $intern_12) || this$static.levelValue <= 800) && $postLog((date = new Date_0 , 'UMLet|' + $format(($clinit_DateTimeFormat_0() , getFormat($getDateTimeFormatInfo(($clinit_LocaleInfo() , $clinit_LocaleInfo() , instance_4)))), date, null) + '|' + 'info|' + message));
}

function $initListener_0(this$static){
  var that = this$static;
  $wnd.addEventListener('message', function(event_0){
    var message = event_0.data;
    switch (message.command) {
      case 'debugLevel':
        that.setDebugLevel(message.text);
        break;
    }
  }
  );
}

function $postLog(message){
  $wnd.vscode.postMessage({command:'postLog', text:message});
}

function VsCodeLogger(){
}

defineClass(201, 1, {}, VsCodeLogger);
_.setDebugLevel = function setDebugLevel(debugLevel){
  debugLevel == 0?(this.levelValue = ($clinit_Level() , 800)):(this.levelValue = ($clinit_Level() , 300));
}
;
_.levelValue = 0;
var Lcom_vscode_gwt_client_logging_VsCodeLogger_2_classLit = createForClass('com.vscode.gwt.client.logging', 'VsCodeLogger', 201);
function ThemeFactoryVsCode(){
  $clinit_ThemeFactory();
  var backgroundColor, theme;
  if (!initialized) {
    $wnd.changeTheme = $entry(changeTheme_0);
    theme = $wnd.theme;
    backgroundColor = $wnd.backgroundColor;
    theme != null && changeTheme(($clinit_ThemeFactory$THEMES() , castTo(valueOf(($clinit_ThemeFactory$THEMES$Map() , $MAP_3), theme), 154)), backgroundColor, true);
    initialized = true;
  }
}

function changeTheme_0(themeString, backgroundColor){
  changeTheme(($clinit_ThemeFactory$THEMES() , castTo(valueOf(($clinit_ThemeFactory$THEMES$Map() , $MAP_3), themeString), 154)), backgroundColor, true);
}

defineClass(400, 1030, {}, ThemeFactoryVsCode);
var initialized = false;
var Lcom_vscode_gwt_client_view_theme_ThemeFactoryVsCode_2_classLit = createForClass('com.vscode.gwt.client.view.theme', 'ThemeFactoryVsCode', 400);
function IOException(){
  Exception_0.call(this);
}

function IOException_0(message){
  Exception_1.call(this, message);
}

defineClass(13, 14, {13:1, 3:1, 14:1, 17:1}, IOException, IOException_0);
var Ljava_io_IOException_2_classLit = createForClass('java.io', 'IOException', 13);
function $setLength(this$static, newLength){
  var oldLength;
  oldLength = this$static.string.length;
  newLength < oldLength?(this$static.string = $substring_0(this$static.string, 0, newLength)):newLength > oldLength && (this$static.string += valueOf_11(initUnidimensionalArray(C_classLit, $intern_23, 32, newLength - oldLength, 15, 1)));
}

function AbstractStringBuilder(string){
  this.string = string;
}

defineClass(225, 1, {305:1});
_.toString_0 = function toString_46(){
  return this.string;
}
;
var Ljava_lang_AbstractStringBuilder_2_classLit = createForClass('java.lang', 'AbstractStringBuilder', 225);
function ArithmeticException(){
  RuntimeException_0.call(this, 'divide by zero');
}

defineClass(435, 11, $intern_11, ArithmeticException);
var Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang', 'ArithmeticException', 435);
function IndexOutOfBoundsException(){
  RuntimeException.call(this);
}

function IndexOutOfBoundsException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(66, 11, $intern_111, IndexOutOfBoundsException, IndexOutOfBoundsException_0);
var Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'IndexOutOfBoundsException', 66);
function ArrayIndexOutOfBoundsException(){
  IndexOutOfBoundsException.call(this);
}

function ArrayIndexOutOfBoundsException_0(msg){
  IndexOutOfBoundsException_0.call(this, msg);
}

defineClass(349, 66, $intern_111, ArrayIndexOutOfBoundsException, ArrayIndexOutOfBoundsException_0);
var Ljava_lang_ArrayIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'ArrayIndexOutOfBoundsException', 349);
function ArrayStoreException(){
  RuntimeException.call(this);
}

function ArrayStoreException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(317, 11, $intern_11, ArrayStoreException, ArrayStoreException_0);
var Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang', 'ArrayStoreException', 317);
function $clinit_Boolean(){
  $clinit_Boolean = emptyMethod;
  FALSE = false;
}

function $booleanValue(this$static){
  return checkCriticalNotNull(this$static) , this$static;
}

function $compareTo_0(this$static, b){
  return compare_6((checkCriticalNotNull(this$static) , this$static), (checkCriticalNotNull(b) , b));
}

function compare_6(x_0, y_0){
  $clinit_Boolean();
  return x_0 == y_0?0:x_0?1:-1;
}

function compareTo_Ljava_lang_Object__I__devirtual$(this$static, other){
  $clinit_Boolean();
  return instanceOfString(this$static)?$compareTo_4(this$static, castToString(other)):instanceOfDouble(this$static)?$compareTo_1(this$static, castToDouble(other)):instanceOfBoolean(this$static)?$compareTo_0(this$static, castToBoolean(other)):this$static.compareTo(other);
}

booleanCastMap = {3:1, 311:1, 9:1};
var FALSE;
var Ljava_lang_Boolean_2_classLit = createForClass('java.lang', 'Boolean', 311);
function digit(c, radix){
  if (radix < 2 || radix > 36) {
    return -1;
  }
  if (c >= 48 && c < 48 + $wnd.Math.min(radix, 10)) {
    return c - 48;
  }
  if (c >= 97 && c < radix + 97 - 10) {
    return c - 97 + 10;
  }
  if (c >= 65 && c < radix + 65 - 10) {
    return c - 65 + 10;
  }
  return -1;
}

function ClassCastException(){
  RuntimeException_0.call(this, null);
}

defineClass(423, 11, $intern_11, ClassCastException);
var Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang', 'ClassCastException', 423);
function __decodeNumberString(s){
  var negative, radix;
  if ($equals_6(s.substr(0, 1), '-')) {
    negative = true;
    s = s.substr(1);
  }
   else {
    negative = false;
    $equals_6(s.substr(0, 1), '+') && (s = s.substr(1));
  }
  if ($equals_6(s.substr(0, 2), '0x') || $equals_6(s.substr(0, 2), '0X')) {
    s = s.substr(2);
    radix = 16;
  }
   else if ($equals_6(s.substr(0, 1), '#')) {
    s = s.substr(1);
    radix = 16;
  }
   else 
    $equals_6(s.substr(0, 1), '0')?(radix = 8):(radix = 10);
  negative && (s = '-' + s);
  return new Number$__Decode(radix, s);
}

function __parseAndValidateDouble(s){
  floatRegex == null && (floatRegex = new RegExp('^\\s*[+-]?(NaN|Infinity|((\\d+\\.?\\d*)|(\\.\\d+))([eE][+-]?\\d+)?[dDfF]?)\\s*$'));
  if (!floatRegex.test(s)) {
    throw toJs(new NumberFormatException_0('For input string: "' + s + '"'));
  }
  return parseFloat(s);
}

function __parseAndValidateInt(s, radix){
  var i, isTooLow, length_0, startIndex, toReturn;
  if (s == null) {
    throw toJs(new NumberFormatException_0('null'));
  }
  if (radix < 2 || radix > 36) {
    throw toJs(new NumberFormatException_0('radix ' + radix + ' out of range'));
  }
  length_0 = s.length;
  startIndex = length_0 > 0 && (checkCriticalStringElementIndex(0, s.length) , s.charCodeAt(0) == 45 || (checkCriticalStringElementIndex(0, s.length) , s.charCodeAt(0) == 43))?1:0;
  for (i = startIndex; i < length_0; i++) {
    if (digit((checkCriticalStringElementIndex(i, s.length) , s.charCodeAt(i)), radix) == -1) {
      throw toJs(new NumberFormatException_0('For input string: "' + s + '"'));
    }
  }
  toReturn = parseInt(s, radix);
  isTooLow = toReturn < $intern_12;
  if (isNaN(toReturn)) {
    throw toJs(new NumberFormatException_0('For input string: "' + s + '"'));
  }
   else if (isTooLow || toReturn > $intern_0) {
    throw toJs(new NumberFormatException_0('For input string: "' + s + '"'));
  }
  return toReturn;
}

defineClass(224, 1, {3:1, 224:1});
var floatRegex;
var Ljava_lang_Number_2_classLit = createForClass('java.lang', 'Number', 224);
function $compareTo_1(this$static, b){
  return compare_7((checkCriticalNotNull(this$static) , this$static), (checkCriticalNotNull(b) , b));
}

function $doubleValue_0(this$static){
  return checkCriticalNotNull(this$static) , this$static;
}

function $equals_4(this$static, o){
  return checkCriticalNotNull(this$static) , this$static === o;
}

function $hashCode_3(this$static){
  return round_int((checkCriticalNotNull(this$static) , this$static));
}

function $intValue(this$static){
  return round_int((checkCriticalNotNull(this$static) , this$static));
}

function compare_7(x_0, y_0){
  if (x_0 < y_0) {
    return -1;
  }
  if (x_0 > y_0) {
    return 1;
  }
  if (x_0 == y_0) {
    return 0;
  }
  return isNaN(x_0)?isNaN(y_0)?0:1:-1;
}

function doubleToLongBits(value_0){
  var bit, exp_0, i, ihi, ilo, negative;
  if (isNaN(value_0)) {
    return {l:0, m:0, h:524160};
  }
  negative = false;
  if (value_0 == 0) {
    return 1 / value_0 == -Infinity?{l:0, m:0, h:$intern_56}:0;
  }
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  if (!isNaN(value_0) && !isFinite(value_0)) {
    return negative?{l:0, m:0, h:1048320}:{l:0, m:0, h:524032};
  }
  exp_0 = 0;
  if (value_0 < 1) {
    bit = 512;
    for (i = 0; i < 10; ++i , bit >>= 1) {
      if (value_0 < ($clinit_Double$PowersTable() , invPowers)[i] && exp_0 - bit >= -1023) {
        value_0 *= powers[i];
        exp_0 -= bit;
      }
    }
    if (value_0 < 1 && exp_0 - 1 >= -1023) {
      value_0 *= 2;
      --exp_0;
    }
  }
   else if (value_0 >= 2) {
    bit = 512;
    for (i = 0; i < 10; ++i , bit >>= 1) {
      if (value_0 >= ($clinit_Double$PowersTable() , powers)[i]) {
        value_0 *= invPowers[i];
        exp_0 += bit;
      }
    }
  }
  exp_0 > -1023?(value_0 -= 1):(value_0 *= 0.5);
  ihi = fromDouble_0(value_0 * $intern_101);
  value_0 -= toDouble_0(ihi) * 9.5367431640625E-7;
  ilo = fromDouble_0(value_0 * 4503599627370496);
  ihi = or_0(ihi, exp_0 + 1023 << 20);
  negative && (ihi = or_0(ihi, $intern_42));
  return or_0(shl_0(ihi, 32), ilo);
}

doubleCastMap = {3:1, 9:1, 256:1, 224:1};
var Ljava_lang_Double_2_classLit = createForClass('java.lang', 'Double', 256);
function $clinit_Double$PowersTable(){
  $clinit_Double$PowersTable = emptyMethod;
  powers = stampJavaTypeInfo(getClassLiteralForArray(D_classLit, 1), $intern_50, 32, 15, [1.3407807929942597E154, 1.157920892373162E77, 3.4028236692093846E38, 1.8446744073709552E19, 4294967296, $intern_32, 256, 16, 4, 2]);
  invPowers = stampJavaTypeInfo(getClassLiteralForArray(D_classLit, 1), $intern_50, 32, 15, [7.458340731200207E-155, 8.636168555094445E-78, 2.9387358770557188E-39, 5.421010862427522E-20, 2.3283064365386963E-10, 1.52587890625E-5, 0.00390625, 0.0625, 0.25, 0.5]);
}

var invPowers, powers;
function $compareTo_2(this$static, b){
  return compare_7(this$static.value_0, b.value_0);
}

function Float(s){
  this.value_0 = parseFloat_0(s);
}

function parseFloat_0(s){
  var doubleValue;
  doubleValue = __parseAndValidateDouble(s);
  if (doubleValue > 3.4028234663852886E38) {
    return Infinity;
  }
   else if (doubleValue < -3.4028234663852886E38) {
    return -Infinity;
  }
  return doubleValue;
}

defineClass(174, 224, {3:1, 9:1, 174:1, 224:1}, Float);
_.compareTo = function compareTo_0(b){
  return $compareTo_2(this, castTo(b, 174));
}
;
_.equals_0 = function equals_24(o){
  return instanceOf(o, 174) && castTo(o, 174).value_0 == this.value_0;
}
;
_.hashCode_0 = function hashCode_21(){
  return round_int(this.value_0);
}
;
_.toString_0 = function toString_48(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Float_2_classLit = createForClass('java.lang', 'Float', 174);
function IllegalArgumentException(){
  RuntimeException.call(this);
}

function IllegalArgumentException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(71, 11, $intern_11, IllegalArgumentException, IllegalArgumentException_0);
var Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang', 'IllegalArgumentException', 71);
function IllegalStateException(){
  RuntimeException.call(this);
}

function IllegalStateException_0(s){
  RuntimeException_0.call(this, s);
}

defineClass(83, 11, $intern_11, IllegalStateException, IllegalStateException_0);
var Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang', 'IllegalStateException', 83);
function $compareTo_3(this$static, b){
  return compare_8(this$static.value_0, b.value_0);
}

function $equals_5(this$static, o){
  return instanceOf(o, 48) && castTo(o, 48).value_0 == this$static.value_0;
}

function Integer(value_0){
  this.value_0 = value_0;
}

function compare_8(x_0, y_0){
  return x_0 < y_0?-1:x_0 > y_0?1:0;
}

function numberOfLeadingZeros_0(i){
  var m, n, y_0;
  if (i < 0) {
    return 0;
  }
   else if (i == 0) {
    return 32;
  }
   else {
    y_0 = -(i >> 16);
    m = y_0 >> 16 & 16;
    n = 16 - m;
    i = i >> m;
    y_0 = i - 256;
    m = y_0 >> 16 & 8;
    n += m;
    i <<= m;
    y_0 = i - $intern_22;
    m = y_0 >> 16 & 4;
    n += m;
    i <<= m;
    y_0 = i - $intern_37;
    m = y_0 >> 16 & 2;
    n += m;
    i <<= m;
    y_0 = i >> 14;
    m = y_0 & ~(y_0 >> 1);
    return n + 2 - m;
  }
}

function numberOfTrailingZeros(i){
  var r, rtn;
  if (i == 0) {
    return 32;
  }
   else {
    rtn = 0;
    for (r = 1; (r & i) == 0; r <<= 1) {
      ++rtn;
    }
    return rtn;
  }
}

function valueOf_9(i){
  var rebase, result;
  if (i > -129 && i < 128) {
    rebase = i + 128;
    result = ($clinit_Integer$BoxedValues() , boxedValues)[rebase];
    !result && (result = boxedValues[rebase] = new Integer(i));
    return result;
  }
  return new Integer(i);
}

defineClass(48, 224, {3:1, 9:1, 48:1, 224:1}, Integer);
_.compareTo = function compareTo_1(b){
  return $compareTo_3(this, castTo(b, 48));
}
;
_.equals_0 = function equals_25(o){
  return $equals_5(this, o);
}
;
_.hashCode_0 = function hashCode_22(){
  return this.value_0;
}
;
_.toString_0 = function toString_49(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Integer_2_classLit = createForClass('java.lang', 'Integer', 48);
function $clinit_Integer$BoxedValues(){
  $clinit_Integer$BoxedValues = emptyMethod;
  boxedValues = initUnidimensionalArray(Ljava_lang_Integer_2_classLit, {3:1, 6:1, 7:1, 249:1, 4:1}, 48, 256, 0, 1);
}

var boxedValues;
function compare_9(x_0, y_0){
  return compare_5(x_0, y_0) < 0?-1:compare_5(x_0, y_0) > 0?1:0;
}

defineClass(1114, 1, {});
function NegativeArraySizeException(message){
  RuntimeException_0.call(this, message);
}

defineClass(990, 11, $intern_11, NegativeArraySizeException);
var Ljava_lang_NegativeArraySizeException_2_classLit = createForClass('java.lang', 'NegativeArraySizeException', 990);
function NullPointerException(){
  RuntimeException.call(this);
}

function NullPointerException_0(typeError){
  JsException.call(this, typeError);
}

function NullPointerException_1(message){
  RuntimeException_0.call(this, message);
}

defineClass(100, 198, $intern_11, NullPointerException, NullPointerException_0, NullPointerException_1);
_.createError = function createError_0(msg){
  return new TypeError(msg);
}
;
var Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang', 'NullPointerException', 100);
function Number$__Decode(radix, payload){
  this.radix = radix;
  this.payload = payload;
}

defineClass(422, 1, {}, Number$__Decode);
_.radix = 0;
var Ljava_lang_Number$_1_1Decode_2_classLit = createForClass('java.lang', 'Number/__Decode', 422);
function NumberFormatException(){
  IllegalArgumentException.call(this);
}

function NumberFormatException_0(message){
  IllegalArgumentException_0.call(this, message);
}

defineClass(77, 71, {3:1, 14:1, 77:1, 11:1, 17:1}, NumberFormatException, NumberFormatException_0);
var Ljava_lang_NumberFormatException_2_classLit = createForClass('java.lang', 'NumberFormatException', 77);
function StackTraceElement(methodName, fileName, lineNumber){
  this.className_0 = 'Unknown';
  this.methodName = methodName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
}

defineClass(126, 1, {3:1, 126:1}, StackTraceElement);
_.equals_0 = function equals_26(other){
  var st;
  if (instanceOf(other, 126)) {
    st = castTo(other, 126);
    return this.lineNumber == st.lineNumber && this.methodName == st.methodName && this.className_0 == st.className_0 && this.fileName == st.fileName;
  }
  return false;
}
;
_.hashCode_0 = function hashCode_23(){
  return hashCode_28(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_6, 1, 5, [valueOf_9(this.lineNumber), this.className_0, this.methodName, this.fileName]));
}
;
_.toString_0 = function toString_50(){
  return this.className_0 + '.' + this.methodName + '(' + (this.fileName != null?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
var Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang', 'StackTraceElement', 126);
function $charAt(this$static, index_0){
  checkCriticalStringElementIndex(index_0, this$static.length);
  return this$static.charCodeAt(index_0);
}

function $compareTo_4(this$static, other){
  var a, b;
  a = (checkCriticalNotNull(this$static) , this$static);
  b = (checkCriticalNotNull(other) , other);
  return a == b?0:a < b?-1:1;
}

function $equals_6(this$static, other){
  return checkCriticalNotNull(this$static) , this$static === other;
}

function $equalsIgnoreCase(this$static, other){
  checkCriticalNotNull(this$static);
  if (other == null) {
    return false;
  }
  if ($equals_6(this$static, other)) {
    return true;
  }
  return this$static.length == other.length && $equals_6(this$static.toLowerCase(), other.toLowerCase());
}

function $getChars(this$static, srcBegin, srcEnd, dst, dstBegin){
  checkCriticalStringBounds(srcBegin, srcEnd, this$static.length);
  checkCriticalStringBounds(dstBegin, dstBegin + (srcEnd - srcBegin), dst.length);
  $getChars0(this$static, srcBegin, srcEnd, dst, dstBegin);
}

function $getChars0(this$static, srcBegin, srcEnd, dst, dstBegin){
  while (srcBegin < srcEnd) {
    dst[dstBegin++] = $charAt(this$static, srcBegin++);
  }
}

function $indexOf_0(this$static, str){
  return this$static.indexOf(str);
}

function $lastIndexOf(this$static, str){
  return this$static.lastIndexOf(str);
}

function $lastIndexOf_0(this$static, str, start_0){
  return this$static.lastIndexOf(str, start_0);
}

function $replace_0(this$static, from, to){
  var regex, replacement;
  regex = $replaceAll((checkCriticalNotNull(from) , from), '([/\\\\\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}$^])', '\\\\$1');
  replacement = $replaceAll($replaceAll((checkCriticalNotNull(to) , to), '\\\\', '\\\\\\\\'), '\\$', '\\\\$');
  return $replaceAll(this$static, regex, replacement);
}

function $replaceAll(this$static, regex, replace){
  replace = translateReplaceString(replace);
  return this$static.replace(new RegExp(regex, 'g'), replace);
}

function $replaceFirst(this$static, regex, replace){
  var jsRegEx;
  replace = translateReplaceString(replace);
  jsRegEx = new RegExp(regex);
  return this$static.replace(jsRegEx, replace);
}

function $split(this$static, regex, maxMatch){
  var compiled, count, lastNonEmpty, lastTrail, matchIndex, matchObj, out, trail;
  compiled = new RegExp(regex, 'g');
  out = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_2, 2, 0, 6, 1);
  count = 0;
  trail = this$static;
  lastTrail = null;
  while (true) {
    matchObj = compiled.exec(trail);
    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
      out[count] = trail;
      break;
    }
     else {
      matchIndex = matchObj.index;
      out[count] = trail.substr(0, matchIndex);
      trail = $substring_0(trail, matchIndex + matchObj[0].length, trail.length);
      compiled.lastIndex = 0;
      if (lastTrail == trail) {
        out[count] = trail.substr(0, 1);
        trail = trail.substr(1);
      }
      lastTrail = trail;
      ++count;
    }
  }
  if (maxMatch == 0 && this$static.length > 0) {
    lastNonEmpty = out.length;
    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
      --lastNonEmpty;
    }
    lastNonEmpty < out.length && (out.length = lastNonEmpty);
  }
  return out;
}

function $startsWith(this$static, prefix){
  return $equals_6(this$static.substr(0, prefix.length), prefix);
}

function $substring(this$static, beginIndex){
  return this$static.substr(beginIndex);
}

function $substring_0(this$static, beginIndex, endIndex){
  return this$static.substr(beginIndex, endIndex - beginIndex);
}

function $toLowerCase(this$static, locale){
  return locale == ($clinit_Locale() , $clinit_Locale() , defaultLocale)?this$static.toLocaleLowerCase():this$static.toLowerCase();
}

function $toUpperCase(this$static, locale){
  return locale == ($clinit_Locale() , $clinit_Locale() , defaultLocale)?this$static.toLocaleUpperCase():this$static.toUpperCase();
}

function $trim(this$static){
  var end, length_0, start_0;
  length_0 = this$static.length;
  start_0 = 0;
  while (start_0 < length_0 && (checkCriticalStringElementIndex(start_0, this$static.length) , this$static.charCodeAt(start_0) <= 32)) {
    ++start_0;
  }
  end = length_0;
  while (end > start_0 && (checkCriticalStringElementIndex(end - 1, this$static.length) , this$static.charCodeAt(end - 1) <= 32)) {
    --end;
  }
  return start_0 > 0 || end < length_0?this$static.substr(start_0, end - start_0):this$static;
}

function fromCharCode(array){
  return String.fromCharCode.apply(null, array);
}

function fromCodePoint(codePoint){
  var hiSurrogate, loSurrogate;
  if (codePoint >= $intern_32) {
    hiSurrogate = 55296 + (codePoint - $intern_32 >> 10 & 1023) & $intern_44;
    loSurrogate = 56320 + (codePoint - $intern_32 & 1023) & $intern_44;
    return String.fromCharCode(hiSurrogate) + ('' + String.fromCharCode(loSurrogate));
  }
   else {
    return String.fromCharCode(codePoint & $intern_44);
  }
}

function translateReplaceString(replaceStr){
  var pos;
  pos = 0;
  while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
    checkCriticalStringElementIndex(pos + 1, replaceStr.length);
    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = replaceStr.substr(0, pos) + '$' + $substring(replaceStr, ++pos)):(replaceStr = replaceStr.substr(0, pos) + ('' + $substring(replaceStr, ++pos)));
  }
  return replaceStr;
}

function valueOf_10(x_0){
  return !x_0?'null':'' + x_0.value_0;
}

function valueOf_11(x_0){
  return valueOf_12(x_0, 0, x_0.length);
}

function valueOf_12(x_0, offset, count){
  var batchEnd, batchStart, end, s;
  end = offset + count;
  checkCriticalStringBounds(offset, end, x_0.length);
  s = '';
  for (batchStart = offset; batchStart < end;) {
    batchEnd = $wnd.Math.min(batchStart + 10000, end);
    s += fromCharCode(x_0.slice(batchStart, batchEnd));
    batchStart = batchEnd;
  }
  return s;
}

stringCastMap = {3:1, 305:1, 9:1, 2:1};
var Ljava_lang_String_2_classLit = createForClass('java.lang', 'String', 2);
function $append_0(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function StringBuffer(){
  AbstractStringBuilder.call(this, '');
}

defineClass(175, 225, {305:1}, StringBuffer);
var Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang', 'StringBuffer', 175);
function $append_1(this$static, x_0){
  this$static.string += String.fromCharCode(x_0);
  return this$static;
}

function $append_2(this$static, x_0){
  this$static.string += x_0;
  return this$static;
}

function $append_3(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function $append_4(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function $append_5(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function $deleteCharAt(this$static, start_0){
  this$static.string = $substring_0(this$static.string, 0, start_0) + '' + $substring(this$static.string, start_0 + 1);
  return this$static;
}

function StringBuilder(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_0(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_1(s){
  AbstractStringBuilder.call(this, (checkCriticalNotNull(s) , s));
}

defineClass(44, 225, {305:1}, StringBuilder, StringBuilder_0, StringBuilder_1);
var Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang', 'StringBuilder', 44);
function StringIndexOutOfBoundsException(message){
  IndexOutOfBoundsException_0.call(this, message);
}

defineClass(314, 66, $intern_111, StringIndexOutOfBoundsException);
var Ljava_lang_StringIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'StringIndexOutOfBoundsException', 314);
function $clinit_System(){
  $clinit_System = emptyMethod;
  err_0 = new PrintStream(null);
  new PrintStream(null);
}

function arraycopy(src_0, srcOfs, dest, destOfs, len){
  $clinit_System();
  var destArray, destComp, destEnd, destType, destlen, srcArray, srcComp, srcType, srclen;
  checkCriticalNotNull_0(src_0, 'src');
  checkCriticalNotNull_0(dest, 'dest');
  srcType = getClass__Ljava_lang_Class___devirtual$(src_0);
  destType = getClass__Ljava_lang_Class___devirtual$(dest);
  checkCriticalArrayType_0((srcType.modifiers & 4) != 0, 'srcType is not an array');
  checkCriticalArrayType_0((destType.modifiers & 4) != 0, 'destType is not an array');
  srcComp = srcType.componentType;
  destComp = destType.componentType;
  checkCriticalArrayType_0((srcComp.modifiers & 1) != 0?srcComp == destComp:(destComp.modifiers & 1) == 0, "Array types don't match");
  srclen = src_0.length;
  destlen = dest.length;
  if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
    throw toJs(new IndexOutOfBoundsException);
  }
  if ((srcComp.modifiers & 1) == 0 && srcType != destType) {
    srcArray = castToArray(src_0);
    destArray = castToArray(dest);
    if (maskUndefined(src_0) === maskUndefined(dest) && srcOfs < destOfs) {
      srcOfs += len;
      for (destEnd = destOfs + len; destEnd-- > destOfs;) {
        setCheck(destArray, destEnd, srcArray[--srcOfs]);
      }
    }
     else {
      for (destEnd = destOfs + len; destOfs < destEnd;) {
        setCheck(destArray, destOfs++, srcArray[srcOfs++]);
      }
    }
  }
   else 
    len > 0 && copy_0(src_0, srcOfs, dest, destOfs, len, true);
}

defineClass(1118, 1, {});
var err_0;
function UnsupportedOperationException(){
  RuntimeException.call(this);
}

function UnsupportedOperationException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(65, 11, $intern_11, UnsupportedOperationException, UnsupportedOperationException_0);
var Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang', 'UnsupportedOperationException', 65);
function $addAll_0(this$static, c){
  var changed, e, e$iterator;
  checkCriticalNotNull(c);
  changed = false;
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    changed = changed | this$static.add_0(e);
  }
  return changed;
}

function $advanceToFind(this$static, o, remove){
  var e, iter;
  for (iter = this$static.iterator(); iter.hasNext_0();) {
    e = iter.next_1();
    if (maskUndefined(o) === maskUndefined(e) || o != null && equals_Ljava_lang_Object__Z__devirtual$(o, e)) {
      remove && iter.remove_3();
      return true;
    }
  }
  return false;
}

function $containsAll(this$static, c){
  var e, e$iterator;
  checkCriticalNotNull(c);
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    if (!this$static.contains_0(e)) {
      return false;
    }
  }
  return true;
}

function $removeAll(this$static, c){
  var changed, iter, o;
  checkCriticalNotNull(c);
  changed = false;
  for (iter = new ArrayList$1(this$static); iter.i < iter.this$01.array.length;) {
    o = $next_3(iter);
    if (c.contains_0(o)) {
      $remove_14(iter);
      changed = true;
    }
  }
  return changed;
}

function $toArray(this$static, a){
  var i, it, size_0;
  size_0 = this$static.size_1();
  a.length < size_0 && (a = stampJavaTypeInfo_1(new Array(size_0), a));
  it = this$static.iterator();
  for (i = 0; i < size_0; ++i) {
    setCheck(a, i, it.next_1());
  }
  a.length > size_0 && setCheck(a, size_0, null);
  return a;
}

function $toString_5(this$static){
  var e, e$iterator, joiner;
  joiner = new StringJoiner('[', ']');
  for (e$iterator = this$static.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    $add_17(joiner, e === this$static?'(this Collection)':e == null?'null':toString_36(e));
  }
  return !joiner.builder?joiner.emptyValue:joiner.suffix.length == 0?joiner.builder.string:joiner.builder.string + ('' + joiner.suffix);
}

defineClass(1031, 1, $intern_112);
_.add_0 = function add_4(o){
  throw toJs(new UnsupportedOperationException_0('Add not supported on this collection'));
}
;
_.contains_0 = function contains_0(o){
  return $advanceToFind(this, o, false);
}
;
_.isEmpty = function isEmpty_1(){
  return this.size_1() == 0;
}
;
_.toArray = function toArray_1(){
  return this.toArray_0(initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, this.size_1(), 5, 1));
}
;
_.toArray_0 = function toArray_2(a){
  return $toArray(this, a);
}
;
_.toString_0 = function toString_51(){
  return $toString_5(this);
}
;
var Ljava_util_AbstractCollection_2_classLit = createForClass('java.util', 'AbstractCollection', 1031);
function $removeAll_0(this$static, c){
  var entry, iter, o, o$iterator, outerIter, size_0;
  checkCriticalNotNull(c);
  size_0 = $size(this$static.map_0);
  if (size_0 < $size(c.map_0)) {
    for (iter = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$1(this$static.map_0)).this$01)).this$01) , new AbstractMap$1$1(outerIter)); iter.val$outerIter2.hasNext;) {
      o = (entry = $next_1(iter.val$outerIter2) , entry.getKey());
      $containsKey_0(c.map_0, o) && $remove_10(iter.val$outerIter2);
    }
  }
   else {
    for (o$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$1(c.map_0)).this$01)).this$01) , new AbstractMap$1$1(outerIter)); o$iterator.val$outerIter2.hasNext;) {
      o = (entry = $next_1(o$iterator.val$outerIter2) , entry.getKey());
      $remove_2(this$static.map_0, o) != null;
    }
  }
  return size_0 != $size(this$static.map_0);
}

defineClass($intern_113, 1031, $intern_114);
_.equals_0 = function equals_27(o){
  var other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 108)) {
    return false;
  }
  other = castTo(o, 108);
  if (other.size_1() != this.size_1()) {
    return false;
  }
  return $containsAll(this, other);
}
;
_.hashCode_0 = function hashCode_24(){
  return hashCode_29(this);
}
;
var Ljava_util_AbstractSet_2_classLit = createForClass('java.util', 'AbstractSet', $intern_113);
function $contains_3(this$static, o){
  if (instanceOf(o, 46)) {
    return $containsEntry(this$static.this$01, castTo(o, 46));
  }
  return false;
}

function AbstractHashMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(56, $intern_113, $intern_114, AbstractHashMap$EntrySet);
_.contains_0 = function contains_1(o){
  return $contains_3(this, o);
}
;
_.iterator = function iterator_5(){
  return new AbstractHashMap$EntrySetIterator(this.this$01);
}
;
_.size_1 = function size_5(){
  return this.this$01.size_1();
}
;
var Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySet', 56);
function $computeHasNext(this$static){
  if (this$static.current.hasNext_0()) {
    return true;
  }
  if (this$static.current != this$static.stringMapEntries) {
    return false;
  }
  this$static.current = new InternalHashCodeMap$1(this$static.this$01.hashCodeMap);
  return this$static.current.hasNext_0();
}

function $next_1(this$static){
  var rv;
  checkStructuralChange(this$static.this$01, this$static);
  checkCriticalElement(this$static.hasNext);
  this$static.last = this$static.current;
  rv = castTo(this$static.current.next_1(), 46);
  this$static.hasNext = $computeHasNext(this$static);
  return rv;
}

function $remove_10(this$static){
  checkCriticalState(!!this$static.last);
  checkStructuralChange(this$static.this$01, this$static);
  this$static.last.remove_3();
  this$static.last = null;
  this$static.hasNext = $computeHasNext(this$static);
  recordLastKnownStructure(this$static.this$01, this$static);
}

function AbstractHashMap$EntrySetIterator(this$0){
  this.this$01 = this$0;
  this.stringMapEntries = new InternalStringMap$1(this.this$01.stringMap);
  this.current = this.stringMapEntries;
  this.hasNext = $computeHasNext(this);
  this.$modCount = this$0.$modCount;
}

defineClass(57, 1, {}, AbstractHashMap$EntrySetIterator);
_.next_1 = function next_2(){
  return $next_1(this);
}
;
_.hasNext_0 = function hasNext_1(){
  return this.hasNext;
}
;
_.remove_3 = function remove_18(){
  $remove_10(this);
}
;
_.hasNext = false;
var Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySetIterator', 57);
function $indexOf_1(this$static, toFind){
  var i, n;
  for (i = 0 , n = this$static.array.length; i < n; ++i) {
    if (equals_38(toFind, (checkCriticalElementIndex(i, this$static.array.length) , this$static.array[i]))) {
      return i;
    }
  }
  return -1;
}

defineClass(1032, 1031, $intern_115);
_.add_1 = function add_5(index_0, element){
  throw toJs(new UnsupportedOperationException_0('Add not supported on this list'));
}
;
_.add_0 = function add_6(obj){
  this.add_1(this.size_1(), obj);
  return true;
}
;
_.equals_0 = function equals_28(o){
  var elem, elem$iterator, elemOther, iterOther, other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 41)) {
    return false;
  }
  other = castTo(o, 41);
  if (this.size_1() != other.size_1()) {
    return false;
  }
  iterOther = other.iterator();
  for (elem$iterator = this.iterator(); elem$iterator.hasNext_0();) {
    elem = elem$iterator.next_1();
    elemOther = iterOther.next_1();
    if (!(maskUndefined(elem) === maskUndefined(elemOther) || elem != null && equals_Ljava_lang_Object__Z__devirtual$(elem, elemOther))) {
      return false;
    }
  }
  return true;
}
;
_.hashCode_0 = function hashCode_25(){
  return hashCode_30(this);
}
;
_.iterator = function iterator_6(){
  return new AbstractList$IteratorImpl(this);
}
;
_.listIterator = function listIterator_1(){
  return this.listIterator_0(0);
}
;
_.listIterator_0 = function listIterator_2(from){
  return new AbstractList$ListIteratorImpl(this, from);
}
;
_.remove = function remove_19(index_0){
  throw toJs(new UnsupportedOperationException_0('Remove not supported on this list'));
}
;
_.set_0 = function set_2(index_0, o){
  throw toJs(new UnsupportedOperationException_0('Set not supported on this list'));
}
;
_.subList = function subList_0(fromIndex, toIndex){
  return new AbstractList$SubList(this, fromIndex, toIndex);
}
;
var Ljava_util_AbstractList_2_classLit = createForClass('java.util', 'AbstractList', 1032);
function $hasNext(this$static){
  return this$static.i < this$static.this$01_0.size_1();
}

function $next_2(this$static){
  checkCriticalElement(this$static.i < this$static.this$01_0.size_1());
  return this$static.this$01_0.get_0(this$static.last = this$static.i++);
}

function $remove_11(this$static){
  checkCriticalState(this$static.last != -1);
  this$static.this$01_0.remove(this$static.last);
  this$static.i = this$static.last;
  this$static.last = -1;
}

function AbstractList$IteratorImpl(this$0){
  this.this$01_0 = this$0;
}

defineClass(110, 1, {}, AbstractList$IteratorImpl);
_.hasNext_0 = function hasNext_2(){
  return $hasNext(this);
}
;
_.next_1 = function next_3(){
  return $next_2(this);
}
;
_.remove_3 = function remove_20(){
  $remove_11(this);
}
;
_.i = 0;
_.last = -1;
var Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/IteratorImpl', 110);
function $add_11(this$static, o){
  this$static.this$01.add_1(this$static.i, o);
  ++this$static.i;
  this$static.last = -1;
}

function $set_3(this$static, o){
  checkCriticalState(this$static.last != -1);
  this$static.this$01.set_0(this$static.last, o);
}

function AbstractList$ListIteratorImpl(this$0, start_0){
  this.this$01 = this$0;
  AbstractList$IteratorImpl.call(this, this$0);
  checkCriticalPositionIndex(start_0, this$0.size_1());
  this.i = start_0;
}

defineClass(102, 110, {}, AbstractList$ListIteratorImpl);
_.remove_3 = function remove_21(){
  $remove_11(this);
}
;
_.add_2 = function add_7(o){
  $add_11(this, o);
}
;
_.hasPrevious = function hasPrevious(){
  return this.i > 0;
}
;
_.previous = function previous_0(){
  return checkCriticalElement(this.i > 0) , this.this$01.get_0(this.last = --this.i);
}
;
var Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/ListIteratorImpl', 102);
function AbstractList$SubList(wrapped, fromIndex, toIndex){
  checkCriticalPositionIndexes(fromIndex, toIndex, wrapped.size_1());
  this.wrapped = wrapped;
  this.fromIndex = fromIndex;
  this.size_0 = toIndex - fromIndex;
}

defineClass(226, 1032, $intern_115, AbstractList$SubList);
_.add_1 = function add_8(index_0, element){
  checkCriticalPositionIndex(index_0, this.size_0);
  this.wrapped.add_1(this.fromIndex + index_0, element);
  ++this.size_0;
}
;
_.get_0 = function get_7(index_0){
  checkCriticalElementIndex(index_0, this.size_0);
  return this.wrapped.get_0(this.fromIndex + index_0);
}
;
_.remove = function remove_22(index_0){
  var result;
  checkCriticalElementIndex(index_0, this.size_0);
  result = this.wrapped.remove(this.fromIndex + index_0);
  --this.size_0;
  return result;
}
;
_.set_0 = function set_3(index_0, element){
  checkCriticalElementIndex(index_0, this.size_0);
  return this.wrapped.set_0(this.fromIndex + index_0, element);
}
;
_.size_1 = function size_6(){
  return this.size_0;
}
;
_.fromIndex = 0;
_.size_0 = 0;
var Ljava_util_AbstractList$SubList_2_classLit = createForClass('java.util', 'AbstractList/SubList', 226);
function AbstractMap$1(this$0){
  this.this$01 = this$0;
}

defineClass(121, $intern_113, $intern_114, AbstractMap$1);
_.contains_0 = function contains_2(key){
  return $containsKey_0(this.this$01, key);
}
;
_.iterator = function iterator_7(){
  var outerIter;
  return outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this.this$01)).this$01) , new AbstractMap$1$1(outerIter);
}
;
_.size_1 = function size_7(){
  return $size(this.this$01);
}
;
var Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util', 'AbstractMap/1', 121);
function AbstractMap$1$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(138, 1, {}, AbstractMap$1$1);
_.hasNext_0 = function hasNext_3(){
  return this.val$outerIter2.hasNext;
}
;
_.next_1 = function next_4(){
  var entry;
  return entry = $next_1(this.val$outerIter2) , entry.getKey();
}
;
_.remove_3 = function remove_24(){
  $remove_10(this.val$outerIter2);
}
;
var Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util', 'AbstractMap/1/1', 138);
function AbstractMap$2(this$0){
  this.this$01 = this$0;
}

defineClass(205, 1031, $intern_112, AbstractMap$2);
_.contains_0 = function contains_3(value_0){
  return this.this$01.containsValue(value_0);
}
;
_.iterator = function iterator_8(){
  var outerIter;
  return outerIter = this.this$01.entrySet_0().iterator() , new AbstractMap$2$1(outerIter);
}
;
_.size_1 = function size_8(){
  return this.this$01.size_1();
}
;
var Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util', 'AbstractMap/2', 205);
function AbstractMap$2$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(180, 1, {}, AbstractMap$2$1);
_.hasNext_0 = function hasNext_4(){
  return this.val$outerIter2.hasNext_0();
}
;
_.next_1 = function next_5(){
  var entry;
  return entry = castTo(this.val$outerIter2.next_1(), 46) , entry.getValue_0();
}
;
_.remove_3 = function remove_25(){
  this.val$outerIter2.remove_3();
}
;
var Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util', 'AbstractMap/2/1', 180);
function $setValue_1(this$static, value_0){
  var oldValue;
  oldValue = this$static.value_0;
  this$static.value_0 = value_0;
  return oldValue;
}

defineClass(204, 1, {204:1, 46:1});
_.equals_0 = function equals_29(other){
  var entry;
  if (!instanceOf(other, 46)) {
    return false;
  }
  entry = castTo(other, 46);
  return equals_38(this.key, entry.getKey()) && equals_38(this.value_0, entry.getValue_0());
}
;
_.getKey = function getKey(){
  return this.key;
}
;
_.getValue_0 = function getValue_2(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_26(){
  return hashCode_36(this.key) ^ hashCode_36(this.value_0);
}
;
_.setValue = function setValue(value_0){
  return $setValue_1(this, value_0);
}
;
_.toString_0 = function toString_52(){
  return this.key + '=' + this.value_0;
}
;
var Ljava_util_AbstractMap$AbstractEntry_2_classLit = createForClass('java.util', 'AbstractMap/AbstractEntry', 204);
function AbstractMap$SimpleEntry(key, value_0){
  this.key = key;
  this.value_0 = value_0;
}

defineClass(156, 204, {204:1, 156:1, 46:1}, AbstractMap$SimpleEntry);
var Ljava_util_AbstractMap$SimpleEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleEntry', 156);
defineClass(1041, 1, {46:1});
_.equals_0 = function equals_30(other){
  var entry;
  if (!instanceOf(other, 46)) {
    return false;
  }
  entry = castTo(other, 46);
  return equals_38(this.val$entry2.value[0], entry.getKey()) && equals_38($getValue_1(this), entry.getValue_0());
}
;
_.hashCode_0 = function hashCode_27(){
  return hashCode_36(this.val$entry2.value[0]) ^ hashCode_36($getValue_1(this));
}
;
_.toString_0 = function toString_53(){
  return this.val$entry2.value[0] + '=' + $getValue_1(this);
}
;
var Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util', 'AbstractMapEntry', 1041);
function $containsEntry_0(this$static, entry){
  var key, lookupEntry;
  key = entry.getKey();
  lookupEntry = $getEntry_0(this$static, key);
  return !!lookupEntry && equals_38(lookupEntry.value_0, entry.getValue_0());
}

function $containsKey_2(this$static, k){
  return !!$getEntry_0(this$static, k);
}

function getKeyOrNSE(entry){
  if (!entry) {
    throw toJs(new NoSuchElementException);
  }
  return entry.key;
}

defineClass(1070, 1035, $intern_87);
_.containsEntry = function containsEntry_0(entry){
  return $containsEntry_0(this, entry);
}
;
_.containsKey = function containsKey_2(k){
  return $containsKey_2(this, k);
}
;
_.entrySet_0 = function entrySet_1(){
  return new AbstractNavigableMap$EntrySet(this);
}
;
_.get_1 = function get_8(k){
  return getEntryValueOrNull($getEntry_0(this, k));
}
;
var Ljava_util_AbstractNavigableMap_2_classLit = createForClass('java.util', 'AbstractNavigableMap', 1070);
function AbstractNavigableMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(374, $intern_113, $intern_114, AbstractNavigableMap$EntrySet);
_.contains_0 = function contains_4(o){
  return instanceOf(o, 46) && $containsEntry_0(this.this$01, castTo(o, 46));
}
;
_.iterator = function iterator_9(){
  return new TreeMap$EntryIterator(this.this$01);
}
;
_.size_1 = function size_9(){
  return this.this$01.size_0;
}
;
var Ljava_util_AbstractNavigableMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/EntrySet', 374);
function AbstractNavigableMap$NavigableKeySet(map_0){
  this.map_0 = map_0;
}

defineClass(219, $intern_113, $intern_114, AbstractNavigableMap$NavigableKeySet);
_.contains_0 = function contains_5(o){
  return $containsKey_2(this.map_0, o);
}
;
_.iterator = function iterator_10(){
  var entryIterator;
  return entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet(this.map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator);
}
;
_.size_1 = function size_10(){
  return this.map_0.size_0;
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet', 219);
function AbstractNavigableMap$NavigableKeySet$1(val$entryIterator){
  this.val$entryIterator2 = val$entryIterator;
}

defineClass(196, 1, {}, AbstractNavigableMap$NavigableKeySet$1);
_.hasNext_0 = function hasNext_5(){
  return $hasNext(this.val$entryIterator2.iter);
}
;
_.next_1 = function next_6(){
  var entry;
  return entry = $next_6(this.val$entryIterator2) , entry.getKey();
}
;
_.remove_3 = function remove_28(){
  $remove_22(this.val$entryIterator2);
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet$1_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet/1', 196);
defineClass(1069, 1031, $intern_112);
_.add_0 = function add_9(o){
  return checkCriticalState_0($offer(this, o), 'Unable to add element to queue') , true;
}
;
var Ljava_util_AbstractQueue_2_classLit = createForClass('java.util', 'AbstractQueue', 1069);
function $get_6(this$static, index_0){
  var iter;
  iter = $listIterator(this$static, index_0);
  try {
    return $next_5(iter);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 112)) {
      throw toJs(new IndexOutOfBoundsException_0("Can't get element " + index_0));
    }
     else 
      throw toJs($e0);
  }
}

function $set_4(this$static, index_0, element){
  var iter, old;
  iter = $listIterator(this$static, index_0);
  try {
    old = $next_5(iter);
    checkCriticalState(!!iter.lastNode);
    iter.lastNode.value_0 = element;
    return old;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 112)) {
      throw toJs(new IndexOutOfBoundsException_0("Can't set element " + index_0));
    }
     else 
      throw toJs($e0);
  }
}

defineClass(1068, 1032, $intern_115);
_.add_1 = function add_10(index_0, element){
  var iter;
  iter = this.listIterator_0(index_0);
  iter.add_2(element);
}
;
_.get_0 = function get_9(index_0){
  return $get_6(this, index_0);
}
;
_.iterator = function iterator_11(){
  return $listIterator(this, 0);
}
;
_.remove = function remove_29(index_0){
  var iter, old;
  iter = this.listIterator_0(index_0);
  try {
    old = iter.next_1();
    iter.remove_3();
    return old;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 112)) {
      throw toJs(new IndexOutOfBoundsException_0("Can't remove element " + index_0));
    }
     else 
      throw toJs($e0);
  }
}
;
_.set_0 = function set_4(index_0, element){
  return $set_4(this, index_0, element);
}
;
var Ljava_util_AbstractSequentialList_2_classLit = createForClass('java.util', 'AbstractSequentialList', 1068);
function $$init_1(this$static){
  this$static.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, 0, 5, 1);
}

function $add_12(this$static, index_0, o){
  checkCriticalPositionIndex(index_0, this$static.array.length);
  insertTo(this$static.array, index_0, o);
}

function $add_13(this$static, o){
  this$static.array[this$static.array.length] = o;
  return true;
}

function $addAll_1(this$static, c){
  var cArray, len;
  cArray = c.toArray();
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  insertTo_0(this$static.array, this$static.array.length, cArray);
  return true;
}

function $get_7(this$static, index_0){
  checkCriticalElementIndex(index_0, this$static.array.length);
  return this$static.array[index_0];
}

function $indexOf_2(this$static, o, index_0){
  for (; index_0 < this$static.array.length; ++index_0) {
    if (equals_38(o, this$static.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}

function $remove_12(this$static, index_0){
  var previous;
  previous = (checkCriticalElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  removeFrom(this$static.array, index_0);
  return previous;
}

function $remove_13(this$static, o){
  var i;
  i = $indexOf_2(this$static, o, 0);
  if (i == -1) {
    return false;
  }
  checkCriticalElementIndex(i, this$static.array.length);
  removeFrom(this$static.array, i);
  return true;
}

function $set_5(this$static, index_0, o){
  var previous;
  previous = (checkCriticalElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  this$static.array[index_0] = o;
  return previous;
}

function $sort(this$static, c){
  sort_0(this$static.array, this$static.array.length, c);
}

function $toArray_0(this$static){
  return clone_0(this$static.array, this$static.array.length);
}

function $toArray_1(this$static, out){
  var i, size_0;
  size_0 = this$static.array.length;
  out.length < size_0 && (out = stampJavaTypeInfo_1(new Array(size_0), out));
  for (i = 0; i < size_0; ++i) {
    setCheck(out, i, this$static.array[i]);
  }
  out.length > size_0 && setCheck(out, size_0, null);
  return out;
}

function ArrayList(){
  $$init_1(this);
}

function ArrayList_0(initialCapacity){
  $$init_1(this);
  checkCriticalArgument(initialCapacity >= 0, 'Initial capacity must not be negative');
}

function ArrayList_1(c){
  $$init_1(this);
  insertTo_0(this.array, 0, c.toArray());
}

defineClass(10, 1032, $intern_116, ArrayList, ArrayList_0, ArrayList_1);
_.add_1 = function add_11(index_0, o){
  $add_12(this, index_0, o);
}
;
_.add_0 = function add_12(o){
  return $add_13(this, o);
}
;
_.contains_0 = function contains_6(o){
  return $indexOf_2(this, o, 0) != -1;
}
;
_.get_0 = function get_10(index_0){
  return $get_7(this, index_0);
}
;
_.isEmpty = function isEmpty_2(){
  return this.array.length == 0;
}
;
_.iterator = function iterator_12(){
  return new ArrayList$1(this);
}
;
_.remove = function remove_30(index_0){
  return $remove_12(this, index_0);
}
;
_.set_0 = function set_5(index_0, o){
  return $set_5(this, index_0, o);
}
;
_.size_1 = function size_11(){
  return this.array.length;
}
;
_.toArray = function toArray_3(){
  return $toArray_0(this);
}
;
_.toArray_0 = function toArray_4(out){
  return $toArray_1(this, out);
}
;
var Ljava_util_ArrayList_2_classLit = createForClass('java.util', 'ArrayList', 10);
function $next_3(this$static){
  checkCriticalElement(this$static.i < this$static.this$01.array.length);
  this$static.last = this$static.i++;
  return this$static.this$01.array[this$static.last];
}

function $remove_14(this$static){
  checkCriticalState(this$static.last != -1);
  $remove_12(this$static.this$01, this$static.i = this$static.last);
  this$static.last = -1;
}

function ArrayList$1(this$0){
  this.this$01 = this$0;
}

defineClass(12, 1, {}, ArrayList$1);
_.hasNext_0 = function hasNext_6(){
  return this.i < this.this$01.array.length;
}
;
_.next_1 = function next_7(){
  return $next_3(this);
}
;
_.remove_3 = function remove_32(){
  $remove_14(this);
}
;
_.i = 0;
_.last = -1;
var Ljava_util_ArrayList$1_2_classLit = createForClass('java.util', 'ArrayList/1', 12);
function copyObjectArray(original, from, to){
  var copy, result;
  copy = (result = original.slice(from, to) , stampJavaTypeInfo_0(result, original));
  copy.length = to - from;
  return copy;
}

function copyOf(original, newLength){
  checkCriticalArraySize(newLength);
  return copyPrimitiveArray(original, initUnidimensionalArray(D_classLit, $intern_50, 32, newLength, 15, 1), newLength);
}

function copyOf_0(original, newLength){
  checkCriticalArraySize(newLength);
  return copyObjectArray(original, 0, newLength);
}

function copyOfRange(original, from, to){
  var len;
  checkCriticalArgument_0(from <= to, '%s > %s', stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_6, 1, 5, [valueOf_9(from), valueOf_9(to)]));
  len = original.length;
  checkCriticalArrayBounds(from, from, len);
  return copyObjectArray(original, from, to);
}

function copyPrimitiveArray(original, copy, to){
  var copyLen, len;
  len = original.length;
  copyLen = $wnd.Math.min(to, len);
  copy_0(original, 0, copy, 0, copyLen, true);
  return copy;
}

function equals_31(array1, array2){
  var i, val1, val2;
  if (maskUndefined(array1) === maskUndefined(array2)) {
    return true;
  }
  if (array1 == null || array2 == null) {
    return false;
  }
  if (array1.length != array2.length) {
    return false;
  }
  for (i = 0; i < array1.length; ++i) {
    val1 = array1[i];
    val2 = array2[i];
    if (!(maskUndefined(val1) === maskUndefined(val2) || val1 != null && equals_Ljava_lang_Object__Z__devirtual$(val1, val2))) {
      return false;
    }
  }
  return true;
}

function hashCode_28(a){
  var e, e$index, e$max, hashCode;
  if (a == null) {
    return 0;
  }
  hashCode = 1;
  for (e$index = 0 , e$max = a.length; e$index < e$max; ++e$index) {
    e = a[e$index];
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function insertionSort(array, low, high, comp){
  var i, j, t;
  for (i = low + 1; i < high; ++i) {
    for (j = i; j > low && comp.compare(array[j - 1], array[j]) > 0; --j) {
      t = array[j];
      setCheck(array, j, array[j - 1]);
      setCheck(array, j - 1, t);
    }
  }
}

function merge(src_0, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp){
  var topIdx;
  topIdx = srcMid;
  while (destLow < destHigh) {
    topIdx >= srcHigh || srcLow < srcMid && comp.compare(src_0[srcLow], src_0[topIdx]) <= 0?setCheck(dest, destLow++, src_0[srcLow++]):setCheck(dest, destLow++, src_0[topIdx++]);
  }
}

function mergeSort(x_0, fromIndex, toIndex, comp){
  var temp;
  comp = ($clinit_Comparators() , !comp?INTERNAL_NATURAL_ORDER:comp);
  temp = x_0.slice(fromIndex, toIndex);
  mergeSort_0(temp, x_0, fromIndex, toIndex, -fromIndex, comp);
}

function mergeSort_0(temp, array, low, high, ofs, comp){
  var length_0, tempHigh, tempLow, tempMid;
  length_0 = high - low;
  if (length_0 < 7) {
    insertionSort(array, low, high, comp);
    return;
  }
  tempLow = low + ofs;
  tempHigh = high + ofs;
  tempMid = tempLow + (tempHigh - tempLow >> 1);
  mergeSort_0(array, temp, tempLow, tempMid, -ofs, comp);
  mergeSort_0(array, temp, tempMid, tempHigh, -ofs, comp);
  if (comp.compare(temp[tempMid - 1], temp[tempMid]) <= 0) {
    while (low < high) {
      setCheck(array, low++, temp[tempLow++]);
    }
    return;
  }
  merge(temp, tempLow, tempMid, tempHigh, array, low, high, comp);
}

function sort_0(x_0, toIndex, c){
  checkCriticalArrayBounds(0, toIndex, x_0.length);
  mergeSort(x_0, 0, toIndex, c);
}

function toString_54(x_0){
  if (x_0 == null) {
    return 'null';
  }
  return $toString_5(new Arrays$ArrayList(x_0));
}

function $get_8(this$static, index_0){
  checkCriticalElementIndex(index_0, this$static.array.length);
  return this$static.array[index_0];
}

function $toArray_2(this$static, out){
  var i, size_0;
  size_0 = this$static.array.length;
  out.length < size_0 && (out = stampJavaTypeInfo_1(new Array(size_0), out));
  for (i = 0; i < size_0; ++i) {
    setCheck(out, i, this$static.array[i]);
  }
  out.length > size_0 && setCheck(out, size_0, null);
  return out;
}

function Arrays$ArrayList(array){
  checkCriticalNotNull(array);
  this.array = array;
}

defineClass(18, 1032, $intern_116, Arrays$ArrayList);
_.contains_0 = function contains_7(o){
  return $indexOf_1(this, o) != -1;
}
;
_.get_0 = function get_11(index_0){
  return $get_8(this, index_0);
}
;
_.set_0 = function set_6(index_0, value_0){
  var was;
  was = (checkCriticalElementIndex(index_0, this.array.length) , this.array[index_0]);
  setCheck(this.array, index_0, value_0);
  return was;
}
;
_.size_1 = function size_12(){
  return this.array.length;
}
;
_.toArray = function toArray_5(){
  return $toArray_2(this, initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_6, 1, this.array.length, 5, 1));
}
;
_.toArray_0 = function toArray_6(out){
  return $toArray_2(this, out);
}
;
var Ljava_util_Arrays$ArrayList_2_classLit = createForClass('java.util', 'Arrays/ArrayList', 18);
function $clinit_Collections(){
  $clinit_Collections = emptyMethod;
  EMPTY_LIST = new Collections$EmptyList;
  EMPTY_MAP_0 = new Collections$EmptyMap;
  EMPTY_SET = new Collections$EmptySet;
}

function hashCode_29(collection){
  $clinit_Collections();
  var e, e$iterator, hashCode;
  hashCode = 0;
  for (e$iterator = collection.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    hashCode = hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function hashCode_30(list){
  $clinit_Collections();
  var e, e$iterator, hashCode;
  hashCode = 1;
  for (e$iterator = list.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function max_1(coll, comp){
  $clinit_Collections();
  var it, max_0, t;
  comp = ($clinit_Comparators() , !comp?INTERNAL_NATURAL_ORDER:comp);
  it = coll.iterator();
  max_0 = it.next_1();
  while (it.hasNext_0()) {
    t = it.next_1();
    comp.compare(t, max_0) > 0 && (max_0 = t);
  }
  return max_0;
}

function unmodifiableList(list){
  $clinit_Collections();
  return instanceOf(list, 222)?new Collections$UnmodifiableRandomAccessList(list):new Collections$UnmodifiableList(list);
}

var EMPTY_LIST, EMPTY_MAP_0, EMPTY_SET;
function Collections$EmptyList(){
}

defineClass(547, 1032, $intern_116, Collections$EmptyList);
_.contains_0 = function contains_8(object){
  return false;
}
;
_.get_0 = function get_12(location_0){
  checkCriticalElementIndex(location_0, 0);
  return null;
}
;
_.iterator = function iterator_13(){
  return $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_32;
}
;
_.listIterator = function listIterator_3(){
  return $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_32;
}
;
_.size_1 = function size_13(){
  return 0;
}
;
var Ljava_util_Collections$EmptyList_2_classLit = createForClass('java.util', 'Collections/EmptyList', 547);
function $clinit_Collections$EmptyListIterator(){
  $clinit_Collections$EmptyListIterator = emptyMethod;
  INSTANCE_32 = new Collections$EmptyListIterator;
}

function Collections$EmptyListIterator(){
}

defineClass(548, 1, {}, Collections$EmptyListIterator);
_.add_2 = function add_13(o){
  throw toJs(new UnsupportedOperationException);
}
;
_.hasNext_0 = function hasNext_7(){
  return false;
}
;
_.hasPrevious = function hasPrevious_0(){
  return false;
}
;
_.next_1 = function next_8(){
  throw toJs(new NoSuchElementException);
}
;
_.previous = function previous_1(){
  throw toJs(new NoSuchElementException);
}
;
_.remove_3 = function remove_33(){
  throw toJs(new IllegalStateException);
}
;
var INSTANCE_32;
var Ljava_util_Collections$EmptyListIterator_2_classLit = createForClass('java.util', 'Collections/EmptyListIterator', 548);
function Collections$EmptyMap(){
}

defineClass(550, 1035, $intern_88, Collections$EmptyMap);
_.containsKey = function containsKey_3(key){
  return false;
}
;
_.entrySet_0 = function entrySet_2(){
  return $clinit_Collections() , EMPTY_SET;
}
;
_.get_1 = function get_13(key){
  return null;
}
;
_.size_1 = function size_14(){
  return 0;
}
;
var Ljava_util_Collections$EmptyMap_2_classLit = createForClass('java.util', 'Collections/EmptyMap', 550);
function Collections$EmptySet(){
}

defineClass(549, $intern_113, $intern_117, Collections$EmptySet);
_.contains_0 = function contains_9(object){
  return false;
}
;
_.iterator = function iterator_14(){
  return $clinit_Collections() , $clinit_Collections$EmptyListIterator() , INSTANCE_32;
}
;
_.size_1 = function size_15(){
  return 0;
}
;
var Ljava_util_Collections$EmptySet_2_classLit = createForClass('java.util', 'Collections/EmptySet', 549);
defineClass(325, 1, $intern_112);
_.add_0 = function add_14(o){
  throw toJs(new UnsupportedOperationException);
}
;
_.contains_0 = function contains_10(o){
  return this.coll.contains_0(o);
}
;
_.isEmpty = function isEmpty_3(){
  return this.coll.isEmpty();
}
;
_.iterator = function iterator_15(){
  return new Collections$UnmodifiableCollectionIterator(this.coll.iterator());
}
;
_.size_1 = function size_16(){
  return this.coll.size_1();
}
;
_.toArray = function toArray_7(){
  return this.coll.toArray();
}
;
_.toArray_0 = function toArray_8(a){
  return this.coll.toArray_0(a);
}
;
_.toString_0 = function toString_55(){
  return toString_36(this.coll);
}
;
var Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollection', 325);
function $remove_15(){
  throw toJs(new UnsupportedOperationException);
}

function Collections$UnmodifiableCollectionIterator(it){
  this.it = it;
}

defineClass(140, 1, {}, Collections$UnmodifiableCollectionIterator);
_.hasNext_0 = function hasNext_8(){
  return this.it.hasNext_0();
}
;
_.next_1 = function next_9(){
  return this.it.next_1();
}
;
_.remove_3 = function remove_35(){
  $remove_15();
}
;
var Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollectionIterator', 140);
function Collections$UnmodifiableList(list){
  this.coll = list;
  this.list = list;
}

defineClass(262, 325, $intern_115, Collections$UnmodifiableList);
_.equals_0 = function equals_32(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.list, o);
}
;
_.get_0 = function get_14(index_0){
  return this.list.get_0(index_0);
}
;
_.hashCode_0 = function hashCode_31(){
  return hashCode__I__devirtual$(this.list);
}
;
_.isEmpty = function isEmpty_4(){
  return this.list.isEmpty();
}
;
_.listIterator = function listIterator_4(){
  return new Collections$UnmodifiableListIterator(this.list.listIterator_0(0));
}
;
_.listIterator_0 = function listIterator_5(from){
  return new Collections$UnmodifiableListIterator(this.list.listIterator_0(from));
}
;
_.remove = function remove_36(index_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.set_0 = function set_7(index_0, element){
  throw toJs(new UnsupportedOperationException);
}
;
_.subList = function subList_1(fromIndex, toIndex){
  return new Collections$UnmodifiableList(this.list.subList(fromIndex, toIndex));
}
;
var Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableList', 262);
function Collections$UnmodifiableListIterator(lit){
  Collections$UnmodifiableCollectionIterator.call(this, lit);
  this.lit = lit;
}

defineClass(328, 140, {}, Collections$UnmodifiableListIterator);
_.remove_3 = function remove_37(){
  $remove_15();
}
;
_.add_2 = function add_15(o){
  throw toJs(new UnsupportedOperationException);
}
;
_.hasPrevious = function hasPrevious_1(){
  return this.lit.hasPrevious();
}
;
_.previous = function previous_2(){
  return this.lit.previous();
}
;
var Ljava_util_Collections$UnmodifiableListIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableListIterator', 328);
function Collections$UnmodifiableMap(map_0){
  this.map_0 = map_0;
}

defineClass(409, 1, $intern_87, Collections$UnmodifiableMap);
_.containsKey = function containsKey_4(key){
  return this.map_0.containsKey(key);
}
;
_.entrySet_0 = function entrySet_3(){
  !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet(this.map_0.entrySet_0()));
  return this.entrySet;
}
;
_.equals_0 = function equals_33(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.map_0, o);
}
;
_.get_1 = function get_15(key){
  return this.map_0.get_1(key);
}
;
_.hashCode_0 = function hashCode_32(){
  return hashCode__I__devirtual$(this.map_0);
}
;
_.put = function put_2(key, value_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.size_1 = function size_17(){
  return this.map_0.size_1();
}
;
_.toString_0 = function toString_56(){
  return toString_36(this.map_0);
}
;
var Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap', 409);
defineClass(551, 325, $intern_114);
_.equals_0 = function equals_34(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.coll, o);
}
;
_.hashCode_0 = function hashCode_33(){
  return hashCode__I__devirtual$(this.coll);
}
;
var Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSet', 551);
function $wrap(array, size_0){
  var i;
  for (i = 0; i < size_0; ++i) {
    setCheck(array, i, new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(castTo(array[i], 46)));
  }
}

function Collections$UnmodifiableMap$UnmodifiableEntrySet(s){
  this.coll = s;
}

defineClass(552, 551, $intern_114, Collections$UnmodifiableMap$UnmodifiableEntrySet);
_.contains_0 = function contains_11(o){
  return this.coll.contains_0(o);
}
;
_.iterator = function iterator_16(){
  var it;
  it = this.coll.iterator();
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1(it);
}
;
_.toArray = function toArray_9(){
  var array;
  array = this.coll.toArray();
  $wrap(array, array.length);
  return array;
}
;
_.toArray_0 = function toArray_10(a){
  var result;
  result = this.coll.toArray_0(a);
  $wrap(result, this.coll.size_1());
  return result;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet', 552);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$1(val$it){
  this.val$it2 = val$it;
}

defineClass(553, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1);
_.next_1 = function next_10(){
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(castTo(this.val$it2.next_1(), 46));
}
;
_.hasNext_0 = function hasNext_9(){
  return this.val$it2.hasNext_0();
}
;
_.remove_3 = function remove_39(){
  throw toJs(new UnsupportedOperationException);
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/1', 553);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(entry){
  this.entry = entry;
}

defineClass(326, 1, {46:1}, Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry);
_.equals_0 = function equals_35(o){
  return this.entry.equals_0(o);
}
;
_.getKey = function getKey_0(){
  return this.entry.getKey();
}
;
_.getValue_0 = function getValue_3(){
  return this.entry.getValue_0();
}
;
_.hashCode_0 = function hashCode_34(){
  return this.entry.hashCode_0();
}
;
_.setValue = function setValue_0(value_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.toString_0 = function toString_57(){
  return toString_36(this.entry);
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry', 326);
function Collections$UnmodifiableRandomAccessList(list){
  Collections$UnmodifiableList.call(this, list);
}

defineClass(327, 262, {23:1, 52:1, 41:1, 222:1}, Collections$UnmodifiableRandomAccessList);
var Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableRandomAccessList', 327);
function $clinit_Comparators(){
  $clinit_Comparators = emptyMethod;
  INTERNAL_NATURAL_ORDER = new Comparators$NaturalOrderComparator;
}

var INTERNAL_NATURAL_ORDER;
function $compare_4(a, b){
  return checkCriticalNotNull(a) , compareTo_Ljava_lang_Object__I__devirtual$(a, (checkCriticalNotNull(b) , b));
}

function $compare_5(a, b){
  return $compare_4(castTo(a, 9), castTo(b, 9));
}

function Comparators$NaturalOrderComparator(){
}

defineClass(775, 1, $intern_23, Comparators$NaturalOrderComparator);
_.compare = function compare_10(a, b){
  return $compare_5(a, b);
}
;
_.equals_0 = function equals_36(other){
  return this === other;
}
;
var Ljava_util_Comparators$NaturalOrderComparator_2_classLit = createForClass('java.util', 'Comparators/NaturalOrderComparator', 775);
function checkStructuralChange(host, iterator){
  if (iterator.$modCount != host.$modCount) {
    throw toJs(new ConcurrentModificationException);
  }
}

function recordLastKnownStructure(host, iterator){
  iterator.$modCount = host.$modCount;
}

function structureChanged(host){
  var modCount, modCountable;
  modCountable = host;
  modCount = modCountable.$modCount | 0;
  modCountable.$modCount = modCount + 1;
}

function ConcurrentModificationException(){
  RuntimeException.call(this);
}

defineClass(719, 11, $intern_11, ConcurrentModificationException);
var Ljava_util_ConcurrentModificationException_2_classLit = createForClass('java.util', 'ConcurrentModificationException', 719);
function $compareTo_5(this$static, other){
  return compare_9(fromDouble_0(this$static.jsdate.getTime()), fromDouble_0(other.jsdate.getTime()));
}

function $toString_6(this$static){
  var hourOffset, minuteOffset, offset;
  offset = -this$static.jsdate.getTimezoneOffset();
  hourOffset = (offset >= 0?'+':'') + (offset / 60 | 0);
  minuteOffset = padTwo($wnd.Math.abs(offset) % 60);
  return ($clinit_Date$StringData() , DAYS)[this$static.jsdate.getDay()] + ' ' + MONTHS[this$static.jsdate.getMonth()] + ' ' + padTwo(this$static.jsdate.getDate()) + ' ' + padTwo(this$static.jsdate.getHours()) + ':' + padTwo(this$static.jsdate.getMinutes()) + ':' + padTwo(this$static.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this$static.jsdate.getFullYear();
}

function Date_0(){
  this.jsdate = new $wnd.Date;
}

function Date_1(date){
  this.jsdate = new $wnd.Date(toDouble_0(date));
}

function padTwo(number){
  return number < 10?'0' + number:'' + number;
}

defineClass(103, 1, {3:1, 9:1, 103:1}, Date_0, Date_1);
_.compareTo = function compareTo_2(other){
  return $compareTo_5(this, castTo(other, 103));
}
;
_.equals_0 = function equals_37(obj){
  return instanceOf(obj, 103) && eq(fromDouble_0(this.jsdate.getTime()), fromDouble_0(castTo(obj, 103).jsdate.getTime()));
}
;
_.hashCode_0 = function hashCode_35(){
  var time;
  time = fromDouble_0(this.jsdate.getTime());
  return toInt(xor_0(time, shru_0(time, 32)));
}
;
_.toString_0 = function toString_58(){
  return $toString_6(this);
}
;
var Ljava_util_Date_2_classLit = createForClass('java.util', 'Date', 103);
function $clinit_Date$StringData(){
  $clinit_Date$StringData = emptyMethod;
  DAYS = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);
  MONTHS = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_2, 2, 6, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
}

var DAYS, MONTHS;
function EmptyStackException(){
  RuntimeException.call(this);
}

defineClass(972, 11, $intern_11, EmptyStackException);
var Ljava_util_EmptyStackException_2_classLit = createForClass('java.util', 'EmptyStackException', 972);
function $add_14(this$static, o){
  var old;
  old = $put(this$static.map_0, o, this$static);
  return old == null;
}

function $contains_4(this$static, o){
  return $containsKey_0(this$static.map_0, o);
}

function $remove_16(this$static, o){
  return $remove_2(this$static.map_0, o) != null;
}

function HashSet(){
  this.map_0 = new HashMap;
}

function HashSet_0(c){
  this.map_0 = new HashMap_0($size(c.this$01));
  $addAll_0(this, c);
}

defineClass(116, $intern_113, $intern_117, HashSet, HashSet_0);
_.add_0 = function add_16(o){
  return $add_14(this, o);
}
;
_.contains_0 = function contains_12(o){
  return $contains_4(this, o);
}
;
_.isEmpty = function isEmpty_6(){
  return $size(this.map_0) == 0;
}
;
_.iterator = function iterator_17(){
  var outerIter;
  return outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$1(this.map_0)).this$01)).this$01) , new AbstractMap$1$1(outerIter);
}
;
_.size_1 = function size_18(){
  return $size(this.map_0);
}
;
var Ljava_util_HashSet_2_classLit = createForClass('java.util', 'HashSet', 116);
function $findEntryInChain(this$static, key, chain){
  var entry, entry$index, entry$max;
  for (entry$index = 0 , entry$max = chain.length; entry$index < entry$max; ++entry$index) {
    entry = chain[entry$index];
    if (this$static.host.equals_1(key, entry.getKey())) {
      return entry;
    }
  }
  return null;
}

function $getChainOrEmpty(this$static, hashCode){
  var chain;
  chain = this$static.backingMap.get(hashCode);
  return chain == null?new Array:chain;
}

function $getEntry(this$static, key){
  return $findEntryInChain(this$static, key, $getChainOrEmpty(this$static, key == null?0:this$static.host.getHashCode(key)));
}

function $put_1(this$static, key, value_0){
  var chain, chain0, entry, hashCode;
  hashCode = key == null?0:this$static.host.getHashCode(key);
  chain0 = (chain = this$static.backingMap.get(hashCode) , chain == null?new Array:chain);
  if (chain0.length == 0) {
    this$static.backingMap.set(hashCode, chain0);
  }
   else {
    entry = $findEntryInChain(this$static, key, chain0);
    if (entry) {
      return entry.setValue(value_0);
    }
  }
  setCheck(chain0, chain0.length, new AbstractMap$SimpleEntry(key, value_0));
  ++this$static.size_0;
  structureChanged(this$static.host);
  return null;
}

function $remove_17(this$static, key){
  var chain, chain0, entry, hashCode, i;
  hashCode = key == null?0:this$static.host.getHashCode(key);
  chain0 = (chain = this$static.backingMap.get(hashCode) , chain == null?new Array:chain);
  for (i = 0; i < chain0.length; i++) {
    entry = chain0[i];
    if (this$static.host.equals_1(key, entry.getKey())) {
      if (chain0.length == 1) {
        chain0.length = 0;
        $delete(this$static.backingMap, hashCode);
      }
       else {
        chain0.splice(i, 1);
      }
      --this$static.size_0;
      structureChanged(this$static.host);
      return entry.getValue_0();
    }
  }
  return null;
}

function InternalHashCodeMap(host){
  this.backingMap = newJsMap();
  this.host = host;
}

defineClass(564, 1, $intern_107, InternalHashCodeMap);
_.iterator = function iterator_18(){
  return new InternalHashCodeMap$1(this);
}
;
_.size_0 = 0;
var Ljava_util_InternalHashCodeMap_2_classLit = createForClass('java.util', 'InternalHashCodeMap', 564);
function InternalHashCodeMap$1(this$0){
  this.this$01 = this$0;
  this.chains = this.this$01.backingMap.entries();
  this.chain = new Array;
}

defineClass(330, 1, {}, InternalHashCodeMap$1);
_.next_1 = function next_11(){
  return this.lastEntry = this.chain[this.itemIndex++] , this.lastEntry;
}
;
_.hasNext_0 = function hasNext_10(){
  var current;
  if (this.itemIndex < this.chain.length) {
    return true;
  }
  current = this.chains.next();
  if (!current.done) {
    this.chain = current.value[1];
    this.itemIndex = 0;
    return true;
  }
  return false;
}
;
_.remove_3 = function remove_41(){
  $remove_17(this.this$01, this.lastEntry.getKey());
  this.itemIndex != 0 && --this.itemIndex;
}
;
_.itemIndex = 0;
_.lastEntry = null;
var Ljava_util_InternalHashCodeMap$1_2_classLit = createForClass('java.util', 'InternalHashCodeMap/1', 330);
function $delete(this$static, key){
  var fn;
  fn = this$static['delete'];
  fn.call(this$static, key);
}

function $delete_0(this$static, key){
  var fn;
  fn = this$static['delete'];
  fn.call(this$static, key);
}

function $clinit_InternalJsMapFactory(){
  $clinit_InternalJsMapFactory = emptyMethod;
  jsMapCtor = getJsMapConstructor();
}

function canHandleObjectCreateAndProto(){
  if (!Object.create || !Object.getOwnPropertyNames) {
    return false;
  }
  var protoField = '__proto__';
  var map_0 = Object.create(null);
  if (map_0[protoField] !== undefined) {
    return false;
  }
  var keys_0 = Object.getOwnPropertyNames(map_0);
  if (keys_0.length != 0) {
    return false;
  }
  map_0[protoField] = 42;
  if (map_0[protoField] !== 42) {
    return false;
  }
  if (Object.getOwnPropertyNames(map_0).length == 0) {
    return false;
  }
  return true;
}

function getJsMapConstructor(){
  function isCorrectIterationProtocol(){
    try {
      return (new Map).entries().next().done;
    }
     catch (e) {
      return false;
    }
  }

  if (typeof Map === 'function' && Map.prototype.entries && isCorrectIterationProtocol()) {
    return Map;
  }
   else {
    return getJsMapPolyFill();
  }
}

function getJsMapPolyFill(){
  function Stringmap(){
    this.obj = this.createObject();
  }

  ;
  Stringmap.prototype.createObject = function(key){
    return Object.create(null);
  }
  ;
  Stringmap.prototype.get = function(key){
    return this.obj[key];
  }
  ;
  Stringmap.prototype.set = function(key, value_0){
    this.obj[key] = value_0;
  }
  ;
  Stringmap.prototype['delete'] = function(key){
    delete this.obj[key];
  }
  ;
  Stringmap.prototype.keys = function(){
    return Object.getOwnPropertyNames(this.obj);
  }
  ;
  Stringmap.prototype.entries = function(){
    var keys_0 = this.keys();
    var map_0 = this;
    var nextIndex = 0;
    return {next:function(){
      if (nextIndex >= keys_0.length)
        return {done:true};
      var key = keys_0[nextIndex++];
      return {value:[key, map_0.get(key)], done:false};
    }
    };
  }
  ;
  if (!canHandleObjectCreateAndProto()) {
    Stringmap.prototype.createObject = function(){
      return {};
    }
    ;
    Stringmap.prototype.get = function(key){
      return this.obj[':' + key];
    }
    ;
    Stringmap.prototype.set = function(key, value_0){
      this.obj[':' + key] = value_0;
    }
    ;
    Stringmap.prototype['delete'] = function(key){
      delete this.obj[':' + key];
    }
    ;
    Stringmap.prototype.keys = function(){
      var result = [];
      for (var key in this.obj) {
        key.charCodeAt(0) == 58 && result.push(key.substring(1));
      }
      return result;
    }
    ;
  }
  return Stringmap;
}

function newJsMap(){
  $clinit_InternalJsMapFactory();
  return new jsMapCtor;
}

var jsMapCtor;
function $contains_5(this$static, key){
  return !(this$static.backingMap.get(key) === undefined);
}

function $get_9(this$static, key){
  return this$static.backingMap.get(key);
}

function $put_2(this$static, key, value_0){
  var oldValue;
  oldValue = this$static.backingMap.get(key);
  this$static.backingMap.set(key, value_0 === undefined?null:value_0);
  if (oldValue === undefined) {
    ++this$static.size_0;
    structureChanged(this$static.host);
  }
   else {
    ++this$static.valueMod;
  }
  return oldValue;
}

function $remove_18(this$static, key){
  var value_0;
  value_0 = this$static.backingMap.get(key);
  if (value_0 === undefined) {
    ++this$static.valueMod;
  }
   else {
    $delete_0(this$static.backingMap, key);
    --this$static.size_0;
    structureChanged(this$static.host);
  }
  return value_0;
}

function InternalStringMap(host){
  this.backingMap = newJsMap();
  this.host = host;
}

defineClass(555, 1, $intern_107, InternalStringMap);
_.iterator = function iterator_19(){
  return new InternalStringMap$1(this);
}
;
_.size_0 = 0;
_.valueMod = 0;
var Ljava_util_InternalStringMap_2_classLit = createForClass('java.util', 'InternalStringMap', 555);
function InternalStringMap$1(this$0){
  this.this$01 = this$0;
  this.entries_0 = this.this$01.backingMap.entries();
  this.current = this.entries_0.next();
}

defineClass(329, 1, {}, InternalStringMap$1);
_.next_1 = function next_12(){
  return this.last = this.current , this.current = this.entries_0.next() , new InternalStringMap$2(this.this$01, this.last, this.this$01.valueMod);
}
;
_.hasNext_0 = function hasNext_11(){
  return !this.current.done;
}
;
_.remove_3 = function remove_42(){
  $remove_18(this.this$01, this.last.value[0]);
}
;
var Ljava_util_InternalStringMap$1_2_classLit = createForClass('java.util', 'InternalStringMap/1', 329);
function $getValue_1(this$static){
  if (this$static.this$01.valueMod != this$static.val$lastValueMod3) {
    return $get_9(this$static.this$01, this$static.val$entry2.value[0]);
  }
  return this$static.val$entry2.value[1];
}

function InternalStringMap$2(this$0, val$entry, val$lastValueMod){
  this.this$01 = this$0;
  this.val$entry2 = val$entry;
  this.val$lastValueMod3 = val$lastValueMod;
}

defineClass(556, 1041, {46:1}, InternalStringMap$2);
_.getKey = function getKey_1(){
  return this.val$entry2.value[0];
}
;
_.getValue_0 = function getValue_4(){
  return $getValue_1(this);
}
;
_.setValue = function setValue_1(object){
  return $put_2(this.this$01, this.val$entry2.value[0], object);
}
;
_.val$lastValueMod3 = 0;
var Ljava_util_InternalStringMap$2_2_classLit = createForClass('java.util', 'InternalStringMap/2', 556);
function $addToEnd(this$static){
  var tail;
  tail = this$static.this$01.head_0.prev;
  this$static.prev = tail;
  this$static.next_0 = this$static.this$01.head_0;
  tail.next_0 = this$static.this$01.head_0.prev = this$static;
}

function $remove_19(this$static){
  this$static.next_0.prev = this$static.prev;
  this$static.prev.next_0 = this$static.next_0;
  this$static.next_0 = this$static.prev = null;
}

function LinkedHashMap$ChainEntry(this$0){
  LinkedHashMap$ChainEntry_0.call(this, this$0, null, null);
}

function LinkedHashMap$ChainEntry_0(this$0, key, value_0){
  this.this$01 = this$0;
  AbstractMap$SimpleEntry.call(this, key, value_0);
}

defineClass(167, 156, {204:1, 156:1, 167:1, 46:1}, LinkedHashMap$ChainEntry, LinkedHashMap$ChainEntry_0);
var Ljava_util_LinkedHashMap$ChainEntry_2_classLit = createForClass('java.util', 'LinkedHashMap/ChainEntry', 167);
function $contains_6(this$static, o){
  if (instanceOf(o, 46)) {
    return $containsEntry(this$static.this$01, castTo(o, 46));
  }
  return false;
}

function LinkedHashMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(296, $intern_113, $intern_114, LinkedHashMap$EntrySet);
_.contains_0 = function contains_13(o){
  return $contains_6(this, o);
}
;
_.iterator = function iterator_20(){
  return new LinkedHashMap$EntrySet$EntryIterator(this);
}
;
_.size_1 = function size_19(){
  return $size(this.this$01.map_0);
}
;
var Ljava_util_LinkedHashMap$EntrySet_2_classLit = createForClass('java.util', 'LinkedHashMap/EntrySet', 296);
function $next_4(this$static){
  checkStructuralChange(this$static.this$11.this$01.map_0, this$static);
  checkCriticalElement(this$static.next_0 != this$static.this$11.this$01.head_0);
  this$static.last = this$static.next_0;
  this$static.next_0 = this$static.next_0.next_0;
  return this$static.last;
}

function LinkedHashMap$EntrySet$EntryIterator(this$1){
  this.this$11 = this$1;
  this.next_0 = this$1.this$01.head_0.next_0;
  recordLastKnownStructure(this$1.this$01.map_0, this);
}

defineClass(297, 1, {}, LinkedHashMap$EntrySet$EntryIterator);
_.next_1 = function next_13(){
  return $next_4(this);
}
;
_.hasNext_0 = function hasNext_12(){
  return this.next_0 != this.this$11.this$01.head_0;
}
;
_.remove_3 = function remove_44(){
  checkCriticalState(!!this.last);
  checkStructuralChange(this.this$11.this$01.map_0, this);
  $remove_19(this.last);
  $remove_2(this.this$11.this$01.map_0, this.last.key);
  recordLastKnownStructure(this.this$11.this$01.map_0, this);
  this.last = null;
}
;
var Ljava_util_LinkedHashMap$EntrySet$EntryIterator_2_classLit = createForClass('java.util', 'LinkedHashMap/EntrySet/EntryIterator', 297);
function $add_15(this$static, o){
  $addNode(this$static, o, this$static.tail.prev, this$static.tail);
  return true;
}

function $addFirst(this$static, o){
  $addNode(this$static, o, this$static.header, this$static.header.next_0);
}

function $addLast(this$static, o){
  $addNode(this$static, o, this$static.tail.prev, this$static.tail);
}

function $addNode(this$static, o, prev, next){
  var node;
  node = new LinkedList$Node;
  node.value_0 = o;
  node.prev = prev;
  node.next_0 = next;
  next.prev = prev.next_0 = node;
  ++this$static.size_0;
}

function $getFirst(this$static){
  checkCriticalElement(this$static.size_0 != 0);
  return this$static.header.next_0.value_0;
}

function $getLast(this$static){
  checkCriticalElement(this$static.size_0 != 0);
  return this$static.tail.prev.value_0;
}

function $listIterator(this$static, index_0){
  var i, node;
  checkCriticalPositionIndex(index_0, this$static.size_0);
  if (index_0 >= this$static.size_0 >> 1) {
    node = this$static.tail;
    for (i = this$static.size_0; i > index_0; --i) {
      node = node.prev;
    }
  }
   else {
    node = this$static.header.next_0;
    for (i = 0; i < index_0; ++i) {
      node = node.next_0;
    }
  }
  return new LinkedList$ListIteratorImpl(this$static, index_0, node);
}

function $peek_0(this$static){
  return this$static.size_0 == 0?null:(checkCriticalElement(this$static.size_0 != 0) , this$static.header.next_0.value_0);
}

function $poll(this$static){
  return this$static.size_0 == 0?null:(checkCriticalElement(this$static.size_0 != 0) , $removeNode(this$static, this$static.header.next_0));
}

function $pop(this$static){
  return checkCriticalElement(this$static.size_0 != 0) , $removeNode(this$static, this$static.header.next_0);
}

function $push_0(this$static, e){
  $addNode(this$static, e, this$static.header, this$static.header.next_0);
}

function $removeNode(this$static, node){
  var oldValue;
  oldValue = node.value_0;
  node.next_0.prev = node.prev;
  node.prev.next_0 = node.next_0;
  node.next_0 = node.prev = null;
  node.value_0 = null;
  --this$static.size_0;
  return oldValue;
}

function LinkedList(){
  this.header = new LinkedList$Node;
  this.tail = new LinkedList$Node;
  this.header.next_0 = this.tail;
  this.tail.prev = this.header;
  this.header.prev = this.tail.next_0 = null;
  this.size_0 = 0;
}

defineClass(99, 1068, {3:1, 23:1, 52:1, 41:1}, LinkedList);
_.add_0 = function add_17(o){
  return $add_15(this, o);
}
;
_.listIterator_0 = function listIterator_6(index_0){
  return $listIterator(this, index_0);
}
;
_.size_1 = function size_20(){
  return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_LinkedList_2_classLit = createForClass('java.util', 'LinkedList', 99);
function $next_5(this$static){
  checkCriticalElement(this$static.currentNode != this$static.this$01.tail);
  this$static.lastNode = this$static.currentNode;
  this$static.currentNode = this$static.currentNode.next_0;
  ++this$static.currentIndex;
  return this$static.lastNode.value_0;
}

function $remove_20(this$static){
  var nextNode;
  checkCriticalState(!!this$static.lastNode);
  nextNode = this$static.lastNode.next_0;
  $removeNode(this$static.this$01, this$static.lastNode);
  this$static.currentNode == this$static.lastNode?(this$static.currentNode = nextNode):--this$static.currentIndex;
  this$static.lastNode = null;
}

function LinkedList$ListIteratorImpl(this$0, index_0, startNode){
  this.this$01 = this$0;
  this.currentNode = startNode;
  this.currentIndex = index_0;
}

defineClass(960, 1, {}, LinkedList$ListIteratorImpl);
_.add_2 = function add_18(o){
  $addNode(this.this$01, o, this.currentNode.prev, this.currentNode);
  ++this.currentIndex;
  this.lastNode = null;
}
;
_.hasNext_0 = function hasNext_13(){
  return this.currentNode != this.this$01.tail;
}
;
_.hasPrevious = function hasPrevious_2(){
  return this.currentNode.prev != this.this$01.header;
}
;
_.next_1 = function next_14(){
  return $next_5(this);
}
;
_.previous = function previous_3(){
  checkCriticalElement(this.currentNode.prev != this.this$01.header);
  this.lastNode = this.currentNode = this.currentNode.prev;
  --this.currentIndex;
  return this.lastNode.value_0;
}
;
_.remove_3 = function remove_45(){
  $remove_20(this);
}
;
_.currentIndex = 0;
_.lastNode = null;
var Ljava_util_LinkedList$ListIteratorImpl_2_classLit = createForClass('java.util', 'LinkedList/ListIteratorImpl', 960);
function LinkedList$Node(){
}

defineClass(293, 1, {}, LinkedList$Node);
var Ljava_util_LinkedList$Node_2_classLit = createForClass('java.util', 'LinkedList/Node', 293);
function $clinit_Locale(){
  $clinit_Locale = emptyMethod;
  ROOT = new Locale$1;
  ENGLISH = new Locale$2;
  defaultLocale = new Locale$4;
}

defineClass(1026, 1, {});
var ENGLISH, ROOT, defaultLocale;
var Ljava_util_Locale_2_classLit = createForClass('java.util', 'Locale', 1026);
function Locale$1(){
}

defineClass(424, 1026, {}, Locale$1);
_.toString_0 = function toString_59(){
  return '';
}
;
var Ljava_util_Locale$1_2_classLit = createForClass('java.util', 'Locale/1', 424);
function Locale$2(){
}

defineClass(425, 1026, {}, Locale$2);
_.toString_0 = function toString_60(){
  return 'en';
}
;
var Ljava_util_Locale$2_2_classLit = createForClass('java.util', 'Locale/2', 425);
function Locale$4(){
}

defineClass(426, 1026, {}, Locale$4);
_.toString_0 = function toString_61(){
  return 'unknown';
}
;
var Ljava_util_Locale$4_2_classLit = createForClass('java.util', 'Locale/4', 426);
function NoSuchElementException(){
  RuntimeException.call(this);
}

defineClass(112, 11, {3:1, 14:1, 11:1, 17:1, 112:1}, NoSuchElementException);
var Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util', 'NoSuchElementException', 112);
function equals_38(a, b){
  return maskUndefined(a) === maskUndefined(b) || a != null && equals_Ljava_lang_Object__Z__devirtual$(a, b);
}

function hashCode_36(o){
  return o != null?hashCode__I__devirtual$(o):0;
}

function $mergeHeaps(this$static, node){
  var heapSize, smallestChild, value_0, leftChild, rightChild, smallestChild_0;
  heapSize = this$static.heap.array.length;
  value_0 = $get_7(this$static.heap, node);
  while (node * 2 + 1 < heapSize) {
    smallestChild = (leftChild = 2 * node + 1 , rightChild = leftChild + 1 , smallestChild_0 = leftChild , rightChild < heapSize && $compare_1($get_7(this$static.heap, rightChild), $get_7(this$static.heap, leftChild)) < 0 && (smallestChild_0 = rightChild) , smallestChild_0);
    if ($compare_1(value_0, $get_7(this$static.heap, smallestChild)) < 0) {
      break;
    }
    $set_5(this$static.heap, node, $get_7(this$static.heap, smallestChild));
    node = smallestChild;
  }
  $set_5(this$static.heap, node, value_0);
}

function $offer(this$static, e){
  var childNode, node;
  checkCriticalNotNull(e);
  node = this$static.heap.array.length;
  $add_13(this$static.heap, e);
  while (node > 0) {
    childNode = node;
    node = (node - 1) / 2 | 0;
    if ($compare_1($get_7(this$static.heap, node), e) <= 0) {
      $set_5(this$static.heap, childNode, e);
      return true;
    }
    $set_5(this$static.heap, childNode, $get_7(this$static.heap, node));
  }
  $set_5(this$static.heap, node, e);
  return true;
}

function $removeAtIndex(this$static, index_0){
  var lastValue;
  lastValue = $remove_12(this$static.heap, this$static.heap.array.length - 1);
  if (index_0 < this$static.heap.array.length) {
    $set_5(this$static.heap, index_0, lastValue);
    $mergeHeaps(this$static, index_0);
  }
}

function PriorityQueue(cmp){
  this.heap = new ArrayList_0(5);
  this.cmp = ($clinit_Comparators() , cmp);
}

defineClass(985, 1069, $intern_112, PriorityQueue);
_.contains_0 = function contains_14(o){
  return (o == null?-1:$indexOf_2(this.heap, o, 0)) != -1;
}
;
_.iterator = function iterator_21(){
  return new PriorityQueue$1(this);
}
;
_.size_1 = function size_21(){
  return this.heap.array.length;
}
;
_.toArray = function toArray_11(){
  return $toArray_0(this.heap);
}
;
_.toArray_0 = function toArray_12(a){
  return $toArray_1(this.heap, a);
}
;
var Ljava_util_PriorityQueue_2_classLit = createForClass('java.util', 'PriorityQueue', 985);
function PriorityQueue$1(this$0){
  this.this$01 = this$0;
}

defineClass(986, 1, {}, PriorityQueue$1);
_.hasNext_0 = function hasNext_14(){
  return this.i < this.this$01.heap.array.length;
}
;
_.next_1 = function next_15(){
  checkCriticalElement(this.i < this.this$01.heap.array.length);
  this.last = this.i++;
  return $get_7(this.this$01.heap, this.last);
}
;
_.remove_3 = function remove_47(){
  checkCriticalState(this.last != -1);
  $removeAtIndex(this.this$01, this.i = this.last);
  this.last = -1;
}
;
_.i = 0;
_.last = -1;
var Ljava_util_PriorityQueue$1_2_classLit = createForClass('java.util', 'PriorityQueue/1', 986);
function $add_16(this$static, o){
  return $add_13(this$static.arrayList, o);
}

function $toArray_3(this$static, a){
  return $toArray_1(this$static.arrayList, a);
}

function Vector(){
  this.arrayList = new ArrayList;
}

function checkArrayElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new ArrayIndexOutOfBoundsException);
  }
}

defineClass(341, 1032, $intern_116, Vector);
_.add_1 = function add_19(index_0, o){
  checkArrayElementIndex(index_0, this.arrayList.array.length + 1);
  $add_12(this.arrayList, index_0, o);
}
;
_.add_0 = function add_20(o){
  return $add_16(this, o);
}
;
_.contains_0 = function contains_15(elem){
  return $indexOf_2(this.arrayList, elem, 0) != -1;
}
;
_.get_0 = function get_16(index_0){
  checkArrayElementIndex(index_0, this.arrayList.array.length);
  return $get_7(this.arrayList, index_0);
}
;
_.isEmpty = function isEmpty_7(){
  return this.arrayList.array.length == 0;
}
;
_.iterator = function iterator_22(){
  return new ArrayList$1(this.arrayList);
}
;
_.remove = function remove_48(index_0){
  return checkArrayElementIndex(index_0, this.arrayList.array.length) , $remove_12(this.arrayList, index_0);
}
;
_.set_0 = function set_8(index_0, elem){
  checkArrayElementIndex(index_0, this.arrayList.array.length);
  return $set_5(this.arrayList, index_0, elem);
}
;
_.size_1 = function size_22(){
  return this.arrayList.array.length;
}
;
_.subList = function subList_2(fromIndex, toIndex){
  return new AbstractList$SubList(this.arrayList, fromIndex, toIndex);
}
;
_.toArray = function toArray_13(){
  return $toArray_0(this.arrayList);
}
;
_.toArray_0 = function toArray_14(a){
  return $toArray_3(this, a);
}
;
_.toString_0 = function toString_62(){
  return $toString_5(this.arrayList);
}
;
var Ljava_util_Vector_2_classLit = createForClass('java.util', 'Vector', 341);
function $pop_0(this$static){
  var sz;
  sz = this$static.arrayList.array.length;
  if (sz > 0) {
    return checkArrayElementIndex(sz - 1, this$static.arrayList.array.length) , $remove_12(this$static.arrayList, sz - 1);
  }
   else {
    throw toJs(new EmptyStackException);
  }
}

function Stack(){
  Vector.call(this);
}

defineClass(299, 341, {3:1, 23:1, 52:1, 41:1, 222:1, 299:1}, Stack);
var Ljava_util_Stack_2_classLit = createForClass('java.util', 'Stack', 299);
function $add_17(this$static, newElement){
  !this$static.builder?(this$static.builder = new StringBuilder_1(this$static.prefix)):$append_5(this$static.builder, this$static.delimiter);
  $append_3(this$static.builder, newElement);
  return this$static;
}

function StringJoiner(prefix, suffix){
  this.delimiter = ', ';
  this.prefix = prefix;
  this.suffix = suffix;
  this.emptyValue = this.prefix + ('' + this.suffix);
}

defineClass(313, 1, {}, StringJoiner);
_.toString_0 = function toString_63(){
  return !this.builder?this.emptyValue:this.suffix.length == 0?this.builder.string:this.builder.string + ('' + this.suffix);
}
;
var Ljava_util_StringJoiner_2_classLit = createForClass('java.util', 'StringJoiner', 313);
function $getEntry_0(this$static, key){
  var c, childNum, tree;
  tree = this$static.root;
  while (tree) {
    c = $compare_5(key, tree.key);
    if (c == 0) {
      return tree;
    }
    childNum = c < 0?0:1;
    tree = tree.child[childNum];
  }
  return null;
}

function $getFirstEntry(this$static){
  var nextNode, node;
  if (!this$static.root) {
    return null;
  }
  node = this$static.root;
  while (nextNode = node.child[0]) {
    node = nextNode;
  }
  return node;
}

function $getLastEntry(this$static){
  var nextNode, node;
  if (!this$static.root) {
    return null;
  }
  node = this$static.root;
  while (nextNode = node.child[1]) {
    node = nextNode;
  }
  return node;
}

function $inOrderAdd(this$static, list, type_0, current, fromKey, fromInclusive, toKey, toInclusive){
  var leftNode, rightNode;
  if (!current) {
    return;
  }
  leftNode = current.child[0];
  !!leftNode && $inOrderAdd(this$static, list, type_0, leftNode, fromKey, fromInclusive, toKey, toInclusive);
  $inRange(this$static, type_0, current.key, fromKey, fromInclusive, toKey, toInclusive) && list.add_0(current);
  rightNode = current.child[1];
  !!rightNode && $inOrderAdd(this$static, list, type_0, rightNode, fromKey, fromInclusive, toKey, toInclusive);
}

function $inRange(this$static, type_0, key, fromKey, fromInclusive, toKey, toInclusive){
  var compare, compare0;
  if (type_0.fromKeyValid() && (compare0 = $compare_5(key, fromKey) , compare0 < 0 || !fromInclusive && compare0 == 0)) {
    return false;
  }
  if (type_0.toKeyValid() && (compare = $compare_5(key, toKey) , compare > 0 || !toInclusive && compare == 0)) {
    return false;
  }
  return true;
}

function $insert_3(this$static, tree, newNode, state){
  var c, childNum;
  if (!tree) {
    return newNode;
  }
   else {
    c = $compare_5(newNode.key, tree.key);
    if (c == 0) {
      state.value_0 = $setValue_1(tree, newNode.value_0);
      state.found = true;
      return tree;
    }
    childNum = c < 0?0:1;
    tree.child[childNum] = $insert_3(this$static, tree.child[childNum], newNode, state);
    if ($isRed(tree.child[childNum])) {
      if ($isRed(tree.child[1 - childNum])) {
        tree.isRed = true;
        tree.child[0].isRed = false;
        tree.child[1].isRed = false;
      }
       else {
        $isRed(tree.child[childNum].child[childNum])?(tree = $rotateSingle(tree, 1 - childNum)):$isRed(tree.child[childNum].child[1 - childNum]) && (tree = $rotateDouble(tree, 1 - childNum));
      }
    }
  }
  return tree;
}

function $isRed(node){
  return !!node && node.isRed;
}

function $put_3(this$static, key, value_0){
  var node, state;
  node = new TreeMap$Node(key, value_0);
  state = new TreeMap$State;
  this$static.root = $insert_3(this$static, this$static.root, node, state);
  state.found || ++this$static.size_0;
  this$static.root.isRed = false;
  return state.value_0;
}

function $removeEntry(this$static, entry){
  var state;
  state = new TreeMap$State;
  state.matchValue = true;
  state.value_0 = entry.getValue_0();
  return $removeWithState(this$static, entry.getKey(), state);
}

function $removeWithState(this$static, key, state){
  var c, dir_0, dir2, found, grandparent, head, last, newNode, node, parent_0, sibling;
  if (!this$static.root) {
    return false;
  }
  found = null;
  parent_0 = null;
  head = new TreeMap$Node(null, null);
  dir_0 = 1;
  head.child[1] = this$static.root;
  node = head;
  while (node.child[dir_0]) {
    last = dir_0;
    grandparent = parent_0;
    parent_0 = node;
    node = node.child[dir_0];
    c = $compare_5(key, node.key);
    dir_0 = c < 0?0:1;
    c == 0 && (!state.matchValue || equals_38(node.value_0, state.value_0)) && (found = node);
    if (!(!!node && node.isRed) && !$isRed(node.child[dir_0])) {
      if ($isRed(node.child[1 - dir_0])) {
        parent_0 = parent_0.child[last] = $rotateSingle(node, dir_0);
      }
       else if (!$isRed(node.child[1 - dir_0])) {
        sibling = parent_0.child[1 - last];
        if (sibling) {
          if (!$isRed(sibling.child[1 - last]) && !$isRed(sibling.child[last])) {
            parent_0.isRed = false;
            sibling.isRed = true;
            node.isRed = true;
          }
           else {
            dir2 = grandparent.child[1] == parent_0?1:0;
            $isRed(sibling.child[last])?(grandparent.child[dir2] = $rotateDouble(parent_0, last)):$isRed(sibling.child[1 - last]) && (grandparent.child[dir2] = $rotateSingle(parent_0, last));
            node.isRed = grandparent.child[dir2].isRed = true;
            grandparent.child[dir2].child[0].isRed = false;
            grandparent.child[dir2].child[1].isRed = false;
          }
        }
      }
    }
  }
  if (found) {
    state.found = true;
    state.value_0 = found.value_0;
    if (node != found) {
      newNode = new TreeMap$Node(node.key, node.value_0);
      $replaceNode_0(this$static, head, found, newNode);
      parent_0 == found && (parent_0 = newNode);
    }
    parent_0.child[parent_0.child[1] == node?1:0] = node.child[!node.child[0]?1:0];
    --this$static.size_0;
  }
  this$static.root = head.child[1];
  !!this$static.root && (this$static.root.isRed = false);
  return state.found;
}

function $replaceNode_0(this$static, head, node, newNode){
  var direction, parent_0;
  parent_0 = head;
  direction = parent_0.key == null || $compare_5(node.key, parent_0.key) > 0?1:0;
  while (parent_0.child[direction] != node) {
    parent_0 = parent_0.child[direction];
    direction = $compare_5(node.key, parent_0.key) > 0?1:0;
  }
  parent_0.child[direction] = newNode;
  newNode.isRed = node.isRed;
  newNode.child[0] = node.child[0];
  newNode.child[1] = node.child[1];
  node.child[0] = null;
  node.child[1] = null;
}

function $rotateDouble(tree, rotateDirection){
  var otherChildDir;
  otherChildDir = 1 - rotateDirection;
  tree.child[otherChildDir] = $rotateSingle(tree.child[otherChildDir], otherChildDir);
  return $rotateSingle(tree, rotateDirection);
}

function $rotateSingle(tree, rotateDirection){
  var otherChildDir, save;
  otherChildDir = 1 - rotateDirection;
  save = tree.child[otherChildDir];
  tree.child[otherChildDir] = save.child[rotateDirection];
  save.child[rotateDirection] = tree;
  tree.isRed = true;
  save.isRed = false;
  return save;
}

function TreeMap(){
  this.root = null;
  this.cmp = ($clinit_Comparators() , $clinit_Comparators() , INTERNAL_NATURAL_ORDER);
}

defineClass(373, 1070, $intern_88, TreeMap);
_.entrySet_0 = function entrySet_4(){
  return new TreeMap$EntrySet(this);
}
;
_.put = function put_3(key, value_0){
  return $put_3(this, key, value_0);
}
;
_.size_1 = function size_23(){
  return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_TreeMap_2_classLit = createForClass('java.util', 'TreeMap', 373);
function $next_6(this$static){
  return this$static.last = castTo($next_2(this$static.iter), 46);
}

function $remove_22(this$static){
  $remove_11(this$static.iter);
  $removeEntry(this$static.this$01, this$static.last);
  this$static.last = null;
}

function TreeMap$EntryIterator(this$0){
  TreeMap$EntryIterator_0.call(this, this$0, ($clinit_TreeMap$SubMapType() , All));
}

function TreeMap$EntryIterator_0(this$0, type_0){
  var list;
  this.this$01 = this$0;
  list = new ArrayList;
  $inOrderAdd(this$0, list, type_0, this$0.root, null, false, null, false);
  this.iter = new AbstractList$ListIteratorImpl(list, 0);
}

defineClass(150, 1, {}, TreeMap$EntryIterator);
_.next_1 = function next_16(){
  return $next_6(this);
}
;
_.hasNext_0 = function hasNext_15(){
  return $hasNext(this.iter);
}
;
_.remove_3 = function remove_50(){
  $remove_22(this);
}
;
var Ljava_util_TreeMap$EntryIterator_2_classLit = createForClass('java.util', 'TreeMap/EntryIterator', 150);
function TreeMap$EntrySet(this$0){
  AbstractNavigableMap$EntrySet.call(this, this$0);
}

defineClass(171, 374, $intern_114, TreeMap$EntrySet);
var Ljava_util_TreeMap$EntrySet_2_classLit = createForClass('java.util', 'TreeMap/EntrySet', 171);
function TreeMap$Node(key, value_0){
  AbstractMap$SimpleEntry.call(this, key, value_0);
  this.child = initUnidimensionalArray(Ljava_util_TreeMap$Node_2_classLit, $intern_6, 195, 2, 0, 1);
  this.isRed = true;
}

defineClass(195, 156, {204:1, 156:1, 46:1, 195:1}, TreeMap$Node);
_.isRed = false;
var Ljava_util_TreeMap$Node_2_classLit = createForClass('java.util', 'TreeMap/Node', 195);
function TreeMap$State(){
}

defineClass(301, 1, {}, TreeMap$State);
_.toString_0 = function toString_64(){
  return 'State: mv=' + this.matchValue + ' value=' + this.value_0 + ' done=' + this.done_0 + ' found=' + this.found;
}
;
_.done_0 = false;
_.found = false;
_.matchValue = false;
var Ljava_util_TreeMap$State_2_classLit = createForClass('java.util', 'TreeMap/State', 301);
function $clinit_TreeMap$SubMapType(){
  $clinit_TreeMap$SubMapType = emptyMethod;
  All = new TreeMap$SubMapType('All', 0);
  Head = new TreeMap$SubMapType$1;
  Range_0 = new TreeMap$SubMapType$2;
  Tail = new TreeMap$SubMapType$3;
}

function TreeMap$SubMapType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_43(){
  $clinit_TreeMap$SubMapType();
  return stampJavaTypeInfo(getClassLiteralForArray(Ljava_util_TreeMap$SubMapType_2_classLit, 1), $intern_5, 135, 0, [All, Head, Range_0, Tail]);
}

defineClass(135, 8, $intern_118, TreeMap$SubMapType);
_.fromKeyValid = function fromKeyValid(){
  return false;
}
;
_.toKeyValid = function toKeyValid(){
  return false;
}
;
var All, Head, Range_0, Tail;
var Ljava_util_TreeMap$SubMapType_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType', 135, values_43);
function TreeMap$SubMapType$1(){
  TreeMap$SubMapType.call(this, 'Head', 1);
}

defineClass(987, 135, $intern_118, TreeMap$SubMapType$1);
_.toKeyValid = function toKeyValid_0(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$1_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/1', 987, null);
function TreeMap$SubMapType$2(){
  TreeMap$SubMapType.call(this, 'Range', 2);
}

defineClass(988, 135, $intern_118, TreeMap$SubMapType$2);
_.fromKeyValid = function fromKeyValid_0(){
  return true;
}
;
_.toKeyValid = function toKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$2_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/2', 988, null);
function TreeMap$SubMapType$3(){
  TreeMap$SubMapType.call(this, 'Tail', 3);
}

defineClass(989, 135, $intern_118, TreeMap$SubMapType$3);
_.fromKeyValid = function fromKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$3_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/3', 989, null);
function $add_18(this$static, o){
  return $put_3(this$static.map_0, o, ($clinit_Boolean() , FALSE)) == null;
}

function TreeSet(){
  this.map_0 = new TreeMap;
}

defineClass(246, $intern_113, $intern_117, TreeSet);
_.add_0 = function add_21(o){
  return $add_18(this, o);
}
;
_.contains_0 = function contains_16(o){
  return $containsKey_2(this.map_0, o);
}
;
_.iterator = function iterator_23(){
  var entryIterator;
  return entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(this.map_0)).map_0)).this$01) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator);
}
;
_.size_1 = function size_24(){
  return this.map_0.size_0;
}
;
var Ljava_util_TreeSet_2_classLit = createForClass('java.util', 'TreeSet', 246);
function $clinit_Level(){
  $clinit_Level = emptyMethod;
  ALL = new Level$LevelAll;
  CONFIG = new Level$LevelConfig;
  FINE = new Level$LevelFine;
  FINER = new Level$LevelFiner;
  FINEST = new Level$LevelFinest;
  INFO = new Level$LevelInfo;
  OFF = new Level$LevelOff;
  SEVERE = new Level$LevelSevere;
  WARNING = new Level$LevelWarning;
}

function parse_0(name_0){
  $clinit_Level();
  var value_0;
  value_0 = $toUpperCase(name_0, ($clinit_Locale() , ROOT));
  switch (value_0) {
    case 'ALL':
      return ALL;
    case 'CONFIG':
      return CONFIG;
    case 'FINE':
      return FINE;
    case 'FINER':
      return FINER;
    case 'FINEST':
      return FINEST;
    case 'INFO':
      return INFO;
    case 'OFF':
      return OFF;
    case 'SEVERE':
      return SEVERE;
    case 'WARNING':
      return WARNING;
    default:throw toJs(new IllegalArgumentException_0('Invalid level "' + name_0 + '"'));
  }
}

defineClass($intern_119, 1, $intern_23);
_.getName = function getName_17(){
  return 'DUMMY';
}
;
_.intValue = function intValue(){
  return -1;
}
;
_.toString_0 = function toString_65(){
  return this.getName();
}
;
var ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, WARNING;
var Ljava_util_logging_Level_2_classLit = createForClass('java.util.logging', 'Level', $intern_119);
function Level$LevelAll(){
}

defineClass(511, $intern_119, $intern_23, Level$LevelAll);
_.getName = function getName_18(){
  return 'ALL';
}
;
_.intValue = function intValue_0(){
  return $intern_12;
}
;
var Ljava_util_logging_Level$LevelAll_2_classLit = createForClass('java.util.logging', 'Level/LevelAll', 511);
function Level$LevelConfig(){
}

defineClass(512, $intern_119, $intern_23, Level$LevelConfig);
_.getName = function getName_19(){
  return 'CONFIG';
}
;
_.intValue = function intValue_1(){
  return 700;
}
;
var Ljava_util_logging_Level$LevelConfig_2_classLit = createForClass('java.util.logging', 'Level/LevelConfig', 512);
function Level$LevelFine(){
}

defineClass(513, $intern_119, $intern_23, Level$LevelFine);
_.getName = function getName_20(){
  return 'FINE';
}
;
_.intValue = function intValue_2(){
  return 500;
}
;
var Ljava_util_logging_Level$LevelFine_2_classLit = createForClass('java.util.logging', 'Level/LevelFine', 513);
function Level$LevelFiner(){
}

defineClass(514, $intern_119, $intern_23, Level$LevelFiner);
_.getName = function getName_21(){
  return 'FINER';
}
;
_.intValue = function intValue_3(){
  return 400;
}
;
var Ljava_util_logging_Level$LevelFiner_2_classLit = createForClass('java.util.logging', 'Level/LevelFiner', 514);
function Level$LevelFinest(){
}

defineClass(515, $intern_119, $intern_23, Level$LevelFinest);
_.getName = function getName_22(){
  return 'FINEST';
}
;
_.intValue = function intValue_4(){
  return 300;
}
;
var Ljava_util_logging_Level$LevelFinest_2_classLit = createForClass('java.util.logging', 'Level/LevelFinest', 515);
function Level$LevelInfo(){
}

defineClass(516, $intern_119, $intern_23, Level$LevelInfo);
_.getName = function getName_23(){
  return 'INFO';
}
;
_.intValue = function intValue_5(){
  return 800;
}
;
var Ljava_util_logging_Level$LevelInfo_2_classLit = createForClass('java.util.logging', 'Level/LevelInfo', 516);
function Level$LevelOff(){
}

defineClass(517, $intern_119, $intern_23, Level$LevelOff);
_.getName = function getName_24(){
  return 'OFF';
}
;
_.intValue = function intValue_6(){
  return $intern_0;
}
;
var Ljava_util_logging_Level$LevelOff_2_classLit = createForClass('java.util.logging', 'Level/LevelOff', 517);
function Level$LevelSevere(){
}

defineClass(518, $intern_119, $intern_23, Level$LevelSevere);
_.getName = function getName_25(){
  return 'SEVERE';
}
;
_.intValue = function intValue_7(){
  return $intern_19;
}
;
var Ljava_util_logging_Level$LevelSevere_2_classLit = createForClass('java.util.logging', 'Level/LevelSevere', 518);
function Level$LevelWarning(){
}

defineClass(519, $intern_119, $intern_23, Level$LevelWarning);
_.getName = function getName_26(){
  return 'WARNING';
}
;
_.intValue = function intValue_8(){
  return 900;
}
;
var Ljava_util_logging_Level$LevelWarning_2_classLit = createForClass('java.util.logging', 'Level/LevelWarning', 519);
function $addLoggerImpl(this$static, logger){
  $putStringValue(this$static.loggerMap, ($clinit_Logger() , LOGGING_OFF)?null:logger.name_0, logger);
}

function $ensureLogger(this$static, name_0){
  var logger, newLogger, name_1, parentName;
  logger = castTo($getStringValue(this$static.loggerMap, name_0), 200);
  if (!logger) {
    newLogger = new Logger(name_0);
    name_1 = ($clinit_Logger() , LOGGING_OFF)?null:newLogger.name_0;
    parentName = $substring_0(name_1, 0, $wnd.Math.max(0, $lastIndexOf(name_1, fromCodePoint(46))));
    $setParent_0(newLogger, $ensureLogger(this$static, parentName));
    $putStringValue(this$static.loggerMap, LOGGING_OFF?null:newLogger.name_0, newLogger);
    return newLogger;
  }
  return logger;
}

function LogManager(){
  this.loggerMap = new HashMap;
}

function getLogManager(){
  var rootLogger;
  if (!singleton_1) {
    singleton_1 = new LogManager;
    rootLogger = new Logger('');
    $setLevel_0(rootLogger, ($clinit_Level() , INFO));
    $addLoggerImpl(singleton_1, rootLogger);
  }
  return singleton_1;
}

defineClass(436, 1, {}, LogManager);
var singleton_1;
var Ljava_util_logging_LogManager_2_classLit = createForClass('java.util.logging', 'LogManager', 436);
function $setLoggerName(this$static, newName){
  this$static.loggerName = newName;
}

function LogRecord(level, msg){
  this.level = level;
  this.msg = msg;
  this.millis_0 = ($clinit_System() , fromDouble_0(Date.now()));
}

defineClass(657, 1, $intern_23, LogRecord);
_.loggerName = '';
_.millis_0 = 0;
_.thrown = null;
var Ljava_util_logging_LogRecord_2_classLit = createForClass('java.util.logging', 'LogRecord', 657);
function $clinit_Logger(){
  $clinit_Logger = emptyMethod;
  LOGGING_OFF = false;
  ALL_ENABLED = true;
  INFO_ENABLED = true;
  WARNING_ENABLED = true;
  SEVERE_ENABLED = true;
}

function $actuallyLog(this$static, record){
  var handler, handler$array, handler$array0, handler$index, handler$index0, handler$max, handler$max0, logger;
  for (handler$array0 = $getHandlers(this$static) , handler$index0 = 0 , handler$max0 = handler$array0.length; handler$index0 < handler$max0; ++handler$index0) {
    handler = handler$array0[handler$index0];
    handler.publish(record);
  }
  logger = !LOGGING_OFF && this$static.useParentHandlers?LOGGING_OFF?null:this$static.parent_0:null;
  while (logger) {
    for (handler$array = $getHandlers(logger) , handler$index = 0 , handler$max = handler$array.length; handler$index < handler$max; ++handler$index) {
      handler = handler$array[handler$index];
      handler.publish(record);
    }
    logger = !LOGGING_OFF && logger.useParentHandlers?LOGGING_OFF?null:logger.parent_0:null;
  }
}

function $addHandler_1(this$static, handler){
  if (LOGGING_OFF) {
    return;
  }
  $add_13(this$static.handlers, handler);
}

function $getEffectiveLevel(this$static){
  var effectiveLevel, logger;
  if (this$static.level) {
    return this$static.level;
  }
  logger = LOGGING_OFF?null:this$static.parent_0;
  while (logger) {
    effectiveLevel = LOGGING_OFF?null:logger.level;
    if (effectiveLevel) {
      return effectiveLevel;
    }
    logger = LOGGING_OFF?null:logger.parent_0;
  }
  return $clinit_Level() , INFO;
}

function $getHandlers(this$static){
  if (LOGGING_OFF) {
    return initUnidimensionalArray(Ljava_util_logging_Handler_2_classLit, $intern_120, 176, 0, 0, 1);
  }
  return castTo($toArray_1(this$static.handlers, initUnidimensionalArray(Ljava_util_logging_Handler_2_classLit, $intern_120, 176, this$static.handlers.array.length, 0, 1)), 381);
}

function $getLevel_0(this$static){
  return LOGGING_OFF?null:this$static.level;
}

function $isLoggable(this$static, messageLevel){
  return ALL_ENABLED?messageLevel.intValue() >= $getEffectiveLevel(this$static).intValue():INFO_ENABLED?messageLevel.intValue() >= ($clinit_Level() , 800):WARNING_ENABLED?messageLevel.intValue() >= ($clinit_Level() , 900):SEVERE_ENABLED && messageLevel.intValue() >= ($clinit_Level() , $intern_19);
}

function $log(this$static, level, msg, thrown){
  var record;
  (ALL_ENABLED?level.intValue() >= $getEffectiveLevel(this$static).intValue():INFO_ENABLED?level.intValue() >= ($clinit_Level() , 800):WARNING_ENABLED?level.intValue() >= ($clinit_Level() , 900):SEVERE_ENABLED && level.intValue() >= ($clinit_Level() , $intern_19)) && (record = new LogRecord(level, msg) , record.thrown = thrown , $setLoggerName(record, LOGGING_OFF?null:this$static.name_0) , $actuallyLog(this$static, record) , undefined);
}

function $setLevel_0(this$static, newLevel){
  if (LOGGING_OFF) {
    return;
  }
  this$static.level = newLevel;
}

function $setParent_0(this$static, newParent){
  if (LOGGING_OFF) {
    return;
  }
  !!newParent && (this$static.parent_0 = newParent);
}

function $setUseParentHandlers(this$static){
  if (LOGGING_OFF) {
    return;
  }
  this$static.useParentHandlers = false;
}

function Logger(name_0){
  $clinit_Logger();
  if (LOGGING_OFF) {
    return;
  }
  this.name_0 = name_0;
  this.useParentHandlers = true;
  this.handlers = new ArrayList;
}

function getLogger_0(name_0){
  $clinit_Logger();
  if (LOGGING_OFF) {
    return new Logger(null);
  }
  return $ensureLogger(getLogManager(), name_0);
}

defineClass(200, 1, {200:1}, Logger);
_.useParentHandlers = false;
var ALL_ENABLED = false, INFO_ENABLED = false, LOGGING_OFF = false, SEVERE_ENABLED = false, WARNING_ENABLED = false;
var Ljava_util_logging_Logger_2_classLit = createForClass('java.util.logging', 'Logger', 200);
function clone_0(array, toIndex){
  var result;
  result = array.slice(0, toIndex);
  return stampJavaTypeInfo_0(result, array);
}

function copy_0(src_0, srcOfs, dest, destOfs, len, overwrite){
  var batchEnd, batchStart, destArray, end, spliceArgs;
  if (maskUndefined(src_0) === maskUndefined(dest)) {
    src_0 = src_0.slice(srcOfs, srcOfs + len);
    srcOfs = 0;
  }
  destArray = dest;
  for (batchStart = srcOfs , end = srcOfs + len; batchStart < end;) {
    batchEnd = $wnd.Math.min(batchStart + 10000, end);
    len = batchEnd - batchStart;
    spliceArgs = src_0.slice(batchStart, batchEnd);
    spliceArgs.splice(0, 0, destOfs, overwrite?len:0);
    Array.prototype.splice.apply(destArray, spliceArgs);
    batchStart = batchEnd;
    destOfs += len;
  }
}

function insertTo(array, index_0, value_0){
  array.splice(index_0, 0, value_0);
}

function insertTo_0(array, index_0, values){
  copy_0(values, 0, array, index_0, values.length, false);
}

function removeFrom(array, index_0){
  array.splice(index_0, 1);
}

defineClass(1116, 1, {});
function stampJavaTypeInfo_1(array, referenceType){
  return stampJavaTypeInfo_0(array, referenceType);
}

defineClass(1061, 1, {});
var Ljavaemul_internal_ConsoleLogger_2_classLit = createForClass('javaemul.internal', 'ConsoleLogger', 1061);
function checkCriticalArgument(expression, errorMessage){
  if (!expression) {
    throw toJs(new IllegalArgumentException_0(errorMessage));
  }
}

function checkCriticalArgument_0(expression, errorMessageTemplate, errorMessageArgs){
  if (!expression) {
    throw toJs(new IllegalArgumentException_0(format_0(errorMessageTemplate, errorMessageArgs)));
  }
}

function checkCriticalArrayBounds(start_0, end, length_0){
  if (start_0 > end) {
    throw toJs(new IllegalArgumentException_0('fromIndex: ' + start_0 + ' > toIndex: ' + end));
  }
  if (start_0 < 0 || end > length_0) {
    throw toJs(new ArrayIndexOutOfBoundsException_0('fromIndex: ' + start_0 + ', toIndex: ' + end + ', length: ' + length_0));
  }
}

function checkCriticalArraySize(size_0){
  if (size_0 < 0) {
    throw toJs(new NegativeArraySizeException('Negative array size: ' + size_0));
  }
}

function checkCriticalArrayType(expression){
  if (!expression) {
    throw toJs(new ArrayStoreException);
  }
}

function checkCriticalArrayType_0(expression, errorMessage){
  if (!expression) {
    throw toJs(new ArrayStoreException_0(errorMessage));
  }
}

function checkCriticalElement(expression){
  if (!expression) {
    throw toJs(new NoSuchElementException);
  }
}

function checkCriticalElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0));
  }
}

function checkCriticalNotNull(reference){
  if (reference == null) {
    throw toJs(new NullPointerException);
  }
  return reference;
}

function checkCriticalNotNull_0(reference, errorMessage){
  if (reference == null) {
    throw toJs(new NullPointerException_1(errorMessage));
  }
}

function checkCriticalPositionIndex(index_0, size_0){
  if (index_0 < 0 || index_0 > size_0) {
    throw toJs(new IndexOutOfBoundsException_0('Index: ' + index_0 + ', Size: ' + size_0));
  }
}

function checkCriticalPositionIndexes(start_0, end, size_0){
  if (start_0 < 0 || end > size_0) {
    throw toJs(new IndexOutOfBoundsException_0('fromIndex: ' + start_0 + ', toIndex: ' + end + ', size: ' + size_0));
  }
  if (start_0 > end) {
    throw toJs(new IllegalArgumentException_0('fromIndex: ' + start_0 + ' > toIndex: ' + end));
  }
}

function checkCriticalState(expression){
  if (!expression) {
    throw toJs(new IllegalStateException);
  }
}

function checkCriticalState_0(expression, errorMessage){
  if (!expression) {
    throw toJs(new IllegalStateException_0(errorMessage));
  }
}

function checkCriticalStringBounds(start_0, end, length_0){
  if (start_0 < 0 || end > length_0 || end < start_0) {
    throw toJs(new StringIndexOutOfBoundsException('fromIndex: ' + start_0 + ', toIndex: ' + end + ', length: ' + length_0));
  }
}

function checkCriticalStringElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new StringIndexOutOfBoundsException('Index: ' + index_0 + ', Size: ' + size_0));
  }
}

function checkCriticalType(expression){
  if (!expression) {
    throw toJs(new ClassCastException);
  }
}

function format_0(template, args){
  var builder, i, placeholderStart, templateStart;
  template = template;
  builder = new StringBuilder_0;
  templateStart = 0;
  i = 0;
  while (i < args.length) {
    placeholderStart = template.indexOf('%s', templateStart);
    if (placeholderStart == -1) {
      break;
    }
    $append_5(builder, template.substr(templateStart, placeholderStart - templateStart));
    $append_4(builder, args[i++]);
    templateStart = placeholderStart + 2;
  }
  $append_5(builder, template.substr(templateStart));
  if (i < args.length) {
    builder.string += ' [';
    $append_4(builder, args[i++]);
    while (i < args.length) {
      builder.string += ', ';
      $append_4(builder, args[i++]);
    }
    builder.string += ']';
  }
  return builder.string;
}

function setPropertySafe(map_0, key, value_0){
  try {
    map_0[key] = value_0;
  }
   catch (ignored) {
  }
}

defineClass(1113, 1, {});
function getHashCode_0(o){
  return o.$H || (o.$H = ++nextHashId);
}

var nextHashId = 0;
function $clinit_StringHashCache(){
  $clinit_StringHashCache = emptyMethod;
  back_0 = new Object_0;
  front = new Object_0;
}

function compute(str){
  var hashCode, i, n, nBatch;
  hashCode = 0;
  n = str.length;
  nBatch = n - 4;
  i = 0;
  while (i < nBatch) {
    hashCode = (checkCriticalStringElementIndex(i + 3, str.length) , str.charCodeAt(i + 3) + (checkCriticalStringElementIndex(i + 2, str.length) , 31 * (str.charCodeAt(i + 2) + (checkCriticalStringElementIndex(i + 1, str.length) , 31 * (str.charCodeAt(i + 1) + (checkCriticalStringElementIndex(i, str.length) , 31 * (str.charCodeAt(i) + 31 * hashCode)))))));
    hashCode = hashCode | 0;
    i += 4;
  }
  while (i < n) {
    hashCode = hashCode * 31 + $charAt(str, i++);
  }
  hashCode = hashCode | 0;
  return hashCode;
}

function getHashCode_1(str){
  $clinit_StringHashCache();
  var hashCode, key, result;
  key = ':' + str;
  result = front[key];
  if (result != null) {
    return round_int((checkCriticalNotNull(result) , result));
  }
  result = back_0[key];
  hashCode = result == null?compute(str):round_int((checkCriticalNotNull(result) , result));
  increment();
  front[key] = hashCode;
  return hashCode;
}

function increment(){
  if (count_0 == 256) {
    back_0 = front;
    front = new Object_0;
    count_0 = 0;
  }
  ++count_0;
}

var back_0, count_0 = 0, front;
function getLogger_1(name_0){
  return $getLogger(($clinit_Impl_0() , LOGGER_FACTORY), name_0);
}

defineClass(1047, 1, {382:1});
var Lorg_slf4j_helpers_NamedLoggerBase_2_classLit = createForClass('org.slf4j.helpers', 'NamedLoggerBase', 1047);
defineClass(1048, 1047, {382:1});
var Lorg_slf4j_helpers_MarkerIgnoringBase_2_classLit = createForClass('org.slf4j.helpers', 'MarkerIgnoringBase', 1048);
function $debug_1(this$static, msg){
  $log_0(this$static, ($clinit_Level() , FINE), msg, null);
}

function $debug_2(this$static, t){
  $log_0(this$static, ($clinit_Level() , FINE), 'KeyValue Error', t);
}

function $error_1(this$static, msg){
  $log_0(this$static, ($clinit_Level() , SEVERE), msg, null);
}

function $error_2(this$static, msg, t){
  $log_0(this$static, ($clinit_Level() , SEVERE), msg, t);
}

function $info_0(this$static, msg){
  $log_0(this$static, ($clinit_Level() , INFO), msg, null);
}

function $info_1(this$static, t){
  $log_0(this$static, ($clinit_Level() , INFO), 'Cannot parse Properties Text', t);
}

function $log_0(this$static, level, msg, t){
  $isLoggable(this$static.logger, level) && $log(this$static.logger, level, msg, t);
}

function $trace_0(this$static, msg){
  $log_0(this$static, ($clinit_Level() , FINEST), msg, null);
}

function GWTLoggerAdapter(name_0){
  this.logger = getLogger_0(name_0);
}

defineClass(659, 1048, {382:1}, GWTLoggerAdapter);
var Lru_finam_slf4jgwt_logging_gwt_GWTLoggerAdapter_2_classLit = createForClass('ru.finam.slf4jgwt.logging.gwt', 'GWTLoggerAdapter', 659);
function $getLogger(this$static, name_0){
  var logger;
  if (name_0 == null) {
    throw toJs(new NullPointerException);
  }
  $equalsIgnoreCase('ROOT', name_0) && (name_0 = '');
  logger = castTo($getStringValue(this$static.loggers, name_0), 382);
  if (!logger) {
    logger = new GWTLoggerAdapter(name_0);
    $putStringValue(this$static.loggers, name_0, logger);
  }
  return logger;
}

function GWTLoggerFactory(){
  this.loggers = new HashMap;
}

defineClass(560, 1, {}, GWTLoggerFactory);
var Lru_finam_slf4jgwt_logging_gwt_GWTLoggerFactory_2_classLit = createForClass('ru.finam.slf4jgwt.logging.gwt', 'GWTLoggerFactory', 560);
function $clinit_Impl_0(){
  $clinit_Impl_0 = emptyMethod;
  LOGGER_FACTORY = new GWTLoggerFactory;
}

var LOGGER_FACTORY;
var C_classLit = createForPrimitive('char', 'C');
var I_classLit = createForPrimitive('int', 'I');
var Z_classLit = createForPrimitive('boolean', 'Z');
var J_classLit = createForPrimitive('long', 'J');
var D_classLit = createForPrimitive('double', 'D');
var $entry = ($clinit_Impl() , entry_0);
var gwtOnLoad = gwtOnLoad = gwtOnLoad_0;
addInitFunctions(init);
setGwtProperty('permProps', [[['locale', 'default'], ['user.agent', 'ie9']]]);
$sendStats('moduleStartup', 'moduleEvalEnd');
gwtOnLoad(__gwtModuleFunction.__errFn, __gwtModuleFunction.__moduleName, __gwtModuleFunction.__moduleBase, __gwtModuleFunction.__softPermutationId,__gwtModuleFunction.__computePropValue);
$sendStats('moduleStartup', 'end');
$gwt && $gwt.permProps && __gwtModuleFunction.__moduleStartupDone($gwt.permProps);
//# sourceURL=umletvscode-0.js

